
/Users/wnicewonger/Downloads/3D-PAWS-Particle-FullStation-master/target/6.2.1/boron/3D-PAWS-Particle-FullStation-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00019414  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000cd434  000cd434  0001d434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000cd43c  000cd43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001d4  2002d878  000cd460  0001d878  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00010da8  2002da50  2002da50  0002da50  2**3
                  ALLOC
  7 .backup       00000004  2003f400  000cd634  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000cd638  000cd638  0002d638  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .module_info_suffix 00000024  000cd63e  000cd63e  0002d63e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000cd662  000cd662  0002d662  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   0037ec4c  00000000  00000000  0002d666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0003826f  00000000  00000000  003ac2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    000900e9  00000000  00000000  003e4521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00005df8  00000000  00000000  0047460a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00015c00  00000000  00000000  0047a402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0007ccad  00000000  00000000  00490002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000d8eb4  00000000  00000000  0050ccaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c7595  00000000  00000000  005e5b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000126e0  00000000  00000000  007ad0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <__aeabi_frsub>:
   b4a28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   b4a2c:	e002      	b.n	b4a34 <__addsf3>
   b4a2e:	bf00      	nop

000b4a30 <__aeabi_fsub>:
   b4a30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000b4a34 <__addsf3>:
   b4a34:	0042      	lsls	r2, r0, #1
   b4a36:	bf1f      	itttt	ne
   b4a38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   b4a3c:	ea92 0f03 	teqne	r2, r3
   b4a40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   b4a44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4a48:	d06a      	beq.n	b4b20 <__addsf3+0xec>
   b4a4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   b4a4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   b4a52:	bfc1      	itttt	gt
   b4a54:	18d2      	addgt	r2, r2, r3
   b4a56:	4041      	eorgt	r1, r0
   b4a58:	4048      	eorgt	r0, r1
   b4a5a:	4041      	eorgt	r1, r0
   b4a5c:	bfb8      	it	lt
   b4a5e:	425b      	neglt	r3, r3
   b4a60:	2b19      	cmp	r3, #25
   b4a62:	bf88      	it	hi
   b4a64:	4770      	bxhi	lr
   b4a66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   b4a6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   b4a72:	bf18      	it	ne
   b4a74:	4240      	negne	r0, r0
   b4a76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4a7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   b4a7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   b4a82:	bf18      	it	ne
   b4a84:	4249      	negne	r1, r1
   b4a86:	ea92 0f03 	teq	r2, r3
   b4a8a:	d03f      	beq.n	b4b0c <__addsf3+0xd8>
   b4a8c:	f1a2 0201 	sub.w	r2, r2, #1
   b4a90:	fa41 fc03 	asr.w	ip, r1, r3
   b4a94:	eb10 000c 	adds.w	r0, r0, ip
   b4a98:	f1c3 0320 	rsb	r3, r3, #32
   b4a9c:	fa01 f103 	lsl.w	r1, r1, r3
   b4aa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4aa4:	d502      	bpl.n	b4aac <__addsf3+0x78>
   b4aa6:	4249      	negs	r1, r1
   b4aa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   b4aac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   b4ab0:	d313      	bcc.n	b4ada <__addsf3+0xa6>
   b4ab2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   b4ab6:	d306      	bcc.n	b4ac6 <__addsf3+0x92>
   b4ab8:	0840      	lsrs	r0, r0, #1
   b4aba:	ea4f 0131 	mov.w	r1, r1, rrx
   b4abe:	f102 0201 	add.w	r2, r2, #1
   b4ac2:	2afe      	cmp	r2, #254	; 0xfe
   b4ac4:	d251      	bcs.n	b4b6a <__addsf3+0x136>
   b4ac6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   b4aca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   b4ace:	bf08      	it	eq
   b4ad0:	f020 0001 	biceq.w	r0, r0, #1
   b4ad4:	ea40 0003 	orr.w	r0, r0, r3
   b4ad8:	4770      	bx	lr
   b4ada:	0049      	lsls	r1, r1, #1
   b4adc:	eb40 0000 	adc.w	r0, r0, r0
   b4ae0:	3a01      	subs	r2, #1
   b4ae2:	bf28      	it	cs
   b4ae4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   b4ae8:	d2ed      	bcs.n	b4ac6 <__addsf3+0x92>
   b4aea:	fab0 fc80 	clz	ip, r0
   b4aee:	f1ac 0c08 	sub.w	ip, ip, #8
   b4af2:	ebb2 020c 	subs.w	r2, r2, ip
   b4af6:	fa00 f00c 	lsl.w	r0, r0, ip
   b4afa:	bfaa      	itet	ge
   b4afc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   b4b00:	4252      	neglt	r2, r2
   b4b02:	4318      	orrge	r0, r3
   b4b04:	bfbc      	itt	lt
   b4b06:	40d0      	lsrlt	r0, r2
   b4b08:	4318      	orrlt	r0, r3
   b4b0a:	4770      	bx	lr
   b4b0c:	f092 0f00 	teq	r2, #0
   b4b10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   b4b14:	bf06      	itte	eq
   b4b16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   b4b1a:	3201      	addeq	r2, #1
   b4b1c:	3b01      	subne	r3, #1
   b4b1e:	e7b5      	b.n	b4a8c <__addsf3+0x58>
   b4b20:	ea4f 0341 	mov.w	r3, r1, lsl #1
   b4b24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   b4b28:	bf18      	it	ne
   b4b2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   b4b2e:	d021      	beq.n	b4b74 <__addsf3+0x140>
   b4b30:	ea92 0f03 	teq	r2, r3
   b4b34:	d004      	beq.n	b4b40 <__addsf3+0x10c>
   b4b36:	f092 0f00 	teq	r2, #0
   b4b3a:	bf08      	it	eq
   b4b3c:	4608      	moveq	r0, r1
   b4b3e:	4770      	bx	lr
   b4b40:	ea90 0f01 	teq	r0, r1
   b4b44:	bf1c      	itt	ne
   b4b46:	2000      	movne	r0, #0
   b4b48:	4770      	bxne	lr
   b4b4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   b4b4e:	d104      	bne.n	b4b5a <__addsf3+0x126>
   b4b50:	0040      	lsls	r0, r0, #1
   b4b52:	bf28      	it	cs
   b4b54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   b4b58:	4770      	bx	lr
   b4b5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   b4b5e:	bf3c      	itt	cc
   b4b60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   b4b64:	4770      	bxcc	lr
   b4b66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   b4b6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   b4b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4b72:	4770      	bx	lr
   b4b74:	ea7f 6222 	mvns.w	r2, r2, asr #24
   b4b78:	bf16      	itet	ne
   b4b7a:	4608      	movne	r0, r1
   b4b7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   b4b80:	4601      	movne	r1, r0
   b4b82:	0242      	lsls	r2, r0, #9
   b4b84:	bf06      	itte	eq
   b4b86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   b4b8a:	ea90 0f01 	teqeq	r0, r1
   b4b8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   b4b92:	4770      	bx	lr

000b4b94 <__aeabi_ui2f>:
   b4b94:	f04f 0300 	mov.w	r3, #0
   b4b98:	e004      	b.n	b4ba4 <__aeabi_i2f+0x8>
   b4b9a:	bf00      	nop

000b4b9c <__aeabi_i2f>:
   b4b9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   b4ba0:	bf48      	it	mi
   b4ba2:	4240      	negmi	r0, r0
   b4ba4:	ea5f 0c00 	movs.w	ip, r0
   b4ba8:	bf08      	it	eq
   b4baa:	4770      	bxeq	lr
   b4bac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   b4bb0:	4601      	mov	r1, r0
   b4bb2:	f04f 0000 	mov.w	r0, #0
   b4bb6:	e01c      	b.n	b4bf2 <__aeabi_l2f+0x2a>

000b4bb8 <__aeabi_ul2f>:
   b4bb8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bbc:	bf08      	it	eq
   b4bbe:	4770      	bxeq	lr
   b4bc0:	f04f 0300 	mov.w	r3, #0
   b4bc4:	e00a      	b.n	b4bdc <__aeabi_l2f+0x14>
   b4bc6:	bf00      	nop

000b4bc8 <__aeabi_l2f>:
   b4bc8:	ea50 0201 	orrs.w	r2, r0, r1
   b4bcc:	bf08      	it	eq
   b4bce:	4770      	bxeq	lr
   b4bd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   b4bd4:	d502      	bpl.n	b4bdc <__aeabi_l2f+0x14>
   b4bd6:	4240      	negs	r0, r0
   b4bd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4bdc:	ea5f 0c01 	movs.w	ip, r1
   b4be0:	bf02      	ittt	eq
   b4be2:	4684      	moveq	ip, r0
   b4be4:	4601      	moveq	r1, r0
   b4be6:	2000      	moveq	r0, #0
   b4be8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   b4bec:	bf08      	it	eq
   b4bee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   b4bf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   b4bf6:	fabc f28c 	clz	r2, ip
   b4bfa:	3a08      	subs	r2, #8
   b4bfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   b4c00:	db10      	blt.n	b4c24 <__aeabi_l2f+0x5c>
   b4c02:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c06:	4463      	add	r3, ip
   b4c08:	fa00 fc02 	lsl.w	ip, r0, r2
   b4c0c:	f1c2 0220 	rsb	r2, r2, #32
   b4c10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4c14:	fa20 f202 	lsr.w	r2, r0, r2
   b4c18:	eb43 0002 	adc.w	r0, r3, r2
   b4c1c:	bf08      	it	eq
   b4c1e:	f020 0001 	biceq.w	r0, r0, #1
   b4c22:	4770      	bx	lr
   b4c24:	f102 0220 	add.w	r2, r2, #32
   b4c28:	fa01 fc02 	lsl.w	ip, r1, r2
   b4c2c:	f1c2 0220 	rsb	r2, r2, #32
   b4c30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   b4c34:	fa21 f202 	lsr.w	r2, r1, r2
   b4c38:	eb43 0002 	adc.w	r0, r3, r2
   b4c3c:	bf08      	it	eq
   b4c3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   b4c42:	4770      	bx	lr

000b4c44 <__aeabi_ldivmod>:
   b4c44:	b97b      	cbnz	r3, b4c66 <__aeabi_ldivmod+0x22>
   b4c46:	b972      	cbnz	r2, b4c66 <__aeabi_ldivmod+0x22>
   b4c48:	2900      	cmp	r1, #0
   b4c4a:	bfbe      	ittt	lt
   b4c4c:	2000      	movlt	r0, #0
   b4c4e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   b4c52:	e006      	blt.n	b4c62 <__aeabi_ldivmod+0x1e>
   b4c54:	bf08      	it	eq
   b4c56:	2800      	cmpeq	r0, #0
   b4c58:	bf1c      	itt	ne
   b4c5a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   b4c5e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4c62:	f000 b9bf 	b.w	b4fe4 <__aeabi_idiv0>
   b4c66:	f1ad 0c08 	sub.w	ip, sp, #8
   b4c6a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4c6e:	2900      	cmp	r1, #0
   b4c70:	db09      	blt.n	b4c86 <__aeabi_ldivmod+0x42>
   b4c72:	2b00      	cmp	r3, #0
   b4c74:	db1a      	blt.n	b4cac <__aeabi_ldivmod+0x68>
   b4c76:	f000 f84d 	bl	b4d14 <__udivmoddi4>
   b4c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c82:	b004      	add	sp, #16
   b4c84:	4770      	bx	lr
   b4c86:	4240      	negs	r0, r0
   b4c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4c8c:	2b00      	cmp	r3, #0
   b4c8e:	db1b      	blt.n	b4cc8 <__aeabi_ldivmod+0x84>
   b4c90:	f000 f840 	bl	b4d14 <__udivmoddi4>
   b4c94:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4c98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4c9c:	b004      	add	sp, #16
   b4c9e:	4240      	negs	r0, r0
   b4ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4ca4:	4252      	negs	r2, r2
   b4ca6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4caa:	4770      	bx	lr
   b4cac:	4252      	negs	r2, r2
   b4cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4cb2:	f000 f82f 	bl	b4d14 <__udivmoddi4>
   b4cb6:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4cbe:	b004      	add	sp, #16
   b4cc0:	4240      	negs	r0, r0
   b4cc2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4cc6:	4770      	bx	lr
   b4cc8:	4252      	negs	r2, r2
   b4cca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4cce:	f000 f821 	bl	b4d14 <__udivmoddi4>
   b4cd2:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4cda:	b004      	add	sp, #16
   b4cdc:	4252      	negs	r2, r2
   b4cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b4ce2:	4770      	bx	lr

000b4ce4 <__aeabi_uldivmod>:
   b4ce4:	b953      	cbnz	r3, b4cfc <__aeabi_uldivmod+0x18>
   b4ce6:	b94a      	cbnz	r2, b4cfc <__aeabi_uldivmod+0x18>
   b4ce8:	2900      	cmp	r1, #0
   b4cea:	bf08      	it	eq
   b4cec:	2800      	cmpeq	r0, #0
   b4cee:	bf1c      	itt	ne
   b4cf0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b4cf4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4cf8:	f000 b974 	b.w	b4fe4 <__aeabi_idiv0>
   b4cfc:	f1ad 0c08 	sub.w	ip, sp, #8
   b4d00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b4d04:	f000 f806 	bl	b4d14 <__udivmoddi4>
   b4d08:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4d10:	b004      	add	sp, #16
   b4d12:	4770      	bx	lr

000b4d14 <__udivmoddi4>:
   b4d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4d18:	9d08      	ldr	r5, [sp, #32]
   b4d1a:	4604      	mov	r4, r0
   b4d1c:	468e      	mov	lr, r1
   b4d1e:	2b00      	cmp	r3, #0
   b4d20:	d14d      	bne.n	b4dbe <__udivmoddi4+0xaa>
   b4d22:	428a      	cmp	r2, r1
   b4d24:	4694      	mov	ip, r2
   b4d26:	d969      	bls.n	b4dfc <__udivmoddi4+0xe8>
   b4d28:	fab2 f282 	clz	r2, r2
   b4d2c:	b152      	cbz	r2, b4d44 <__udivmoddi4+0x30>
   b4d2e:	fa01 f302 	lsl.w	r3, r1, r2
   b4d32:	f1c2 0120 	rsb	r1, r2, #32
   b4d36:	fa20 f101 	lsr.w	r1, r0, r1
   b4d3a:	fa0c fc02 	lsl.w	ip, ip, r2
   b4d3e:	ea41 0e03 	orr.w	lr, r1, r3
   b4d42:	4094      	lsls	r4, r2
   b4d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b4d48:	0c21      	lsrs	r1, r4, #16
   b4d4a:	fbbe f6f8 	udiv	r6, lr, r8
   b4d4e:	fa1f f78c 	uxth.w	r7, ip
   b4d52:	fb08 e316 	mls	r3, r8, r6, lr
   b4d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b4d5a:	fb06 f107 	mul.w	r1, r6, r7
   b4d5e:	4299      	cmp	r1, r3
   b4d60:	d90a      	bls.n	b4d78 <__udivmoddi4+0x64>
   b4d62:	eb1c 0303 	adds.w	r3, ip, r3
   b4d66:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b4d6a:	f080 811f 	bcs.w	b4fac <__udivmoddi4+0x298>
   b4d6e:	4299      	cmp	r1, r3
   b4d70:	f240 811c 	bls.w	b4fac <__udivmoddi4+0x298>
   b4d74:	3e02      	subs	r6, #2
   b4d76:	4463      	add	r3, ip
   b4d78:	1a5b      	subs	r3, r3, r1
   b4d7a:	b2a4      	uxth	r4, r4
   b4d7c:	fbb3 f0f8 	udiv	r0, r3, r8
   b4d80:	fb08 3310 	mls	r3, r8, r0, r3
   b4d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b4d88:	fb00 f707 	mul.w	r7, r0, r7
   b4d8c:	42a7      	cmp	r7, r4
   b4d8e:	d90a      	bls.n	b4da6 <__udivmoddi4+0x92>
   b4d90:	eb1c 0404 	adds.w	r4, ip, r4
   b4d94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b4d98:	f080 810a 	bcs.w	b4fb0 <__udivmoddi4+0x29c>
   b4d9c:	42a7      	cmp	r7, r4
   b4d9e:	f240 8107 	bls.w	b4fb0 <__udivmoddi4+0x29c>
   b4da2:	4464      	add	r4, ip
   b4da4:	3802      	subs	r0, #2
   b4da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4daa:	1be4      	subs	r4, r4, r7
   b4dac:	2600      	movs	r6, #0
   b4dae:	b11d      	cbz	r5, b4db8 <__udivmoddi4+0xa4>
   b4db0:	40d4      	lsrs	r4, r2
   b4db2:	2300      	movs	r3, #0
   b4db4:	e9c5 4300 	strd	r4, r3, [r5]
   b4db8:	4631      	mov	r1, r6
   b4dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4dbe:	428b      	cmp	r3, r1
   b4dc0:	d909      	bls.n	b4dd6 <__udivmoddi4+0xc2>
   b4dc2:	2d00      	cmp	r5, #0
   b4dc4:	f000 80ef 	beq.w	b4fa6 <__udivmoddi4+0x292>
   b4dc8:	2600      	movs	r6, #0
   b4dca:	e9c5 0100 	strd	r0, r1, [r5]
   b4dce:	4630      	mov	r0, r6
   b4dd0:	4631      	mov	r1, r6
   b4dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4dd6:	fab3 f683 	clz	r6, r3
   b4dda:	2e00      	cmp	r6, #0
   b4ddc:	d14a      	bne.n	b4e74 <__udivmoddi4+0x160>
   b4dde:	428b      	cmp	r3, r1
   b4de0:	d302      	bcc.n	b4de8 <__udivmoddi4+0xd4>
   b4de2:	4282      	cmp	r2, r0
   b4de4:	f200 80f9 	bhi.w	b4fda <__udivmoddi4+0x2c6>
   b4de8:	1a84      	subs	r4, r0, r2
   b4dea:	eb61 0303 	sbc.w	r3, r1, r3
   b4dee:	2001      	movs	r0, #1
   b4df0:	469e      	mov	lr, r3
   b4df2:	2d00      	cmp	r5, #0
   b4df4:	d0e0      	beq.n	b4db8 <__udivmoddi4+0xa4>
   b4df6:	e9c5 4e00 	strd	r4, lr, [r5]
   b4dfa:	e7dd      	b.n	b4db8 <__udivmoddi4+0xa4>
   b4dfc:	b902      	cbnz	r2, b4e00 <__udivmoddi4+0xec>
   b4dfe:	deff      	udf	#255	; 0xff
   b4e00:	fab2 f282 	clz	r2, r2
   b4e04:	2a00      	cmp	r2, #0
   b4e06:	f040 8092 	bne.w	b4f2e <__udivmoddi4+0x21a>
   b4e0a:	eba1 010c 	sub.w	r1, r1, ip
   b4e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4e12:	fa1f fe8c 	uxth.w	lr, ip
   b4e16:	2601      	movs	r6, #1
   b4e18:	0c20      	lsrs	r0, r4, #16
   b4e1a:	fbb1 f3f7 	udiv	r3, r1, r7
   b4e1e:	fb07 1113 	mls	r1, r7, r3, r1
   b4e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4e26:	fb0e f003 	mul.w	r0, lr, r3
   b4e2a:	4288      	cmp	r0, r1
   b4e2c:	d908      	bls.n	b4e40 <__udivmoddi4+0x12c>
   b4e2e:	eb1c 0101 	adds.w	r1, ip, r1
   b4e32:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4e36:	d202      	bcs.n	b4e3e <__udivmoddi4+0x12a>
   b4e38:	4288      	cmp	r0, r1
   b4e3a:	f200 80cb 	bhi.w	b4fd4 <__udivmoddi4+0x2c0>
   b4e3e:	4643      	mov	r3, r8
   b4e40:	1a09      	subs	r1, r1, r0
   b4e42:	b2a4      	uxth	r4, r4
   b4e44:	fbb1 f0f7 	udiv	r0, r1, r7
   b4e48:	fb07 1110 	mls	r1, r7, r0, r1
   b4e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4e50:	fb0e fe00 	mul.w	lr, lr, r0
   b4e54:	45a6      	cmp	lr, r4
   b4e56:	d908      	bls.n	b4e6a <__udivmoddi4+0x156>
   b4e58:	eb1c 0404 	adds.w	r4, ip, r4
   b4e5c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4e60:	d202      	bcs.n	b4e68 <__udivmoddi4+0x154>
   b4e62:	45a6      	cmp	lr, r4
   b4e64:	f200 80bb 	bhi.w	b4fde <__udivmoddi4+0x2ca>
   b4e68:	4608      	mov	r0, r1
   b4e6a:	eba4 040e 	sub.w	r4, r4, lr
   b4e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4e72:	e79c      	b.n	b4dae <__udivmoddi4+0x9a>
   b4e74:	f1c6 0720 	rsb	r7, r6, #32
   b4e78:	40b3      	lsls	r3, r6
   b4e7a:	fa22 fc07 	lsr.w	ip, r2, r7
   b4e7e:	ea4c 0c03 	orr.w	ip, ip, r3
   b4e82:	fa20 f407 	lsr.w	r4, r0, r7
   b4e86:	fa01 f306 	lsl.w	r3, r1, r6
   b4e8a:	431c      	orrs	r4, r3
   b4e8c:	40f9      	lsrs	r1, r7
   b4e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4e92:	fa00 f306 	lsl.w	r3, r0, r6
   b4e96:	fbb1 f8f9 	udiv	r8, r1, r9
   b4e9a:	0c20      	lsrs	r0, r4, #16
   b4e9c:	fa1f fe8c 	uxth.w	lr, ip
   b4ea0:	fb09 1118 	mls	r1, r9, r8, r1
   b4ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4ea8:	fb08 f00e 	mul.w	r0, r8, lr
   b4eac:	4288      	cmp	r0, r1
   b4eae:	fa02 f206 	lsl.w	r2, r2, r6
   b4eb2:	d90b      	bls.n	b4ecc <__udivmoddi4+0x1b8>
   b4eb4:	eb1c 0101 	adds.w	r1, ip, r1
   b4eb8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4ebc:	f080 8088 	bcs.w	b4fd0 <__udivmoddi4+0x2bc>
   b4ec0:	4288      	cmp	r0, r1
   b4ec2:	f240 8085 	bls.w	b4fd0 <__udivmoddi4+0x2bc>
   b4ec6:	f1a8 0802 	sub.w	r8, r8, #2
   b4eca:	4461      	add	r1, ip
   b4ecc:	1a09      	subs	r1, r1, r0
   b4ece:	b2a4      	uxth	r4, r4
   b4ed0:	fbb1 f0f9 	udiv	r0, r1, r9
   b4ed4:	fb09 1110 	mls	r1, r9, r0, r1
   b4ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4edc:	fb00 fe0e 	mul.w	lr, r0, lr
   b4ee0:	458e      	cmp	lr, r1
   b4ee2:	d908      	bls.n	b4ef6 <__udivmoddi4+0x1e2>
   b4ee4:	eb1c 0101 	adds.w	r1, ip, r1
   b4ee8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4eec:	d26c      	bcs.n	b4fc8 <__udivmoddi4+0x2b4>
   b4eee:	458e      	cmp	lr, r1
   b4ef0:	d96a      	bls.n	b4fc8 <__udivmoddi4+0x2b4>
   b4ef2:	3802      	subs	r0, #2
   b4ef4:	4461      	add	r1, ip
   b4ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4efa:	fba0 9402 	umull	r9, r4, r0, r2
   b4efe:	eba1 010e 	sub.w	r1, r1, lr
   b4f02:	42a1      	cmp	r1, r4
   b4f04:	46c8      	mov	r8, r9
   b4f06:	46a6      	mov	lr, r4
   b4f08:	d356      	bcc.n	b4fb8 <__udivmoddi4+0x2a4>
   b4f0a:	d053      	beq.n	b4fb4 <__udivmoddi4+0x2a0>
   b4f0c:	b15d      	cbz	r5, b4f26 <__udivmoddi4+0x212>
   b4f0e:	ebb3 0208 	subs.w	r2, r3, r8
   b4f12:	eb61 010e 	sbc.w	r1, r1, lr
   b4f16:	fa01 f707 	lsl.w	r7, r1, r7
   b4f1a:	fa22 f306 	lsr.w	r3, r2, r6
   b4f1e:	40f1      	lsrs	r1, r6
   b4f20:	431f      	orrs	r7, r3
   b4f22:	e9c5 7100 	strd	r7, r1, [r5]
   b4f26:	2600      	movs	r6, #0
   b4f28:	4631      	mov	r1, r6
   b4f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4f2e:	f1c2 0320 	rsb	r3, r2, #32
   b4f32:	40d8      	lsrs	r0, r3
   b4f34:	fa0c fc02 	lsl.w	ip, ip, r2
   b4f38:	fa21 f303 	lsr.w	r3, r1, r3
   b4f3c:	4091      	lsls	r1, r2
   b4f3e:	4301      	orrs	r1, r0
   b4f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4f44:	fa1f fe8c 	uxth.w	lr, ip
   b4f48:	fbb3 f0f7 	udiv	r0, r3, r7
   b4f4c:	fb07 3610 	mls	r6, r7, r0, r3
   b4f50:	0c0b      	lsrs	r3, r1, #16
   b4f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4f56:	fb00 f60e 	mul.w	r6, r0, lr
   b4f5a:	429e      	cmp	r6, r3
   b4f5c:	fa04 f402 	lsl.w	r4, r4, r2
   b4f60:	d908      	bls.n	b4f74 <__udivmoddi4+0x260>
   b4f62:	eb1c 0303 	adds.w	r3, ip, r3
   b4f66:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4f6a:	d22f      	bcs.n	b4fcc <__udivmoddi4+0x2b8>
   b4f6c:	429e      	cmp	r6, r3
   b4f6e:	d92d      	bls.n	b4fcc <__udivmoddi4+0x2b8>
   b4f70:	3802      	subs	r0, #2
   b4f72:	4463      	add	r3, ip
   b4f74:	1b9b      	subs	r3, r3, r6
   b4f76:	b289      	uxth	r1, r1
   b4f78:	fbb3 f6f7 	udiv	r6, r3, r7
   b4f7c:	fb07 3316 	mls	r3, r7, r6, r3
   b4f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4f84:	fb06 f30e 	mul.w	r3, r6, lr
   b4f88:	428b      	cmp	r3, r1
   b4f8a:	d908      	bls.n	b4f9e <__udivmoddi4+0x28a>
   b4f8c:	eb1c 0101 	adds.w	r1, ip, r1
   b4f90:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4f94:	d216      	bcs.n	b4fc4 <__udivmoddi4+0x2b0>
   b4f96:	428b      	cmp	r3, r1
   b4f98:	d914      	bls.n	b4fc4 <__udivmoddi4+0x2b0>
   b4f9a:	3e02      	subs	r6, #2
   b4f9c:	4461      	add	r1, ip
   b4f9e:	1ac9      	subs	r1, r1, r3
   b4fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4fa4:	e738      	b.n	b4e18 <__udivmoddi4+0x104>
   b4fa6:	462e      	mov	r6, r5
   b4fa8:	4628      	mov	r0, r5
   b4faa:	e705      	b.n	b4db8 <__udivmoddi4+0xa4>
   b4fac:	4606      	mov	r6, r0
   b4fae:	e6e3      	b.n	b4d78 <__udivmoddi4+0x64>
   b4fb0:	4618      	mov	r0, r3
   b4fb2:	e6f8      	b.n	b4da6 <__udivmoddi4+0x92>
   b4fb4:	454b      	cmp	r3, r9
   b4fb6:	d2a9      	bcs.n	b4f0c <__udivmoddi4+0x1f8>
   b4fb8:	ebb9 0802 	subs.w	r8, r9, r2
   b4fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4fc0:	3801      	subs	r0, #1
   b4fc2:	e7a3      	b.n	b4f0c <__udivmoddi4+0x1f8>
   b4fc4:	4646      	mov	r6, r8
   b4fc6:	e7ea      	b.n	b4f9e <__udivmoddi4+0x28a>
   b4fc8:	4620      	mov	r0, r4
   b4fca:	e794      	b.n	b4ef6 <__udivmoddi4+0x1e2>
   b4fcc:	4640      	mov	r0, r8
   b4fce:	e7d1      	b.n	b4f74 <__udivmoddi4+0x260>
   b4fd0:	46d0      	mov	r8, sl
   b4fd2:	e77b      	b.n	b4ecc <__udivmoddi4+0x1b8>
   b4fd4:	3b02      	subs	r3, #2
   b4fd6:	4461      	add	r1, ip
   b4fd8:	e732      	b.n	b4e40 <__udivmoddi4+0x12c>
   b4fda:	4630      	mov	r0, r6
   b4fdc:	e709      	b.n	b4df2 <__udivmoddi4+0xde>
   b4fde:	4464      	add	r4, ip
   b4fe0:	3802      	subs	r0, #2
   b4fe2:	e742      	b.n	b4e6a <__udivmoddi4+0x156>

000b4fe4 <__aeabi_idiv0>:
   b4fe4:	4770      	bx	lr
   b4fe6:	bf00      	nop

000b4fe8 <strcmp>:
   b4fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4fec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4ff0:	2a01      	cmp	r2, #1
   b4ff2:	bf28      	it	cs
   b4ff4:	429a      	cmpcs	r2, r3
   b4ff6:	d0f7      	beq.n	b4fe8 <strcmp>
   b4ff8:	1ad0      	subs	r0, r2, r3
   b4ffa:	4770      	bx	lr

000b4ffc <strlen>:
   b4ffc:	4603      	mov	r3, r0
   b4ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5002:	2a00      	cmp	r2, #0
   b5004:	d1fb      	bne.n	b4ffe <strlen+0x2>
   b5006:	1a18      	subs	r0, r3, r0
   b5008:	3801      	subs	r0, #1
   b500a:	4770      	bx	lr

000b500c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b500c:	4809      	ldr	r0, [pc, #36]	; (b5034 <module_user_pre_init+0x28>)
   b500e:	490a      	ldr	r1, [pc, #40]	; (b5038 <module_user_pre_init+0x2c>)
   b5010:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b5012:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b5014:	d005      	beq.n	b5022 <module_user_pre_init+0x16>
   b5016:	4a09      	ldr	r2, [pc, #36]	; (b503c <module_user_pre_init+0x30>)
   b5018:	4282      	cmp	r2, r0
   b501a:	d002      	beq.n	b5022 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b501c:	1a12      	subs	r2, r2, r0
   b501e:	f015 f8c3 	bl	ca1a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b5022:	4807      	ldr	r0, [pc, #28]	; (b5040 <module_user_pre_init+0x34>)
   b5024:	4a07      	ldr	r2, [pc, #28]	; (b5044 <module_user_pre_init+0x38>)
   b5026:	2100      	movs	r1, #0
   b5028:	1a12      	subs	r2, r2, r0
   b502a:	f015 f8cb 	bl	ca1c4 <memset>
    return &link_global_data_start;
}
   b502e:	4801      	ldr	r0, [pc, #4]	; (b5034 <module_user_pre_init+0x28>)
   b5030:	bd08      	pop	{r3, pc}
   b5032:	bf00      	nop
   b5034:	2002d878 	.word	0x2002d878
   b5038:	000cd460 	.word	0x000cd460
   b503c:	2002da4c 	.word	0x2002da4c
   b5040:	2002da50 	.word	0x2002da50
   b5044:	2003e7f8 	.word	0x2003e7f8

000b5048 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b5048:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b504a:	4e07      	ldr	r6, [pc, #28]	; (b5068 <module_user_init+0x20>)
   b504c:	4c07      	ldr	r4, [pc, #28]	; (b506c <module_user_init+0x24>)
    module_user_init_hook();
   b504e:	f012 fa2b 	bl	c74a8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b5052:	1ba4      	subs	r4, r4, r6
   b5054:	08a4      	lsrs	r4, r4, #2
   b5056:	2500      	movs	r5, #0
   b5058:	42ac      	cmp	r4, r5
   b505a:	d100      	bne.n	b505e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b505c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b505e:	f856 3b04 	ldr.w	r3, [r6], #4
   b5062:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b5064:	3501      	adds	r5, #1
   b5066:	e7f7      	b.n	b5058 <module_user_init+0x10>
   b5068:	000cd404 	.word	0x000cd404
   b506c:	000cd434 	.word	0x000cd434

000b5070 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b5070:	f008 bd86 	b.w	bdb80 <setup>

000b5074 <module_user_loop>:
}

void module_user_loop() {
   b5074:	b508      	push	{r3, lr}
    loop();
   b5076:	f008 fee7 	bl	bde48 <loop>
    _post_loop();
}
   b507a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b507e:	f012 b9cb 	b.w	c7418 <_post_loop>

000b5082 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b5082:	f010 baf5 	b.w	c5670 <malloc>

000b5086 <_Znaj>:
   b5086:	f010 baf3 	b.w	c5670 <malloc>

000b508a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b508a:	f010 baf9 	b.w	c5680 <free>
	...

000b5090 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b5090:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b5092:	4a03      	ldr	r2, [pc, #12]	; (b50a0 <__cxa_pure_virtual+0x10>)
   b5094:	4903      	ldr	r1, [pc, #12]	; (b50a4 <__cxa_pure_virtual+0x14>)
   b5096:	200c      	movs	r0, #12
   b5098:	f010 f9aa 	bl	c53f0 <panic_>
  while (1);
   b509c:	e7fe      	b.n	b509c <__cxa_pure_virtual+0xc>
   b509e:	bf00      	nop
   b50a0:	000c4ff1 	.word	0x000c4ff1
   b50a4:	000ca60c 	.word	0x000ca60c

000b50a8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b50a8:	7800      	ldrb	r0, [r0, #0]
   b50aa:	fab0 f080 	clz	r0, r0
   b50ae:	0940      	lsrs	r0, r0, #5
   b50b0:	4770      	bx	lr

000b50b2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b50b2:	2301      	movs	r3, #1
   b50b4:	7003      	strb	r3, [r0, #0]
   b50b6:	4770      	bx	lr

000b50b8 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
   b50b8:	b158      	cbz	r0, b50d2 <null_ptr_check+0x1a>
   b50ba:	68c3      	ldr	r3, [r0, #12]
   b50bc:	b14b      	cbz	r3, b50d2 <null_ptr_check+0x1a>
   b50be:	6903      	ldr	r3, [r0, #16]
   b50c0:	b13b      	cbz	r3, b50d2 <null_ptr_check+0x1a>
   b50c2:	6943      	ldr	r3, [r0, #20]
   b50c4:	b12b      	cbz	r3, b50d2 <null_ptr_check+0x1a>
   b50c6:	6840      	ldr	r0, [r0, #4]
   b50c8:	fab0 f080 	clz	r0, r0
   b50cc:	0940      	lsrs	r0, r0, #5
   b50ce:	4240      	negs	r0, r0
   b50d0:	4770      	bx	lr
        (dev->intf_ptr == NULL))
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
   b50d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        /* Device structure is fine */
        rslt = BMP3_OK;
    }

    return rslt;
}
   b50d6:	4770      	bx	lr

000b50d8 <compensate_data>:
{
   b50d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50dc:	4682      	mov	sl, r0
   b50de:	ed2d 8b06 	vpush	{d8-d10}
   b50e2:	4688      	mov	r8, r1
   b50e4:	461c      	mov	r4, r3
    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
   b50e6:	4615      	mov	r5, r2
   b50e8:	2a00      	cmp	r2, #0
   b50ea:	f000 80dd 	beq.w	b52a8 <compensate_data+0x1d0>
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
   b50ee:	f010 0f03 	tst.w	r0, #3
   b50f2:	d022      	beq.n	b513a <compensate_data+0x62>
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   b50f4:	6848      	ldr	r0, [r1, #4]
   b50f6:	f7ff f8d5 	bl	b42a4 <__aeabi_ui2d>
   b50fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   b50fe:	f7fe ff93 	bl	b4028 <__aeabi_dsub>
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   b5102:	4602      	mov	r2, r0
   b5104:	460b      	mov	r3, r1
    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
   b5106:	4606      	mov	r6, r0
   b5108:	460f      	mov	r7, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   b510a:	f7ff f945 	bl	b4398 <__aeabi_dmul>
   b510e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   b5112:	f7ff f941 	bl	b4398 <__aeabi_dmul>
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   b5116:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   b511a:	ec41 0b18 	vmov	d8, r0, r1
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
   b511e:	4630      	mov	r0, r6
   b5120:	4639      	mov	r1, r7
   b5122:	f7ff f939 	bl	b4398 <__aeabi_dmul>
   b5126:	4602      	mov	r2, r0
   b5128:	460b      	mov	r3, r1
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
   b512a:	ec51 0b18 	vmov	r0, r1, d8
   b512e:	f7fe ff7d 	bl	b402c <__adddf3>
   b5132:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
   b5136:	e9c5 0100 	strd	r0, r1, [r5]
        if (sensor_comp & BMP3_PRESS)
   b513a:	f01a 0001 	ands.w	r0, sl, #1
   b513e:	f000 80af 	beq.w	b52a0 <compensate_data+0x1c8>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   b5142:	e9d4 ab1c 	ldrd	sl, fp, [r4, #112]	; 0x70
        pow_output = (float) base * pow_output;
   b5146:	4659      	mov	r1, fp
   b5148:	4650      	mov	r0, sl
   b514a:	f7ff fc1d 	bl	b4988 <__aeabi_d2f>
   b514e:	ee08 0a10 	vmov	s16, r0
   b5152:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   b5156:	ee18 0a90 	vmov	r0, s17
   b515a:	f7ff f8c5 	bl	b42e8 <__aeabi_f2d>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   b515e:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   b5162:	ec41 0b19 	vmov	d9, r0, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   b5166:	ee17 0a90 	vmov	r0, s15
   b516a:	f7ff f8bd 	bl	b42e8 <__aeabi_f2d>
   b516e:	ec41 0b1a 	vmov	d10, r0, r1
    partial_out2 = uncomp_data->pressure *
   b5172:	f8d8 0000 	ldr.w	r0, [r8]
   b5176:	f7ff f895 	bl	b42a4 <__aeabi_ui2d>
   b517a:	4689      	mov	r9, r1
   b517c:	4680      	mov	r8, r0
        pow_output = (float) base * pow_output;
   b517e:	f7ff fc03 	bl	b4988 <__aeabi_d2f>
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   b5182:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
        pow_output = (float) base * pow_output;
   b5186:	ee08 0a10 	vmov	s16, r0
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
   b518a:	4659      	mov	r1, fp
   b518c:	4650      	mov	r0, sl
   b518e:	f7ff f903 	bl	b4398 <__aeabi_dmul>
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   b5192:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   b5196:	f7fe ff49 	bl	b402c <__adddf3>
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   b519a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   b519e:	4606      	mov	r6, r0
   b51a0:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
   b51a2:	ec51 0b19 	vmov	r0, r1, d9
   b51a6:	f7ff f8f7 	bl	b4398 <__aeabi_dmul>
   b51aa:	4602      	mov	r2, r0
   b51ac:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   b51ae:	4630      	mov	r0, r6
   b51b0:	4639      	mov	r1, r7
   b51b2:	f7fe ff3b 	bl	b402c <__adddf3>
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   b51b6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   b51ba:	4606      	mov	r6, r0
   b51bc:	460f      	mov	r7, r1
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
   b51be:	ec51 0b1a 	vmov	r0, r1, d10
   b51c2:	f7ff f8e9 	bl	b4398 <__aeabi_dmul>
   b51c6:	4602      	mov	r2, r0
   b51c8:	460b      	mov	r3, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
   b51ca:	4630      	mov	r0, r6
   b51cc:	4639      	mov	r1, r7
   b51ce:	f7fe ff2d 	bl	b402c <__adddf3>
    partial_out2 = uncomp_data->pressure *
   b51d2:	4642      	mov	r2, r8
   b51d4:	464b      	mov	r3, r9
   b51d6:	f7ff f8df 	bl	b4398 <__aeabi_dmul>
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   b51da:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
    partial_out2 = uncomp_data->pressure *
   b51de:	4606      	mov	r6, r0
   b51e0:	460f      	mov	r7, r1
    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
   b51e2:	4650      	mov	r0, sl
   b51e4:	4659      	mov	r1, fp
   b51e6:	f7ff f8d7 	bl	b4398 <__aeabi_dmul>
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   b51ea:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   b51ee:	f7fe ff1d 	bl	b402c <__adddf3>
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   b51f2:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   b51f6:	4680      	mov	r8, r0
   b51f8:	4689      	mov	r9, r1
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
   b51fa:	ec51 0b19 	vmov	r0, r1, d9
   b51fe:	f7ff f8cb 	bl	b4398 <__aeabi_dmul>
   b5202:	4602      	mov	r2, r0
   b5204:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   b5206:	4640      	mov	r0, r8
   b5208:	4649      	mov	r1, r9
   b520a:	f7fe ff0f 	bl	b402c <__adddf3>
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   b520e:	e9d4 2314 	ldrd	r2, r3, [r4, #80]	; 0x50
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   b5212:	4680      	mov	r8, r0
   b5214:	4689      	mov	r9, r1
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
   b5216:	ec51 0b1a 	vmov	r0, r1, d10
   b521a:	f7ff f8bd 	bl	b4398 <__aeabi_dmul>
   b521e:	4602      	mov	r2, r0
   b5220:	460b      	mov	r3, r1
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
   b5222:	4640      	mov	r0, r8
   b5224:	4649      	mov	r1, r9
   b5226:	f7fe ff01 	bl	b402c <__adddf3>
   b522a:	4602      	mov	r2, r0
   b522c:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   b522e:	4630      	mov	r0, r6
   b5230:	4639      	mov	r1, r7
   b5232:	f7fe fefb 	bl	b402c <__adddf3>
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   b5236:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    comp_press = partial_out1 + partial_out2 + partial_data4;
   b523a:	4606      	mov	r6, r0
   b523c:	460f      	mov	r7, r1
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   b523e:	4650      	mov	r0, sl
   b5240:	4659      	mov	r1, fp
   b5242:	f7ff f8a9 	bl	b4398 <__aeabi_dmul>
   b5246:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
   b524a:	f7fe feef 	bl	b402c <__adddf3>
        pow_output = (float) base * pow_output;
   b524e:	ee68 8a08 	vmul.f32	s17, s16, s16
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   b5252:	4680      	mov	r8, r0
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   b5254:	ee18 0a90 	vmov	r0, s17
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
   b5258:	4689      	mov	r9, r1
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
   b525a:	f7ff f845 	bl	b42e8 <__aeabi_f2d>
   b525e:	4602      	mov	r2, r0
   b5260:	460b      	mov	r3, r1
    partial_data3 = partial_data1 * partial_data2;
   b5262:	4640      	mov	r0, r8
   b5264:	4649      	mov	r1, r9
   b5266:	f7ff f897 	bl	b4398 <__aeabi_dmul>
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   b526a:	ee68 7a28 	vmul.f32	s15, s16, s17
    partial_data3 = partial_data1 * partial_data2;
   b526e:	4680      	mov	r8, r0
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   b5270:	ee17 0a90 	vmov	r0, s15
    partial_data3 = partial_data1 * partial_data2;
   b5274:	4689      	mov	r9, r1
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
   b5276:	f7ff f837 	bl	b42e8 <__aeabi_f2d>
   b527a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   b527e:	f7ff f88b 	bl	b4398 <__aeabi_dmul>
   b5282:	4602      	mov	r2, r0
   b5284:	460b      	mov	r3, r1
   b5286:	4640      	mov	r0, r8
   b5288:	4649      	mov	r1, r9
   b528a:	f7fe fecf 	bl	b402c <__adddf3>
   b528e:	4602      	mov	r2, r0
   b5290:	460b      	mov	r3, r1
    comp_press = partial_out1 + partial_out2 + partial_data4;
   b5292:	4630      	mov	r0, r6
   b5294:	4639      	mov	r1, r7
   b5296:	f7fe fec9 	bl	b402c <__adddf3>
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
   b529a:	e9c5 0102 	strd	r0, r1, [r5, #8]
    int8_t rslt = BMP3_OK;
   b529e:	2000      	movs	r0, #0
}
   b52a0:	ecbd 8b06 	vpop	{d8-d10}
   b52a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rslt = BMP3_E_NULL_PTR;
   b52a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b52ac:	e7f8      	b.n	b52a0 <compensate_data+0x1c8>
	...

000b52b0 <validate_osr_and_odr_settings>:
{
   b52b0:	b510      	push	{r4, lr}
   b52b2:	4604      	mov	r4, r0
   b52b4:	b092      	sub	sp, #72	; 0x48
    uint32_t odr[18] = {
   b52b6:	4921      	ldr	r1, [pc, #132]	; (b533c <validate_osr_and_odr_settings+0x8c>)
   b52b8:	2248      	movs	r2, #72	; 0x48
   b52ba:	4668      	mov	r0, sp
   b52bc:	f014 ff74 	bl	ca1a8 <memcpy>
    if (dev->settings.press_en)
   b52c0:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
   b52c4:	b173      	cbz	r3, b52e4 <validate_osr_and_odr_settings+0x34>
        meas_t_p += calculate_press_meas_time(dev);
   b52c6:	f894 30b3 	ldrb.w	r3, [r4, #179]	; 0xb3
    float pow_output = 1;
   b52ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    while (power != 0)
   b52ce:	bb5b      	cbnz	r3, b5328 <validate_osr_and_odr_settings+0x78>
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
   b52d0:	eddf 6a1b 	vldr	s13, [pc, #108]	; b5340 <validate_osr_and_odr_settings+0x90>
   b52d4:	eddf 7a1b 	vldr	s15, [pc, #108]	; b5344 <validate_osr_and_odr_settings+0x94>
   b52d8:	eee7 7a26 	vfma.f32	s15, s14, s13
   b52dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b52e0:	ee17 3a90 	vmov	r3, s15
    if (dev->settings.temp_en)
   b52e4:	f894 20b2 	ldrb.w	r2, [r4, #178]	; 0xb2
   b52e8:	b17a      	cbz	r2, b530a <validate_osr_and_odr_settings+0x5a>
        meas_t_p += calculate_temp_meas_time(dev);
   b52ea:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
    float pow_output = 1;
   b52ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    while (power != 0)
   b52f2:	b9f2      	cbnz	r2, b5332 <validate_osr_and_odr_settings+0x82>
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
   b52f4:	eddf 6a12 	vldr	s13, [pc, #72]	; b5340 <validate_osr_and_odr_settings+0x90>
   b52f8:	eddf 7a13 	vldr	s15, [pc, #76]	; b5348 <validate_osr_and_odr_settings+0x98>
   b52fc:	eee7 7a26 	vfma.f32	s15, s14, s13
   b5300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
        meas_t_p += calculate_temp_meas_time(dev);
   b5304:	ee17 2a90 	vmov	r2, s15
   b5308:	4413      	add	r3, r2
    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
   b530a:	f894 20b6 	ldrb.w	r2, [r4, #182]	; 0xb6
   b530e:	a912      	add	r1, sp, #72	; 0x48
   b5310:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    meas_t += meas_t_p;
   b5314:	33ea      	adds	r3, #234	; 0xea
    if (meas_t < odr_duration)
   b5316:	f852 2c48 	ldr.w	r2, [r2, #-72]
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
   b531a:	429a      	cmp	r2, r3
}
   b531c:	bf94      	ite	ls
   b531e:	f06f 0002 	mvnls.w	r0, #2
   b5322:	2000      	movhi	r0, #0
   b5324:	b012      	add	sp, #72	; 0x48
   b5326:	bd10      	pop	{r4, pc}
        power--;
   b5328:	3b01      	subs	r3, #1
        pow_output = (float) base * pow_output;
   b532a:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
   b532e:	b2db      	uxtb	r3, r3
   b5330:	e7cd      	b.n	b52ce <validate_osr_and_odr_settings+0x1e>
   b5332:	3a01      	subs	r2, #1
        pow_output = (float) base * pow_output;
   b5334:	ee37 7a07 	vadd.f32	s14, s14, s14
        power--;
   b5338:	b2d2      	uxtb	r2, r2
   b533a:	e7da      	b.n	b52f2 <validate_osr_and_odr_settings+0x42>
   b533c:	000ca558 	.word	0x000ca558
   b5340:	44fa0000 	.word	0x44fa0000
   b5344:	43c40000 	.word	0x43c40000
   b5348:	439c8000 	.word	0x439c8000

000b534c <bmp3_get_regs>:
{
   b534c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5350:	4606      	mov	r6, r0
   b5352:	af00      	add	r7, sp, #0
    rslt = null_ptr_check(dev);
   b5354:	4618      	mov	r0, r3
{
   b5356:	461c      	mov	r4, r3
    rslt = null_ptr_check(dev);
   b5358:	f7ff feae 	bl	b50b8 <null_ptr_check>
{
   b535c:	4688      	mov	r8, r1
   b535e:	4691      	mov	r9, r2
    if ((rslt == BMP3_OK) && (reg_data != NULL))
   b5360:	4605      	mov	r5, r0
   b5362:	bb88      	cbnz	r0, b53c8 <bmp3_get_regs+0x7c>
   b5364:	b381      	cbz	r1, b53c8 <bmp3_get_regs+0x7c>
        uint32_t temp_len = len + dev->dummy_byte;
   b5366:	7aa0      	ldrb	r0, [r4, #10]
        if (dev->intf != BMP3_I2C_INTF)
   b5368:	f894 c008 	ldrb.w	ip, [r4, #8]
        uint32_t temp_len = len + dev->dummy_byte;
   b536c:	4410      	add	r0, r2
        uint8_t temp_buff[len + dev->dummy_byte];
   b536e:	1dc3      	adds	r3, r0, #7
   b5370:	f023 0307 	bic.w	r3, r3, #7
    {
   b5374:	46ea      	mov	sl, sp
        uint8_t temp_buff[len + dev->dummy_byte];
   b5376:	ebad 0d03 	sub.w	sp, sp, r3
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   b537a:	68e3      	ldr	r3, [r4, #12]
        if (dev->intf != BMP3_I2C_INTF)
   b537c:	f1bc 0f01 	cmp.w	ip, #1
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   b5380:	469e      	mov	lr, r3
        uint8_t temp_buff[len + dev->dummy_byte];
   b5382:	46eb      	mov	fp, sp
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   b5384:	6863      	ldr	r3, [r4, #4]
        if (dev->intf != BMP3_I2C_INTF)
   b5386:	d01a      	beq.n	b53be <bmp3_get_regs+0x72>
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
   b5388:	4602      	mov	r2, r0
   b538a:	4669      	mov	r1, sp
   b538c:	f046 0080 	orr.w	r0, r6, #128	; 0x80
   b5390:	4676      	mov	r6, lr
   b5392:	47b0      	blx	r6
   b5394:	7260      	strb	r0, [r4, #9]
            for (idx = 0; idx < len; idx++)
   b5396:	454d      	cmp	r5, r9
   b5398:	d109      	bne.n	b53ae <bmp3_get_regs+0x62>
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
   b539a:	f994 0009 	ldrsb.w	r0, [r4, #9]
            rslt = BMP3_E_COMM_FAIL;
   b539e:	2800      	cmp	r0, #0
   b53a0:	bf18      	it	ne
   b53a2:	f06f 0006 	mvnne.w	r0, #6
   b53a6:	46d5      	mov	sp, sl
}
   b53a8:	46bd      	mov	sp, r7
   b53aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
   b53ae:	7aa3      	ldrb	r3, [r4, #10]
   b53b0:	eb0b 0205 	add.w	r2, fp, r5
   b53b4:	5cd3      	ldrb	r3, [r2, r3]
   b53b6:	f808 3005 	strb.w	r3, [r8, r5]
            for (idx = 0; idx < len; idx++)
   b53ba:	3501      	adds	r5, #1
   b53bc:	e7eb      	b.n	b5396 <bmp3_get_regs+0x4a>
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
   b53be:	4630      	mov	r0, r6
   b53c0:	4675      	mov	r5, lr
   b53c2:	47a8      	blx	r5
   b53c4:	7260      	strb	r0, [r4, #9]
   b53c6:	e7e8      	b.n	b539a <bmp3_get_regs+0x4e>
        rslt = BMP3_E_NULL_PTR;
   b53c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b53cc:	e7ec      	b.n	b53a8 <bmp3_get_regs+0x5c>

000b53ce <bmp3_set_regs>:
{
   b53ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t temp_buff[len * 2];
   b53d2:	ea4f 0842 	mov.w	r8, r2, lsl #1
{
   b53d6:	461c      	mov	r4, r3
    uint8_t temp_buff[len * 2];
   b53d8:	f108 0307 	add.w	r3, r8, #7
   b53dc:	f023 0307 	bic.w	r3, r3, #7
{
   b53e0:	af00      	add	r7, sp, #0
   b53e2:	4606      	mov	r6, r0
    uint8_t temp_buff[len * 2];
   b53e4:	ebad 0d03 	sub.w	sp, sp, r3
    rslt = null_ptr_check(dev);
   b53e8:	4620      	mov	r0, r4
{
   b53ea:	460d      	mov	r5, r1
    uint8_t temp_buff[len * 2];
   b53ec:	4669      	mov	r1, sp
    rslt = null_ptr_check(dev);
   b53ee:	f7ff fe63 	bl	b50b8 <null_ptr_check>
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
   b53f2:	bb70      	cbnz	r0, b5452 <bmp3_set_regs+0x84>
   b53f4:	b36e      	cbz	r6, b5452 <bmp3_set_regs+0x84>
   b53f6:	b365      	cbz	r5, b5452 <bmp3_set_regs+0x84>
        if (len != 0)
   b53f8:	b372      	cbz	r2, b5458 <bmp3_set_regs+0x8a>
            temp_buff[0] = reg_data[0];
   b53fa:	782b      	ldrb	r3, [r5, #0]
   b53fc:	f88d 3000 	strb.w	r3, [sp]
            if (dev->intf == BMP3_SPI_INTF)
   b5400:	7a23      	ldrb	r3, [r4, #8]
   b5402:	b303      	cbz	r3, b5446 <bmp3_set_regs+0x78>
            if (len > 1)
   b5404:	2a01      	cmp	r2, #1
   b5406:	d00c      	beq.n	b5422 <bmp3_set_regs+0x54>
    for (index = 1; index < len; index++)
   b5408:	2301      	movs	r3, #1
        temp_buff[(index * 2) - 1] = reg_addr[index];
   b540a:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   b540e:	5cf0      	ldrb	r0, [r6, r3]
   b5410:	f80c 0013 	strb.w	r0, [ip, r3, lsl #1]
        temp_buff[index * 2] = reg_data[index];
   b5414:	5ce8      	ldrb	r0, [r5, r3]
   b5416:	f801 0013 	strb.w	r0, [r1, r3, lsl #1]
    for (index = 1; index < len; index++)
   b541a:	3301      	adds	r3, #1
   b541c:	429a      	cmp	r2, r3
   b541e:	d8f6      	bhi.n	b540e <bmp3_set_regs+0x40>
                temp_len = len * 2;
   b5420:	4642      	mov	r2, r8
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   b5422:	6925      	ldr	r5, [r4, #16]
   b5424:	6863      	ldr	r3, [r4, #4]
   b5426:	7830      	ldrb	r0, [r6, #0]
   b5428:	47a8      	blx	r5
                rslt = BMP3_E_COMM_FAIL;
   b542a:	2800      	cmp	r0, #0
            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
   b542c:	7260      	strb	r0, [r4, #9]
                rslt = BMP3_E_COMM_FAIL;
   b542e:	bf18      	it	ne
   b5430:	f06f 0006 	mvnne.w	r0, #6
}
   b5434:	46bd      	mov	sp, r7
   b5436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
   b543a:	f816 c000 	ldrb.w	ip, [r6, r0]
   b543e:	f00c 0c7f 	and.w	ip, ip, #127	; 0x7f
   b5442:	f806 c000 	strb.w	ip, [r6, r0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
   b5446:	b2d8      	uxtb	r0, r3
   b5448:	4282      	cmp	r2, r0
   b544a:	f103 0301 	add.w	r3, r3, #1
   b544e:	d8f4      	bhi.n	b543a <bmp3_set_regs+0x6c>
   b5450:	e7d8      	b.n	b5404 <bmp3_set_regs+0x36>
        rslt = BMP3_E_NULL_PTR;
   b5452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5456:	e7ed      	b.n	b5434 <bmp3_set_regs+0x66>
            rslt = BMP3_E_INVALID_LEN;
   b5458:	f06f 0005 	mvn.w	r0, #5
   b545c:	e7ea      	b.n	b5434 <bmp3_set_regs+0x66>

000b545e <write_power_mode>:
{
   b545e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5460:	4603      	mov	r3, r0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   b5462:	2201      	movs	r2, #1
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   b5464:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   b5466:	f10d 010f 	add.w	r1, sp, #15
    uint8_t op_mode = dev->settings.op_mode;
   b546a:	f893 40b0 	ldrb.w	r4, [r3, #176]	; 0xb0
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   b546e:	9301      	str	r3, [sp, #4]
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   b5470:	f88d 000e 	strb.w	r0, [sp, #14]
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
   b5474:	f7ff ff6a 	bl	b534c <bmp3_get_regs>
    if (rslt == BMP3_OK)
   b5478:	9b01      	ldr	r3, [sp, #4]
   b547a:	b980      	cbnz	r0, b549e <write_power_mode+0x40>
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
   b547c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5480:	0124      	lsls	r4, r4, #4
   b5482:	f022 0230 	bic.w	r2, r2, #48	; 0x30
   b5486:	f004 0430 	and.w	r4, r4, #48	; 0x30
   b548a:	4322      	orrs	r2, r4
   b548c:	f88d 200f 	strb.w	r2, [sp, #15]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   b5490:	f10d 010f 	add.w	r1, sp, #15
   b5494:	2201      	movs	r2, #1
   b5496:	f10d 000e 	add.w	r0, sp, #14
   b549a:	f7ff ff98 	bl	b53ce <bmp3_set_regs>
}
   b549e:	b004      	add	sp, #16
   b54a0:	bd10      	pop	{r4, pc}
	...

000b54a4 <bmp3_set_sensor_settings>:
{
   b54a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b54a6:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   b54a8:	4608      	mov	r0, r1
{
   b54aa:	460d      	mov	r5, r1
    rslt = null_ptr_check(dev);
   b54ac:	f7ff fe04 	bl	b50b8 <null_ptr_check>
    if (rslt == BMP3_OK)
   b54b0:	2800      	cmp	r0, #0
   b54b2:	f040 811e 	bne.w	b56f2 <bmp3_set_sensor_settings+0x24e>
    if (sub_settings & desired_settings)
   b54b6:	f014 0f06 	tst.w	r4, #6
   b54ba:	d029      	beq.n	b5510 <bmp3_set_sensor_settings+0x6c>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   b54bc:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   b54be:	460b      	mov	r3, r1
   b54c0:	2201      	movs	r2, #1
   b54c2:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   b54c4:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   b54c8:	f7ff ff40 	bl	b534c <bmp3_get_regs>
    if (rslt == BMP3_OK)
   b54cc:	bb00      	cbnz	r0, b5510 <bmp3_set_sensor_settings+0x6c>
        if (desired_settings & BMP3_SEL_PRESS_EN)
   b54ce:	07a7      	lsls	r7, r4, #30
   b54d0:	d50a      	bpl.n	b54e8 <bmp3_set_sensor_settings+0x44>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
   b54d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b54d6:	f895 20b1 	ldrb.w	r2, [r5, #177]	; 0xb1
   b54da:	f023 0301 	bic.w	r3, r3, #1
   b54de:	f002 0201 	and.w	r2, r2, #1
   b54e2:	4313      	orrs	r3, r2
   b54e4:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_TEMP_EN)
   b54e8:	0766      	lsls	r6, r4, #29
   b54ea:	d50b      	bpl.n	b5504 <bmp3_set_sensor_settings+0x60>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
   b54ec:	f895 30b2 	ldrb.w	r3, [r5, #178]	; 0xb2
   b54f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   b54f4:	005b      	lsls	r3, r3, #1
   b54f6:	f003 0302 	and.w	r3, r3, #2
   b54fa:	f022 0202 	bic.w	r2, r2, #2
   b54fe:	4313      	orrs	r3, r2
   b5500:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   b5504:	462b      	mov	r3, r5
   b5506:	2201      	movs	r2, #1
   b5508:	a901      	add	r1, sp, #4
   b550a:	4668      	mov	r0, sp
   b550c:	f7ff ff5f 	bl	b53ce <bmp3_set_regs>
    if (sub_settings & desired_settings)
   b5510:	f014 0ff0 	tst.w	r4, #240	; 0xf0
   b5514:	d072      	beq.n	b55fc <bmp3_set_sensor_settings+0x158>
        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
   b5516:	2800      	cmp	r0, #0
   b5518:	d170      	bne.n	b55fc <bmp3_set_sensor_settings+0x158>
    uint8_t reg_addr[3] = { 0 };
   b551a:	4b78      	ldr	r3, [pc, #480]	; (b56fc <bmp3_set_sensor_settings+0x258>)
   b551c:	f88d 0002 	strb.w	r0, [sp, #2]
   b5520:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   b5524:	f8ad 3000 	strh.w	r3, [sp]
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   b5528:	2204      	movs	r2, #4
   b552a:	462b      	mov	r3, r5
   b552c:	eb0d 0102 	add.w	r1, sp, r2
   b5530:	201c      	movs	r0, #28
   b5532:	f7ff ff0b 	bl	b534c <bmp3_get_regs>
    if (rslt == BMP3_OK)
   b5536:	2800      	cmp	r0, #0
   b5538:	d160      	bne.n	b55fc <bmp3_set_sensor_settings+0x158>
    if (sub_settings & desired_settings)
   b553a:	f014 0f30 	tst.w	r4, #48	; 0x30
   b553e:	f000 80da 	beq.w	b56f6 <bmp3_set_sensor_settings+0x252>
        if (settings & BMP3_SEL_PRESS_OS)
   b5542:	06e0      	lsls	r0, r4, #27
   b5544:	f895 20b4 	ldrb.w	r2, [r5, #180]	; 0xb4
   b5548:	d50a      	bpl.n	b5560 <bmp3_set_sensor_settings+0xbc>
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
   b554a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b554e:	f895 10b3 	ldrb.w	r1, [r5, #179]	; 0xb3
   b5552:	f023 0307 	bic.w	r3, r3, #7
   b5556:	f001 0107 	and.w	r1, r1, #7
   b555a:	430b      	orrs	r3, r1
   b555c:	f88d 3004 	strb.w	r3, [sp, #4]
        if (settings & BMP3_SEL_TEMP_OS)
   b5560:	06a1      	lsls	r1, r4, #26
   b5562:	d509      	bpl.n	b5578 <bmp3_set_sensor_settings+0xd4>
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
   b5564:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5568:	00d2      	lsls	r2, r2, #3
   b556a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
   b556e:	f002 0238 	and.w	r2, r2, #56	; 0x38
   b5572:	4313      	orrs	r3, r2
   b5574:	f88d 3004 	strb.w	r3, [sp, #4]
        addr[*len] = BMP3_REG_OSR;
   b5578:	231c      	movs	r3, #28
   b557a:	f88d 3000 	strb.w	r3, [sp]
}
   b557e:	2601      	movs	r6, #1
    if (sub_settings & desired_settings)
   b5580:	0622      	lsls	r2, r4, #24
   b5582:	d518      	bpl.n	b55b6 <bmp3_set_sensor_settings+0x112>
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
   b5584:	f895 30b6 	ldrb.w	r3, [r5, #182]	; 0xb6
   b5588:	2b11      	cmp	r3, #17
        osr_settings->odr = BMP3_ODR_0_001_HZ;
   b558a:	bf84      	itt	hi
   b558c:	2311      	movhi	r3, #17
   b558e:	f885 30b6 	strbhi.w	r3, [r5, #182]	; 0xb6
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
   b5592:	ab02      	add	r3, sp, #8
   b5594:	1999      	adds	r1, r3, r6
   b5596:	f895 20b6 	ldrb.w	r2, [r5, #182]	; 0xb6
   b559a:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b559e:	f002 021f 	and.w	r2, r2, #31
   b55a2:	f023 031f 	bic.w	r3, r3, #31
   b55a6:	4313      	orrs	r3, r2
   b55a8:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   b55ac:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_ODR;
   b55ae:	231d      	movs	r3, #29
   b55b0:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   b55b4:	b2f6      	uxtb	r6, r6
    if (sub_settings & desired_settings)
   b55b6:	0663      	lsls	r3, r4, #25
   b55b8:	d512      	bpl.n	b55e0 <bmp3_set_sensor_settings+0x13c>
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
   b55ba:	ab02      	add	r3, sp, #8
   b55bc:	1999      	adds	r1, r3, r6
   b55be:	f895 30b5 	ldrb.w	r3, [r5, #181]	; 0xb5
   b55c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
   b55c6:	005b      	lsls	r3, r3, #1
   b55c8:	f003 030e 	and.w	r3, r3, #14
   b55cc:	f022 020e 	bic.w	r2, r2, #14
   b55d0:	4313      	orrs	r3, r2
   b55d2:	f801 3c04 	strb.w	r3, [r1, #-4]
    (*len)++;
   b55d6:	3601      	adds	r6, #1
    addr[*len] = BMP3_REG_CONFIG;
   b55d8:	231f      	movs	r3, #31
   b55da:	f801 3c08 	strb.w	r3, [r1, #-8]
    (*len)++;
   b55de:	b2f6      	uxtb	r6, r6
        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
   b55e0:	f895 30b0 	ldrb.w	r3, [r5, #176]	; 0xb0
   b55e4:	2b03      	cmp	r3, #3
   b55e6:	d103      	bne.n	b55f0 <bmp3_set_sensor_settings+0x14c>
            rslt = validate_osr_and_odr_settings(dev);
   b55e8:	4628      	mov	r0, r5
   b55ea:	f7ff fe61 	bl	b52b0 <validate_osr_and_odr_settings>
        if (rslt == BMP3_OK)
   b55ee:	b928      	cbnz	r0, b55fc <bmp3_set_sensor_settings+0x158>
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
   b55f0:	462b      	mov	r3, r5
   b55f2:	4632      	mov	r2, r6
   b55f4:	a901      	add	r1, sp, #4
   b55f6:	4668      	mov	r0, sp
   b55f8:	f7ff fee9 	bl	b53ce <bmp3_set_regs>
    if (sub_settings & desired_settings)
   b55fc:	f414 6fe1 	tst.w	r4, #1800	; 0x708
   b5600:	d048      	beq.n	b5694 <bmp3_set_sensor_settings+0x1f0>
        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
   b5602:	2800      	cmp	r0, #0
   b5604:	d146      	bne.n	b5694 <bmp3_set_sensor_settings+0x1f0>
    reg_addr = BMP3_REG_INT_CTRL;
   b5606:	2019      	movs	r0, #25
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   b5608:	462b      	mov	r3, r5
   b560a:	2201      	movs	r2, #1
   b560c:	4669      	mov	r1, sp
    reg_addr = BMP3_REG_INT_CTRL;
   b560e:	f88d 0004 	strb.w	r0, [sp, #4]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   b5612:	f7ff fe9b 	bl	b534c <bmp3_get_regs>
    if (rslt == BMP3_OK)
   b5616:	2800      	cmp	r0, #0
   b5618:	d13c      	bne.n	b5694 <bmp3_set_sensor_settings+0x1f0>
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   b561a:	05e7      	lsls	r7, r4, #23
        int_settings = dev->settings.int_settings;
   b561c:	f895 00b8 	ldrb.w	r0, [r5, #184]	; 0xb8
   b5620:	f895 10b9 	ldrb.w	r1, [r5, #185]	; 0xb9
   b5624:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
   b5628:	d50a      	bpl.n	b5640 <bmp3_set_sensor_settings+0x19c>
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
   b562a:	f89d 3000 	ldrb.w	r3, [sp]
   b562e:	f895 60b7 	ldrb.w	r6, [r5, #183]	; 0xb7
   b5632:	f023 0301 	bic.w	r3, r3, #1
   b5636:	f006 0601 	and.w	r6, r6, #1
   b563a:	4333      	orrs	r3, r6
   b563c:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LEVEL)
   b5640:	05a6      	lsls	r6, r4, #22
   b5642:	d509      	bpl.n	b5658 <bmp3_set_sensor_settings+0x1b4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
   b5644:	f89d 3000 	ldrb.w	r3, [sp]
   b5648:	0040      	lsls	r0, r0, #1
   b564a:	f023 0302 	bic.w	r3, r3, #2
   b564e:	f000 0002 	and.w	r0, r0, #2
   b5652:	4303      	orrs	r3, r0
   b5654:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_LATCH)
   b5658:	0560      	lsls	r0, r4, #21
   b565a:	d509      	bpl.n	b5670 <bmp3_set_sensor_settings+0x1cc>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
   b565c:	f89d 3000 	ldrb.w	r3, [sp]
   b5660:	0089      	lsls	r1, r1, #2
   b5662:	f023 0304 	bic.w	r3, r3, #4
   b5666:	f001 0104 	and.w	r1, r1, #4
   b566a:	430b      	orrs	r3, r1
   b566c:	f88d 3000 	strb.w	r3, [sp]
        if (desired_settings & BMP3_SEL_DRDY_EN)
   b5670:	0721      	lsls	r1, r4, #28
   b5672:	d509      	bpl.n	b5688 <bmp3_set_sensor_settings+0x1e4>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
   b5674:	f89d 3000 	ldrb.w	r3, [sp]
   b5678:	0192      	lsls	r2, r2, #6
   b567a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   b567e:	f002 0240 	and.w	r2, r2, #64	; 0x40
   b5682:	4313      	orrs	r3, r2
   b5684:	f88d 3000 	strb.w	r3, [sp]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   b5688:	462b      	mov	r3, r5
   b568a:	2201      	movs	r2, #1
   b568c:	4669      	mov	r1, sp
   b568e:	a801      	add	r0, sp, #4
   b5690:	f7ff fe9d 	bl	b53ce <bmp3_set_regs>
    if (sub_settings & desired_settings)
   b5694:	f414 5fc0 	tst.w	r4, #6144	; 0x1800
   b5698:	d02b      	beq.n	b56f2 <bmp3_set_sensor_settings+0x24e>
        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
   b569a:	bb50      	cbnz	r0, b56f2 <bmp3_set_sensor_settings+0x24e>
    reg_addr = BMP3_REG_IF_CONF;
   b569c:	201a      	movs	r0, #26
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   b569e:	462b      	mov	r3, r5
   b56a0:	2201      	movs	r2, #1
   b56a2:	a901      	add	r1, sp, #4
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
   b56a4:	f895 70bb 	ldrb.w	r7, [r5, #187]	; 0xbb
   b56a8:	f895 60bc 	ldrb.w	r6, [r5, #188]	; 0xbc
    reg_addr = BMP3_REG_IF_CONF;
   b56ac:	f88d 0000 	strb.w	r0, [sp]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
   b56b0:	f7ff fe4c 	bl	b534c <bmp3_get_regs>
    if (rslt == BMP3_OK)
   b56b4:	b9e8      	cbnz	r0, b56f2 <bmp3_set_sensor_settings+0x24e>
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
   b56b6:	0522      	lsls	r2, r4, #20
   b56b8:	d509      	bpl.n	b56ce <bmp3_set_sensor_settings+0x22a>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
   b56ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b56be:	007f      	lsls	r7, r7, #1
   b56c0:	f023 0302 	bic.w	r3, r3, #2
   b56c4:	f007 0702 	and.w	r7, r7, #2
   b56c8:	433b      	orrs	r3, r7
   b56ca:	f88d 3004 	strb.w	r3, [sp, #4]
        if (desired_settings & BMP3_SEL_I2C_WDT)
   b56ce:	04e3      	lsls	r3, r4, #19
   b56d0:	d509      	bpl.n	b56e6 <bmp3_set_sensor_settings+0x242>
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
   b56d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b56d6:	00b6      	lsls	r6, r6, #2
   b56d8:	f023 0304 	bic.w	r3, r3, #4
   b56dc:	f006 0604 	and.w	r6, r6, #4
   b56e0:	4333      	orrs	r3, r6
   b56e2:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
   b56e6:	462b      	mov	r3, r5
   b56e8:	2201      	movs	r2, #1
   b56ea:	a901      	add	r1, sp, #4
   b56ec:	4668      	mov	r0, sp
   b56ee:	f7ff fe6e 	bl	b53ce <bmp3_set_regs>
}
   b56f2:	b003      	add	sp, #12
   b56f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t len = 0;
   b56f6:	4606      	mov	r6, r0
   b56f8:	e742      	b.n	b5580 <bmp3_set_sensor_settings+0xdc>
   b56fa:	bf00      	nop
   b56fc:	000ca558 	.word	0x000ca558

000b5700 <bmp3_soft_reset>:
{
   b5700:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t reg_addr = BMP3_REG_CMD;
   b5702:	237e      	movs	r3, #126	; 0x7e
   b5704:	f88d 3004 	strb.w	r3, [sp, #4]
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   b5708:	23b6      	movs	r3, #182	; 0xb6
{
   b570a:	4605      	mov	r5, r0
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
   b570c:	f88d 3005 	strb.w	r3, [sp, #5]
    rslt = null_ptr_check(dev);
   b5710:	f7ff fcd2 	bl	b50b8 <null_ptr_check>
    if (rslt == BMP3_OK)
   b5714:	4604      	mov	r4, r0
   b5716:	b960      	cbnz	r0, b5732 <bmp3_soft_reset+0x32>
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
   b5718:	462b      	mov	r3, r5
   b571a:	2201      	movs	r2, #1
   b571c:	f10d 0106 	add.w	r1, sp, #6
   b5720:	2003      	movs	r0, #3
   b5722:	f7ff fe13 	bl	b534c <bmp3_get_regs>
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   b5726:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b572a:	06db      	lsls	r3, r3, #27
   b572c:	d404      	bmi.n	b5738 <bmp3_soft_reset+0x38>
            rslt = BMP3_E_CMD_EXEC_FAILED;
   b572e:	f06f 0403 	mvn.w	r4, #3
}
   b5732:	4620      	mov	r0, r4
   b5734:	b003      	add	sp, #12
   b5736:	bd30      	pop	{r4, r5, pc}
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
   b5738:	2800      	cmp	r0, #0
   b573a:	d1f8      	bne.n	b572e <bmp3_soft_reset+0x2e>
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
   b573c:	462b      	mov	r3, r5
   b573e:	2201      	movs	r2, #1
   b5740:	f10d 0105 	add.w	r1, sp, #5
   b5744:	a801      	add	r0, sp, #4
   b5746:	f7ff fe42 	bl	b53ce <bmp3_set_regs>
            if (rslt == BMP3_OK)
   b574a:	4604      	mov	r4, r0
   b574c:	2800      	cmp	r0, #0
   b574e:	d1f0      	bne.n	b5732 <bmp3_soft_reset+0x32>
                dev->delay_us(2000, dev->intf_ptr);
   b5750:	696b      	ldr	r3, [r5, #20]
   b5752:	6869      	ldr	r1, [r5, #4]
   b5754:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5758:	4798      	blx	r3
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
   b575a:	462b      	mov	r3, r5
   b575c:	2201      	movs	r2, #1
   b575e:	f10d 0107 	add.w	r1, sp, #7
   b5762:	2002      	movs	r0, #2
   b5764:	f7ff fdf2 	bl	b534c <bmp3_get_regs>
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
   b5768:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b576c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
   b5770:	4318      	orrs	r0, r3
   b5772:	b2c0      	uxtb	r0, r0
   b5774:	2800      	cmp	r0, #0
   b5776:	d0dc      	beq.n	b5732 <bmp3_soft_reset+0x32>
   b5778:	e7d9      	b.n	b572e <bmp3_soft_reset+0x2e>
	...

000b577c <bmp3_init>:
{
   b577c:	b530      	push	{r4, r5, lr}
   b577e:	b089      	sub	sp, #36	; 0x24
    uint8_t chip_id = 0;
   b5780:	2300      	movs	r3, #0
{
   b5782:	4604      	mov	r4, r0
    uint8_t chip_id = 0;
   b5784:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_ptr_check(dev);
   b5788:	f7ff fc96 	bl	b50b8 <null_ptr_check>
    if (rslt == BMP3_OK)
   b578c:	4605      	mov	r5, r0
   b578e:	2800      	cmp	r0, #0
   b5790:	f040 80d8 	bne.w	b5944 <bmp3_init+0x1c8>
        if (dev->intf != BMP3_I2C_INTF)
   b5794:	7a23      	ldrb	r3, [r4, #8]
   b5796:	3b01      	subs	r3, #1
   b5798:	bf18      	it	ne
   b579a:	2301      	movne	r3, #1
   b579c:	72a3      	strb	r3, [r4, #10]
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
   b579e:	2201      	movs	r2, #1
   b57a0:	4623      	mov	r3, r4
   b57a2:	f10d 0107 	add.w	r1, sp, #7
   b57a6:	f7ff fdd1 	bl	b534c <bmp3_get_regs>
        if (rslt == BMP3_OK)
   b57aa:	4605      	mov	r5, r0
   b57ac:	2800      	cmp	r0, #0
   b57ae:	f040 80c9 	bne.w	b5944 <bmp3_init+0x1c8>
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
   b57b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b57b6:	2b50      	cmp	r3, #80	; 0x50
   b57b8:	d002      	beq.n	b57c0 <bmp3_init+0x44>
   b57ba:	2b60      	cmp	r3, #96	; 0x60
   b57bc:	f040 80c5 	bne.w	b594a <bmp3_init+0x1ce>
                dev->chip_id = chip_id;
   b57c0:	7023      	strb	r3, [r4, #0]
                rslt = bmp3_soft_reset(dev);
   b57c2:	4620      	mov	r0, r4
   b57c4:	f7ff ff9c 	bl	b5700 <bmp3_soft_reset>
                if (rslt == BMP3_OK)
   b57c8:	4605      	mov	r5, r0
   b57ca:	2800      	cmp	r0, #0
   b57cc:	f040 80ba 	bne.w	b5944 <bmp3_init+0x1c8>
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
   b57d0:	4601      	mov	r1, r0
   b57d2:	9002      	str	r0, [sp, #8]
   b57d4:	2211      	movs	r2, #17
   b57d6:	a803      	add	r0, sp, #12
   b57d8:	f014 fcf4 	bl	ca1c4 <memset>
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
   b57dc:	4623      	mov	r3, r4
   b57de:	2215      	movs	r2, #21
   b57e0:	a902      	add	r1, sp, #8
   b57e2:	2031      	movs	r0, #49	; 0x31
   b57e4:	f7ff fdb2 	bl	b534c <bmp3_get_regs>
   b57e8:	4605      	mov	r5, r0
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
   b57ea:	f8bd 0008 	ldrh.w	r0, [sp, #8]
   b57ee:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
   b57f2:	f7fe fd57 	bl	b42a4 <__aeabi_ui2d>
   b57f6:	4b56      	ldr	r3, [pc, #344]	; (b5950 <bmp3_init+0x1d4>)
   b57f8:	2200      	movs	r2, #0
   b57fa:	f7fe fdcd 	bl	b4398 <__aeabi_dmul>
   b57fe:	e9c4 0106 	strd	r0, r1, [r4, #24]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
   b5802:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   b5806:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
   b580a:	f7fe fd4b 	bl	b42a4 <__aeabi_ui2d>
   b580e:	4b51      	ldr	r3, [pc, #324]	; (b5954 <bmp3_init+0x1d8>)
   b5810:	2200      	movs	r2, #0
   b5812:	f7fe fdc1 	bl	b4398 <__aeabi_dmul>
   b5816:	e9c4 0108 	strd	r0, r1, [r4, #32]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
   b581a:	f99d 000c 	ldrsb.w	r0, [sp, #12]
   b581e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
   b5822:	f7fe fd4f 	bl	b42c4 <__aeabi_i2d>
   b5826:	4b4c      	ldr	r3, [pc, #304]	; (b5958 <bmp3_init+0x1dc>)
   b5828:	2200      	movs	r2, #0
   b582a:	f7fe fdb5 	bl	b4398 <__aeabi_dmul>
   b582e:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
   b5832:	f9bd 000d 	ldrsh.w	r0, [sp, #13]
   b5836:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
   b583a:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   b583e:	f7fe fd41 	bl	b42c4 <__aeabi_i2d>
   b5842:	4b46      	ldr	r3, [pc, #280]	; (b595c <bmp3_init+0x1e0>)
   b5844:	2200      	movs	r2, #0
   b5846:	f7fe fda7 	bl	b4398 <__aeabi_dmul>
   b584a:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
   b584e:	f9bd 000f 	ldrsh.w	r0, [sp, #15]
   b5852:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
   b5856:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
   b585a:	f7fe fd33 	bl	b42c4 <__aeabi_i2d>
   b585e:	4b40      	ldr	r3, [pc, #256]	; (b5960 <bmp3_init+0x1e4>)
   b5860:	2200      	movs	r2, #0
   b5862:	f7fe fd99 	bl	b4398 <__aeabi_dmul>
   b5866:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
   b586a:	f99d 0011 	ldrsb.w	r0, [sp, #17]
   b586e:	f884 009a 	strb.w	r0, [r4, #154]	; 0x9a
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
   b5872:	f7fe fd27 	bl	b42c4 <__aeabi_i2d>
   b5876:	4b3b      	ldr	r3, [pc, #236]	; (b5964 <bmp3_init+0x1e8>)
   b5878:	2200      	movs	r2, #0
   b587a:	f7fe fd8d 	bl	b4398 <__aeabi_dmul>
   b587e:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
   b5882:	f99d 0012 	ldrsb.w	r0, [sp, #18]
   b5886:	f884 009b 	strb.w	r0, [r4, #155]	; 0x9b
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
   b588a:	f7fe fd1b 	bl	b42c4 <__aeabi_i2d>
   b588e:	4b36      	ldr	r3, [pc, #216]	; (b5968 <bmp3_init+0x1ec>)
   b5890:	2200      	movs	r2, #0
   b5892:	f7fe fd81 	bl	b4398 <__aeabi_dmul>
   b5896:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
   b589a:	f8bd 0013 	ldrh.w	r0, [sp, #19]
   b589e:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
   b58a2:	f7fe fcff 	bl	b42a4 <__aeabi_ui2d>
   b58a6:	4b31      	ldr	r3, [pc, #196]	; (b596c <bmp3_init+0x1f0>)
   b58a8:	2200      	movs	r2, #0
   b58aa:	f7fe fd75 	bl	b4398 <__aeabi_dmul>
   b58ae:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
   b58b2:	f8bd 0015 	ldrh.w	r0, [sp, #21]
   b58b6:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
   b58ba:	f7fe fcf3 	bl	b42a4 <__aeabi_ui2d>
   b58be:	4b2c      	ldr	r3, [pc, #176]	; (b5970 <bmp3_init+0x1f4>)
   b58c0:	2200      	movs	r2, #0
   b58c2:	f7fe fd69 	bl	b4398 <__aeabi_dmul>
   b58c6:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
   b58ca:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   b58ce:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
   b58d2:	f7fe fcf7 	bl	b42c4 <__aeabi_i2d>
   b58d6:	4b27      	ldr	r3, [pc, #156]	; (b5974 <bmp3_init+0x1f8>)
   b58d8:	2200      	movs	r2, #0
   b58da:	f7fe fd5d 	bl	b4398 <__aeabi_dmul>
   b58de:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
   b58e2:	f99d 0018 	ldrsb.w	r0, [sp, #24]
   b58e6:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
   b58ea:	f7fe fceb 	bl	b42c4 <__aeabi_i2d>
   b58ee:	2200      	movs	r2, #0
   b58f0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
   b58f4:	f7fe fd50 	bl	b4398 <__aeabi_dmul>
   b58f8:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
   b58fc:	f9bd 0019 	ldrsh.w	r0, [sp, #25]
   b5900:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
   b5904:	f7fe fcde 	bl	b42c4 <__aeabi_i2d>
   b5908:	4b13      	ldr	r3, [pc, #76]	; (b5958 <bmp3_init+0x1dc>)
   b590a:	2200      	movs	r2, #0
   b590c:	f7fe fd44 	bl	b4398 <__aeabi_dmul>
   b5910:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
   b5914:	f99d 001b 	ldrsb.w	r0, [sp, #27]
   b5918:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
   b591c:	f7fe fcd2 	bl	b42c4 <__aeabi_i2d>
   b5920:	4b0d      	ldr	r3, [pc, #52]	; (b5958 <bmp3_init+0x1dc>)
   b5922:	2200      	movs	r2, #0
   b5924:	f7fe fd38 	bl	b4398 <__aeabi_dmul>
   b5928:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
   b592c:	f99d 001c 	ldrsb.w	r0, [sp, #28]
   b5930:	f884 00a5 	strb.w	r0, [r4, #165]	; 0xa5
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
   b5934:	f7fe fcc6 	bl	b42c4 <__aeabi_i2d>
   b5938:	4b0f      	ldr	r3, [pc, #60]	; (b5978 <bmp3_init+0x1fc>)
   b593a:	2200      	movs	r2, #0
   b593c:	f7fe fd2c 	bl	b4398 <__aeabi_dmul>
   b5940:	e9c4 0120 	strd	r0, r1, [r4, #128]	; 0x80
}
   b5944:	4628      	mov	r0, r5
   b5946:	b009      	add	sp, #36	; 0x24
   b5948:	bd30      	pop	{r4, r5, pc}
                rslt = BMP3_E_DEV_NOT_FOUND;
   b594a:	f06f 0501 	mvn.w	r5, #1
   b594e:	e7f9      	b.n	b5944 <bmp3_init+0x1c8>
   b5950:	40700000 	.word	0x40700000
   b5954:	3e100000 	.word	0x3e100000
   b5958:	3cf00000 	.word	0x3cf00000
   b595c:	3eb00000 	.word	0x3eb00000
   b5960:	3e200000 	.word	0x3e200000
   b5964:	3df00000 	.word	0x3df00000
   b5968:	3da00000 	.word	0x3da00000
   b596c:	40200000 	.word	0x40200000
   b5970:	3f900000 	.word	0x3f900000
   b5974:	3f700000 	.word	0x3f700000
   b5978:	3be00000 	.word	0x3be00000

000b597c <bmp3_get_op_mode>:
{
   b597c:	b513      	push	{r0, r1, r4, lr}
   b597e:	4604      	mov	r4, r0
    rslt = null_ptr_check(dev);
   b5980:	4608      	mov	r0, r1
   b5982:	9101      	str	r1, [sp, #4]
   b5984:	f7ff fb98 	bl	b50b8 <null_ptr_check>
    if ((rslt == BMP3_OK) && (op_mode != NULL))
   b5988:	b960      	cbnz	r0, b59a4 <bmp3_get_op_mode+0x28>
   b598a:	b15c      	cbz	r4, b59a4 <bmp3_get_op_mode+0x28>
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
   b598c:	460b      	mov	r3, r1
   b598e:	2201      	movs	r2, #1
   b5990:	4621      	mov	r1, r4
   b5992:	201b      	movs	r0, #27
   b5994:	f7ff fcda 	bl	b534c <bmp3_get_regs>
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
   b5998:	7823      	ldrb	r3, [r4, #0]
   b599a:	f3c3 1301 	ubfx	r3, r3, #4, #2
   b599e:	7023      	strb	r3, [r4, #0]
}
   b59a0:	b002      	add	sp, #8
   b59a2:	bd10      	pop	{r4, pc}
        rslt = BMP3_E_NULL_PTR;
   b59a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b59a8:	e7fa      	b.n	b59a0 <bmp3_get_op_mode+0x24>

000b59aa <bmp3_set_op_mode>:
{
   b59aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b59ac:	4605      	mov	r5, r0
    rslt = null_ptr_check(dev);
   b59ae:	f7ff fb83 	bl	b50b8 <null_ptr_check>
    if (rslt == BMP3_OK)
   b59b2:	4604      	mov	r4, r0
   b59b4:	2800      	cmp	r0, #0
   b59b6:	d163      	bne.n	b5a80 <bmp3_set_op_mode+0xd6>
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   b59b8:	4629      	mov	r1, r5
   b59ba:	f10d 0002 	add.w	r0, sp, #2
        uint8_t curr_mode = dev->settings.op_mode;
   b59be:	f895 60b0 	ldrb.w	r6, [r5, #176]	; 0xb0
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   b59c2:	f7ff ffdb 	bl	b597c <bmp3_get_op_mode>
        if (last_set_mode != BMP3_MODE_SLEEP)
   b59c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
        rslt = bmp3_get_op_mode(&last_set_mode, dev);
   b59ca:	4604      	mov	r4, r0
        if (last_set_mode != BMP3_MODE_SLEEP)
   b59cc:	b1e3      	cbz	r3, b5a08 <bmp3_set_op_mode+0x5e>
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   b59ce:	201b      	movs	r0, #27
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   b59d0:	462b      	mov	r3, r5
   b59d2:	2201      	movs	r2, #1
   b59d4:	a901      	add	r1, sp, #4
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
   b59d6:	f88d 0003 	strb.w	r0, [sp, #3]
    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
   b59da:	f7ff fcb7 	bl	b534c <bmp3_get_regs>
    if (rslt == BMP3_OK)
   b59de:	4604      	mov	r4, r0
   b59e0:	b968      	cbnz	r0, b59fe <bmp3_set_op_mode+0x54>
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
   b59e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b59e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   b59ea:	f88d 3004 	strb.w	r3, [sp, #4]
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
   b59ee:	2201      	movs	r2, #1
   b59f0:	462b      	mov	r3, r5
   b59f2:	a901      	add	r1, sp, #4
   b59f4:	f10d 0003 	add.w	r0, sp, #3
   b59f8:	f7ff fce9 	bl	b53ce <bmp3_set_regs>
   b59fc:	4604      	mov	r4, r0
            dev->delay_us(5000, dev->intf_ptr);
   b59fe:	696b      	ldr	r3, [r5, #20]
   b5a00:	6869      	ldr	r1, [r5, #4]
   b5a02:	f241 3088 	movw	r0, #5000	; 0x1388
   b5a06:	4798      	blx	r3
        if (rslt == BMP3_OK)
   b5a08:	bbd4      	cbnz	r4, b5a80 <bmp3_set_op_mode+0xd6>
            if (curr_mode == BMP3_MODE_NORMAL)
   b5a0a:	2e03      	cmp	r6, #3
   b5a0c:	d13b      	bne.n	b5a86 <bmp3_set_op_mode+0xdc>
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
   b5a0e:	2204      	movs	r2, #4
   b5a10:	462b      	mov	r3, r5
   b5a12:	eb0d 0102 	add.w	r1, sp, r2
   b5a16:	201c      	movs	r0, #28
   b5a18:	f7ff fc98 	bl	b534c <bmp3_get_regs>
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   b5a1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5a20:	f003 0207 	and.w	r2, r3, #7
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
   b5a24:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   b5a28:	f885 30b4 	strb.w	r3, [r5, #180]	; 0xb4
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   b5a2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
   b5a30:	f885 20b3 	strb.w	r2, [r5, #179]	; 0xb3
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
   b5a34:	f003 031f 	and.w	r3, r3, #31
   b5a38:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
   b5a3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b5a40:	f3c3 0342 	ubfx	r3, r3, #1, #3
   b5a44:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
    if (rslt == BMP3_OK)
   b5a48:	4604      	mov	r4, r0
   b5a4a:	b9c8      	cbnz	r0, b5a80 <bmp3_set_op_mode+0xd6>
        rslt = validate_osr_and_odr_settings(dev);
   b5a4c:	4628      	mov	r0, r5
   b5a4e:	f7ff fc2f 	bl	b52b0 <validate_osr_and_odr_settings>
    if (rslt == BMP3_OK)
   b5a52:	4604      	mov	r4, r0
   b5a54:	b9a0      	cbnz	r0, b5a80 <bmp3_set_op_mode+0xd6>
        rslt = write_power_mode(dev);
   b5a56:	4628      	mov	r0, r5
   b5a58:	f7ff fd01 	bl	b545e <write_power_mode>
        if (rslt == BMP3_OK)
   b5a5c:	4604      	mov	r4, r0
   b5a5e:	b978      	cbnz	r0, b5a80 <bmp3_set_op_mode+0xd6>
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
   b5a60:	462b      	mov	r3, r5
   b5a62:	2201      	movs	r2, #1
   b5a64:	a901      	add	r1, sp, #4
   b5a66:	2002      	movs	r0, #2
   b5a68:	f7ff fc70 	bl	b534c <bmp3_get_regs>
            if (rslt == BMP3_OK)
   b5a6c:	4604      	mov	r4, r0
   b5a6e:	b938      	cbnz	r0, b5a80 <bmp3_set_op_mode+0xd6>
                if (conf_err_status & BMP3_ERR_CONF)
   b5a70:	f89d 3004 	ldrb.w	r3, [sp, #4]
                    rslt = BMP3_E_CONFIGURATION_ERR;
   b5a74:	f013 0f04 	tst.w	r3, #4
   b5a78:	bf0c      	ite	eq
   b5a7a:	4604      	moveq	r4, r0
   b5a7c:	f06f 0404 	mvnne.w	r4, #4
}
   b5a80:	4620      	mov	r0, r4
   b5a82:	b002      	add	sp, #8
   b5a84:	bd70      	pop	{r4, r5, r6, pc}
            else if (curr_mode == BMP3_MODE_FORCED)
   b5a86:	2e01      	cmp	r6, #1
   b5a88:	d1fa      	bne.n	b5a80 <bmp3_set_op_mode+0xd6>
                rslt = write_power_mode(dev);
   b5a8a:	4628      	mov	r0, r5
   b5a8c:	f7ff fce7 	bl	b545e <write_power_mode>
   b5a90:	4604      	mov	r4, r0
    return rslt;
   b5a92:	e7f5      	b.n	b5a80 <bmp3_set_op_mode+0xd6>

000b5a94 <bmp3_get_sensor_data>:
{
   b5a94:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5a96:	b085      	sub	sp, #20
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   b5a98:	2300      	movs	r3, #0
{
   b5a9a:	4606      	mov	r6, r0
    rslt = null_ptr_check(dev);
   b5a9c:	4610      	mov	r0, r2
    struct bmp3_uncomp_data uncomp_data = { 0 };
   b5a9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
{
   b5aa2:	460d      	mov	r5, r1
   b5aa4:	4617      	mov	r7, r2
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
   b5aa6:	9300      	str	r3, [sp, #0]
   b5aa8:	f8ad 3004 	strh.w	r3, [sp, #4]
    rslt = null_ptr_check(dev);
   b5aac:	f7ff fb04 	bl	b50b8 <null_ptr_check>
    if ((rslt == BMP3_OK) && (comp_data != NULL))
   b5ab0:	bb30      	cbnz	r0, b5b00 <bmp3_get_sensor_data+0x6c>
   b5ab2:	b329      	cbz	r1, b5b00 <bmp3_get_sensor_data+0x6c>
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
   b5ab4:	4613      	mov	r3, r2
   b5ab6:	4669      	mov	r1, sp
   b5ab8:	2206      	movs	r2, #6
   b5aba:	2004      	movs	r0, #4
   b5abc:	f7ff fc46 	bl	b534c <bmp3_get_regs>
        if (rslt == BMP3_OK)
   b5ac0:	b9e0      	cbnz	r0, b5afc <bmp3_get_sensor_data+0x68>
    data_msb = (uint32_t)reg_data[2] << 16;
   b5ac2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    data_lsb = (uint32_t)reg_data[1] << 8;
   b5ac6:	f89d 2001 	ldrb.w	r2, [sp, #1]
    data_msb = (uint32_t)reg_data[5] << 16;
   b5aca:	f89d 4005 	ldrb.w	r4, [sp, #5]
    data_msb = (uint32_t)reg_data[2] << 16;
   b5ace:	041b      	lsls	r3, r3, #16
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   b5ad0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    data_xlsb = (uint32_t)reg_data[0];
   b5ad4:	f89d 2000 	ldrb.w	r2, [sp]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
   b5ad8:	4313      	orrs	r3, r2
   b5ada:	9302      	str	r3, [sp, #8]
    data_lsb = (uint32_t)reg_data[4] << 8;
   b5adc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    data_msb = (uint32_t)reg_data[5] << 16;
   b5ae0:	0424      	lsls	r4, r4, #16
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   b5ae2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    data_xlsb = (uint32_t)reg_data[3];
   b5ae6:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   b5aea:	462a      	mov	r2, r5
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   b5aec:	431c      	orrs	r4, r3
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   b5aee:	a902      	add	r1, sp, #8
   b5af0:	f107 0318 	add.w	r3, r7, #24
   b5af4:	4630      	mov	r0, r6
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
   b5af6:	9403      	str	r4, [sp, #12]
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
   b5af8:	f7ff faee 	bl	b50d8 <compensate_data>
}
   b5afc:	b005      	add	sp, #20
   b5afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rslt = BMP3_E_NULL_PTR;
   b5b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5b04:	e7fa      	b.n	b5afc <bmp3_get_sensor_data+0x68>

000b5b06 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b5b06:	4770      	bx	lr

000b5b08 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b5b08:	7c03      	ldrb	r3, [r0, #16]
   b5b0a:	f013 0308 	ands.w	r3, r3, #8
   b5b0e:	bf1e      	ittt	ne
   b5b10:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b5b12:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b5b14:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b5b16:	2b00      	cmp	r3, #0
  }
   b5b18:	bfac      	ite	ge
   b5b1a:	4618      	movge	r0, r3
   b5b1c:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b5b20:	4770      	bx	lr
	...

000b5b24 <_Z28anemometer_interrupt_handlerv>:
 * ======================================================================================================================
 */
#define ANEMOMETER_IRQ_PIN  A2
void anemometer_interrupt_handler()
{
  anemometer_interrupt_count++;
   b5b24:	4a02      	ldr	r2, [pc, #8]	; (b5b30 <_Z28anemometer_interrupt_handlerv+0xc>)
   b5b26:	6813      	ldr	r3, [r2, #0]
   b5b28:	3301      	adds	r3, #1
   b5b2a:	6013      	str	r3, [r2, #0]
}
   b5b2c:	4770      	bx	lr
   b5b2e:	bf00      	nop
   b5b30:	2002e0d0 	.word	0x2002e0d0

000b5b34 <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b5b34:	4770      	bx	lr

000b5b36 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b5b36:	b510      	push	{r4, lr}
  }
   b5b38:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5b3a:	4604      	mov	r4, r0
  }
   b5b3c:	f7ff faa5 	bl	b508a <_ZdlPvj>
   b5b40:	4620      	mov	r0, r4
   b5b42:	bd10      	pop	{r4, pc}

000b5b44 <_ZN4FileD0Ev>:
   b5b44:	b510      	push	{r4, lr}
   b5b46:	2134      	movs	r1, #52	; 0x34
   b5b48:	4604      	mov	r4, r0
   b5b4a:	f7ff fa9e 	bl	b508a <_ZdlPvj>
   b5b4e:	4620      	mov	r0, r4
   b5b50:	bd10      	pop	{r4, pc}

000b5b52 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b5b52:	3010      	adds	r0, #16
   b5b54:	f00d bd34 	b.w	c35c0 <_ZN7FatFile4syncEv>

000b5b58 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b5b58:	3010      	adds	r0, #16
   b5b5a:	f00d bc52 	b.w	c3402 <_ZN7FatFile4peekEv>

000b5b5e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b5b5e:	3010      	adds	r0, #16
   b5b60:	f00d bf4e 	b.w	c3a00 <_ZN7FatFile5writeEPKvj>

000b5b64 <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b5b64:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b5b66:	2201      	movs	r2, #1
   b5b68:	f88d 1007 	strb.w	r1, [sp, #7]
   b5b6c:	3010      	adds	r0, #16
   b5b6e:	f10d 0107 	add.w	r1, sp, #7
   b5b72:	f00d ff45 	bl	c3a00 <_ZN7FatFile5writeEPKvj>
  }
   b5b76:	b003      	add	sp, #12
   b5b78:	f85d fb04 	ldr.w	pc, [sp], #4

000b5b7c <_Z13callback_imsiiPKciPc>:
 * 
 * COMMAND: AT+CIMI   Note: Each line returned is a call to this callback function
 * SEE https://docs.particle.io/reference/device-os/api/cellular/command/
 * ======================================================================================================================
 */
int callback_imsi(int type, const char* buf, int len, char* cimi) {
   b5b7c:	b510      	push	{r4, lr}
   b5b7e:	4604      	mov	r4, r0
   b5b80:	461a      	mov	r2, r3
   b5b82:	4608      	mov	r0, r1
  // sprintf (msgbuf, "AT+CIMI:%X [%s]", type, buf); Output (msgbuf);     

  if ((type == TYPE_UNKNOWN) && cimi) {
   b5b84:	b934      	cbnz	r4, b5b94 <_Z13callback_imsiiPKciPc+0x18>
   b5b86:	b113      	cbz	r3, b5b8e <_Z13callback_imsiiPKciPc+0x12>
    if (sscanf(buf, "\r\n%[^\r]\r\n", cimi) == 1)
   b5b88:	4906      	ldr	r1, [pc, #24]	; (b5ba4 <_Z13callback_imsiiPKciPc+0x28>)
   b5b8a:	f00f fd91 	bl	c56b0 <sscanf>
  }

  if (type == TYPE_OK) {
    return (RESP_OK);
  }
  return (WAIT);
   b5b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5b92:	e006      	b.n	b5ba2 <_Z13callback_imsiiPKciPc+0x26>
    return (RESP_OK);
   b5b94:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
   b5b98:	bf14      	ite	ne
   b5b9a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b5b9e:	f06f 0001 	mvneq.w	r0, #1
}
   b5ba2:	bd10      	pop	{r4, pc}
   b5ba4:	000ca6fd 	.word	0x000ca6fd

000b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b5ba8:	b513      	push	{r0, r1, r4, lr}
   b5baa:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b5bac:	4608      	mov	r0, r1
   b5bae:	9101      	str	r1, [sp, #4]
   b5bb0:	f7ff fa24 	bl	b4ffc <strlen>
   b5bb4:	9901      	ldr	r1, [sp, #4]
   b5bb6:	4602      	mov	r2, r0
   b5bb8:	4620      	mov	r0, r4
}
   b5bba:	b002      	add	sp, #8
   b5bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b5bc0:	f010 bdda 	b.w	c6778 <_ZN5spark10JSONWriter5valueEPKcj>

000b5bc4 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5bc4:	6803      	ldr	r3, [r0, #0]
   b5bc6:	b2c9      	uxtb	r1, r1
   b5bc8:	689b      	ldr	r3, [r3, #8]
   b5bca:	4718      	bx	r3

000b5bcc <_ZN5Print6printfEPKcz>:

    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5bcc:	b40e      	push	{r1, r2, r3}
   b5bce:	b503      	push	{r0, r1, lr}
   b5bd0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b5bd2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5bd4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5bd8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5bda:	f010 ffb4 	bl	c6b46 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b5bde:	b002      	add	sp, #8
   b5be0:	f85d eb04 	ldr.w	lr, [sp], #4
   b5be4:	b003      	add	sp, #12
   b5be6:	4770      	bx	lr

000b5be8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b5be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5bea:	4604      	mov	r4, r0
   b5bec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b5bee:	7922      	ldrb	r2, [r4, #4]
   b5bf0:	68a3      	ldr	r3, [r4, #8]
   b5bf2:	b132      	cbz	r2, b5c02 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b5bf4:	b9a3      	cbnz	r3, b5c20 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b5bf6:	490b      	ldr	r1, [pc, #44]	; (b5c24 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b5bf8:	b002      	add	sp, #8
   b5bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b5bfe:	f010 bf63 	b.w	c6ac8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5c02:	4a09      	ldr	r2, [pc, #36]	; (b5c28 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5c04:	7b26      	ldrb	r6, [r4, #12]
   b5c06:	4d09      	ldr	r5, [pc, #36]	; (b5c2c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5c08:	4909      	ldr	r1, [pc, #36]	; (b5c30 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b5c0a:	7b64      	ldrb	r4, [r4, #13]
   b5c0c:	2e01      	cmp	r6, #1
   b5c0e:	bf18      	it	ne
   b5c10:	4629      	movne	r1, r5
   b5c12:	e9cd 1400 	strd	r1, r4, [sp]
   b5c16:	4907      	ldr	r1, [pc, #28]	; (b5c34 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5c18:	f7ff ffd8 	bl	b5bcc <_ZN5Print6printfEPKcz>
  }
   b5c1c:	b002      	add	sp, #8
   b5c1e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5c20:	4a05      	ldr	r2, [pc, #20]	; (b5c38 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5c22:	e7ef      	b.n	b5c04 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5c24:	000ca718 	.word	0x000ca718
   b5c28:	000cbdf3 	.word	0x000cbdf3
   b5c2c:	000ca714 	.word	0x000ca714
   b5c30:	000ca710 	.word	0x000ca710
   b5c34:	000ca72e 	.word	0x000ca72e
   b5c38:	000ca707 	.word	0x000ca707

000b5c3c <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b5c3c:	2300      	movs	r3, #0
   b5c3e:	6840      	ldr	r0, [r0, #4]
   b5c40:	461a      	mov	r2, r3
   b5c42:	4619      	mov	r1, r3
   b5c44:	f00f bcc4 	b.w	c55d0 <network_on>

000b5c48 <_ZN5spark13CellularClass3offEv>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b5c48:	2300      	movs	r3, #0
   b5c4a:	6840      	ldr	r0, [r0, #4]
   b5c4c:	461a      	mov	r2, r3
   b5c4e:	4619      	mov	r1, r3
   b5c50:	f00f bcc6 	b.w	c55e0 <network_off>

000b5c54 <_ZN11SystemClass6millisEv>:
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b5c54:	2000      	movs	r0, #0
   b5c56:	f00f ba0b 	b.w	c5070 <hal_timer_millis>
	...

000b5c5c <_Z28raingauge1_interrupt_handlerv>:
 *  raingauge1_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE1_IRQ_PIN A3
void raingauge1_interrupt_handler()
{
   b5c5c:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge1_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
   b5c5e:	4c0f      	ldr	r4, [pc, #60]	; (b5c9c <_Z28raingauge1_interrupt_handlerv+0x40>)
   b5c60:	f7ff fff8 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b5c64:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5c68:	1ac0      	subs	r0, r0, r3
   b5c6a:	f240 13f5 	movw	r3, #501	; 0x1f5
   b5c6e:	eb61 0102 	sbc.w	r1, r1, r2
   b5c72:	4298      	cmp	r0, r3
   b5c74:	f171 0300 	sbcs.w	r3, r1, #0
   b5c78:	d30f      	bcc.n	b5c9a <_Z28raingauge1_interrupt_handlerv+0x3e>
    raingauge1_interrupt_ltime = System.millis();
   b5c7a:	f7ff ffeb 	bl	b5c54 <_ZN11SystemClass6millisEv>
    raingauge1_interrupt_count++;
   b5c7e:	4a08      	ldr	r2, [pc, #32]	; (b5ca0 <_Z28raingauge1_interrupt_handlerv+0x44>)
   b5c80:	6813      	ldr	r3, [r2, #0]
   b5c82:	3301      	adds	r3, #1
   b5c84:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
   b5c86:	4b07      	ldr	r3, [pc, #28]	; (b5ca4 <_Z28raingauge1_interrupt_handlerv+0x48>)
    raingauge1_interrupt_ltime = System.millis();
   b5c88:	e9c4 0100 	strd	r0, r1, [r4]
    digitalWrite(LED_PIN, HIGH);
   b5c8c:	8818      	ldrh	r0, [r3, #0]
   b5c8e:	2101      	movs	r1, #1
   b5c90:	f011 fca3 	bl	c75da <digitalWrite>
    TurnLedOff = true;
   b5c94:	4b04      	ldr	r3, [pc, #16]	; (b5ca8 <_Z28raingauge1_interrupt_handlerv+0x4c>)
   b5c96:	2201      	movs	r2, #1
   b5c98:	701a      	strb	r2, [r3, #0]
  }   
}
   b5c9a:	bd10      	pop	{r4, pc}
   b5c9c:	2003e1e0 	.word	0x2003e1e0
   b5ca0:	2003e1dc 	.word	0x2003e1dc
   b5ca4:	2002d880 	.word	0x2002d880
   b5ca8:	2002df9f 	.word	0x2002df9f

000b5cac <_Z28raingauge2_interrupt_handlerv>:
 *  raingauge2_interrupt_handler() - This function is called whenever a magnet/interrupt is detected by the arduino
 * ======================================================================================================================
 */
#define RAINGAUGE2_IRQ_PIN   A4
void raingauge2_interrupt_handler()
{
   b5cac:	b510      	push	{r4, lr}
  if ((System.millis() - raingauge2_interrupt_ltime) > 500) { // Count tip if a half second has gone by since last interrupt
   b5cae:	4c0f      	ldr	r4, [pc, #60]	; (b5cec <_Z28raingauge2_interrupt_handlerv+0x40>)
   b5cb0:	f7ff ffd0 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b5cb4:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5cb8:	1ac0      	subs	r0, r0, r3
   b5cba:	f240 13f5 	movw	r3, #501	; 0x1f5
   b5cbe:	eb61 0102 	sbc.w	r1, r1, r2
   b5cc2:	4298      	cmp	r0, r3
   b5cc4:	f171 0300 	sbcs.w	r3, r1, #0
   b5cc8:	d30f      	bcc.n	b5cea <_Z28raingauge2_interrupt_handlerv+0x3e>
    raingauge2_interrupt_ltime = System.millis();
   b5cca:	f7ff ffc3 	bl	b5c54 <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_count++;
   b5cce:	4a08      	ldr	r2, [pc, #32]	; (b5cf0 <_Z28raingauge2_interrupt_handlerv+0x44>)
   b5cd0:	6813      	ldr	r3, [r2, #0]
   b5cd2:	3301      	adds	r3, #1
   b5cd4:	6013      	str	r3, [r2, #0]
    digitalWrite(LED_PIN, HIGH);
   b5cd6:	4b07      	ldr	r3, [pc, #28]	; (b5cf4 <_Z28raingauge2_interrupt_handlerv+0x48>)
    raingauge2_interrupt_ltime = System.millis();
   b5cd8:	e9c4 0100 	strd	r0, r1, [r4]
    digitalWrite(LED_PIN, HIGH);
   b5cdc:	8818      	ldrh	r0, [r3, #0]
   b5cde:	2101      	movs	r1, #1
   b5ce0:	f011 fc7b 	bl	c75da <digitalWrite>
    TurnLedOff = true;
   b5ce4:	4b04      	ldr	r3, [pc, #16]	; (b5cf8 <_Z28raingauge2_interrupt_handlerv+0x4c>)
   b5ce6:	2201      	movs	r2, #1
   b5ce8:	701a      	strb	r2, [r3, #0]
  }   
}
   b5cea:	bd10      	pop	{r4, pc}
   b5cec:	2003e1f8 	.word	0x2003e1f8
   b5cf0:	2003e1f0 	.word	0x2003e1f0
   b5cf4:	2002d880 	.word	0x2002d880
   b5cf8:	2002df9f 	.word	0x2002df9f

000b5cfc <_ZN5spark10JSONWriter4nameEPKc>:
inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
   b5cfc:	b513      	push	{r0, r1, r4, lr}
   b5cfe:	4604      	mov	r4, r0
    return this->name(name, strlen(name));
   b5d00:	4608      	mov	r0, r1
   b5d02:	9101      	str	r1, [sp, #4]
   b5d04:	f7ff f97a 	bl	b4ffc <strlen>
   b5d08:	9901      	ldr	r1, [sp, #4]
   b5d0a:	4602      	mov	r2, r0
   b5d0c:	4620      	mov	r0, r4
}
   b5d0e:	b002      	add	sp, #8
   b5d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return this->name(name, strlen(name));
   b5d14:	f010 bd20 	b.w	c6758 <_ZN5spark10JSONWriter4nameEPKcj>

000b5d18 <_ZN7FatFile6existsEPKc>:
  bool exists(const char* path) {
   b5d18:	b500      	push	{lr}
   b5d1a:	b08b      	sub	sp, #44	; 0x2c
   b5d1c:	460a      	mov	r2, r1
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5d1e:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b5d20:	4601      	mov	r1, r0
   b5d22:	a801      	add	r0, sp, #4
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5d24:	9301      	str	r3, [sp, #4]
    return file.open(this, path, O_RDONLY);
   b5d26:	f00d fc88 	bl	c363a <_ZN7FatFile4openEPS_PKci>
  }
   b5d2a:	b00b      	add	sp, #44	; 0x2c
   b5d2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d30 <_ZN7FatFile4readEv>:
  int read() {
   b5d30:	b507      	push	{r0, r1, r2, lr}
    return read(&b, 1) == 1 ? b : -1;
   b5d32:	2201      	movs	r2, #1
   b5d34:	f10d 0107 	add.w	r1, sp, #7
   b5d38:	f00d fab5 	bl	c32a6 <_ZN7FatFile4readEPvj>
   b5d3c:	2801      	cmp	r0, #1
   b5d3e:	bf0c      	ite	eq
   b5d40:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b5d44:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  }
   b5d48:	b003      	add	sp, #12
   b5d4a:	f85d fb04 	ldr.w	pc, [sp], #4

000b5d4e <_ZN4File4readEv>:
  int read() {
   b5d4e:	b508      	push	{r3, lr}
    return FatFile::read();
   b5d50:	3010      	adds	r0, #16
   b5d52:	f7ff ffed 	bl	b5d30 <_ZN7FatFile4readEv>
  }
   b5d56:	bd08      	pop	{r3, pc}

000b5d58 <_ZN4FileC1Ev>:
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5d58:	2200      	movs	r2, #0
   b5d5a:	8202      	strh	r2, [r0, #16]
    Print() : write_error(0) {}
   b5d5c:	6042      	str	r2, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5d5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5d62:	6082      	str	r2, [r0, #8]
  File() {}
   b5d64:	4a01      	ldr	r2, [pc, #4]	; (b5d6c <_ZN4FileC1Ev+0x14>)
   b5d66:	6002      	str	r2, [r0, #0]
   b5d68:	4770      	bx	lr
   b5d6a:	bf00      	nop
   b5d6c:	000cbea0 	.word	0x000cbea0

000b5d70 <_Z16I2C_Device_Existh>:
 * 
 *  The i2c_scanner uses the return value of the Write.endTransmisstion to see 
 *  if a device did acknowledge to the address.
 *=======================================================================================================================
 */
bool I2C_Device_Exist(byte address) {
   b5d70:	b507      	push	{r0, r1, r2, lr}
   b5d72:	9001      	str	r0, [sp, #4]
  byte error;

  Wire.begin();                     // Connect to I2C as Master (no addess is passed to signal being a slave)
   b5d74:	f011 fcc0 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b5d78:	f010 fa90 	bl	c629c <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(address);  // Begin a transmission to the I2C slave device with the given address. 
   b5d7c:	f011 fcbc 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b5d80:	9901      	ldr	r1, [sp, #4]
   b5d82:	f010 fac1 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
                                    // Subsequently, queue bytes for transmission with the write() function 
                                    // and transmit them by calling endTransmission(). 

  error = Wire.endTransmission();   // Ends a transmission to a slave device that was begun by beginTransmission() 
   b5d86:	f011 fcb7 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b5d8a:	f010 fae2 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  else {
    // sprintf (msgbuf, "I2CERR: %d", error);
    // Output (msgbuf);
    return (false);
  }
}
   b5d8e:	fab0 f080 	clz	r0, r0
   b5d92:	0940      	lsrs	r0, r0, #5
   b5d94:	b003      	add	sp, #12
   b5d96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5d9c <_Z5Blinkii>:
 * ======================================================================================================================
 * Blink() - Count, delay between, delay at end
 * ======================================================================================================================
 */
void Blink(int count, int between)
{
   b5d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c;

  for (c=0; c<count; c++) {
    digitalWrite(LED_PIN, HIGH);
   b5d9e:	4f0b      	ldr	r7, [pc, #44]	; (b5dcc <_Z5Blinkii+0x30>)
{
   b5da0:	4606      	mov	r6, r0
   b5da2:	460c      	mov	r4, r1
  for (c=0; c<count; c++) {
   b5da4:	2500      	movs	r5, #0
   b5da6:	42b5      	cmp	r5, r6
   b5da8:	da0f      	bge.n	b5dca <_Z5Blinkii+0x2e>
    digitalWrite(LED_PIN, HIGH);
   b5daa:	2101      	movs	r1, #1
   b5dac:	8838      	ldrh	r0, [r7, #0]
   b5dae:	f011 fc14 	bl	c75da <digitalWrite>
    delay(between);
   b5db2:	4620      	mov	r0, r4
   b5db4:	f00f fcbc 	bl	c5730 <delay>
    digitalWrite(LED_PIN, LOW);
   b5db8:	8838      	ldrh	r0, [r7, #0]
   b5dba:	2100      	movs	r1, #0
   b5dbc:	f011 fc0d 	bl	c75da <digitalWrite>
    delay(between);
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	f00f fcb5 	bl	c5730 <delay>
  for (c=0; c<count; c++) {
   b5dc6:	3501      	adds	r5, #1
   b5dc8:	e7ed      	b.n	b5da6 <_Z5Blinkii+0xa>
  }
}
   b5dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b5dcc:	2002d880 	.word	0x2002d880

000b5dd0 <_Z6mysortPjj>:
/*
 * ======================================================================================================================
 * mysort()
 * ======================================================================================================================
 */
void mysort(unsigned int a[], unsigned int n) { 
   b5dd0:	b530      	push	{r4, r5, lr}
  unsigned int i, j;

  for(i = 0;i < n-1;i++) {
   b5dd2:	3901      	subs	r1, #1
   b5dd4:	b171      	cbz	r1, b5df4 <_Z6mysortPjj+0x24>
   b5dd6:	4603      	mov	r3, r0
    for(j = 0;j < n-i-1;j++) {
   b5dd8:	2200      	movs	r2, #0
      if(a[j] > a[j+1])
   b5dda:	681c      	ldr	r4, [r3, #0]
   b5ddc:	685d      	ldr	r5, [r3, #4]
   b5dde:	42ac      	cmp	r4, r5
   b5de0:	f102 0201 	add.w	r2, r2, #1
   b5de4:	d901      	bls.n	b5dea <_Z6mysortPjj+0x1a>
  *q=t;
   b5de6:	e9c3 5400 	strd	r5, r4, [r3]
    for(j = 0;j < n-i-1;j++) {
   b5dea:	428a      	cmp	r2, r1
   b5dec:	f103 0304 	add.w	r3, r3, #4
   b5df0:	d3f3      	bcc.n	b5dda <_Z6mysortPjj+0xa>
   b5df2:	e7ee      	b.n	b5dd2 <_Z6mysortPjj+0x2>
        myswap(&a[j],&a[j+1]);
    }
  }
}
   b5df4:	bd30      	pop	{r4, r5, pc}
	...

000b5df8 <_Z13JPO_ClearBitsv>:
 * ======================================================================================================================
 * JPO_ClearBits() - Clear System Status Bits related to initialization
 * ======================================================================================================================
 */
void JPO_ClearBits() {
  if (JustPoweredOn) {
   b5df8:	4b08      	ldr	r3, [pc, #32]	; (b5e1c <_Z13JPO_ClearBitsv+0x24>)
   b5dfa:	781a      	ldrb	r2, [r3, #0]
   b5dfc:	b162      	cbz	r2, b5e18 <_Z13JPO_ClearBitsv+0x20>
    JustPoweredOn = false;
   b5dfe:	2200      	movs	r2, #0
   b5e00:	701a      	strb	r2, [r3, #0]
    SystemStatusBits &= ~SSB_BLX;     // Turn Off BLUX30 Not Found Bit
    SystemStatusBits &= ~SSB_LPS_1;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_LPS_2;   // Turn Off LPS35HW Not Found Bit
    SystemStatusBits &= ~SSB_TLW;     // Turn Off Tinovi Leaf Wetness Not Found Bit
    SystemStatusBits &= ~SSB_TSM;     // Turn Off Tinovi Soil Moisture Not Found Bit
    SystemStatusBits &= ~SSB_TMSM;    // Turn Off Tinovi MultiLevel Soil Moisture Not Found Bit
   b5e02:	4a07      	ldr	r2, [pc, #28]	; (b5e20 <_Z13JPO_ClearBitsv+0x28>)
   b5e04:	6813      	ldr	r3, [r2, #0]
   b5e06:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
   b5e0a:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
   b5e0e:	f423 6378 	bic.w	r3, r3, #3968	; 0xf80
   b5e12:	f023 0309 	bic.w	r3, r3, #9
   b5e16:	6013      	str	r3, [r2, #0]
  }
}
   b5e18:	4770      	bx	lr
   b5e1a:	bf00      	nop
   b5e1c:	2002d87e 	.word	0x2002d87e
   b5e20:	2002d908 	.word	0x2002d908

000b5e24 <_Z17OLED_sleepDisplayv>:
 * ======================================================================================================================
 * OLED_sleepDisplay()
 * ======================================================================================================================
 */
void OLED_sleepDisplay() {
  if (DisplayEnabled) {
   b5e24:	4b06      	ldr	r3, [pc, #24]	; (b5e40 <_Z17OLED_sleepDisplayv+0x1c>)
   b5e26:	781b      	ldrb	r3, [r3, #0]
   b5e28:	b143      	cbz	r3, b5e3c <_Z17OLED_sleepDisplayv+0x18>
    if (OLED32) {
   b5e2a:	4b06      	ldr	r3, [pc, #24]	; (b5e44 <_Z17OLED_sleepDisplayv+0x20>)
   b5e2c:	681b      	ldr	r3, [r3, #0]
   b5e2e:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
   b5e30:	bf0c      	ite	eq
   b5e32:	4805      	ldreq	r0, [pc, #20]	; (b5e48 <_Z17OLED_sleepDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYOFF);
   b5e34:	4805      	ldrne	r0, [pc, #20]	; (b5e4c <_Z17OLED_sleepDisplayv+0x28>)
      display32.ssd1306_command(SSD1306_DISPLAYOFF);
   b5e36:	21ae      	movs	r1, #174	; 0xae
      display64.ssd1306_command(SSD1306_DISPLAYOFF);
   b5e38:	f00b bcaf 	b.w	c179a <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
   b5e3c:	4770      	bx	lr
   b5e3e:	bf00      	nop
   b5e40:	2002d87d 	.word	0x2002d87d
   b5e44:	2003e1a0 	.word	0x2003e1a0
   b5e48:	2002e50c 	.word	0x2002e50c
   b5e4c:	2002e580 	.word	0x2002e580

000b5e50 <_Z16OLED_wakeDisplayv>:
 * ======================================================================================================================
 * OLED_wakeDisplay()
 * ======================================================================================================================
 */
void OLED_wakeDisplay() {
  if (DisplayEnabled) {
   b5e50:	4b06      	ldr	r3, [pc, #24]	; (b5e6c <_Z16OLED_wakeDisplayv+0x1c>)
   b5e52:	781b      	ldrb	r3, [r3, #0]
   b5e54:	b143      	cbz	r3, b5e68 <_Z16OLED_wakeDisplayv+0x18>
    if (OLED32) {
   b5e56:	4b06      	ldr	r3, [pc, #24]	; (b5e70 <_Z16OLED_wakeDisplayv+0x20>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	2b3c      	cmp	r3, #60	; 0x3c
      display32.ssd1306_command(SSD1306_DISPLAYON);
   b5e5c:	bf0c      	ite	eq
   b5e5e:	4805      	ldreq	r0, [pc, #20]	; (b5e74 <_Z16OLED_wakeDisplayv+0x24>)
    }
    else {
      display64.ssd1306_command(SSD1306_DISPLAYON);
   b5e60:	4805      	ldrne	r0, [pc, #20]	; (b5e78 <_Z16OLED_wakeDisplayv+0x28>)
      display32.ssd1306_command(SSD1306_DISPLAYON);
   b5e62:	21af      	movs	r1, #175	; 0xaf
      display64.ssd1306_command(SSD1306_DISPLAYON);
   b5e64:	f00b bc99 	b.w	c179a <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    }
  }
}
   b5e68:	4770      	bx	lr
   b5e6a:	bf00      	nop
   b5e6c:	2002d87d 	.word	0x2002d87d
   b5e70:	2003e1a0 	.word	0x2003e1a0
   b5e74:	2002e50c 	.word	0x2002e50c
   b5e78:	2002e580 	.word	0x2002e580

000b5e7c <_Z9OLED_spinv>:
/*
 * ======================================================================================================================
 * OLED_spin() 
 * ======================================================================================================================
 */
void OLED_spin() {
   b5e7c:	b570      	push	{r4, r5, r6, lr}
  static int spin=0;
    
  if (DisplayEnabled) {
   b5e7e:	4b24      	ldr	r3, [pc, #144]	; (b5f10 <_Z9OLED_spinv+0x94>)
   b5e80:	781b      	ldrb	r3, [r3, #0]
   b5e82:	2b00      	cmp	r3, #0
   b5e84:	d038      	beq.n	b5ef8 <_Z9OLED_spinv+0x7c>
    if (OLED32) {
   b5e86:	4e23      	ldr	r6, [pc, #140]	; (b5f14 <_Z9OLED_spinv+0x98>)
   b5e88:	4d23      	ldr	r5, [pc, #140]	; (b5f18 <_Z9OLED_spinv+0x9c>)
   b5e8a:	6833      	ldr	r3, [r6, #0]
   b5e8c:	2b3c      	cmp	r3, #60	; 0x3c
   b5e8e:	f04f 0301 	mov.w	r3, #1
   b5e92:	d112      	bne.n	b5eba <_Z9OLED_spinv+0x3e>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
   b5e94:	4c21      	ldr	r4, [pc, #132]	; (b5f1c <_Z9OLED_spinv+0xa0>)
    @param   c   16-bit 5-6-5 Color to draw text with
    @param   bg  16-bit 5-6-5 Color to draw background/fill with
  */
  /**********************************************************************/
  void setTextColor(uint16_t c, uint16_t bg) {
    textcolor = c;
   b5e96:	e9c4 5304 	strd	r5, r3, [r4, #16]
      display64.setTextColor(WHITE, BLACK); // Draw 'inverse' text
      display64.setCursor(120,24);
      display64.print(" ");
      display64.setCursor(120,24);
      display64.setCursor(120,56);
      display64.print(" ");
   b5e9a:	4620      	mov	r0, r4
   b5e9c:	4920      	ldr	r1, [pc, #128]	; (b5f20 <_Z9OLED_spinv+0xa4>)
   b5e9e:	f010 fe13 	bl	c6ac8 <_ZN5Print5printEPKc>
    cursor_x = x;
   b5ea2:	6125      	str	r5, [r4, #16]
      display64.setCursor(120,56);       
    } 
    switch (spin++) {
   b5ea4:	4c1f      	ldr	r4, [pc, #124]	; (b5f24 <_Z9OLED_spinv+0xa8>)
   b5ea6:	6822      	ldr	r2, [r4, #0]
   b5ea8:	1c53      	adds	r3, r2, #1
   b5eaa:	6023      	str	r3, [r4, #0]
   b5eac:	4b1e      	ldr	r3, [pc, #120]	; (b5f28 <_Z9OLED_spinv+0xac>)
   b5eae:	2a03      	cmp	r2, #3
   b5eb0:	d80f      	bhi.n	b5ed2 <_Z9OLED_spinv+0x56>
   b5eb2:	e8df f002 	tbb	[pc, r2]
   b5eb6:	220c      	.short	0x220c
   b5eb8:	2624      	.short	0x2624
   b5eba:	4c1c      	ldr	r4, [pc, #112]	; (b5f2c <_Z9OLED_spinv+0xb0>)
      display64.print(" ");
   b5ebc:	4918      	ldr	r1, [pc, #96]	; (b5f20 <_Z9OLED_spinv+0xa4>)
    textcolor = c;
   b5ebe:	e9c4 5304 	strd	r5, r3, [r4, #16]
   b5ec2:	4620      	mov	r0, r4
    cursor_x = x;
   b5ec4:	4d1a      	ldr	r5, [pc, #104]	; (b5f30 <_Z9OLED_spinv+0xb4>)
   b5ec6:	f010 fdff 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5eca:	6125      	str	r5, [r4, #16]
   b5ecc:	e7e5      	b.n	b5e9a <_Z9OLED_spinv+0x1e>
      case 0 : msgp = (char *) "|"; break;
   b5ece:	4a19      	ldr	r2, [pc, #100]	; (b5f34 <_Z9OLED_spinv+0xb8>)
      case 1 : msgp = (char *) "/"; break;
      case 2 : msgp = (char *) "-"; break;
      case 3 : msgp = (char *) "\\"; break;
   b5ed0:	601a      	str	r2, [r3, #0]
    }
    if (OLED32) {
      display32.print(msgp);
   b5ed2:	6819      	ldr	r1, [r3, #0]
    if (OLED32) {
   b5ed4:	6833      	ldr	r3, [r6, #0]
   b5ed6:	2b3c      	cmp	r3, #60	; 0x3c
   b5ed8:	d115      	bne.n	b5f06 <_Z9OLED_spinv+0x8a>
      display32.print(msgp);
   b5eda:	4810      	ldr	r0, [pc, #64]	; (b5f1c <_Z9OLED_spinv+0xa0>)
   b5edc:	f010 fdf4 	bl	c6ac8 <_ZN5Print5printEPKc>
      display32.display();
   b5ee0:	480e      	ldr	r0, [pc, #56]	; (b5f1c <_Z9OLED_spinv+0xa0>)
    }
    else {
      display64.print(msgp);
      display64.display();
   b5ee2:	f00b ff51 	bl	c1d88 <_ZN16Adafruit_SSD13067displayEv>
    }
    spin %= 4;
   b5ee6:	6823      	ldr	r3, [r4, #0]
   b5ee8:	425a      	negs	r2, r3
   b5eea:	f002 0203 	and.w	r2, r2, #3
   b5eee:	f003 0303 	and.w	r3, r3, #3
   b5ef2:	bf58      	it	pl
   b5ef4:	4253      	negpl	r3, r2
   b5ef6:	6023      	str	r3, [r4, #0]
  }
}
   b5ef8:	bd70      	pop	{r4, r5, r6, pc}
      case 1 : msgp = (char *) "/"; break;
   b5efa:	4a0f      	ldr	r2, [pc, #60]	; (b5f38 <_Z9OLED_spinv+0xbc>)
   b5efc:	e7e8      	b.n	b5ed0 <_Z9OLED_spinv+0x54>
      case 2 : msgp = (char *) "-"; break;
   b5efe:	4a0f      	ldr	r2, [pc, #60]	; (b5f3c <_Z9OLED_spinv+0xc0>)
   b5f00:	e7e6      	b.n	b5ed0 <_Z9OLED_spinv+0x54>
      case 3 : msgp = (char *) "\\"; break;
   b5f02:	4a0f      	ldr	r2, [pc, #60]	; (b5f40 <_Z9OLED_spinv+0xc4>)
   b5f04:	e7e4      	b.n	b5ed0 <_Z9OLED_spinv+0x54>
      display64.print(msgp);
   b5f06:	4809      	ldr	r0, [pc, #36]	; (b5f2c <_Z9OLED_spinv+0xb0>)
   b5f08:	f010 fdde 	bl	c6ac8 <_ZN5Print5printEPKc>
      display64.display();
   b5f0c:	4807      	ldr	r0, [pc, #28]	; (b5f2c <_Z9OLED_spinv+0xb0>)
   b5f0e:	e7e8      	b.n	b5ee2 <_Z9OLED_spinv+0x66>
   b5f10:	2002d87d 	.word	0x2002d87d
   b5f14:	2003e1a0 	.word	0x2003e1a0
   b5f18:	00180078 	.word	0x00180078
   b5f1c:	2002e50c 	.word	0x2002e50c
   b5f20:	000caffe 	.word	0x000caffe
   b5f24:	2002dfa4 	.word	0x2002dfa4
   b5f28:	20032cc0 	.word	0x20032cc0
   b5f2c:	2002e580 	.word	0x2002e580
   b5f30:	00380078 	.word	0x00380078
   b5f34:	000ca74b 	.word	0x000ca74b
   b5f38:	000ca74d 	.word	0x000ca74d
   b5f3c:	000ca74f 	.word	0x000ca74f
   b5f40:	000ca751 	.word	0x000ca751

000b5f44 <_Z11OLED_updatev>:
/*
 * ======================================================================================================================
 * OLED_update() -- Output oled in memory map to display
 * ======================================================================================================================
 */
void OLED_update() {  
   b5f44:	b538      	push	{r3, r4, r5, lr}
  if (DisplayEnabled) {
   b5f46:	4b33      	ldr	r3, [pc, #204]	; (b6014 <_Z11OLED_updatev+0xd0>)
   b5f48:	781b      	ldrb	r3, [r3, #0]
   b5f4a:	2b00      	cmp	r3, #0
   b5f4c:	d060      	beq.n	b6010 <_Z11OLED_updatev+0xcc>
    if (OLED32) {
   b5f4e:	4b32      	ldr	r3, [pc, #200]	; (b6018 <_Z11OLED_updatev+0xd4>)
   b5f50:	681b      	ldr	r3, [r3, #0]
   b5f52:	2b3c      	cmp	r3, #60	; 0x3c
   b5f54:	f04f 0500 	mov.w	r5, #0
   b5f58:	d122      	bne.n	b5fa0 <_Z11OLED_updatev+0x5c>
      display32.clearDisplay();
   b5f5a:	4c30      	ldr	r4, [pc, #192]	; (b601c <_Z11OLED_updatev+0xd8>)
   b5f5c:	4620      	mov	r0, r4
   b5f5e:	f00b fc48 	bl	c17f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setCursor(0,0);             // Start at top-left corner
      display32.print(oled_lines [0]);
   b5f62:	492f      	ldr	r1, [pc, #188]	; (b6020 <_Z11OLED_updatev+0xdc>)
   b5f64:	6125      	str	r5, [r4, #16]
   b5f66:	4620      	mov	r0, r4
   b5f68:	f010 fdae 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5f6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display32.setCursor(0,8);
      display32.print(oled_lines [1]);
   b5f70:	492c      	ldr	r1, [pc, #176]	; (b6024 <_Z11OLED_updatev+0xe0>)
   b5f72:	6123      	str	r3, [r4, #16]
   b5f74:	4620      	mov	r0, r4
   b5f76:	f010 fda7 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5f7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display32.setCursor(0,16);
      display32.print(oled_lines [2]);
   b5f7e:	492a      	ldr	r1, [pc, #168]	; (b6028 <_Z11OLED_updatev+0xe4>)
   b5f80:	6123      	str	r3, [r4, #16]
   b5f82:	4620      	mov	r0, r4
   b5f84:	f010 fda0 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5f88:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display32.setCursor(0,24);  
      display32.print(oled_lines [3]);
   b5f8c:	4927      	ldr	r1, [pc, #156]	; (b602c <_Z11OLED_updatev+0xe8>)
   b5f8e:	6123      	str	r3, [r4, #16]
      display64.setCursor(0,40);  
      display64.print(oled_lines [5]);
      display64.setCursor(0,48);  
      display64.print(oled_lines [6]);
      display64.setCursor(0,56);  
      display64.print(oled_lines [7]);
   b5f90:	4620      	mov	r0, r4
   b5f92:	f010 fd99 	bl	c6ac8 <_ZN5Print5printEPKc>
      display64.display();
   b5f96:	4620      	mov	r0, r4
     
    }
  }
}
   b5f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      display64.display();
   b5f9c:	f00b bef4 	b.w	c1d88 <_ZN16Adafruit_SSD13067displayEv>
      display64.clearDisplay();
   b5fa0:	4c23      	ldr	r4, [pc, #140]	; (b6030 <_Z11OLED_updatev+0xec>)
   b5fa2:	4620      	mov	r0, r4
   b5fa4:	f00b fc25 	bl	c17f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.print(oled_lines [0]);
   b5fa8:	491d      	ldr	r1, [pc, #116]	; (b6020 <_Z11OLED_updatev+0xdc>)
   b5faa:	6125      	str	r5, [r4, #16]
   b5fac:	4620      	mov	r0, r4
   b5fae:	f010 fd8b 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5fb2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
      display64.print(oled_lines [1]);
   b5fb6:	491b      	ldr	r1, [pc, #108]	; (b6024 <_Z11OLED_updatev+0xe0>)
   b5fb8:	6123      	str	r3, [r4, #16]
   b5fba:	4620      	mov	r0, r4
   b5fbc:	f010 fd84 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5fc0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
      display64.print(oled_lines [2]);
   b5fc4:	4918      	ldr	r1, [pc, #96]	; (b6028 <_Z11OLED_updatev+0xe4>)
   b5fc6:	6123      	str	r3, [r4, #16]
   b5fc8:	4620      	mov	r0, r4
   b5fca:	f010 fd7d 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5fce:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
      display64.print(oled_lines [3]);
   b5fd2:	4916      	ldr	r1, [pc, #88]	; (b602c <_Z11OLED_updatev+0xe8>)
   b5fd4:	6123      	str	r3, [r4, #16]
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	f010 fd76 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
      display64.print(oled_lines [4]);
   b5fe0:	4914      	ldr	r1, [pc, #80]	; (b6034 <_Z11OLED_updatev+0xf0>)
   b5fe2:	6123      	str	r3, [r4, #16]
   b5fe4:	4620      	mov	r0, r4
   b5fe6:	f010 fd6f 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5fea:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
      display64.print(oled_lines [5]);
   b5fee:	4912      	ldr	r1, [pc, #72]	; (b6038 <_Z11OLED_updatev+0xf4>)
   b5ff0:	6123      	str	r3, [r4, #16]
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	f010 fd68 	bl	c6ac8 <_ZN5Print5printEPKc>
   b5ff8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
      display64.print(oled_lines [6]);
   b5ffc:	490f      	ldr	r1, [pc, #60]	; (b603c <_Z11OLED_updatev+0xf8>)
   b5ffe:	6123      	str	r3, [r4, #16]
   b6000:	4620      	mov	r0, r4
   b6002:	f010 fd61 	bl	c6ac8 <_ZN5Print5printEPKc>
   b6006:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
      display64.print(oled_lines [7]);
   b600a:	490d      	ldr	r1, [pc, #52]	; (b6040 <_Z11OLED_updatev+0xfc>)
   b600c:	6123      	str	r3, [r4, #16]
   b600e:	e7bf      	b.n	b5f90 <_Z11OLED_updatev+0x4c>
}
   b6010:	bd38      	pop	{r3, r4, r5, pc}
   b6012:	bf00      	nop
   b6014:	2002d87d 	.word	0x2002d87d
   b6018:	2003e1a0 	.word	0x2003e1a0
   b601c:	2002e50c 	.word	0x2002e50c
   b6020:	2003e0e8 	.word	0x2003e0e8
   b6024:	2003e0ff 	.word	0x2003e0ff
   b6028:	2003e116 	.word	0x2003e116
   b602c:	2003e12d 	.word	0x2003e12d
   b6030:	2002e580 	.word	0x2002e580
   b6034:	2003e144 	.word	0x2003e144
   b6038:	2003e15b 	.word	0x2003e15b
   b603c:	2003e172 	.word	0x2003e172
   b6040:	2003e189 	.word	0x2003e189

000b6044 <_Z10OLED_writePKc>:
/*
 * ======================================================================================================================
 * OLED_write() 
 * ======================================================================================================================
 */
void OLED_write(const char *str) {
   b6044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int c, len, bottom_line = 3;
  
  if (DisplayEnabled) {
   b6046:	4b36      	ldr	r3, [pc, #216]	; (b6120 <_Z10OLED_writePKc+0xdc>)
   b6048:	781b      	ldrb	r3, [r3, #0]
void OLED_write(const char *str) {
   b604a:	4604      	mov	r4, r0
  if (DisplayEnabled) {
   b604c:	2b00      	cmp	r3, #0
   b604e:	d066      	beq.n	b611e <_Z10OLED_writePKc+0xda>
    // move lines up
    for (c=0; c<=21; c++) {
      oled_lines [0][c] = oled_lines [1][c];
      oled_lines [1][c] = oled_lines [2][c];
      oled_lines [2][c] = oled_lines [3][c];
      if (OLED64) {
   b6050:	4b34      	ldr	r3, [pc, #208]	; (b6124 <_Z10OLED_writePKc+0xe0>)
   b6052:	6819      	ldr	r1, [r3, #0]
      oled_lines [0][c] = oled_lines [1][c];
   b6054:	4b34      	ldr	r3, [pc, #208]	; (b6128 <_Z10OLED_writePKc+0xe4>)
   b6056:	f1a3 0217 	sub.w	r2, r3, #23
   b605a:	f103 0014 	add.w	r0, r3, #20
   b605e:	4615      	mov	r5, r2
   b6060:	f853 6b04 	ldr.w	r6, [r3], #4
   b6064:	f842 6b04 	str.w	r6, [r2], #4
   b6068:	4283      	cmp	r3, r0
   b606a:	d1f9      	bne.n	b6060 <_Z10OLED_writePKc+0x1c>
   b606c:	881b      	ldrh	r3, [r3, #0]
   b606e:	8013      	strh	r3, [r2, #0]
      oled_lines [1][c] = oled_lines [2][c];
   b6070:	4b2e      	ldr	r3, [pc, #184]	; (b612c <_Z10OLED_writePKc+0xe8>)
   b6072:	f1a3 0217 	sub.w	r2, r3, #23
   b6076:	f103 0014 	add.w	r0, r3, #20
   b607a:	f853 6b04 	ldr.w	r6, [r3], #4
   b607e:	f842 6b04 	str.w	r6, [r2], #4
   b6082:	4283      	cmp	r3, r0
   b6084:	d1f9      	bne.n	b607a <_Z10OLED_writePKc+0x36>
   b6086:	881b      	ldrh	r3, [r3, #0]
   b6088:	8013      	strh	r3, [r2, #0]
      oled_lines [2][c] = oled_lines [3][c];
   b608a:	4b29      	ldr	r3, [pc, #164]	; (b6130 <_Z10OLED_writePKc+0xec>)
   b608c:	f1a3 0217 	sub.w	r2, r3, #23
   b6090:	f103 0014 	add.w	r0, r3, #20
   b6094:	f853 6b04 	ldr.w	r6, [r3], #4
   b6098:	f842 6b04 	str.w	r6, [r2], #4
   b609c:	4283      	cmp	r3, r0
   b609e:	d1f9      	bne.n	b6094 <_Z10OLED_writePKc+0x50>
   b60a0:	881b      	ldrh	r3, [r3, #0]
   b60a2:	8013      	strh	r3, [r2, #0]
   b60a4:	4b23      	ldr	r3, [pc, #140]	; (b6134 <_Z10OLED_writePKc+0xf0>)
  int c, len, bottom_line = 3;
   b60a6:	2603      	movs	r6, #3
    for (c=0; c<=21; c++) {
   b60a8:	2200      	movs	r2, #0
      if (OLED64) {
   b60aa:	293d      	cmp	r1, #61	; 0x3d
   b60ac:	d110      	bne.n	b60d0 <_Z10OLED_writePKc+0x8c>
        oled_lines [3][c] = oled_lines [4][c];
   b60ae:	f893 005c 	ldrb.w	r0, [r3, #92]	; 0x5c
   b60b2:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
        oled_lines [4][c] = oled_lines [5][c];
   b60b6:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
   b60ba:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
        oled_lines [5][c] = oled_lines [6][c];  
   b60be:	f893 008a 	ldrb.w	r0, [r3, #138]	; 0x8a
   b60c2:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
        oled_lines [6][c] = oled_lines [7][c];  
   b60c6:	f893 00a1 	ldrb.w	r0, [r3, #161]	; 0xa1
   b60ca:	f883 008a 	strb.w	r0, [r3, #138]	; 0x8a
        bottom_line = 7;          
   b60ce:	2607      	movs	r6, #7
    for (c=0; c<=21; c++) {
   b60d0:	3201      	adds	r2, #1
   b60d2:	2a16      	cmp	r2, #22
   b60d4:	f103 0301 	add.w	r3, r3, #1
   b60d8:	d1e7      	bne.n	b60aa <_Z10OLED_writePKc+0x66>
      }
    }

    // check length on new output line string
    len = strlen (str);
   b60da:	4620      	mov	r0, r4
   b60dc:	f7fe ff8e 	bl	b4ffc <strlen>
    if (len>21) {
   b60e0:	2217      	movs	r2, #23
   b60e2:	2815      	cmp	r0, #21
   b60e4:	bfa8      	it	ge
   b60e6:	2015      	movge	r0, #21
      len = 21;
    }
    for (c=0; c<=len; c++) {
   b60e8:	4372      	muls	r2, r6
   b60ea:	1e63      	subs	r3, r4, #1
   b60ec:	18a9      	adds	r1, r5, r2
   b60ee:	4404      	add	r4, r0
      oled_lines [bottom_line][c] = *(str+c);
   b60f0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   b60f4:	f801 7b01 	strb.w	r7, [r1], #1
    for (c=0; c<=len; c++) {
   b60f8:	42a3      	cmp	r3, r4
   b60fa:	d1f9      	bne.n	b60f0 <_Z10OLED_writePKc+0xac>
   b60fc:	1c43      	adds	r3, r0, #1
    }

    // Adding Padding
    for (;c<=21; c++) {
      oled_lines [bottom_line][c] = ' ';
   b60fe:	4413      	add	r3, r2
   b6100:	2120      	movs	r1, #32
   b6102:	f1c0 0215 	rsb	r2, r0, #21
   b6106:	18e8      	adds	r0, r5, r3
   b6108:	f014 f85c 	bl	ca1c4 <memset>
    }
    oled_lines [bottom_line][22] = (char) NULL;
   b610c:	2317      	movs	r3, #23
   b610e:	fb03 5306 	mla	r3, r3, r6, r5
   b6112:	2200      	movs	r2, #0
   b6114:	759a      	strb	r2, [r3, #22]
    
    OLED_update();
  }
}
   b6116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_update();
   b611a:	f7ff bf13 	b.w	b5f44 <_Z11OLED_updatev>
}
   b611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6120:	2002d87d 	.word	0x2002d87d
   b6124:	2003e1a0 	.word	0x2003e1a0
   b6128:	2003e0ff 	.word	0x2003e0ff
   b612c:	2003e116 	.word	0x2003e116
   b6130:	2003e12d 	.word	0x2003e12d
   b6134:	2003e0e8 	.word	0x2003e0e8

000b6138 <_Z12Serial_writePKc>:
/*
 * ======================================================================================================================
 * Serial_write() 
 * ======================================================================================================================
 */
void Serial_write(const char *str) {
   b6138:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
   b613a:	4b07      	ldr	r3, [pc, #28]	; (b6158 <_Z12Serial_writePKc+0x20>)
   b613c:	781b      	ldrb	r3, [r3, #0]
   b613e:	b143      	cbz	r3, b6152 <_Z12Serial_writePKc+0x1a>
   b6140:	9001      	str	r0, [sp, #4]
    Serial.println(str);
   b6142:	f011 f921 	bl	c7388 <_Z16_fetch_usbserialv>
   b6146:	9901      	ldr	r1, [sp, #4]
  }
}
   b6148:	b003      	add	sp, #12
   b614a:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.println(str);
   b614e:	f010 bcd2 	b.w	c6af6 <_ZN5Print7printlnEPKc>
}
   b6152:	b003      	add	sp, #12
   b6154:	f85d fb04 	ldr.w	pc, [sp], #4
   b6158:	2002df8f 	.word	0x2002df8f

000b615c <_Z14Serial_writelnPKc>:
/*
 * ======================================================================================================================
 * Serial_writeln() 
 * ======================================================================================================================
 */
void Serial_writeln(const char *str) {
   b615c:	b507      	push	{r0, r1, r2, lr}
  if (SerialConsoleEnabled) {
   b615e:	4b0a      	ldr	r3, [pc, #40]	; (b6188 <_Z14Serial_writelnPKc+0x2c>)
   b6160:	781b      	ldrb	r3, [r3, #0]
   b6162:	b16b      	cbz	r3, b6180 <_Z14Serial_writelnPKc+0x24>
   b6164:	9001      	str	r0, [sp, #4]
    Serial.println(str);
   b6166:	f011 f90f 	bl	c7388 <_Z16_fetch_usbserialv>
   b616a:	9901      	ldr	r1, [sp, #4]
   b616c:	f010 fcc3 	bl	c6af6 <_ZN5Print7printlnEPKc>
    Serial.flush();
   b6170:	f011 f90a 	bl	c7388 <_Z16_fetch_usbserialv>
   b6174:	6803      	ldr	r3, [r0, #0]
   b6176:	69db      	ldr	r3, [r3, #28]
  }
}
   b6178:	b003      	add	sp, #12
   b617a:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.flush();
   b617e:	4718      	bx	r3
}
   b6180:	b003      	add	sp, #12
   b6182:	f85d fb04 	ldr.w	pc, [sp], #4
   b6186:	bf00      	nop
   b6188:	2002df8f 	.word	0x2002df8f

000b618c <_Z6OutputPKc>:
/*
 * ======================================================================================================================
 * Output()
 * ======================================================================================================================
 */
void Output(const char *str) {
   b618c:	b510      	push	{r4, lr}
   b618e:	4604      	mov	r4, r0
  OLED_write(str);
   b6190:	f7ff ff58 	bl	b6044 <_Z10OLED_writePKc>
  Serial_write(str);
   b6194:	4620      	mov	r0, r4
}
   b6196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial_write(str);
   b619a:	f7ff bfcd 	b.w	b6138 <_Z12Serial_writePKc>
	...

000b61a0 <_Z15OLED_initializev>:
/*
 * ======================================================================================================================
 * OLED_initialize() -- Initialize oled if enabled
 * ======================================================================================================================
 */
void OLED_initialize() {
   b61a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (DisplayEnabled) {
   b61a2:	4d30      	ldr	r5, [pc, #192]	; (b6264 <_Z15OLED_initializev+0xc4>)
   b61a4:	782b      	ldrb	r3, [r5, #0]
   b61a6:	2b00      	cmp	r3, #0
   b61a8:	d059      	beq.n	b625e <_Z15OLED_initializev+0xbe>
    if (I2C_Device_Exist (OLED32_I2C_ADDRESS)) {
   b61aa:	203c      	movs	r0, #60	; 0x3c
   b61ac:	f7ff fde0 	bl	b5d70 <_Z16I2C_Device_Existh>
   b61b0:	4604      	mov	r4, r0
   b61b2:	b318      	cbz	r0, b61fc <_Z15OLED_initializev+0x5c>
      oled_type = OLED32_I2C_ADDRESS;
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
   b61b4:	4c2c      	ldr	r4, [pc, #176]	; (b6268 <_Z15OLED_initializev+0xc8>)
      oled_type = OLED32_I2C_ADDRESS;
   b61b6:	4b2d      	ldr	r3, [pc, #180]	; (b626c <_Z15OLED_initializev+0xcc>)
   b61b8:	223c      	movs	r2, #60	; 0x3c
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
   b61ba:	2501      	movs	r5, #1
      oled_type = OLED32_I2C_ADDRESS;
   b61bc:	601a      	str	r2, [r3, #0]
      display32.begin(SSD1306_SWITCHCAPVCC, OLED32_I2C_ADDRESS);
   b61be:	2102      	movs	r1, #2
   b61c0:	462b      	mov	r3, r5
   b61c2:	9500      	str	r5, [sp, #0]
   b61c4:	4620      	mov	r0, r4
   b61c6:	f00b fb23 	bl	c1810 <_ZN16Adafruit_SSD13065beginEhhbb>
      display32.clearDisplay();
   b61ca:	4620      	mov	r0, r4
   b61cc:	f00b fb11 	bl	c17f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display32.setTextSize(1); // Draw 2X-scale text
   b61d0:	4620      	mov	r0, r4
   b61d2:	4629      	mov	r1, r5
   b61d4:	f00a fb13 	bl	c07fe <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b61d8:	2300      	movs	r3, #0
   b61da:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   b61de:	e9c4 3204 	strd	r3, r2, [r4, #16]
      display32.setTextColor(WHITE);
      display32.setCursor(0, 0);
      for (int r=0; r<4; r++) {
        oled_lines[r][0]=0;
   b61e2:	4a23      	ldr	r2, [pc, #140]	; (b6270 <_Z15OLED_initializev+0xd0>)
      }
      OLED_write("OLED32:OK");
   b61e4:	4823      	ldr	r0, [pc, #140]	; (b6274 <_Z15OLED_initializev+0xd4>)
        oled_lines[r][0]=0;
   b61e6:	7013      	strb	r3, [r2, #0]
   b61e8:	75d3      	strb	r3, [r2, #23]
   b61ea:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   b61ee:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    else {
      DisplayEnabled = false;
      SystemStatusBits |= SSB_OLED; // Turn on Bit
    }
  }
}
   b61f2:	b002      	add	sp, #8
   b61f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      OLED_write("OLED64:OK");
   b61f8:	f7ff bf24 	b.w	b6044 <_Z10OLED_writePKc>
    else if (I2C_Device_Exist (OLED64_I2C_ADDRESS)) {
   b61fc:	203d      	movs	r0, #61	; 0x3d
   b61fe:	f7ff fdb7 	bl	b5d70 <_Z16I2C_Device_Existh>
   b6202:	b330      	cbz	r0, b6252 <_Z15OLED_initializev+0xb2>
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
   b6204:	4d1c      	ldr	r5, [pc, #112]	; (b6278 <_Z15OLED_initializev+0xd8>)
      oled_type = OLED64_I2C_ADDRESS;
   b6206:	4b19      	ldr	r3, [pc, #100]	; (b626c <_Z15OLED_initializev+0xcc>)
   b6208:	223d      	movs	r2, #61	; 0x3d
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
   b620a:	2601      	movs	r6, #1
      oled_type = OLED64_I2C_ADDRESS;
   b620c:	601a      	str	r2, [r3, #0]
      display64.begin(SSD1306_SWITCHCAPVCC, OLED64_I2C_ADDRESS);
   b620e:	2102      	movs	r1, #2
   b6210:	4633      	mov	r3, r6
   b6212:	9600      	str	r6, [sp, #0]
   b6214:	4628      	mov	r0, r5
   b6216:	f00b fafb 	bl	c1810 <_ZN16Adafruit_SSD13065beginEhhbb>
      display64.clearDisplay();
   b621a:	4628      	mov	r0, r5
   b621c:	f00b fae9 	bl	c17f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
      display64.setTextSize(1); // Draw 2X-scale text
   b6220:	4628      	mov	r0, r5
   b6222:	4631      	mov	r1, r6
   b6224:	f00a faeb 	bl	c07fe <_ZN12Adafruit_GFX11setTextSizeEh>
   b6228:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b622c:	616b      	str	r3, [r5, #20]
        oled_lines[r][0]=0;
   b622e:	4b10      	ldr	r3, [pc, #64]	; (b6270 <_Z15OLED_initializev+0xd0>)
      OLED_write("OLED64:OK");
   b6230:	4812      	ldr	r0, [pc, #72]	; (b627c <_Z15OLED_initializev+0xdc>)
    cursor_x = x;
   b6232:	612c      	str	r4, [r5, #16]
        oled_lines[r][0]=0;
   b6234:	701c      	strb	r4, [r3, #0]
   b6236:	75dc      	strb	r4, [r3, #23]
   b6238:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
   b623c:	f883 4045 	strb.w	r4, [r3, #69]	; 0x45
   b6240:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
   b6244:	f883 4073 	strb.w	r4, [r3, #115]	; 0x73
   b6248:	f883 408a 	strb.w	r4, [r3, #138]	; 0x8a
   b624c:	f883 40a1 	strb.w	r4, [r3, #161]	; 0xa1
      OLED_write("OLED64:OK");
   b6250:	e7cf      	b.n	b61f2 <_Z15OLED_initializev+0x52>
      SystemStatusBits |= SSB_OLED; // Turn on Bit
   b6252:	4a0b      	ldr	r2, [pc, #44]	; (b6280 <_Z15OLED_initializev+0xe0>)
      DisplayEnabled = false;
   b6254:	7028      	strb	r0, [r5, #0]
      SystemStatusBits |= SSB_OLED; // Turn on Bit
   b6256:	6813      	ldr	r3, [r2, #0]
   b6258:	f043 0308 	orr.w	r3, r3, #8
   b625c:	6013      	str	r3, [r2, #0]
}
   b625e:	b002      	add	sp, #8
   b6260:	bd70      	pop	{r4, r5, r6, pc}
   b6262:	bf00      	nop
   b6264:	2002d87d 	.word	0x2002d87d
   b6268:	2002e50c 	.word	0x2002e50c
   b626c:	2003e1a0 	.word	0x2003e1a0
   b6270:	2003e0e8 	.word	0x2003e0e8
   b6274:	000ca753 	.word	0x000ca753
   b6278:	2002e580 	.word	0x2002e580
   b627c:	000ca75d 	.word	0x000ca75d
   b6280:	2002d908 	.word	0x2002d908

000b6284 <_Z13stc_timestampv>:
/* 
 *=======================================================================================================================
 * stc_timestamp() - Read from System Time Clock and set timestamp string
 *=======================================================================================================================
 */
void stc_timestamp() {
   b6284:	b570      	push	{r4, r5, r6, lr}
   b6286:	b086      	sub	sp, #24

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
   b6288:	f010 ffb4 	bl	c71f4 <_ZN9TimeClass4yearEv>
   b628c:	9005      	str	r0, [sp, #20]
   b628e:	f010 ffa9 	bl	c71e4 <_ZN9TimeClass5monthEv>
   b6292:	9004      	str	r0, [sp, #16]
   b6294:	f010 ff9a 	bl	c71cc <_ZN9TimeClass3dayEv>
   b6298:	4604      	mov	r4, r0
   b629a:	f010 ff73 	bl	c7184 <_ZN9TimeClass4hourEv>
   b629e:	4605      	mov	r5, r0
   b62a0:	f010 ff7c 	bl	c719c <_ZN9TimeClass6minuteEv>
   b62a4:	4606      	mov	r6, r0
   b62a6:	f010 ff85 	bl	c71b4 <_ZN9TimeClass6secondEv>
   b62aa:	e9cd 4500 	strd	r4, r5, [sp]
   b62ae:	e9cd 6002 	strd	r6, r0, [sp, #8]
   b62b2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b62b6:	4903      	ldr	r1, [pc, #12]	; (b62c4 <_Z13stc_timestampv+0x40>)
   b62b8:	4803      	ldr	r0, [pc, #12]	; (b62c8 <_Z13stc_timestampv+0x44>)
   b62ba:	f00f f9f1 	bl	c56a0 <sprintf>
    Time.year(), Time.month(), Time.day(),
    Time.hour(), Time.minute(), Time.second());
}
   b62be:	b006      	add	sp, #24
   b62c0:	bd70      	pop	{r4, r5, r6, pc}
   b62c2:	bf00      	nop
   b62c4:	000ca767 	.word	0x000ca767
   b62c8:	2003e364 	.word	0x2003e364

000b62cc <_Z13rtc_timestampv>:
/* 
 *=======================================================================================================================
 * rtc_timestamp() - Read from RTC and set timestamp string
 *=======================================================================================================================
 */
void rtc_timestamp() {
   b62cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  now = rtc.now(); //get the current date-time
   b62ce:	490e      	ldr	r1, [pc, #56]	; (b6308 <_Z13rtc_timestampv+0x3c>)
   b62d0:	a804      	add	r0, sp, #16
   b62d2:	f00c fefa 	bl	c30ca <_ZN11RTC_PCF85233nowEv>
   b62d6:	4b0d      	ldr	r3, [pc, #52]	; (b630c <_Z13rtc_timestampv+0x40>)
   b62d8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   b62dc:	809a      	strh	r2, [r3, #4]
   b62de:	9804      	ldr	r0, [sp, #16]
   b62e0:	6018      	str	r0, [r3, #0]

  // ISO_8601 Time Format
  sprintf (timestamp, "%d-%02d-%02dT%02d:%02d:%02d", 
   b62e2:	7959      	ldrb	r1, [r3, #5]

  /*!
      @brief  Return the year.
      @return Year (range: 2000--2099).
  */
  uint16_t year() const { return 2000U + yOff; }
   b62e4:	781a      	ldrb	r2, [r3, #0]
   b62e6:	9103      	str	r1, [sp, #12]
   b62e8:	7919      	ldrb	r1, [r3, #4]
   b62ea:	9102      	str	r1, [sp, #8]
   b62ec:	78d9      	ldrb	r1, [r3, #3]
   b62ee:	9101      	str	r1, [sp, #4]
   b62f0:	7899      	ldrb	r1, [r3, #2]
   b62f2:	9100      	str	r1, [sp, #0]
   b62f4:	785b      	ldrb	r3, [r3, #1]
   b62f6:	4906      	ldr	r1, [pc, #24]	; (b6310 <_Z13rtc_timestampv+0x44>)
   b62f8:	4806      	ldr	r0, [pc, #24]	; (b6314 <_Z13rtc_timestampv+0x48>)
   b62fa:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
   b62fe:	f00f f9cf 	bl	c56a0 <sprintf>
    now.year(), now.month(), now.day(),
    now.hour(), now.minute(), now.second());
}
   b6302:	b007      	add	sp, #28
   b6304:	f85d fb04 	ldr.w	pc, [sp], #4
   b6308:	2003e334 	.word	0x2003e334
   b630c:	20032cc4 	.word	0x20032cc4
   b6310:	000ca767 	.word	0x000ca767
   b6314:	2003e364 	.word	0x2003e364

000b6318 <_Z14rtc_initializev>:
/* 
 *=======================================================================================================================
 * rtc_initialize()
 *=======================================================================================================================
 */
void rtc_initialize() {
   b6318:	b537      	push	{r0, r1, r2, r4, r5, lr}

  if (!rtc.begin()) { // Always returns true
   b631a:	f011 f9ed 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b631e:	4601      	mov	r1, r0
   b6320:	4825      	ldr	r0, [pc, #148]	; (b63b8 <_Z14rtc_initializev+0xa0>)
   b6322:	f00c fe51 	bl	c2fc8 <_ZN11RTC_PCF85235beginEP7TwoWire>
   b6326:	b948      	cbnz	r0, b633c <_Z14rtc_initializev+0x24>
     Output("ERR:RTC NOT FOUND");
   b6328:	4824      	ldr	r0, [pc, #144]	; (b63bc <_Z14rtc_initializev+0xa4>)
   b632a:	f7ff ff2f 	bl	b618c <_Z6OutputPKc>
     SystemStatusBits |= SSB_RTC; // Turn on Bit
   b632e:	4a24      	ldr	r2, [pc, #144]	; (b63c0 <_Z14rtc_initializev+0xa8>)
   b6330:	6813      	ldr	r3, [r2, #0]
   b6332:	f043 0304 	orr.w	r3, r3, #4
   b6336:	6013      	str	r3, [r2, #0]
  }
  else {
    Output ("NEED GSM TIME->RTC");
    delay (5000); // Give the user some time to see this problem.
  }
}
   b6338:	b003      	add	sp, #12
   b633a:	bd30      	pop	{r4, r5, pc}
  if (!I2C_Device_Exist(PCF8523_ADDRESS)) {
   b633c:	2068      	movs	r0, #104	; 0x68
   b633e:	f7ff fd17 	bl	b5d70 <_Z16I2C_Device_Existh>
   b6342:	b970      	cbnz	r0, b6362 <_Z14rtc_initializev+0x4a>
    Output("ERR:RTC-I2C NOTFOUND");
   b6344:	481f      	ldr	r0, [pc, #124]	; (b63c4 <_Z14rtc_initializev+0xac>)
   b6346:	f7ff ff21 	bl	b618c <_Z6OutputPKc>
    SystemStatusBits |= SSB_RTC; // Turn on Bit
   b634a:	4a1d      	ldr	r2, [pc, #116]	; (b63c0 <_Z14rtc_initializev+0xa8>)
   b634c:	6813      	ldr	r3, [r2, #0]
   b634e:	f043 0304 	orr.w	r3, r3, #4
   b6352:	6013      	str	r3, [r2, #0]
    delay (5000); // Give the user some time to see this problem.
   b6354:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b6358:	b003      	add	sp, #12
   b635a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay (5000); // Give the user some time to see this problem.
   b635e:	f00f b9e7 	b.w	c5730 <delay>
  RTC_exists = true; // We have a clock hardware connected
   b6362:	4b19      	ldr	r3, [pc, #100]	; (b63c8 <_Z14rtc_initializev+0xb0>)
   b6364:	4c19      	ldr	r4, [pc, #100]	; (b63cc <_Z14rtc_initializev+0xb4>)
   b6366:	2501      	movs	r5, #1
   b6368:	701d      	strb	r5, [r3, #0]
  rtc_timestamp();
   b636a:	f7ff ffaf 	bl	b62cc <_Z13rtc_timestampv>
  sprintf (msgbuf, "%s*", timestamp);
   b636e:	4a18      	ldr	r2, [pc, #96]	; (b63d0 <_Z14rtc_initializev+0xb8>)
   b6370:	4918      	ldr	r1, [pc, #96]	; (b63d4 <_Z14rtc_initializev+0xbc>)
   b6372:	4819      	ldr	r0, [pc, #100]	; (b63d8 <_Z14rtc_initializev+0xc0>)
   b6374:	f00f f994 	bl	c56a0 <sprintf>
  Output (msgbuf);
   b6378:	4817      	ldr	r0, [pc, #92]	; (b63d8 <_Z14rtc_initializev+0xc0>)
   b637a:	f7ff ff07 	bl	b618c <_Z6OutputPKc>
   b637e:	7823      	ldrb	r3, [r4, #0]
  if ((now.year() >= 2023) && (now.year() <= 2031)) {
   b6380:	3b17      	subs	r3, #23
   b6382:	2b08      	cmp	r3, #8
   b6384:	d814      	bhi.n	b63b0 <_Z14rtc_initializev+0x98>
    Output("RTC:VALID");
   b6386:	4815      	ldr	r0, [pc, #84]	; (b63dc <_Z14rtc_initializev+0xc4>)
   b6388:	f7ff ff00 	bl	b618c <_Z6OutputPKc>
    now = rtc.now();
   b638c:	490a      	ldr	r1, [pc, #40]	; (b63b8 <_Z14rtc_initializev+0xa0>)
   b638e:	4668      	mov	r0, sp
   b6390:	f00c fe9b 	bl	c30ca <_ZN11RTC_PCF85233nowEv>
   b6394:	9800      	ldr	r0, [sp, #0]
   b6396:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b639a:	6020      	str	r0, [r4, #0]
    Time.setTime(now.unixtime()); // If RTC valid, we set STC.
   b639c:	4620      	mov	r0, r4
    now = rtc.now();
   b639e:	80a3      	strh	r3, [r4, #4]
    Time.setTime(now.unixtime()); // If RTC valid, we set STC.
   b63a0:	f00c fdfa 	bl	c2f98 <_ZNK8DateTime8unixtimeEv>
   b63a4:	2100      	movs	r1, #0
   b63a6:	f010 fead 	bl	c7104 <_ZN9TimeClass7setTimeEx>
    RTC_valid = true;
   b63aa:	4b0d      	ldr	r3, [pc, #52]	; (b63e0 <_Z14rtc_initializev+0xc8>)
   b63ac:	701d      	strb	r5, [r3, #0]
   b63ae:	e7c3      	b.n	b6338 <_Z14rtc_initializev+0x20>
    Output ("NEED GSM TIME->RTC");
   b63b0:	480c      	ldr	r0, [pc, #48]	; (b63e4 <_Z14rtc_initializev+0xcc>)
   b63b2:	f7ff feeb 	bl	b618c <_Z6OutputPKc>
   b63b6:	e7cd      	b.n	b6354 <_Z14rtc_initializev+0x3c>
   b63b8:	2003e334 	.word	0x2003e334
   b63bc:	000ca783 	.word	0x000ca783
   b63c0:	2002d908 	.word	0x2002d908
   b63c4:	000ca795 	.word	0x000ca795
   b63c8:	2002dacd 	.word	0x2002dacd
   b63cc:	20032cc4 	.word	0x20032cc4
   b63d0:	2003e364 	.word	0x2003e364
   b63d4:	000ca7aa 	.word	0x000ca7aa
   b63d8:	200328c0 	.word	0x200328c0
   b63dc:	000ca7ae 	.word	0x000ca7ae
   b63e0:	2002dace 	.word	0x2002dace
   b63e4:	000ca7b8 	.word	0x000ca7b8

000b63e8 <_Z15RTC_UpdateCheckv>:
/*
 * ======================================================================================================================
 * RTC_UpdateCheck() - Check if we need to Set or Update the RTC clock from the Cell Network   
 * ======================================================================================================================
 */
void RTC_UpdateCheck() {
   b63e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (RTC_exists && Particle.connected()) { 
   b63ec:	4b4f      	ldr	r3, [pc, #316]	; (b652c <_Z15RTC_UpdateCheckv+0x144>)
   b63ee:	781b      	ldrb	r3, [r3, #0]
void RTC_UpdateCheck() {
   b63f0:	b087      	sub	sp, #28
  if (RTC_exists && Particle.connected()) { 
   b63f2:	b36b      	cbz	r3, b6450 <_Z15RTC_UpdateCheckv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b63f4:	f00f f88c 	bl	c5510 <spark_cloud_flag_connected>
   b63f8:	b350      	cbz	r0, b6450 <_Z15RTC_UpdateCheckv+0x68>
    // Wer have a RTC and We have connected to the Cell network at some point
    if (!RTC_valid) {
   b63fa:	4f4d      	ldr	r7, [pc, #308]	; (b6530 <_Z15RTC_UpdateCheckv+0x148>)
   b63fc:	783b      	ldrb	r3, [r7, #0]
   b63fe:	bb53      	cbnz	r3, b6456 <_Z15RTC_UpdateCheckv+0x6e>
      // Set Uninitialized RTC from STC. Which has been set from the Cloud
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
   b6400:	f010 fef8 	bl	c71f4 <_ZN9TimeClass4yearEv>
   b6404:	4606      	mov	r6, r0
   b6406:	f010 feed 	bl	c71e4 <_ZN9TimeClass5monthEv>
   b640a:	4680      	mov	r8, r0
   b640c:	f010 fede 	bl	c71cc <_ZN9TimeClass3dayEv>
   b6410:	4681      	mov	r9, r0
   b6412:	f010 feb7 	bl	c7184 <_ZN9TimeClass4hourEv>
   b6416:	4604      	mov	r4, r0
   b6418:	f010 fec0 	bl	c719c <_ZN9TimeClass6minuteEv>
   b641c:	4605      	mov	r5, r0
   b641e:	f010 fec9 	bl	c71b4 <_ZN9TimeClass6secondEv>
   b6422:	b2ed      	uxtb	r5, r5
   b6424:	b2c0      	uxtb	r0, r0
   b6426:	b2e4      	uxtb	r4, r4
   b6428:	fa5f f389 	uxtb.w	r3, r9
   b642c:	fa5f f288 	uxtb.w	r2, r8
   b6430:	9002      	str	r0, [sp, #8]
   b6432:	b2b1      	uxth	r1, r6
   b6434:	9501      	str	r5, [sp, #4]
   b6436:	9400      	str	r4, [sp, #0]
   b6438:	a804      	add	r0, sp, #16
   b643a:	f00c fd99 	bl	c2f70 <_ZN8DateTimeC1Ethhhhh>
   b643e:	483d      	ldr	r0, [pc, #244]	; (b6534 <_Z15RTC_UpdateCheckv+0x14c>)
   b6440:	a904      	add	r1, sp, #16
   b6442:	f00c fdd2 	bl	c2fea <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: Set");
   b6446:	483c      	ldr	r0, [pc, #240]	; (b6538 <_Z15RTC_UpdateCheckv+0x150>)
   b6448:	f7ff fea0 	bl	b618c <_Z6OutputPKc>
      RTC_valid = true;
   b644c:	2301      	movs	r3, #1
   b644e:	703b      	strb	r3, [r7, #0]
      sprintf (msgbuf, "%s*", timestamp);
      Output (msgbuf);
      LastTimeUpdate = System.millis();
    }
  }
   b6450:	b007      	add	sp, #28
   b6452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (LastTimeUpdate == 0){
   b6456:	4c39      	ldr	r4, [pc, #228]	; (b653c <_Z15RTC_UpdateCheckv+0x154>)
   b6458:	e9d4 2300 	ldrd	r2, r3, [r4]
   b645c:	4313      	orrs	r3, r2
   b645e:	d134      	bne.n	b64ca <_Z15RTC_UpdateCheckv+0xe2>
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
   b6460:	f010 fec8 	bl	c71f4 <_ZN9TimeClass4yearEv>
   b6464:	4607      	mov	r7, r0
   b6466:	f010 febd 	bl	c71e4 <_ZN9TimeClass5monthEv>
   b646a:	4680      	mov	r8, r0
   b646c:	f010 feae 	bl	c71cc <_ZN9TimeClass3dayEv>
   b6470:	4681      	mov	r9, r0
   b6472:	f010 fe87 	bl	c7184 <_ZN9TimeClass4hourEv>
   b6476:	4605      	mov	r5, r0
   b6478:	f010 fe90 	bl	c719c <_ZN9TimeClass6minuteEv>
   b647c:	4606      	mov	r6, r0
   b647e:	f010 fe99 	bl	c71b4 <_ZN9TimeClass6secondEv>
   b6482:	b2f6      	uxtb	r6, r6
   b6484:	b2c0      	uxtb	r0, r0
   b6486:	b2ed      	uxtb	r5, r5
   b6488:	9002      	str	r0, [sp, #8]
   b648a:	fa5f f389 	uxtb.w	r3, r9
   b648e:	fa5f f288 	uxtb.w	r2, r8
   b6492:	b2b9      	uxth	r1, r7
   b6494:	9601      	str	r6, [sp, #4]
   b6496:	9500      	str	r5, [sp, #0]
   b6498:	a804      	add	r0, sp, #16
   b649a:	f00c fd69 	bl	c2f70 <_ZN8DateTimeC1Ethhhhh>
   b649e:	4825      	ldr	r0, [pc, #148]	; (b6534 <_Z15RTC_UpdateCheckv+0x14c>)
   b64a0:	a904      	add	r1, sp, #16
   b64a2:	f00c fda2 	bl	c2fea <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: 1ST SYNC");
   b64a6:	4826      	ldr	r0, [pc, #152]	; (b6540 <_Z15RTC_UpdateCheckv+0x158>)
      Output("RTC: 2HR SYNC");
   b64a8:	f7ff fe70 	bl	b618c <_Z6OutputPKc>
      rtc_timestamp();
   b64ac:	f7ff ff0e 	bl	b62cc <_Z13rtc_timestampv>
      sprintf (msgbuf, "%s*", timestamp);
   b64b0:	4a24      	ldr	r2, [pc, #144]	; (b6544 <_Z15RTC_UpdateCheckv+0x15c>)
   b64b2:	4925      	ldr	r1, [pc, #148]	; (b6548 <_Z15RTC_UpdateCheckv+0x160>)
   b64b4:	4825      	ldr	r0, [pc, #148]	; (b654c <_Z15RTC_UpdateCheckv+0x164>)
   b64b6:	f00f f8f3 	bl	c56a0 <sprintf>
      Output (msgbuf);
   b64ba:	4824      	ldr	r0, [pc, #144]	; (b654c <_Z15RTC_UpdateCheckv+0x164>)
   b64bc:	f7ff fe66 	bl	b618c <_Z6OutputPKc>
      LastTimeUpdate = System.millis();
   b64c0:	f7ff fbc8 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b64c4:	e9c4 0100 	strd	r0, r1, [r4]
   b64c8:	e7c2      	b.n	b6450 <_Z15RTC_UpdateCheckv+0x68>
    else if ((System.millis() - LastTimeUpdate) >= 2*3600*1000) {  // It's been 2 hours since last RTC update
   b64ca:	f7ff fbc3 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b64ce:	e9d4 3200 	ldrd	r3, r2, [r4]
   b64d2:	1ac0      	subs	r0, r0, r3
   b64d4:	4b1e      	ldr	r3, [pc, #120]	; (b6550 <_Z15RTC_UpdateCheckv+0x168>)
   b64d6:	eb61 0102 	sbc.w	r1, r1, r2
   b64da:	4298      	cmp	r0, r3
   b64dc:	f171 0300 	sbcs.w	r3, r1, #0
   b64e0:	d3b6      	bcc.n	b6450 <_Z15RTC_UpdateCheckv+0x68>
      rtc.adjust(DateTime(Time.year(), Time.month(), Time.day(), Time.hour(), Time.minute(), Time.second() ));
   b64e2:	f010 fe87 	bl	c71f4 <_ZN9TimeClass4yearEv>
   b64e6:	4607      	mov	r7, r0
   b64e8:	f010 fe7c 	bl	c71e4 <_ZN9TimeClass5monthEv>
   b64ec:	4680      	mov	r8, r0
   b64ee:	f010 fe6d 	bl	c71cc <_ZN9TimeClass3dayEv>
   b64f2:	4681      	mov	r9, r0
   b64f4:	f010 fe46 	bl	c7184 <_ZN9TimeClass4hourEv>
   b64f8:	4605      	mov	r5, r0
   b64fa:	f010 fe4f 	bl	c719c <_ZN9TimeClass6minuteEv>
   b64fe:	4606      	mov	r6, r0
   b6500:	f010 fe58 	bl	c71b4 <_ZN9TimeClass6secondEv>
   b6504:	b2f6      	uxtb	r6, r6
   b6506:	b2c0      	uxtb	r0, r0
   b6508:	b2ed      	uxtb	r5, r5
   b650a:	9002      	str	r0, [sp, #8]
   b650c:	fa5f f389 	uxtb.w	r3, r9
   b6510:	fa5f f288 	uxtb.w	r2, r8
   b6514:	b2b9      	uxth	r1, r7
   b6516:	9601      	str	r6, [sp, #4]
   b6518:	9500      	str	r5, [sp, #0]
   b651a:	a804      	add	r0, sp, #16
   b651c:	f00c fd28 	bl	c2f70 <_ZN8DateTimeC1Ethhhhh>
   b6520:	4804      	ldr	r0, [pc, #16]	; (b6534 <_Z15RTC_UpdateCheckv+0x14c>)
   b6522:	a904      	add	r1, sp, #16
   b6524:	f00c fd61 	bl	c2fea <_ZN11RTC_PCF85236adjustERK8DateTime>
      Output("RTC: 2HR SYNC");
   b6528:	480a      	ldr	r0, [pc, #40]	; (b6554 <_Z15RTC_UpdateCheckv+0x16c>)
   b652a:	e7bd      	b.n	b64a8 <_Z15RTC_UpdateCheckv+0xc0>
   b652c:	2002dacd 	.word	0x2002dacd
   b6530:	2002dace 	.word	0x2002dace
   b6534:	2003e334 	.word	0x2003e334
   b6538:	000ca7cb 	.word	0x000ca7cb
   b653c:	2002dab8 	.word	0x2002dab8
   b6540:	000ca7d4 	.word	0x000ca7d4
   b6544:	2003e364 	.word	0x2003e364
   b6548:	000ca7aa 	.word	0x000ca7aa
   b654c:	200328c0 	.word	0x200328c0
   b6550:	006ddd00 	.word	0x006ddd00
   b6554:	000ca7e2 	.word	0x000ca7e2

000b6558 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>:
 *=======================================================================================================================
 * lora_relay_msg_free()
 *=======================================================================================================================
 */
void lora_relay_msg_free(LORA_MSG_RELAY_STR *m) {
  m->need2log = false;
   b6558:	2100      	movs	r1, #0
   b655a:	7001      	strb	r1, [r0, #0]
  m->message_type = 0;
   b655c:	6041      	str	r1, [r0, #4]
  memset (m->message, 0, LORA_RELAY_MSG_LENGTH);
   b655e:	f44f 7280 	mov.w	r2, #256	; 0x100
   b6562:	3008      	adds	r0, #8
   b6564:	f013 be2e 	b.w	ca1c4 <memset>

000b6568 <_Z19lora_relay_need2logv>:
 * lora_relay_need2log() - Return true if we have a relay that needs to be logged
 *=======================================================================================================================
 */
bool lora_relay_need2log() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
    if (lora_msg_relay[i].need2log) {
   b6568:	4905      	ldr	r1, [pc, #20]	; (b6580 <_Z19lora_relay_need2logv+0x18>)
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b656a:	2300      	movs	r3, #0
    if (lora_msg_relay[i].need2log) {
   b656c:	f44f 7284 	mov.w	r2, #264	; 0x108
   b6570:	fb02 f003 	mul.w	r0, r2, r3
   b6574:	5c40      	ldrb	r0, [r0, r1]
   b6576:	b910      	cbnz	r0, b657e <_Z19lora_relay_need2logv+0x16>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b6578:	3301      	adds	r3, #1
   b657a:	2b40      	cmp	r3, #64	; 0x40
   b657c:	d1f8      	bne.n	b6570 <_Z19lora_relay_need2logv+0x8>
      return (true);
    }
  }
  return(false);
}
   b657e:	4770      	bx	lr
   b6580:	2002e658 	.word	0x2002e658

000b6584 <_Z19lora_relay_notinusev>:
 * lora_relay_notinuse() - return first open spot or -1 if full
 *=======================================================================================================================
 */
int lora_relay_notinuse() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
    if (!lora_msg_relay[i].need2log) {
   b6584:	4a06      	ldr	r2, [pc, #24]	; (b65a0 <_Z19lora_relay_notinusev+0x1c>)
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b6586:	2000      	movs	r0, #0
    if (!lora_msg_relay[i].need2log) {
   b6588:	f44f 7384 	mov.w	r3, #264	; 0x108
   b658c:	fb03 f100 	mul.w	r1, r3, r0
   b6590:	5c89      	ldrb	r1, [r1, r2]
   b6592:	b121      	cbz	r1, b659e <_Z19lora_relay_notinusev+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b6594:	3001      	adds	r0, #1
   b6596:	2840      	cmp	r0, #64	; 0x40
   b6598:	d1f8      	bne.n	b658c <_Z19lora_relay_notinusev+0x8>
      return (i);
    }
  }
  return(-1);
   b659a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b659e:	4770      	bx	lr
   b65a0:	2002e658 	.word	0x2002e658

000b65a4 <_Z23lora_relay_need2log_idxv>:
 * lora_relay_need2log_idx() - return first need2log spot or -1 if none
 *=======================================================================================================================
 */
int lora_relay_need2log_idx() {
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
    if (lora_msg_relay[i].need2log) {
   b65a4:	4a06      	ldr	r2, [pc, #24]	; (b65c0 <_Z23lora_relay_need2log_idxv+0x1c>)
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b65a6:	2000      	movs	r0, #0
    if (lora_msg_relay[i].need2log) {
   b65a8:	f44f 7384 	mov.w	r3, #264	; 0x108
   b65ac:	fb03 f100 	mul.w	r1, r3, r0
   b65b0:	5c89      	ldrb	r1, [r1, r2]
   b65b2:	b921      	cbnz	r1, b65be <_Z23lora_relay_need2log_idxv+0x1a>
  for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b65b4:	3001      	adds	r0, #1
   b65b6:	2840      	cmp	r0, #64	; 0x40
   b65b8:	d1f8      	bne.n	b65ac <_Z23lora_relay_need2log_idxv+0x8>
      return (i);
    }
  }
  return(-1);
   b65ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b65be:	4770      	bx	lr
   b65c0:	2002e658 	.word	0x2002e658

000b65c4 <_Z22lora_device_initializev>:
/* 
 *=======================================================================================================================
 * lora_device_initialize()
 *=======================================================================================================================
 */
void lora_device_initialize() {
   b65c4:	b538      	push	{r3, r4, r5, lr}
  if (LORA_exists) {
   b65c6:	4b07      	ldr	r3, [pc, #28]	; (b65e4 <_Z22lora_device_initializev+0x20>)
   b65c8:	781b      	ldrb	r3, [r3, #0]
   b65ca:	b14b      	cbz	r3, b65e0 <_Z22lora_device_initializev+0x1c>
   b65cc:	4d06      	ldr	r5, [pc, #24]	; (b65e8 <_Z22lora_device_initializev+0x24>)
    // Init LoRa Relay Message structure
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b65ce:	2400      	movs	r4, #0
      lora_relay_msg_free(&lora_msg_relay[i]);
   b65d0:	4628      	mov	r0, r5
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b65d2:	3401      	adds	r4, #1
      lora_relay_msg_free(&lora_msg_relay[i]);
   b65d4:	f7ff ffc0 	bl	b6558 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b65d8:	2c40      	cmp	r4, #64	; 0x40
   b65da:	f505 7584 	add.w	r5, r5, #264	; 0x108
   b65de:	d1f7      	bne.n	b65d0 <_Z22lora_device_initializev+0xc>
    }
  }
}
   b65e0:	bd38      	pop	{r3, r4, r5, pc}
   b65e2:	bf00      	nop
   b65e4:	2002dab1 	.word	0x2002dab1
   b65e8:	2002e658 	.word	0x2002e658

000b65ec <_Z16lora_cf_validatev>:
/* 
 *=======================================================================================================================
 * lora_cf_validate() - Validate LoRa variables from CONFIG.TXT
 *=======================================================================================================================
 */
bool lora_cf_validate() {
   b65ec:	b570      	push	{r4, r5, r6, lr}
  if (cf_aes_pkey == NULL) {
   b65ee:	4b2a      	ldr	r3, [pc, #168]	; (b6698 <_Z16lora_cf_validatev+0xac>)
   b65f0:	681d      	ldr	r5, [r3, #0]
   b65f2:	b925      	cbnz	r5, b65fe <_Z16lora_cf_validatev+0x12>
    Output ("AES PKEY !SET");
   b65f4:	4829      	ldr	r0, [pc, #164]	; (b669c <_Z16lora_cf_validatev+0xb0>)
    return (false);
  }
  else if (strlen (cf_aes_pkey) != 16) {
    Output ("AES PKEY !16 Bytes");
   b65f6:	f7ff fdc9 	bl	b618c <_Z6OutputPKc>
    return (false);    
   b65fa:	2000      	movs	r0, #0
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);

    Output ("LORA CFV OK");
    return (true);
  }
}
   b65fc:	bd70      	pop	{r4, r5, r6, pc}
  else if (strlen (cf_aes_pkey) != 16) {
   b65fe:	4628      	mov	r0, r5
   b6600:	f7fe fcfc 	bl	b4ffc <strlen>
   b6604:	2810      	cmp	r0, #16
   b6606:	d001      	beq.n	b660c <_Z16lora_cf_validatev+0x20>
    Output ("AES PKEY !16 Bytes");
   b6608:	4825      	ldr	r0, [pc, #148]	; (b66a0 <_Z16lora_cf_validatev+0xb4>)
   b660a:	e7f4      	b.n	b65f6 <_Z16lora_cf_validatev+0xa>
  else if (cf_aes_myiv == 0) {
   b660c:	4e25      	ldr	r6, [pc, #148]	; (b66a4 <_Z16lora_cf_validatev+0xb8>)
   b660e:	6834      	ldr	r4, [r6, #0]
   b6610:	b90c      	cbnz	r4, b6616 <_Z16lora_cf_validatev+0x2a>
    Output ("AES MYIV !SET");
   b6612:	4825      	ldr	r0, [pc, #148]	; (b66a8 <_Z16lora_cf_validatev+0xbc>)
   b6614:	e7ef      	b.n	b65f6 <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_txpower<5) || (cf_lora_txpower>23)) {
   b6616:	4b25      	ldr	r3, [pc, #148]	; (b66ac <_Z16lora_cf_validatev+0xc0>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	3b05      	subs	r3, #5
   b661c:	2b12      	cmp	r3, #18
   b661e:	d901      	bls.n	b6624 <_Z16lora_cf_validatev+0x38>
    Output ("LORA PWR ERR");
   b6620:	4823      	ldr	r0, [pc, #140]	; (b66b0 <_Z16lora_cf_validatev+0xc4>)
   b6622:	e7e8      	b.n	b65f6 <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_freq!=915) && (cf_lora_freq!=866) && (cf_lora_freq!=433)) {
   b6624:	4b23      	ldr	r3, [pc, #140]	; (b66b4 <_Z16lora_cf_validatev+0xc8>)
   b6626:	681b      	ldr	r3, [r3, #0]
   b6628:	f240 3293 	movw	r2, #915	; 0x393
   b662c:	4293      	cmp	r3, r2
   b662e:	d009      	beq.n	b6644 <_Z16lora_cf_validatev+0x58>
   b6630:	f240 3262 	movw	r2, #866	; 0x362
   b6634:	4293      	cmp	r3, r2
   b6636:	d005      	beq.n	b6644 <_Z16lora_cf_validatev+0x58>
   b6638:	f240 12b1 	movw	r2, #433	; 0x1b1
   b663c:	4293      	cmp	r3, r2
   b663e:	d001      	beq.n	b6644 <_Z16lora_cf_validatev+0x58>
    Output ("LORA FREQ ERR");
   b6640:	481d      	ldr	r0, [pc, #116]	; (b66b8 <_Z16lora_cf_validatev+0xcc>)
   b6642:	e7d8      	b.n	b65f6 <_Z16lora_cf_validatev+0xa>
  else if ((cf_lora_unitid<0) || (cf_lora_unitid>254)) {
   b6644:	4b1d      	ldr	r3, [pc, #116]	; (b66bc <_Z16lora_cf_validatev+0xd0>)
   b6646:	681b      	ldr	r3, [r3, #0]
   b6648:	2bfe      	cmp	r3, #254	; 0xfe
   b664a:	d901      	bls.n	b6650 <_Z16lora_cf_validatev+0x64>
    Output ("LORA ADDR ERR");
   b664c:	481c      	ldr	r0, [pc, #112]	; (b66c0 <_Z16lora_cf_validatev+0xd4>)
   b664e:	e7d2      	b.n	b65f6 <_Z16lora_cf_validatev+0xa>
    memcpy ((char *)AES_KEY, cf_aes_pkey, 16);
   b6650:	4a1c      	ldr	r2, [pc, #112]	; (b66c4 <_Z16lora_cf_validatev+0xd8>)
   b6652:	462b      	mov	r3, r5
   b6654:	f105 0110 	add.w	r1, r5, #16
   b6658:	f853 0b04 	ldr.w	r0, [r3], #4
   b665c:	f842 0b04 	str.w	r0, [r2], #4
   b6660:	428b      	cmp	r3, r1
   b6662:	d1f9      	bne.n	b6658 <_Z16lora_cf_validatev+0x6c>
    sprintf(msgbuf, "AES_KEY[%s]", cf_aes_pkey); Output (msgbuf);
   b6664:	4918      	ldr	r1, [pc, #96]	; (b66c8 <_Z16lora_cf_validatev+0xdc>)
   b6666:	4819      	ldr	r0, [pc, #100]	; (b66cc <_Z16lora_cf_validatev+0xe0>)
   b6668:	462a      	mov	r2, r5
   b666a:	f00f f819 	bl	c56a0 <sprintf>
   b666e:	4817      	ldr	r0, [pc, #92]	; (b66cc <_Z16lora_cf_validatev+0xe0>)
   b6670:	f7ff fd8c 	bl	b618c <_Z6OutputPKc>
    AES_MYIV=cf_aes_myiv;
   b6674:	6832      	ldr	r2, [r6, #0]
   b6676:	4916      	ldr	r1, [pc, #88]	; (b66d0 <_Z16lora_cf_validatev+0xe4>)
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
   b6678:	4814      	ldr	r0, [pc, #80]	; (b66cc <_Z16lora_cf_validatev+0xe0>)
    AES_MYIV=cf_aes_myiv;
   b667a:	17d3      	asrs	r3, r2, #31
   b667c:	e9c1 2300 	strd	r2, r3, [r1]
    sprintf(msgbuf, "AES_MYIV[%u]", AES_MYIV); Output (msgbuf);
   b6680:	4914      	ldr	r1, [pc, #80]	; (b66d4 <_Z16lora_cf_validatev+0xe8>)
   b6682:	f00f f80d 	bl	c56a0 <sprintf>
   b6686:	4811      	ldr	r0, [pc, #68]	; (b66cc <_Z16lora_cf_validatev+0xe0>)
   b6688:	f7ff fd80 	bl	b618c <_Z6OutputPKc>
    Output ("LORA CFV OK");
   b668c:	4812      	ldr	r0, [pc, #72]	; (b66d8 <_Z16lora_cf_validatev+0xec>)
   b668e:	f7ff fd7d 	bl	b618c <_Z6OutputPKc>
    return (true);
   b6692:	2001      	movs	r0, #1
   b6694:	e7b2      	b.n	b65fc <_Z16lora_cf_validatev+0x10>
   b6696:	bf00      	nop
   b6698:	2002e414 	.word	0x2002e414
   b669c:	000ca7f0 	.word	0x000ca7f0
   b66a0:	000ca7fe 	.word	0x000ca7fe
   b66a4:	2002e410 	.word	0x2002e410
   b66a8:	000ca811 	.word	0x000ca811
   b66ac:	2002d924 	.word	0x2002d924
   b66b0:	000ca81f 	.word	0x000ca81f
   b66b4:	2002d920 	.word	0x2002d920
   b66b8:	000ca82c 	.word	0x000ca82c
   b66bc:	2002d928 	.word	0x2002d928
   b66c0:	000ca83a 	.word	0x000ca83a
   b66c4:	2002da64 	.word	0x2002da64
   b66c8:	000ca848 	.word	0x000ca848
   b66cc:	200328c0 	.word	0x200328c0
   b66d0:	2002da78 	.word	0x2002da78
   b66d4:	000ca854 	.word	0x000ca854
   b66d8:	000ca861 	.word	0x000ca861

000b66dc <_Z16get_Bosch_ChipIDh>:
 *   Chip ID BME280 = 0x60 temp, pressure, humidity - I2C ADDRESS 0x77  (SD0 to GND = 0x76)  Register 0xE0 = Reset
 *   Chip ID BMP388 = 0x50 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *   Chip ID BMP390 = 0x60 temp, pressure           - I2C ADDRESS 0x77  (SD0 to GND = 0x76)
 *=======================================================================================================================
 */
byte get_Bosch_ChipID (byte address) {
   b66dc:	b570      	push	{r4, r5, r6, lr}
   b66de:	4605      	mov	r5, r0
  byte chip_id = 0;
  byte error;

  Output ("get_Bosch_ChipID()");
   b66e0:	4848      	ldr	r0, [pc, #288]	; (b6804 <_Z16get_Bosch_ChipIDh+0x128>)
   b66e2:	f7ff fd53 	bl	b618c <_Z6OutputPKc>

  // Important! Need to check the 0x00 register first. Doing a 0x0D (not chip id loaction) on a bmp388 
  // will return a value that could match one of the IDs 

  // Check Register 0x00
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0x00);
   b66e6:	462a      	mov	r2, r5
   b66e8:	2300      	movs	r3, #0
   b66ea:	4947      	ldr	r1, [pc, #284]	; (b6808 <_Z16get_Bosch_ChipIDh+0x12c>)
   b66ec:	4847      	ldr	r0, [pc, #284]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b66ee:	f00e ffd7 	bl	c56a0 <sprintf>
  Output (msgbuf);
   b66f2:	4846      	ldr	r0, [pc, #280]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b66f4:	f7ff fd4a 	bl	b618c <_Z6OutputPKc>
  Wire.begin();
   b66f8:	f010 fffe 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b66fc:	f00f fdce 	bl	c629c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
   b6700:	f010 fffa 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6704:	4629      	mov	r1, r5
   b6706:	f00f fdff 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x00);  // BM3 CHIPID REGISTER
   b670a:	f010 fff5 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b670e:	2100      	movs	r1, #0
   b6710:	f7ff fa58 	bl	b5bc4 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
   b6714:	f010 fff0 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6718:	f00f fe1b 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
   b671c:	4602      	mov	r2, r0
   b671e:	b370      	cbz	r0, b677e <_Z16get_Bosch_ChipIDh+0xa2>
    sprintf (msgbuf, "  ERR_ET:%d", error);
   b6720:	493b      	ldr	r1, [pc, #236]	; (b6810 <_Z16get_Bosch_ChipIDh+0x134>)
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
      Output (msgbuf);
      return (chip_id); // Found a Sensor!   
    }
    else {
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
   b6722:	483a      	ldr	r0, [pc, #232]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b6724:	f00e ffbc 	bl	c56a0 <sprintf>
      Output (msgbuf);      
    }
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
   b6728:	4838      	ldr	r0, [pc, #224]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b672a:	f7ff fd2f 	bl	b618c <_Z6OutputPKc>
  }

  // Check Register 0xD0
  chip_id = 0;
  sprintf (msgbuf, "  I2C:%02X Reg:%02X", address, 0xD0);
   b672e:	23d0      	movs	r3, #208	; 0xd0
   b6730:	462a      	mov	r2, r5
   b6732:	4935      	ldr	r1, [pc, #212]	; (b6808 <_Z16get_Bosch_ChipIDh+0x12c>)
   b6734:	4835      	ldr	r0, [pc, #212]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b6736:	f00e ffb3 	bl	c56a0 <sprintf>
  Output (msgbuf);
   b673a:	4834      	ldr	r0, [pc, #208]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b673c:	f7ff fd26 	bl	b618c <_Z6OutputPKc>
  Wire.begin();
   b6740:	f010 ffda 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6744:	f00f fdaa 	bl	c629c <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(address);
   b6748:	f010 ffd6 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b674c:	4629      	mov	r1, r5
   b674e:	f00f fddb 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0xD0);  // BM2 CHIPID REGISTER
   b6752:	f010 ffd1 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6756:	21d0      	movs	r1, #208	; 0xd0
   b6758:	f7ff fa34 	bl	b5bc4 <_ZN7TwoWire5writeEi.isra.0>
  error = Wire.endTransmission();
   b675c:	f010 ffcc 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6760:	f00f fdf7 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    //  0:success
    //  1:data too long to fit in transmit buffer
    //  2:received NACK on transmit of address
    //  3:received NACK on transmit of data
    //  4:other error 
  if (error) {
   b6764:	2800      	cmp	r0, #0
   b6766:	d031      	beq.n	b67cc <_Z16get_Bosch_ChipIDh+0xf0>
    sprintf (msgbuf, "  ERR_ET:%d", error);
   b6768:	4929      	ldr	r1, [pc, #164]	; (b6810 <_Z16get_Bosch_ChipIDh+0x134>)
   b676a:	4602      	mov	r2, r0
   b676c:	4827      	ldr	r0, [pc, #156]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b676e:	f00e ff97 	bl	c56a0 <sprintf>
    Output (msgbuf);
   b6772:	4826      	ldr	r0, [pc, #152]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b6774:	f7ff fd0a 	bl	b618c <_Z6OutputPKc>
  }
  else {
    sprintf (msgbuf, "  ERR_RF:0");
    Output (msgbuf);
  }
  return(0);
   b6778:	2400      	movs	r4, #0
}
   b677a:	4620      	mov	r0, r4
   b677c:	bd70      	pop	{r4, r5, r6, pc}
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
   b677e:	f010 ffbb 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6782:	2201      	movs	r2, #1
   b6784:	4629      	mov	r1, r5
   b6786:	f00f fdbc 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   b678a:	b1d0      	cbz	r0, b67c2 <_Z16get_Bosch_ChipIDh+0xe6>
    chip_id = Wire.read();
   b678c:	f010 ffb4 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6790:	6803      	ldr	r3, [r0, #0]
   b6792:	695b      	ldr	r3, [r3, #20]
   b6794:	4798      	blx	r3
   b6796:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
   b6798:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
   b679a:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
   b679c:	d101      	bne.n	b67a2 <_Z16get_Bosch_ChipIDh+0xc6>
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
   b679e:	491d      	ldr	r1, [pc, #116]	; (b6814 <_Z16get_Bosch_ChipIDh+0x138>)
   b67a0:	e002      	b.n	b67a8 <_Z16get_Bosch_ChipIDh+0xcc>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
   b67a2:	2c50      	cmp	r4, #80	; 0x50
   b67a4:	d107      	bne.n	b67b6 <_Z16get_Bosch_ChipIDh+0xda>
      sprintf (msgbuf, "  CHIPID:%02X BMP388", chip_id);
   b67a6:	491c      	ldr	r1, [pc, #112]	; (b6818 <_Z16get_Bosch_ChipIDh+0x13c>)
   b67a8:	4818      	ldr	r0, [pc, #96]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b67aa:	f00e ff79 	bl	c56a0 <sprintf>
    Output (msgbuf);
   b67ae:	4817      	ldr	r0, [pc, #92]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b67b0:	f7ff fcec 	bl	b618c <_Z6OutputPKc>
   b67b4:	e7e1      	b.n	b677a <_Z16get_Bosch_ChipIDh+0x9e>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
   b67b6:	2c60      	cmp	r4, #96	; 0x60
   b67b8:	d101      	bne.n	b67be <_Z16get_Bosch_ChipIDh+0xe2>
      sprintf (msgbuf, "  CHIPID:%02X BME/390", chip_id);
   b67ba:	4918      	ldr	r1, [pc, #96]	; (b681c <_Z16get_Bosch_ChipIDh+0x140>)
   b67bc:	e7f4      	b.n	b67a8 <_Z16get_Bosch_ChipIDh+0xcc>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
   b67be:	4918      	ldr	r1, [pc, #96]	; (b6820 <_Z16get_Bosch_ChipIDh+0x144>)
   b67c0:	e7af      	b.n	b6722 <_Z16get_Bosch_ChipIDh+0x46>
    sprintf (msgbuf, "  ERR_RF:0");
   b67c2:	4918      	ldr	r1, [pc, #96]	; (b6824 <_Z16get_Bosch_ChipIDh+0x148>)
   b67c4:	4811      	ldr	r0, [pc, #68]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b67c6:	f013 fd71 	bl	ca2ac <strcpy>
   b67ca:	e7ad      	b.n	b6728 <_Z16get_Bosch_ChipIDh+0x4c>
  else if (Wire.requestFrom(address, 1)) {  // Returns the number of bytes returned from the slave device 
   b67cc:	f010 ff94 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b67d0:	2201      	movs	r2, #1
   b67d2:	4629      	mov	r1, r5
   b67d4:	f00f fd95 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   b67d8:	4604      	mov	r4, r0
   b67da:	b170      	cbz	r0, b67fa <_Z16get_Bosch_ChipIDh+0x11e>
    chip_id = Wire.read(); 
   b67dc:	f010 ff8c 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b67e0:	6803      	ldr	r3, [r0, #0]
   b67e2:	695b      	ldr	r3, [r3, #20]
   b67e4:	4798      	blx	r3
   b67e6:	b2c4      	uxtb	r4, r0
    if (chip_id == BMP280_CHIP_ID) { // 0x58
   b67e8:	2c58      	cmp	r4, #88	; 0x58
      sprintf (msgbuf, "  CHIPID:%02X BMP280", chip_id);
   b67ea:	4622      	mov	r2, r4
    if (chip_id == BMP280_CHIP_ID) { // 0x58
   b67ec:	d0d7      	beq.n	b679e <_Z16get_Bosch_ChipIDh+0xc2>
    else if (chip_id == BMP388_CHIP_ID) {  // 0x50
   b67ee:	2c50      	cmp	r4, #80	; 0x50
   b67f0:	d0d9      	beq.n	b67a6 <_Z16get_Bosch_ChipIDh+0xca>
    else if (chip_id == BME280_BMP390_CHIP_ID) {  // 0x60
   b67f2:	2c60      	cmp	r4, #96	; 0x60
   b67f4:	d0e1      	beq.n	b67ba <_Z16get_Bosch_ChipIDh+0xde>
      sprintf (msgbuf, "  CHIPID:%02X InValid", chip_id);
   b67f6:	490a      	ldr	r1, [pc, #40]	; (b6820 <_Z16get_Bosch_ChipIDh+0x144>)
   b67f8:	e7b8      	b.n	b676c <_Z16get_Bosch_ChipIDh+0x90>
    sprintf (msgbuf, "  ERR_RF:0");
   b67fa:	490a      	ldr	r1, [pc, #40]	; (b6824 <_Z16get_Bosch_ChipIDh+0x148>)
   b67fc:	4803      	ldr	r0, [pc, #12]	; (b680c <_Z16get_Bosch_ChipIDh+0x130>)
   b67fe:	f013 fd55 	bl	ca2ac <strcpy>
   b6802:	e7d4      	b.n	b67ae <_Z16get_Bosch_ChipIDh+0xd2>
   b6804:	000ca86d 	.word	0x000ca86d
   b6808:	000ca880 	.word	0x000ca880
   b680c:	200328c0 	.word	0x200328c0
   b6810:	000ca894 	.word	0x000ca894
   b6814:	000ca8a0 	.word	0x000ca8a0
   b6818:	000ca8b5 	.word	0x000ca8b5
   b681c:	000ca8ca 	.word	0x000ca8ca
   b6820:	000ca8e0 	.word	0x000ca8e0
   b6824:	000ca8f6 	.word	0x000ca8f6

000b6828 <_Z14bmx_initializev>:
/* 
 *=======================================================================================================================
 * bmx_initialize() - Bosch sensor initialize
 *=======================================================================================================================
 */
void bmx_initialize() {
   b6828:	b538      	push	{r3, r4, r5, lr}
  Output("BMX:INIT");
   b682a:	486e      	ldr	r0, [pc, #440]	; (b69e4 <_Z14bmx_initializev+0x1bc>)
   b682c:	4c6e      	ldr	r4, [pc, #440]	; (b69e8 <_Z14bmx_initializev+0x1c0>)
   b682e:	f7ff fcad 	bl	b618c <_Z6OutputPKc>
  
  // 1st Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
   b6832:	2077      	movs	r0, #119	; 0x77
   b6834:	f7ff ff52 	bl	b66dc <_Z16get_Bosch_ChipIDh>
   b6838:	4b6c      	ldr	r3, [pc, #432]	; (b69ec <_Z14bmx_initializev+0x1c4>)

  switch (BMX_1_chip_id) {
   b683a:	2858      	cmp	r0, #88	; 0x58
  BMX_1_chip_id = get_Bosch_ChipID(BMX_ADDRESS_1);
   b683c:	4602      	mov	r2, r0
   b683e:	7018      	strb	r0, [r3, #0]
  switch (BMX_1_chip_id) {
   b6840:	d011      	beq.n	b6866 <_Z14bmx_initializev+0x3e>
   b6842:	2860      	cmp	r0, #96	; 0x60
   b6844:	d046      	beq.n	b68d4 <_Z14bmx_initializev+0xac>
   b6846:	2850      	cmp	r0, #80	; 0x50
   b6848:	d176      	bne.n	b6938 <_Z14bmx_initializev+0x110>
        float p = bme1.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm31.begin_I2C(BMX_ADDRESS_1)) { 
   b684a:	f010 ff55 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b684e:	2177      	movs	r1, #119	; 0x77
   b6850:	4602      	mov	r2, r0
   b6852:	4867      	ldr	r0, [pc, #412]	; (b69f0 <_Z14bmx_initializev+0x1c8>)
   b6854:	f009 f88e 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b6858:	4b66      	ldr	r3, [pc, #408]	; (b69f4 <_Z14bmx_initializev+0x1cc>)
   b685a:	2800      	cmp	r0, #0
   b685c:	d165      	bne.n	b692a <_Z14bmx_initializev+0x102>
        msgp = (char *) "BM31 ERR";
   b685e:	4a66      	ldr	r2, [pc, #408]	; (b69f8 <_Z14bmx_initializev+0x1d0>)
   b6860:	6022      	str	r2, [r4, #0]
        BMX_1_exists = false;
   b6862:	7018      	strb	r0, [r3, #0]
   b6864:	e008      	b.n	b6878 <_Z14bmx_initializev+0x50>
      if (!bmp1.begin(BMX_ADDRESS_1)) { 
   b6866:	4865      	ldr	r0, [pc, #404]	; (b69fc <_Z14bmx_initializev+0x1d4>)
   b6868:	2177      	movs	r1, #119	; 0x77
   b686a:	f008 fe7f 	bl	bf56c <_ZN15Adafruit_BMP2805beginEhh>
   b686e:	4a61      	ldr	r2, [pc, #388]	; (b69f4 <_Z14bmx_initializev+0x1cc>)
   b6870:	b940      	cbnz	r0, b6884 <_Z14bmx_initializev+0x5c>
        msgp = (char *) "BMP1 ERR";
   b6872:	4b63      	ldr	r3, [pc, #396]	; (b6a00 <_Z14bmx_initializev+0x1d8>)
   b6874:	6023      	str	r3, [r4, #0]
        BMX_1_exists = false;
   b6876:	7010      	strb	r0, [r2, #0]
        SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
   b6878:	4a62      	ldr	r2, [pc, #392]	; (b6a04 <_Z14bmx_initializev+0x1dc>)
   b687a:	6813      	ldr	r3, [r2, #0]
   b687c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   b6880:	6013      	str	r3, [r2, #0]
   b6882:	e008      	b.n	b6896 <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
   b6884:	2301      	movs	r3, #1
   b6886:	7013      	strb	r3, [r2, #0]
        BMX_1_type = BMX_TYPE_BMP280;
   b6888:	4a5f      	ldr	r2, [pc, #380]	; (b6a08 <_Z14bmx_initializev+0x1e0>)
        float p = bmp1.readPressure();
   b688a:	485c      	ldr	r0, [pc, #368]	; (b69fc <_Z14bmx_initializev+0x1d4>)
        BMX_1_type = BMX_TYPE_BMP280;
   b688c:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP1 OK";
   b688e:	4b5f      	ldr	r3, [pc, #380]	; (b6a0c <_Z14bmx_initializev+0x1e4>)
   b6890:	6023      	str	r3, [r4, #0]
        float p = bmp1.readPressure();
   b6892:	f008 fef5 	bl	bf680 <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_1 NF";
    break;
  }
  Output (msgp);
   b6896:	6820      	ldr	r0, [r4, #0]
   b6898:	f7ff fc78 	bl	b618c <_Z6OutputPKc>

  // 2nd Bosch Sensor - Need to see which (BMP, BME, BM3) is plugged in
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
   b689c:	2076      	movs	r0, #118	; 0x76
   b689e:	f7ff ff1d 	bl	b66dc <_Z16get_Bosch_ChipIDh>
   b68a2:	4b5b      	ldr	r3, [pc, #364]	; (b6a10 <_Z14bmx_initializev+0x1e8>)
  switch (BMX_2_chip_id) {
   b68a4:	2858      	cmp	r0, #88	; 0x58
  BMX_2_chip_id = get_Bosch_ChipID(BMX_ADDRESS_2);
   b68a6:	4602      	mov	r2, r0
   b68a8:	7018      	strb	r0, [r3, #0]
  switch (BMX_2_chip_id) {
   b68aa:	d048      	beq.n	b693e <_Z14bmx_initializev+0x116>
   b68ac:	2860      	cmp	r0, #96	; 0x60
   b68ae:	d063      	beq.n	b6978 <_Z14bmx_initializev+0x150>
   b68b0:	2850      	cmp	r0, #80	; 0x50
   b68b2:	f040 8093 	bne.w	b69dc <_Z14bmx_initializev+0x1b4>
        float p = bme2.readPressure();
      }
    break;

    case BMP388_CHIP_ID :
      if (!bm32.begin_I2C(BMX_ADDRESS_2)) { 
   b68b6:	f010 ff1f 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b68ba:	2176      	movs	r1, #118	; 0x76
   b68bc:	4602      	mov	r2, r0
   b68be:	4855      	ldr	r0, [pc, #340]	; (b6a14 <_Z14bmx_initializev+0x1ec>)
   b68c0:	f009 f858 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b68c4:	4b54      	ldr	r3, [pc, #336]	; (b6a18 <_Z14bmx_initializev+0x1f0>)
   b68c6:	2800      	cmp	r0, #0
   b68c8:	f040 8081 	bne.w	b69ce <_Z14bmx_initializev+0x1a6>
        msgp = (char *) "BM32 ERR";
   b68cc:	4a53      	ldr	r2, [pc, #332]	; (b6a1c <_Z14bmx_initializev+0x1f4>)
   b68ce:	6022      	str	r2, [r4, #0]
        BMX_2_exists = false;
   b68d0:	7018      	strb	r0, [r3, #0]
   b68d2:	e03d      	b.n	b6950 <_Z14bmx_initializev+0x128>
      if (!bme1.begin(BMX_ADDRESS_1)) { 
   b68d4:	f010 ff10 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b68d8:	2177      	movs	r1, #119	; 0x77
   b68da:	4602      	mov	r2, r0
   b68dc:	4850      	ldr	r0, [pc, #320]	; (b6a20 <_Z14bmx_initializev+0x1f8>)
   b68de:	4d45      	ldr	r5, [pc, #276]	; (b69f4 <_Z14bmx_initializev+0x1cc>)
   b68e0:	f008 fa4f 	bl	bed82 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
   b68e4:	b9b0      	cbnz	r0, b6914 <_Z14bmx_initializev+0xec>
        if (!bm31.begin_I2C(BMX_ADDRESS_1)) {  // Perhaps it is a BMP390
   b68e6:	f010 ff07 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b68ea:	2177      	movs	r1, #119	; 0x77
   b68ec:	4602      	mov	r2, r0
   b68ee:	4840      	ldr	r0, [pc, #256]	; (b69f0 <_Z14bmx_initializev+0x1c8>)
   b68f0:	f009 f840 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b68f4:	b918      	cbnz	r0, b68fe <_Z14bmx_initializev+0xd6>
          msgp = (char *) "BMX1 ERR";
   b68f6:	4b4b      	ldr	r3, [pc, #300]	; (b6a24 <_Z14bmx_initializev+0x1fc>)
   b68f8:	6023      	str	r3, [r4, #0]
          BMX_1_exists = false;
   b68fa:	7028      	strb	r0, [r5, #0]
          SystemStatusBits |= SSB_BMX_1;  // Turn On Bit          
   b68fc:	e7bc      	b.n	b6878 <_Z14bmx_initializev+0x50>
          BMX_1_exists = true;
   b68fe:	2301      	movs	r3, #1
   b6900:	702b      	strb	r3, [r5, #0]
          BMX_1_type = BMX_TYPE_BMP390;
   b6902:	4b41      	ldr	r3, [pc, #260]	; (b6a08 <_Z14bmx_initializev+0x1e0>)
   b6904:	2204      	movs	r2, #4
   b6906:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_1 OK"; 
   b6908:	4b47      	ldr	r3, [pc, #284]	; (b6a28 <_Z14bmx_initializev+0x200>)
        float p = bm31.readPressure();
   b690a:	4839      	ldr	r0, [pc, #228]	; (b69f0 <_Z14bmx_initializev+0x1c8>)
        msgp = (char *) "BM31 OK";
   b690c:	6023      	str	r3, [r4, #0]
        float p = bm31.readPressure();
   b690e:	f009 f8c4 	bl	bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>
   b6912:	e7c0      	b.n	b6896 <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
   b6914:	2301      	movs	r3, #1
   b6916:	702b      	strb	r3, [r5, #0]
        BMX_1_type = BMX_TYPE_BME280;
   b6918:	4b3b      	ldr	r3, [pc, #236]	; (b6a08 <_Z14bmx_initializev+0x1e0>)
        float p = bme1.readPressure();
   b691a:	4841      	ldr	r0, [pc, #260]	; (b6a20 <_Z14bmx_initializev+0x1f8>)
        BMX_1_type = BMX_TYPE_BME280;
   b691c:	2202      	movs	r2, #2
   b691e:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_1 OK";
   b6920:	4b42      	ldr	r3, [pc, #264]	; (b6a2c <_Z14bmx_initializev+0x204>)
   b6922:	6023      	str	r3, [r4, #0]
        float p = bme1.readPressure();
   b6924:	f008 fa64 	bl	bedf0 <_ZN15Adafruit_BME28012readPressureEv>
   b6928:	e7b5      	b.n	b6896 <_Z14bmx_initializev+0x6e>
        BMX_1_exists = true;
   b692a:	2201      	movs	r2, #1
   b692c:	701a      	strb	r2, [r3, #0]
        BMX_1_type = BMX_TYPE_BMP388;
   b692e:	4b36      	ldr	r3, [pc, #216]	; (b6a08 <_Z14bmx_initializev+0x1e0>)
   b6930:	2203      	movs	r2, #3
   b6932:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM31 OK";
   b6934:	4b3e      	ldr	r3, [pc, #248]	; (b6a30 <_Z14bmx_initializev+0x208>)
   b6936:	e7e8      	b.n	b690a <_Z14bmx_initializev+0xe2>
      msgp = (char *) "BMX_1 NF";
   b6938:	4b3e      	ldr	r3, [pc, #248]	; (b6a34 <_Z14bmx_initializev+0x20c>)
   b693a:	6023      	str	r3, [r4, #0]
    break;
   b693c:	e7ab      	b.n	b6896 <_Z14bmx_initializev+0x6e>
      if (!bmp2.begin(BMX_ADDRESS_2)) { 
   b693e:	483e      	ldr	r0, [pc, #248]	; (b6a38 <_Z14bmx_initializev+0x210>)
   b6940:	2176      	movs	r1, #118	; 0x76
   b6942:	f008 fe13 	bl	bf56c <_ZN15Adafruit_BMP2805beginEhh>
   b6946:	4a34      	ldr	r2, [pc, #208]	; (b6a18 <_Z14bmx_initializev+0x1f0>)
   b6948:	b940      	cbnz	r0, b695c <_Z14bmx_initializev+0x134>
        msgp = (char *) "BMP2 ERR";
   b694a:	4b3c      	ldr	r3, [pc, #240]	; (b6a3c <_Z14bmx_initializev+0x214>)
   b694c:	6023      	str	r3, [r4, #0]
        BMX_2_exists = false;
   b694e:	7010      	strb	r0, [r2, #0]
        SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
   b6950:	4a2c      	ldr	r2, [pc, #176]	; (b6a04 <_Z14bmx_initializev+0x1dc>)
   b6952:	6813      	ldr	r3, [r2, #0]
   b6954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   b6958:	6013      	str	r3, [r2, #0]
   b695a:	e008      	b.n	b696e <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
   b695c:	2301      	movs	r3, #1
   b695e:	7013      	strb	r3, [r2, #0]
        BMX_2_type = BMX_TYPE_BMP280;
   b6960:	4a37      	ldr	r2, [pc, #220]	; (b6a40 <_Z14bmx_initializev+0x218>)
        float p = bmp2.readPressure();
   b6962:	4835      	ldr	r0, [pc, #212]	; (b6a38 <_Z14bmx_initializev+0x210>)
        BMX_2_type = BMX_TYPE_BMP280;
   b6964:	7013      	strb	r3, [r2, #0]
        msgp = (char *) "BMP2 OK";
   b6966:	4b37      	ldr	r3, [pc, #220]	; (b6a44 <_Z14bmx_initializev+0x21c>)
   b6968:	6023      	str	r3, [r4, #0]
        float p = bmp2.readPressure();
   b696a:	f008 fe89 	bl	bf680 <_ZN15Adafruit_BMP28012readPressureEv>

    default:
      msgp = (char *) "BMX_2 NF";
    break;
  }
  Output (msgp);
   b696e:	6820      	ldr	r0, [r4, #0]
}
   b6970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
   b6974:	f7ff bc0a 	b.w	b618c <_Z6OutputPKc>
      if (!bme2.begin(BMX_ADDRESS_2)) { 
   b6978:	f010 febe 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b697c:	2176      	movs	r1, #118	; 0x76
   b697e:	4602      	mov	r2, r0
   b6980:	4831      	ldr	r0, [pc, #196]	; (b6a48 <_Z14bmx_initializev+0x220>)
   b6982:	4d25      	ldr	r5, [pc, #148]	; (b6a18 <_Z14bmx_initializev+0x1f0>)
   b6984:	f008 f9fd 	bl	bed82 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
   b6988:	b9b0      	cbnz	r0, b69b8 <_Z14bmx_initializev+0x190>
        if (!bm32.begin_I2C(BMX_ADDRESS_2)) {  // Perhaps it is a BMP390
   b698a:	f010 feb5 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b698e:	2176      	movs	r1, #118	; 0x76
   b6990:	4602      	mov	r2, r0
   b6992:	4820      	ldr	r0, [pc, #128]	; (b6a14 <_Z14bmx_initializev+0x1ec>)
   b6994:	f008 ffee 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b6998:	b918      	cbnz	r0, b69a2 <_Z14bmx_initializev+0x17a>
          msgp = (char *) "BMX2 ERR";
   b699a:	4b2c      	ldr	r3, [pc, #176]	; (b6a4c <_Z14bmx_initializev+0x224>)
   b699c:	6023      	str	r3, [r4, #0]
          BMX_2_exists = false;
   b699e:	7028      	strb	r0, [r5, #0]
          SystemStatusBits |= SSB_BMX_2;  // Turn On Bit          
   b69a0:	e7d6      	b.n	b6950 <_Z14bmx_initializev+0x128>
          BMX_2_exists = true;
   b69a2:	2301      	movs	r3, #1
   b69a4:	702b      	strb	r3, [r5, #0]
          BMX_2_type = BMX_TYPE_BMP390;
   b69a6:	4b26      	ldr	r3, [pc, #152]	; (b6a40 <_Z14bmx_initializev+0x218>)
   b69a8:	2204      	movs	r2, #4
   b69aa:	701a      	strb	r2, [r3, #0]
          msgp = (char *) "BMP390_2 OK"; 
   b69ac:	4b28      	ldr	r3, [pc, #160]	; (b6a50 <_Z14bmx_initializev+0x228>)
        float p = bm32.readPressure();
   b69ae:	4819      	ldr	r0, [pc, #100]	; (b6a14 <_Z14bmx_initializev+0x1ec>)
        msgp = (char *) "BM32 OK";
   b69b0:	6023      	str	r3, [r4, #0]
        float p = bm32.readPressure();
   b69b2:	f009 f872 	bl	bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>
   b69b6:	e7da      	b.n	b696e <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
   b69b8:	2301      	movs	r3, #1
   b69ba:	702b      	strb	r3, [r5, #0]
        BMX_2_type = BMX_TYPE_BME280;
   b69bc:	4b20      	ldr	r3, [pc, #128]	; (b6a40 <_Z14bmx_initializev+0x218>)
        float p = bme2.readPressure();
   b69be:	4822      	ldr	r0, [pc, #136]	; (b6a48 <_Z14bmx_initializev+0x220>)
        BMX_2_type = BMX_TYPE_BME280;
   b69c0:	2202      	movs	r2, #2
   b69c2:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BME280_2 OK";
   b69c4:	4b23      	ldr	r3, [pc, #140]	; (b6a54 <_Z14bmx_initializev+0x22c>)
   b69c6:	6023      	str	r3, [r4, #0]
        float p = bme2.readPressure();
   b69c8:	f008 fa12 	bl	bedf0 <_ZN15Adafruit_BME28012readPressureEv>
   b69cc:	e7cf      	b.n	b696e <_Z14bmx_initializev+0x146>
        BMX_2_exists = true;
   b69ce:	2201      	movs	r2, #1
   b69d0:	701a      	strb	r2, [r3, #0]
        BMX_2_type = BMX_TYPE_BMP388;
   b69d2:	4b1b      	ldr	r3, [pc, #108]	; (b6a40 <_Z14bmx_initializev+0x218>)
   b69d4:	2203      	movs	r2, #3
   b69d6:	701a      	strb	r2, [r3, #0]
        msgp = (char *) "BM32 OK";
   b69d8:	4b1f      	ldr	r3, [pc, #124]	; (b6a58 <_Z14bmx_initializev+0x230>)
   b69da:	e7e8      	b.n	b69ae <_Z14bmx_initializev+0x186>
      msgp = (char *) "BMX_2 NF";
   b69dc:	4b1f      	ldr	r3, [pc, #124]	; (b6a5c <_Z14bmx_initializev+0x234>)
   b69de:	6023      	str	r3, [r4, #0]
    break;
   b69e0:	e7c5      	b.n	b696e <_Z14bmx_initializev+0x146>
   b69e2:	bf00      	nop
   b69e4:	000ca901 	.word	0x000ca901
   b69e8:	20032cc0 	.word	0x20032cc0
   b69ec:	2002da81 	.word	0x2002da81
   b69f0:	2002e0e0 	.word	0x2002e0e0
   b69f4:	2002da82 	.word	0x2002da82
   b69f8:	000ca93c 	.word	0x000ca93c
   b69fc:	2002e390 	.word	0x2002e390
   b6a00:	000ca90a 	.word	0x000ca90a
   b6a04:	2002d908 	.word	0x2002d908
   b6a08:	2002da83 	.word	0x2002da83
   b6a0c:	000ca913 	.word	0x000ca913
   b6a10:	2002da84 	.word	0x2002da84
   b6a14:	2002e1e0 	.word	0x2002e1e0
   b6a18:	2002da85 	.word	0x2002da85
   b6a1c:	000ca988 	.word	0x000ca988
   b6a20:	2002e2e0 	.word	0x2002e2e0
   b6a24:	000ca91b 	.word	0x000ca91b
   b6a28:	000ca924 	.word	0x000ca924
   b6a2c:	000ca930 	.word	0x000ca930
   b6a30:	000ca945 	.word	0x000ca945
   b6a34:	000ca94d 	.word	0x000ca94d
   b6a38:	2002e3d0 	.word	0x2002e3d0
   b6a3c:	000ca956 	.word	0x000ca956
   b6a40:	2002da86 	.word	0x2002da86
   b6a44:	000ca95f 	.word	0x000ca95f
   b6a48:	2002e338 	.word	0x2002e338
   b6a4c:	000ca967 	.word	0x000ca967
   b6a50:	000ca970 	.word	0x000ca970
   b6a54:	000ca97c 	.word	0x000ca97c
   b6a58:	000ca991 	.word	0x000ca991
   b6a5c:	000ca999 	.word	0x000ca999

000b6a60 <_Z17htu21d_initializev>:
/* 
 *=======================================================================================================================
 * htu21d_initialize() - HTU21D sensor initialize
 *=======================================================================================================================
 */
void htu21d_initialize() {
   b6a60:	b508      	push	{r3, lr}
  Output("HTU21D:INIT");
   b6a62:	480f      	ldr	r0, [pc, #60]	; (b6aa0 <_Z17htu21d_initializev+0x40>)
   b6a64:	f7ff fb92 	bl	b618c <_Z6OutputPKc>
  
  // HTU21DF Humidity & Temp Sensor (I2C ADDRESS = 0x40)
  if (!htu.begin()) {
   b6a68:	f010 fe46 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6a6c:	4601      	mov	r1, r0
   b6a6e:	480d      	ldr	r0, [pc, #52]	; (b6aa4 <_Z17htu21d_initializev+0x44>)
   b6a70:	f009 fff4 	bl	c0a5c <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
   b6a74:	4b0c      	ldr	r3, [pc, #48]	; (b6aa8 <_Z17htu21d_initializev+0x48>)
   b6a76:	4a0d      	ldr	r2, [pc, #52]	; (b6aac <_Z17htu21d_initializev+0x4c>)
   b6a78:	b960      	cbnz	r0, b6a94 <_Z17htu21d_initializev+0x34>
    msgp = (char *) "HTU NF";
   b6a7a:	490d      	ldr	r1, [pc, #52]	; (b6ab0 <_Z17htu21d_initializev+0x50>)
   b6a7c:	6019      	str	r1, [r3, #0]
    HTU21DF_exists = false;
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
   b6a7e:	490d      	ldr	r1, [pc, #52]	; (b6ab4 <_Z17htu21d_initializev+0x54>)
    HTU21DF_exists = false;
   b6a80:	7010      	strb	r0, [r2, #0]
    SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
   b6a82:	680a      	ldr	r2, [r1, #0]
   b6a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   b6a88:	600a      	str	r2, [r1, #0]
  }
  else {
    HTU21DF_exists = true;
    msgp = (char *) "HTU OK";
  }
  Output (msgp);
   b6a8a:	6818      	ldr	r0, [r3, #0]
}
   b6a8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
   b6a90:	f7ff bb7c 	b.w	b618c <_Z6OutputPKc>
    HTU21DF_exists = true;
   b6a94:	2101      	movs	r1, #1
   b6a96:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HTU OK";
   b6a98:	4a07      	ldr	r2, [pc, #28]	; (b6ab8 <_Z17htu21d_initializev+0x58>)
   b6a9a:	601a      	str	r2, [r3, #0]
   b6a9c:	e7f5      	b.n	b6a8a <_Z17htu21d_initializev+0x2a>
   b6a9e:	bf00      	nop
   b6aa0:	000ca9a2 	.word	0x000ca9a2
   b6aa4:	2002e628 	.word	0x2002e628
   b6aa8:	20032cc0 	.word	0x20032cc0
   b6aac:	2002dab0 	.word	0x2002dab0
   b6ab0:	000ca9ae 	.word	0x000ca9ae
   b6ab4:	2002d908 	.word	0x2002d908
   b6ab8:	000ca9b5 	.word	0x000ca9b5

000b6abc <_Z18mcp9808_initializev>:
/* 
 *=======================================================================================================================
 * mcp9808_initialize() - MCP9808 sensor initialize
 *=======================================================================================================================
 */
void mcp9808_initialize() {
   b6abc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Output("MCP9808:INIT");
   b6abe:	4844      	ldr	r0, [pc, #272]	; (b6bd0 <_Z18mcp9808_initializev+0x114>)
   b6ac0:	4c44      	ldr	r4, [pc, #272]	; (b6bd4 <_Z18mcp9808_initializev+0x118>)
   b6ac2:	f7ff fb63 	bl	b618c <_Z6OutputPKc>
  
  // 1st MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x18)
  mcp1 = Adafruit_MCP9808();
   b6ac6:	a801      	add	r0, sp, #4
   b6ac8:	f00a f9a6 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>

/** @brief Common sensor interface to unify various sensors.
 * Intentionally modeled after sensors.h in the Android API:
 * https://github.com/android/platform_hardware_libhardware/blob/master/include/hardware/sensors.h
 */
class Adafruit_Sensor {
   b6acc:	4842      	ldr	r0, [pc, #264]	; (b6bd8 <_Z18mcp9808_initializev+0x11c>)
   b6ace:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6ad2:	7103      	strb	r3, [r0, #4]

/*!
 *    @brief  Class that stores state and functions for interacting with
 *            MCP9808 Temp Sensor
 */
class Adafruit_MCP9808 : public Adafruit_Sensor {
   b6ad4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   b6ad8:	80c3      	strh	r3, [r0, #6]
  if (!mcp1.begin(MCP_ADDRESS_1)) {
   b6ada:	2118      	movs	r1, #24
   b6adc:	9b03      	ldr	r3, [sp, #12]
   b6ade:	6083      	str	r3, [r0, #8]
   b6ae0:	f00a f9ff 	bl	c0ee2 <_ZN16Adafruit_MCP98085beginEh>
   b6ae4:	4b3d      	ldr	r3, [pc, #244]	; (b6bdc <_Z18mcp9808_initializev+0x120>)
   b6ae6:	2800      	cmp	r0, #0
   b6ae8:	d15e      	bne.n	b6ba8 <_Z18mcp9808_initializev+0xec>
    msgp = (char *) "MCP1 NF";
   b6aea:	4a3d      	ldr	r2, [pc, #244]	; (b6be0 <_Z18mcp9808_initializev+0x124>)
   b6aec:	6022      	str	r2, [r4, #0]
    MCP_1_exists = false;
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
   b6aee:	4a3d      	ldr	r2, [pc, #244]	; (b6be4 <_Z18mcp9808_initializev+0x128>)
    MCP_1_exists = false;
   b6af0:	7018      	strb	r0, [r3, #0]
    SystemStatusBits |= SSB_MCP_1;  // Turn On Bit
   b6af2:	6813      	ldr	r3, [r2, #0]
   b6af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   b6af8:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_1_exists = true;
    msgp = (char *) "MCP1 OK";
  }
  Output (msgp);
   b6afa:	6820      	ldr	r0, [r4, #0]
   b6afc:	f7ff fb46 	bl	b618c <_Z6OutputPKc>

  // 2nd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x19)
  mcp2 = Adafruit_MCP9808();
   b6b00:	a801      	add	r0, sp, #4
   b6b02:	f00a f989 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
   b6b06:	4838      	ldr	r0, [pc, #224]	; (b6be8 <_Z18mcp9808_initializev+0x12c>)
   b6b08:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6b0c:	7103      	strb	r3, [r0, #4]
   b6b0e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   b6b12:	80c3      	strh	r3, [r0, #6]
  if (!mcp2.begin(MCP_ADDRESS_2)) {
   b6b14:	2119      	movs	r1, #25
   b6b16:	9b03      	ldr	r3, [sp, #12]
   b6b18:	6083      	str	r3, [r0, #8]
   b6b1a:	f00a f9e2 	bl	c0ee2 <_ZN16Adafruit_MCP98085beginEh>
   b6b1e:	4b33      	ldr	r3, [pc, #204]	; (b6bec <_Z18mcp9808_initializev+0x130>)
   b6b20:	2800      	cmp	r0, #0
   b6b22:	d146      	bne.n	b6bb2 <_Z18mcp9808_initializev+0xf6>
    msgp = (char *) "MCP2 NF";
   b6b24:	4a32      	ldr	r2, [pc, #200]	; (b6bf0 <_Z18mcp9808_initializev+0x134>)
   b6b26:	6022      	str	r2, [r4, #0]
    MCP_2_exists = false;
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
   b6b28:	4a2e      	ldr	r2, [pc, #184]	; (b6be4 <_Z18mcp9808_initializev+0x128>)
    MCP_2_exists = false;
   b6b2a:	7018      	strb	r0, [r3, #0]
    SystemStatusBits |= SSB_MCP_2;  // Turn On Bit
   b6b2c:	6813      	ldr	r3, [r2, #0]
   b6b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   b6b32:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_2_exists = true;
    msgp = (char *) "MCP2 OK";
  }
  Output (msgp);
   b6b34:	6820      	ldr	r0, [r4, #0]
   b6b36:	f7ff fb29 	bl	b618c <_Z6OutputPKc>

  // 3rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x20)
  mcp3 = Adafruit_MCP9808();
   b6b3a:	a801      	add	r0, sp, #4
   b6b3c:	f00a f96c 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
   b6b40:	482c      	ldr	r0, [pc, #176]	; (b6bf4 <_Z18mcp9808_initializev+0x138>)
   b6b42:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6b46:	7103      	strb	r3, [r0, #4]
   b6b48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   b6b4c:	80c3      	strh	r3, [r0, #6]
  if (!mcp3.begin(MCP_ADDRESS_3)) {
   b6b4e:	211a      	movs	r1, #26
   b6b50:	9b03      	ldr	r3, [sp, #12]
   b6b52:	6083      	str	r3, [r0, #8]
   b6b54:	f00a f9c5 	bl	c0ee2 <_ZN16Adafruit_MCP98085beginEh>
   b6b58:	4b27      	ldr	r3, [pc, #156]	; (b6bf8 <_Z18mcp9808_initializev+0x13c>)
   b6b5a:	2800      	cmp	r0, #0
   b6b5c:	d12e      	bne.n	b6bbc <_Z18mcp9808_initializev+0x100>
    msgp = (char *) "MCP3 NF";
   b6b5e:	4a27      	ldr	r2, [pc, #156]	; (b6bfc <_Z18mcp9808_initializev+0x140>)
   b6b60:	6022      	str	r2, [r4, #0]
    MCP_3_exists = false;
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
   b6b62:	4a20      	ldr	r2, [pc, #128]	; (b6be4 <_Z18mcp9808_initializev+0x128>)
    MCP_3_exists = false;
   b6b64:	7018      	strb	r0, [r3, #0]
    SystemStatusBits |= SSB_MCP_3;  // Turn On Bit
   b6b66:	6813      	ldr	r3, [r2, #0]
   b6b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   b6b6c:	6013      	str	r3, [r2, #0]
  }
  else {
    MCP_3_exists = true;
    msgp = (char *) "MCP3 OK";
  }
  Output (msgp);
   b6b6e:	6820      	ldr	r0, [r4, #0]
   b6b70:	f7ff fb0c 	bl	b618c <_Z6OutputPKc>

  // 4rd MCP9808 Precision I2C Temperature Sensor (I2C ADDRESS = 0x21)
  mcp4 = Adafruit_MCP9808();
   b6b74:	a801      	add	r0, sp, #4
   b6b76:	f00a f94f 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
   b6b7a:	4821      	ldr	r0, [pc, #132]	; (b6c00 <_Z18mcp9808_initializev+0x144>)
   b6b7c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   b6b80:	7103      	strb	r3, [r0, #4]
   b6b82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   b6b86:	80c3      	strh	r3, [r0, #6]
  if (!mcp4.begin(MCP_ADDRESS_4)) {
   b6b88:	211b      	movs	r1, #27
   b6b8a:	9b03      	ldr	r3, [sp, #12]
   b6b8c:	6083      	str	r3, [r0, #8]
   b6b8e:	f00a f9a8 	bl	c0ee2 <_ZN16Adafruit_MCP98085beginEh>
   b6b92:	4b1c      	ldr	r3, [pc, #112]	; (b6c04 <_Z18mcp9808_initializev+0x148>)
   b6b94:	b9b8      	cbnz	r0, b6bc6 <_Z18mcp9808_initializev+0x10a>
    msgp = (char *) "MCP4 NF";
   b6b96:	4a1c      	ldr	r2, [pc, #112]	; (b6c08 <_Z18mcp9808_initializev+0x14c>)
   b6b98:	6022      	str	r2, [r4, #0]
    MCP_4_exists = false;
   b6b9a:	7018      	strb	r0, [r3, #0]
  }
  else {
    MCP_4_exists = true;
    msgp = (char *) "MCP4 OK";
  }
  Output (msgp);
   b6b9c:	6820      	ldr	r0, [r4, #0]
}
   b6b9e:	b004      	add	sp, #16
   b6ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output (msgp);
   b6ba4:	f7ff baf2 	b.w	b618c <_Z6OutputPKc>
    MCP_1_exists = true;
   b6ba8:	2201      	movs	r2, #1
   b6baa:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP1 OK";
   b6bac:	4b17      	ldr	r3, [pc, #92]	; (b6c0c <_Z18mcp9808_initializev+0x150>)
   b6bae:	6023      	str	r3, [r4, #0]
   b6bb0:	e7a3      	b.n	b6afa <_Z18mcp9808_initializev+0x3e>
    MCP_2_exists = true;
   b6bb2:	2201      	movs	r2, #1
   b6bb4:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP2 OK";
   b6bb6:	4b16      	ldr	r3, [pc, #88]	; (b6c10 <_Z18mcp9808_initializev+0x154>)
   b6bb8:	6023      	str	r3, [r4, #0]
   b6bba:	e7bb      	b.n	b6b34 <_Z18mcp9808_initializev+0x78>
    MCP_3_exists = true;
   b6bbc:	2201      	movs	r2, #1
   b6bbe:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP3 OK";
   b6bc0:	4b14      	ldr	r3, [pc, #80]	; (b6c14 <_Z18mcp9808_initializev+0x158>)
   b6bc2:	6023      	str	r3, [r4, #0]
   b6bc4:	e7d3      	b.n	b6b6e <_Z18mcp9808_initializev+0xb2>
    MCP_4_exists = true;
   b6bc6:	2201      	movs	r2, #1
   b6bc8:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "MCP4 OK";
   b6bca:	4b13      	ldr	r3, [pc, #76]	; (b6c18 <_Z18mcp9808_initializev+0x15c>)
   b6bcc:	6023      	str	r3, [r4, #0]
   b6bce:	e7e5      	b.n	b6b9c <_Z18mcp9808_initializev+0xe0>
   b6bd0:	000ca9bc 	.word	0x000ca9bc
   b6bd4:	20032cc0 	.word	0x20032cc0
   b6bd8:	20032890 	.word	0x20032890
   b6bdc:	2002dac8 	.word	0x2002dac8
   b6be0:	000ca9c9 	.word	0x000ca9c9
   b6be4:	2002d908 	.word	0x2002d908
   b6be8:	2003289c 	.word	0x2003289c
   b6bec:	2002dac9 	.word	0x2002dac9
   b6bf0:	000ca9d9 	.word	0x000ca9d9
   b6bf4:	200328a8 	.word	0x200328a8
   b6bf8:	2002daca 	.word	0x2002daca
   b6bfc:	000ca9e9 	.word	0x000ca9e9
   b6c00:	200328b4 	.word	0x200328b4
   b6c04:	2002dacb 	.word	0x2002dacb
   b6c08:	000ca9f9 	.word	0x000ca9f9
   b6c0c:	000ca9d1 	.word	0x000ca9d1
   b6c10:	000ca9e1 	.word	0x000ca9e1
   b6c14:	000ca9f1 	.word	0x000ca9f1
   b6c18:	000caa01 	.word	0x000caa01

000b6c1c <_Z14sht_initializev>:
/* 
 *=======================================================================================================================
 * sht_initialize() - SHT31 sensor initialize
 *=======================================================================================================================
 */
void sht_initialize() {
   b6c1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Output("SHT:INIT");
   b6c1e:	4828      	ldr	r0, [pc, #160]	; (b6cc0 <_Z14sht_initializev+0xa4>)
  
  // 1st SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  sht1 = Adafruit_SHT31();
   b6c20:	4d28      	ldr	r5, [pc, #160]	; (b6cc4 <_Z14sht_initializev+0xa8>)
  Output("SHT:INIT");
   b6c22:	f7ff fab3 	bl	b618c <_Z6OutputPKc>
  sht1 = Adafruit_SHT31();
   b6c26:	f010 fd67 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6c2a:	466c      	mov	r4, sp
   b6c2c:	4601      	mov	r1, r0
   b6c2e:	4620      	mov	r0, r4
   b6c30:	f00a fa46 	bl	c10c0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
   b6c34:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b6c38:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   b6c3c:	4620      	mov	r0, r4
   b6c3e:	f00a fa49 	bl	c10d4 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht1.begin(SHT_ADDRESS_1)) {
   b6c42:	4628      	mov	r0, r5
   b6c44:	2144      	movs	r1, #68	; 0x44
   b6c46:	f00a fa7c 	bl	c1142 <_ZN14Adafruit_SHT315beginEh>
   b6c4a:	4d1f      	ldr	r5, [pc, #124]	; (b6cc8 <_Z14sht_initializev+0xac>)
   b6c4c:	4b1f      	ldr	r3, [pc, #124]	; (b6ccc <_Z14sht_initializev+0xb0>)
   b6c4e:	bb60      	cbnz	r0, b6caa <_Z14sht_initializev+0x8e>
    msgp = (char *) "SHT1 NF";
   b6c50:	4a1f      	ldr	r2, [pc, #124]	; (b6cd0 <_Z14sht_initializev+0xb4>)
   b6c52:	602a      	str	r2, [r5, #0]
    SHT_1_exists = false;
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
   b6c54:	4a1f      	ldr	r2, [pc, #124]	; (b6cd4 <_Z14sht_initializev+0xb8>)
    SHT_1_exists = false;
   b6c56:	7018      	strb	r0, [r3, #0]
    SystemStatusBits |= SSB_SHT_1;  // Turn On Bit
   b6c58:	6813      	ldr	r3, [r2, #0]
   b6c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   b6c5e:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_1_exists = true;
    msgp = (char *) "SHT1 OK";
  }
  Output (msgp);
   b6c60:	6828      	ldr	r0, [r5, #0]

  // 2nd SHT31 I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  sht2 = Adafruit_SHT31();
   b6c62:	4e1d      	ldr	r6, [pc, #116]	; (b6cd8 <_Z14sht_initializev+0xbc>)
  Output (msgp);
   b6c64:	f7ff fa92 	bl	b618c <_Z6OutputPKc>
  sht2 = Adafruit_SHT31();
   b6c68:	f010 fd46 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6c6c:	4601      	mov	r1, r0
   b6c6e:	4620      	mov	r0, r4
   b6c70:	f00a fa26 	bl	c10c0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
   b6c74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   b6c78:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   b6c7c:	4620      	mov	r0, r4
   b6c7e:	f00a fa29 	bl	c10d4 <_ZN14Adafruit_SHT31D1Ev>
  if (!sht2.begin(SHT_ADDRESS_2)) {
   b6c82:	2145      	movs	r1, #69	; 0x45
   b6c84:	4630      	mov	r0, r6
   b6c86:	f00a fa5c 	bl	c1142 <_ZN14Adafruit_SHT315beginEh>
   b6c8a:	4b14      	ldr	r3, [pc, #80]	; (b6cdc <_Z14sht_initializev+0xc0>)
   b6c8c:	b990      	cbnz	r0, b6cb4 <_Z14sht_initializev+0x98>
    msgp = (char *) "SHT2 NF";
   b6c8e:	4a14      	ldr	r2, [pc, #80]	; (b6ce0 <_Z14sht_initializev+0xc4>)
   b6c90:	602a      	str	r2, [r5, #0]
    SHT_2_exists = false;
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
   b6c92:	4a10      	ldr	r2, [pc, #64]	; (b6cd4 <_Z14sht_initializev+0xb8>)
    SHT_2_exists = false;
   b6c94:	7018      	strb	r0, [r3, #0]
    SystemStatusBits |= SSB_SHT_2;  // Turn On Bit
   b6c96:	6813      	ldr	r3, [r2, #0]
   b6c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   b6c9c:	6013      	str	r3, [r2, #0]
  }
  else {
    SHT_2_exists = true;
    msgp = (char *) "SHT2 OK";
  }
  Output (msgp);
   b6c9e:	6828      	ldr	r0, [r5, #0]
}
   b6ca0:	b004      	add	sp, #16
   b6ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
   b6ca6:	f7ff ba71 	b.w	b618c <_Z6OutputPKc>
    SHT_1_exists = true;
   b6caa:	2201      	movs	r2, #1
   b6cac:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT1 OK";
   b6cae:	4b0d      	ldr	r3, [pc, #52]	; (b6ce4 <_Z14sht_initializev+0xc8>)
   b6cb0:	602b      	str	r3, [r5, #0]
   b6cb2:	e7d5      	b.n	b6c60 <_Z14sht_initializev+0x44>
    SHT_2_exists = true;
   b6cb4:	2201      	movs	r2, #1
   b6cb6:	701a      	strb	r2, [r3, #0]
    msgp = (char *) "SHT2 OK";
   b6cb8:	4b0b      	ldr	r3, [pc, #44]	; (b6ce8 <_Z14sht_initializev+0xcc>)
   b6cba:	602b      	str	r3, [r5, #0]
   b6cbc:	e7ef      	b.n	b6c9e <_Z14sht_initializev+0x82>
   b6cbe:	bf00      	nop
   b6cc0:	000caa09 	.word	0x000caa09
   b6cc4:	2003e338 	.word	0x2003e338
   b6cc8:	20032cc0 	.word	0x20032cc0
   b6ccc:	2002df8c 	.word	0x2002df8c
   b6cd0:	000caa12 	.word	0x000caa12
   b6cd4:	2002d908 	.word	0x2002d908
   b6cd8:	2003e348 	.word	0x2003e348
   b6cdc:	2002df8d 	.word	0x2002df8d
   b6ce0:	000caa22 	.word	0x000caa22
   b6ce4:	000caa1a 	.word	0x000caa1a
   b6ce8:	000caa2a 	.word	0x000caa2a

000b6cec <_Z15hih8_initializev>:
/* 
 *=======================================================================================================================
 * hih8_initialize() - HIH8000 sensor initialize
 *=======================================================================================================================
 */
void hih8_initialize() {
   b6cec:	b508      	push	{r3, lr}
  Output("HIH8:INIT");
   b6cee:	480d      	ldr	r0, [pc, #52]	; (b6d24 <_Z15hih8_initializev+0x38>)
   b6cf0:	f7ff fa4c 	bl	b618c <_Z6OutputPKc>

  if (I2C_Device_Exist(HIH8000_ADDRESS)) {
   b6cf4:	2027      	movs	r0, #39	; 0x27
   b6cf6:	f7ff f83b 	bl	b5d70 <_Z16I2C_Device_Existh>
   b6cfa:	4a0b      	ldr	r2, [pc, #44]	; (b6d28 <_Z15hih8_initializev+0x3c>)
   b6cfc:	4b0b      	ldr	r3, [pc, #44]	; (b6d2c <_Z15hih8_initializev+0x40>)
   b6cfe:	b140      	cbz	r0, b6d12 <_Z15hih8_initializev+0x26>
    HIH8_exists = true;
   b6d00:	2101      	movs	r1, #1
   b6d02:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "HIH8 OK";
   b6d04:	4a0a      	ldr	r2, [pc, #40]	; (b6d30 <_Z15hih8_initializev+0x44>)
   b6d06:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "HIH8 NF";
    HIH8_exists = false;
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
  }
  Output (msgp);
   b6d08:	6818      	ldr	r0, [r3, #0]
}
   b6d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
   b6d0e:	f7ff ba3d 	b.w	b618c <_Z6OutputPKc>
    msgp = (char *) "HIH8 NF";
   b6d12:	4908      	ldr	r1, [pc, #32]	; (b6d34 <_Z15hih8_initializev+0x48>)
   b6d14:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
   b6d16:	4908      	ldr	r1, [pc, #32]	; (b6d38 <_Z15hih8_initializev+0x4c>)
    HIH8_exists = false;
   b6d18:	7010      	strb	r0, [r2, #0]
    SystemStatusBits |= SSB_HIH8;  // Turn On Bit
   b6d1a:	680a      	ldr	r2, [r1, #0]
   b6d1c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   b6d20:	600a      	str	r2, [r1, #0]
   b6d22:	e7f1      	b.n	b6d08 <_Z15hih8_initializev+0x1c>
   b6d24:	000caa32 	.word	0x000caa32
   b6d28:	2002daae 	.word	0x2002daae
   b6d2c:	20032cc0 	.word	0x20032cc0
   b6d30:	000caa3c 	.word	0x000caa3c
   b6d34:	000caa44 	.word	0x000caa44
   b6d38:	2002d908 	.word	0x2002d908
   b6d3c:	00000000 	.word	0x00000000

000b6d40 <_Z17hih8_getTempHumidPfS_>:
 *=======================================================================================================================
 * hih8_getTempHumid() - Get Temp and Humidity
 *   Call example:  status = hih8_getTempHumid(&t, &h);
 *=======================================================================================================================
 */
bool hih8_getTempHumid(float *t, float *h) {
   b6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HIH8_exists) {
   b6d44:	4b54      	ldr	r3, [pc, #336]	; (b6e98 <_Z17hih8_getTempHumidPfS_+0x158>)
   b6d46:	f893 8000 	ldrb.w	r8, [r3]
bool hih8_getTempHumid(float *t, float *h) {
   b6d4a:	4604      	mov	r4, r0
   b6d4c:	460d      	mov	r5, r1
  if (HIH8_exists) {
   b6d4e:	f1b8 0f00 	cmp.w	r8, #0
   b6d52:	f000 8088 	beq.w	b6e66 <_Z17hih8_getTempHumidPfS_+0x126>
    uint16_t humidityBuffer    = 0;
    uint16_t temperatureBuffer = 0;
  
    Wire.begin();
   b6d56:	f010 fccf 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6d5a:	f00f fa9f 	bl	c629c <_ZN7TwoWire5beginEv>
    Wire.beginTransmission(HIH8000_ADDRESS);
   b6d5e:	f010 fccb 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6d62:	2127      	movs	r1, #39	; 0x27
   b6d64:	f00f fad4 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>

    Wire.write(0x00); // set the register location for read request
   b6d68:	f010 fcc6 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6d6c:	2100      	movs	r1, #0
   b6d6e:	f7fe ff29 	bl	b5bc4 <_ZN7TwoWire5writeEi.isra.0>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b6d72:	20c8      	movs	r0, #200	; 0xc8
   b6d74:	f00e f93c 	bl	c4ff0 <HAL_Delay_Microseconds>

    delayMicroseconds(200); // give some time for sensor to process request

    if (Wire.requestFrom(HIH8000_ADDRESS, 4) == 4) {
   b6d78:	f010 fcbe 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6d7c:	2204      	movs	r2, #4
   b6d7e:	2127      	movs	r1, #39	; 0x27
   b6d80:	f00f fabf 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   b6d84:	2804      	cmp	r0, #4
   b6d86:	d177      	bne.n	b6e78 <_Z17hih8_getTempHumidPfS_+0x138>

      // Get raw humidity data
      humidityBuffer = Wire.read();
   b6d88:	f010 fcb6 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6d8c:	6803      	ldr	r3, [r0, #0]
   b6d8e:	695b      	ldr	r3, [r3, #20]
   b6d90:	4798      	blx	r3
   b6d92:	b287      	uxth	r7, r0
      humidityBuffer <<= 8;
      humidityBuffer |= Wire.read();
   b6d94:	f010 fcb0 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6d98:	6803      	ldr	r3, [r0, #0]
   b6d9a:	695b      	ldr	r3, [r3, #20]
   b6d9c:	4798      	blx	r3
   b6d9e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
   b6da2:	b287      	uxth	r7, r0
      humidityBuffer &= 0x3FFF;   // 14bit value, get rid of the upper 2 status bits

      // Get raw temperature data
      temperatureBuffer = Wire.read();
   b6da4:	f010 fca8 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6da8:	6803      	ldr	r3, [r0, #0]
   b6daa:	695b      	ldr	r3, [r3, #20]
   b6dac:	4798      	blx	r3
   b6dae:	b286      	uxth	r6, r0
      temperatureBuffer <<= 8;
      temperatureBuffer |= Wire.read();
   b6db0:	f010 fca2 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6db4:	6803      	ldr	r3, [r0, #0]
   b6db6:	695b      	ldr	r3, [r3, #20]
   b6db8:	4798      	blx	r3
   b6dba:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   b6dbe:	b286      	uxth	r6, r0
      temperatureBuffer >>= 2;  // Remove the last two "Do Not Care" bits (shift left is same as divide by 4)

      Wire.endTransmission();
   b6dc0:	f010 fc9a 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6dc4:	f00f fac5 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>

      *h = humidityBuffer * 6.10e-3;
   b6dc8:	f3c7 000d 	ubfx	r0, r7, #0, #14
   b6dcc:	f7fd fa7a 	bl	b42c4 <__aeabi_i2d>
   b6dd0:	a32d      	add	r3, pc, #180	; (adr r3, b6e88 <_Z17hih8_getTempHumidPfS_+0x148>)
   b6dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dd6:	f7fd fadf 	bl	b4398 <__aeabi_dmul>
   b6dda:	f7fd fdd5 	bl	b4988 <__aeabi_d2f>
   b6dde:	6028      	str	r0, [r5, #0]
      *t = temperatureBuffer * 1.007e-2 - 40.0;
   b6de0:	08b0      	lsrs	r0, r6, #2
   b6de2:	f7fd fa6f 	bl	b42c4 <__aeabi_i2d>
   b6de6:	a32a      	add	r3, pc, #168	; (adr r3, b6e90 <_Z17hih8_getTempHumidPfS_+0x150>)
   b6de8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6dec:	f7fd fad4 	bl	b4398 <__aeabi_dmul>
   b6df0:	4b2a      	ldr	r3, [pc, #168]	; (b6e9c <_Z17hih8_getTempHumidPfS_+0x15c>)
   b6df2:	2200      	movs	r2, #0
   b6df4:	f7fd f918 	bl	b4028 <__aeabi_dsub>
   b6df8:	f7fd fdc6 	bl	b4988 <__aeabi_d2f>
   b6dfc:	6020      	str	r0, [r4, #0]

      // QC Check
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
   b6dfe:	edd5 7a00 	vldr	s15, [r5]
   b6e02:	eef4 7a67 	vcmp.f32	s15, s15
   b6e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e0a:	d62f      	bvs.n	b6e6c <_Z17hih8_getTempHumidPfS_+0x12c>
   b6e0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b6e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e14:	d42a      	bmi.n	b6e6c <_Z17hih8_getTempHumidPfS_+0x12c>
   b6e16:	ed9f 7a22 	vldr	s14, [pc, #136]	; b6ea0 <_Z17hih8_getTempHumidPfS_+0x160>
   b6e1a:	eef4 7a47 	vcmp.f32	s15, s14
   b6e1e:	ed9f 7a21 	vldr	s14, [pc, #132]	; b6ea4 <_Z17hih8_getTempHumidPfS_+0x164>
   b6e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e26:	bfc8      	it	gt
   b6e28:	eef0 7a47 	vmovgt.f32	s15, s14
   b6e2c:	edc5 7a00 	vstr	s15, [r5]
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
   b6e30:	edd4 7a00 	vldr	s15, [r4]
   b6e34:	eef4 7a67 	vcmp.f32	s15, s15
   b6e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e3c:	d619      	bvs.n	b6e72 <_Z17hih8_getTempHumidPfS_+0x132>
   b6e3e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; b6ea8 <_Z17hih8_getTempHumidPfS_+0x168>
   b6e42:	eef4 7ac7 	vcmpe.f32	s15, s14
   b6e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e4a:	d412      	bmi.n	b6e72 <_Z17hih8_getTempHumidPfS_+0x132>
   b6e4c:	ed9f 7a17 	vldr	s14, [pc, #92]	; b6eac <_Z17hih8_getTempHumidPfS_+0x16c>
   b6e50:	eef4 7a47 	vcmp.f32	s15, s14
   b6e54:	ed9f 7a13 	vldr	s14, [pc, #76]	; b6ea4 <_Z17hih8_getTempHumidPfS_+0x164>
   b6e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b6e5c:	bfc8      	it	gt
   b6e5e:	eef0 7a47 	vmovgt.f32	s15, s14
   b6e62:	edc4 7a00 	vstr	s15, [r4]
    }
  }
  else {
    return (false);
  }
}
   b6e66:	4640      	mov	r0, r8
   b6e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      *h = (isnan(*h) || (*h < QC_MIN_RH) || (*h >QC_MAX_RH)) ? QC_ERR_RH : *h;
   b6e6c:	eddf 7a0d 	vldr	s15, [pc, #52]	; b6ea4 <_Z17hih8_getTempHumidPfS_+0x164>
   b6e70:	e7dc      	b.n	b6e2c <_Z17hih8_getTempHumidPfS_+0xec>
      *t = (isnan(*t) || (*t < QC_MIN_T)  || (*t >QC_MAX_T))  ? QC_ERR_T  : *t;
   b6e72:	eddf 7a0c 	vldr	s15, [pc, #48]	; b6ea4 <_Z17hih8_getTempHumidPfS_+0x164>
   b6e76:	e7f4      	b.n	b6e62 <_Z17hih8_getTempHumidPfS_+0x122>
      Wire.endTransmission();
   b6e78:	f010 fc3e 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b6e7c:	f00f fa69 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
      return(false);
   b6e80:	f04f 0800 	mov.w	r8, #0
   b6e84:	e7ef      	b.n	b6e66 <_Z17hih8_getTempHumidPfS_+0x126>
   b6e86:	bf00      	nop
   b6e88:	4816f007 	.word	0x4816f007
   b6e8c:	3f78fc50 	.word	0x3f78fc50
   b6e90:	855da273 	.word	0x855da273
   b6e94:	3f849f94 	.word	0x3f849f94
   b6e98:	2002daae 	.word	0x2002daae
   b6e9c:	40440000 	.word	0x40440000
   b6ea0:	42c80000 	.word	0x42c80000
   b6ea4:	c479f99a 	.word	0xc479f99a
   b6ea8:	c2200000 	.word	0xc2200000
   b6eac:	42700000 	.word	0x42700000

000b6eb0 <_Z14wbt_initializev>:
/* 
 *=======================================================================================================================
 * wbt_initialize() - Wet Bulb Temperature
 *=======================================================================================================================
 */
void wbt_initialize() {
   b6eb0:	b508      	push	{r3, lr}
  Output("WBT:INIT");
   b6eb2:	4809      	ldr	r0, [pc, #36]	; (b6ed8 <_Z14wbt_initializev+0x28>)
   b6eb4:	f7ff f96a 	bl	b618c <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
   b6eb8:	4b08      	ldr	r3, [pc, #32]	; (b6edc <_Z14wbt_initializev+0x2c>)
   b6eba:	781b      	ldrb	r3, [r3, #0]
   b6ebc:	b153      	cbz	r3, b6ed4 <_Z14wbt_initializev+0x24>
   b6ebe:	4b08      	ldr	r3, [pc, #32]	; (b6ee0 <_Z14wbt_initializev+0x30>)
   b6ec0:	781b      	ldrb	r3, [r3, #0]
   b6ec2:	b13b      	cbz	r3, b6ed4 <_Z14wbt_initializev+0x24>
    WBT_exists = true;
   b6ec4:	4b07      	ldr	r3, [pc, #28]	; (b6ee4 <_Z14wbt_initializev+0x34>)
    Output ("WBT:OK");
   b6ec6:	4808      	ldr	r0, [pc, #32]	; (b6ee8 <_Z14wbt_initializev+0x38>)
    WBT_exists = true;
   b6ec8:	2201      	movs	r2, #1
   b6eca:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("WBT:NF");
  }
}
   b6ecc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBT:NF");
   b6ed0:	f7ff b95c 	b.w	b618c <_Z6OutputPKc>
   b6ed4:	4805      	ldr	r0, [pc, #20]	; (b6eec <_Z14wbt_initializev+0x3c>)
   b6ed6:	e7f9      	b.n	b6ecc <_Z14wbt_initializev+0x1c>
   b6ed8:	000caa4c 	.word	0x000caa4c
   b6edc:	2002dac8 	.word	0x2002dac8
   b6ee0:	2002df8c 	.word	0x2002df8c
   b6ee4:	2002dfa2 	.word	0x2002dfa2
   b6ee8:	000caa55 	.word	0x000caa55
   b6eec:	000caa5c 	.word	0x000caa5c

000b6ef0 <_Z13wbt_calculatedd>:
 *     In Arduino code, square brackets are not used for mathematical operations. Instead, parentheses ( ).
 * sqrt(x) computes the square root of x, which is x to the 1/2.
 * pow(RH, 1.5) calculates RH to the 3/2, which is the relative humidity raised to the power of 1.5.
 *=======================================================================================================================
 */
double wbt_calculate(double T, double RH) {
   b6ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ef4:	ec57 6b10 	vmov	r6, r7, d0
   b6ef8:	b085      	sub	sp, #20
  if ((T == -999.9) || (RH == -999.9)) {
   b6efa:	a353      	add	r3, pc, #332	; (adr r3, b7048 <_Z13wbt_calculatedd+0x158>)
   b6efc:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f00:	ee10 0a10 	vmov	r0, s0
   b6f04:	4639      	mov	r1, r7
double wbt_calculate(double T, double RH) {
   b6f06:	ec55 4b11 	vmov	r4, r5, d1
  if ((T == -999.9) || (RH == -999.9)) {
   b6f0a:	f7fd fcad 	bl	b4868 <__aeabi_dcmpeq>
   b6f0e:	2800      	cmp	r0, #0
   b6f10:	f040 808b 	bne.w	b702a <_Z13wbt_calculatedd+0x13a>
   b6f14:	a34c      	add	r3, pc, #304	; (adr r3, b7048 <_Z13wbt_calculatedd+0x158>)
   b6f16:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f1a:	4620      	mov	r0, r4
   b6f1c:	4629      	mov	r1, r5
   b6f1e:	f7fd fca3 	bl	b4868 <__aeabi_dcmpeq>
   b6f22:	2800      	cmp	r0, #0
   b6f24:	f040 8081 	bne.w	b702a <_Z13wbt_calculatedd+0x13a>
  }

  // Output("WBT:CALC");

  // Equation components
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
   b6f28:	a34b      	add	r3, pc, #300	; (adr r3, b7058 <_Z13wbt_calculatedd+0x168>)
   b6f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f2e:	4620      	mov	r0, r4
   b6f30:	4629      	mov	r1, r5
   b6f32:	f7fd f87b 	bl	b402c <__adddf3>
   b6f36:	ec41 0b10 	vmov	d0, r0, r1
   b6f3a:	f011 f813 	bl	c7f64 <sqrt>
   b6f3e:	a348      	add	r3, pc, #288	; (adr r3, b7060 <_Z13wbt_calculatedd+0x170>)
   b6f40:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f44:	ec51 0b10 	vmov	r0, r1, d0
   b6f48:	f7fd fa26 	bl	b4398 <__aeabi_dmul>
   b6f4c:	ec41 0b10 	vmov	d0, r0, r1
   b6f50:	f010 fc62 	bl	c7818 <atan>
  double term2 = atan(T + RH);
   b6f54:	4622      	mov	r2, r4
   b6f56:	462b      	mov	r3, r5
   b6f58:	4630      	mov	r0, r6
   b6f5a:	4639      	mov	r1, r7
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
   b6f5c:	ec59 8b10 	vmov	r8, r9, d0
  double term2 = atan(T + RH);
   b6f60:	f7fd f864 	bl	b402c <__adddf3>
   b6f64:	ec41 0b10 	vmov	d0, r0, r1
   b6f68:	f010 fc56 	bl	c7818 <atan>
  double term3 = atan(RH - 1.676311);
   b6f6c:	a33e      	add	r3, pc, #248	; (adr r3, b7068 <_Z13wbt_calculatedd+0x178>)
   b6f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f72:	4620      	mov	r0, r4
   b6f74:	4629      	mov	r1, r5
  double term2 = atan(T + RH);
   b6f76:	ec5b ab10 	vmov	sl, fp, d0
  double term3 = atan(RH - 1.676311);
   b6f7a:	f7fd f855 	bl	b4028 <__aeabi_dsub>
   b6f7e:	ec41 0b10 	vmov	d0, r0, r1
   b6f82:	f010 fc49 	bl	c7818 <atan>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
   b6f86:	ed9f 1b2e 	vldr	d1, [pc, #184]	; b7040 <_Z13wbt_calculatedd+0x150>
  double term3 = atan(RH - 1.676311);
   b6f8a:	ed8d 0b00 	vstr	d0, [sp]
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
   b6f8e:	ec45 4b10 	vmov	d0, r4, r5
   b6f92:	f010 ff15 	bl	c7dc0 <pow>
   b6f96:	a336      	add	r3, pc, #216	; (adr r3, b7070 <_Z13wbt_calculatedd+0x180>)
   b6f98:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	4629      	mov	r1, r5
   b6fa0:	ed8d 0b02 	vstr	d0, [sp, #8]
   b6fa4:	f7fd f9f8 	bl	b4398 <__aeabi_dmul>
   b6fa8:	ec41 0b10 	vmov	d0, r0, r1
   b6fac:	f010 fc34 	bl	c7818 <atan>
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
   b6fb0:	4642      	mov	r2, r8
   b6fb2:	464b      	mov	r3, r9
   b6fb4:	4630      	mov	r0, r6
   b6fb6:	4639      	mov	r1, r7
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
   b6fb8:	ec55 4b10 	vmov	r4, r5, d0
  double term1 = T * atan(0.151977 * sqrt(RH + 8.313659));
   b6fbc:	f7fd f9ec 	bl	b4398 <__aeabi_dmul>
  double constant = 4.686035;

  // Wet bulb temperature calculation
  double Tw = term1 + term2 - term3 + term4 - constant;
   b6fc0:	4652      	mov	r2, sl
   b6fc2:	465b      	mov	r3, fp
   b6fc4:	f7fd f832 	bl	b402c <__adddf3>
   b6fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
   b6fcc:	f7fd f82c 	bl	b4028 <__aeabi_dsub>
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
   b6fd0:	a329      	add	r3, pc, #164	; (adr r3, b7078 <_Z13wbt_calculatedd+0x188>)
   b6fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  double Tw = term1 + term2 - term3 + term4 - constant;
   b6fd6:	4606      	mov	r6, r0
   b6fd8:	460f      	mov	r7, r1
  double term4 = 0.00391838 * pow(RH, 1.5) * atan(0.023101 * RH);
   b6fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b6fde:	f7fd f9db 	bl	b4398 <__aeabi_dmul>
   b6fe2:	4622      	mov	r2, r4
   b6fe4:	462b      	mov	r3, r5
   b6fe6:	f7fd f9d7 	bl	b4398 <__aeabi_dmul>
   b6fea:	4602      	mov	r2, r0
   b6fec:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
   b6fee:	4630      	mov	r0, r6
   b6ff0:	4639      	mov	r1, r7
   b6ff2:	f7fd f81b 	bl	b402c <__adddf3>
   b6ff6:	a322      	add	r3, pc, #136	; (adr r3, b7080 <_Z13wbt_calculatedd+0x190>)
   b6ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ffc:	f7fd f814 	bl	b4028 <__aeabi_dsub>

  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
   b7000:	4602      	mov	r2, r0
   b7002:	460b      	mov	r3, r1
  double Tw = term1 + term2 - term3 + term4 - constant;
   b7004:	4604      	mov	r4, r0
   b7006:	460d      	mov	r5, r1
  Tw = (isnan(Tw) || (Tw < QC_MIN_T)  || (Tw >QC_MAX_T))  ? QC_ERR_T  : Tw;
   b7008:	f7fd fc60 	bl	b48cc <__aeabi_dcmpun>
   b700c:	b968      	cbnz	r0, b702a <_Z13wbt_calculatedd+0x13a>
   b700e:	4b10      	ldr	r3, [pc, #64]	; (b7050 <_Z13wbt_calculatedd+0x160>)
   b7010:	2200      	movs	r2, #0
   b7012:	4620      	mov	r0, r4
   b7014:	4629      	mov	r1, r5
   b7016:	f7fd fc31 	bl	b487c <__aeabi_dcmplt>
   b701a:	b930      	cbnz	r0, b702a <_Z13wbt_calculatedd+0x13a>
   b701c:	4b0d      	ldr	r3, [pc, #52]	; (b7054 <_Z13wbt_calculatedd+0x164>)
   b701e:	2200      	movs	r2, #0
   b7020:	4620      	mov	r0, r4
   b7022:	4629      	mov	r1, r5
   b7024:	f7fd fc48 	bl	b48b8 <__aeabi_dcmpgt>
   b7028:	b110      	cbz	r0, b7030 <_Z13wbt_calculatedd+0x140>
   b702a:	a507      	add	r5, pc, #28	; (adr r5, b7048 <_Z13wbt_calculatedd+0x158>)
   b702c:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (Tw);
}
   b7030:	ec45 4b10 	vmov	d0, r4, r5
   b7034:	b005      	add	sp, #20
   b7036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b703a:	bf00      	nop
   b703c:	f3af 8000 	nop.w
   b7040:	00000000 	.word	0x00000000
   b7044:	3ff80000 	.word	0x3ff80000
   b7048:	33333333 	.word	0x33333333
   b704c:	c08f3f33 	.word	0xc08f3f33
   b7050:	c0440000 	.word	0xc0440000
   b7054:	404e0000 	.word	0x404e0000
   b7058:	e996312f 	.word	0xe996312f
   b705c:	4020a097 	.word	0x4020a097
   b7060:	7a5f41af 	.word	0x7a5f41af
   b7064:	3fc373fb 	.word	0x3fc373fb
   b7068:	7baecd08 	.word	0x7baecd08
   b706c:	3ffad22b 	.word	0x3ffad22b
   b7070:	de050375 	.word	0xde050375
   b7074:	3f97a7c9 	.word	0x3f97a7c9
   b7078:	1f40b801 	.word	0x1f40b801
   b707c:	3f700cb8 	.word	0x3f700cb8
   b7080:	f583a53c 	.word	0xf583a53c
   b7084:	4012be7f 	.word	0x4012be7f

000b7088 <_Z13hi_initializev>:
/* 
 *=======================================================================================================================
 * hi_initialize() - Heat Index Temperature
 *=======================================================================================================================
 */
void hi_initialize() {
   b7088:	b508      	push	{r3, lr}
  Output("HI:INIT");
   b708a:	4808      	ldr	r0, [pc, #32]	; (b70ac <_Z13hi_initializev+0x24>)
   b708c:	f7ff f87e 	bl	b618c <_Z6OutputPKc>
  if (SHT_1_exists) {
   b7090:	4b07      	ldr	r3, [pc, #28]	; (b70b0 <_Z13hi_initializev+0x28>)
   b7092:	781b      	ldrb	r3, [r3, #0]
   b7094:	b13b      	cbz	r3, b70a6 <_Z13hi_initializev+0x1e>
    HI_exists = true;
   b7096:	4b07      	ldr	r3, [pc, #28]	; (b70b4 <_Z13hi_initializev+0x2c>)
    Output ("HI:OK");
   b7098:	4807      	ldr	r0, [pc, #28]	; (b70b8 <_Z13hi_initializev+0x30>)
    HI_exists = true;
   b709a:	2201      	movs	r2, #1
   b709c:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output ("HI:NF");
  }
}
   b709e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("HI:NF");
   b70a2:	f7ff b873 	b.w	b618c <_Z6OutputPKc>
   b70a6:	4805      	ldr	r0, [pc, #20]	; (b70bc <_Z13hi_initializev+0x34>)
   b70a8:	e7f9      	b.n	b709e <_Z13hi_initializev+0x16>
   b70aa:	bf00      	nop
   b70ac:	000caa63 	.word	0x000caa63
   b70b0:	2002df8c 	.word	0x2002df8c
   b70b4:	2002daaf 	.word	0x2002daaf
   b70b8:	000caa6b 	.word	0x000caa6b
   b70bc:	000caa71 	.word	0x000caa71

000b70c0 <_Z12hi_calculateff>:
 * warrant a heat index value below about 80 degrees F. In those cases, a simpler formula 
 * is applied to calculate values consistent with Steadman's results:
 * HI = 0.5 * {T + 61.0 + [(T-68.0)*1.2] + (RH*0.094)} 
 *=======================================================================================================================
 */
float hi_calculate(float T, float RH) {
   b70c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b70c4:	ee10 0a10 	vmov	r0, s0
   b70c8:	ed2d 8b04 	vpush	{d8-d9}
   b70cc:	eef0 8a60 	vmov.f32	s17, s1
  float HI;
  float HI_f;

  if ((T == -999.9) || (RH == -999.9)) {
   b70d0:	f7fd f90a 	bl	b42e8 <__aeabi_f2d>
   b70d4:	a3c1      	add	r3, pc, #772	; (adr r3, b73dc <_Z12hi_calculateff+0x31c>)
   b70d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   b70da:	4604      	mov	r4, r0
   b70dc:	460d      	mov	r5, r1
   b70de:	f7fd fbc3 	bl	b4868 <__aeabi_dcmpeq>
   b70e2:	2800      	cmp	r0, #0
   b70e4:	f040 80fa 	bne.w	b72dc <_Z12hi_calculateff+0x21c>
   b70e8:	ee18 0a90 	vmov	r0, s17
   b70ec:	f7fd f8fc 	bl	b42e8 <__aeabi_f2d>
   b70f0:	a3ba      	add	r3, pc, #744	; (adr r3, b73dc <_Z12hi_calculateff+0x31c>)
   b70f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   b70f6:	4680      	mov	r8, r0
   b70f8:	4689      	mov	r9, r1
   b70fa:	f7fd fbb5 	bl	b4868 <__aeabi_dcmpeq>
   b70fe:	2800      	cmp	r0, #0
   b7100:	f040 80ec 	bne.w	b72dc <_Z12hi_calculateff+0x21c>
    return (-999.9);
  }

  // Convert temperature from Celsius to Fahrenheit
  float T_f = T * 9.0 / 5.0 + 32.0;
   b7104:	4b9e      	ldr	r3, [pc, #632]	; (b7380 <_Z12hi_calculateff+0x2c0>)
   b7106:	2200      	movs	r2, #0
   b7108:	4620      	mov	r0, r4
   b710a:	4629      	mov	r1, r5
   b710c:	f7fd f944 	bl	b4398 <__aeabi_dmul>
   b7110:	4b9c      	ldr	r3, [pc, #624]	; (b7384 <_Z12hi_calculateff+0x2c4>)
   b7112:	2200      	movs	r2, #0
   b7114:	f7fd fa6a 	bl	b45ec <__aeabi_ddiv>
   b7118:	4b9b      	ldr	r3, [pc, #620]	; (b7388 <_Z12hi_calculateff+0x2c8>)
   b711a:	2200      	movs	r2, #0
   b711c:	f7fc ff86 	bl	b402c <__adddf3>
   b7120:	f7fd fc32 	bl	b4988 <__aeabi_d2f>
   b7124:	ee09 0a10 	vmov	s18, r0

  // Steadman's equation
  HI_f = 0.5 * (T_f + 61.0 + ((T_f - 68.0)*1.2) + (RH * 0.094));
   b7128:	f7fd f8de 	bl	b42e8 <__aeabi_f2d>
   b712c:	4b97      	ldr	r3, [pc, #604]	; (b738c <_Z12hi_calculateff+0x2cc>)
   b712e:	2200      	movs	r2, #0
   b7130:	4604      	mov	r4, r0
   b7132:	460d      	mov	r5, r1
   b7134:	f7fc ff78 	bl	b4028 <__aeabi_dsub>
   b7138:	4b95      	ldr	r3, [pc, #596]	; (b7390 <_Z12hi_calculateff+0x2d0>)
   b713a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   b713e:	f7fd f92b 	bl	b4398 <__aeabi_dmul>
   b7142:	4b94      	ldr	r3, [pc, #592]	; (b7394 <_Z12hi_calculateff+0x2d4>)
   b7144:	4606      	mov	r6, r0
   b7146:	460f      	mov	r7, r1
   b7148:	2200      	movs	r2, #0
   b714a:	4620      	mov	r0, r4
   b714c:	4629      	mov	r1, r5
   b714e:	f7fc ff6d 	bl	b402c <__adddf3>
   b7152:	4602      	mov	r2, r0
   b7154:	460b      	mov	r3, r1
   b7156:	4630      	mov	r0, r6
   b7158:	4639      	mov	r1, r7
   b715a:	f7fc ff67 	bl	b402c <__adddf3>
   b715e:	a382      	add	r3, pc, #520	; (adr r3, b7368 <_Z12hi_calculateff+0x2a8>)
   b7160:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7164:	4606      	mov	r6, r0
   b7166:	460f      	mov	r7, r1
   b7168:	4640      	mov	r0, r8
   b716a:	4649      	mov	r1, r9
   b716c:	f7fd f914 	bl	b4398 <__aeabi_dmul>
   b7170:	4602      	mov	r2, r0
   b7172:	460b      	mov	r3, r1
   b7174:	4630      	mov	r0, r6
   b7176:	4639      	mov	r1, r7
   b7178:	f7fc ff58 	bl	b402c <__adddf3>
   b717c:	4b86      	ldr	r3, [pc, #536]	; (b7398 <_Z12hi_calculateff+0x2d8>)
   b717e:	2200      	movs	r2, #0
   b7180:	f7fd f90a 	bl	b4398 <__aeabi_dmul>
   b7184:	f7fd fc00 	bl	b4988 <__aeabi_d2f>

  // Compute the average of the simple HI with the actual temperature [deg F]
  HI_f = (HI_f + T_f) / 2;
   b7188:	ee07 0a90 	vmov	s15, r0
   b718c:	ee37 8a89 	vadd.f32	s16, s15, s18
   b7190:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   b7194:	ee28 8a27 	vmul.f32	s16, s16, s15

  if (HI_f >= 80.0) { 
   b7198:	ed9f 7a80 	vldr	s14, [pc, #512]	; b739c <_Z12hi_calculateff+0x2dc>
   b719c:	eeb4 8ac7 	vcmpe.f32	s16, s14
   b71a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b71a4:	db75      	blt.n	b7292 <_Z12hi_calculateff+0x1d2>
    float c7 = 0.00122874;
    float c8 = 0.00085282;
    float c9 = -0.00000199;
    
    // Heat Index calculation
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
   b71a6:	eddf 7a7e 	vldr	s15, [pc, #504]	; b73a0 <_Z12hi_calculateff+0x2e0>
   b71aa:	ed9f 8a7e 	vldr	s16, [pc, #504]	; b73a4 <_Z12hi_calculateff+0x2e4>
   b71ae:	eea9 8a27 	vfma.f32	s16, s18, s15
   b71b2:	eddf 7a7d 	vldr	s15, [pc, #500]	; b73a8 <_Z12hi_calculateff+0x2e8>
   b71b6:	eea8 8aa7 	vfma.f32	s16, s17, s15
   b71ba:	eddf 7a7c 	vldr	s15, [pc, #496]	; b73ac <_Z12hi_calculateff+0x2ec>
   b71be:	ee69 7a27 	vmul.f32	s15, s18, s15
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
                (c9 * T_f * T_f * RH * RH);

    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
   b71c2:	eef2 9a0a 	vmov.f32	s19, #42	; 0x41500000  13.0
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
   b71c6:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
   b71ca:	eddf 7a79 	vldr	s15, [pc, #484]	; b73b0 <_Z12hi_calculateff+0x2f0>
   b71ce:	ee69 7a27 	vmul.f32	s15, s18, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
   b71d2:	eef4 8ae9 	vcmpe.f32	s17, s19
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
   b71d6:	eea7 8a89 	vfma.f32	s16, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
   b71da:	eddf 7a76 	vldr	s15, [pc, #472]	; b73b4 <_Z12hi_calculateff+0x2f4>
   b71de:	ee68 7aa7 	vmul.f32	s15, s17, s15
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
   b71e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
   b71e6:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
   b71ea:	eddf 7a73 	vldr	s15, [pc, #460]	; b73b8 <_Z12hi_calculateff+0x2f8>
   b71ee:	ee69 7a27 	vmul.f32	s15, s18, s15
   b71f2:	ee67 7a89 	vmul.f32	s15, s15, s18
                (c5 * T_f * T_f) + (c6 * RH * RH) + 
   b71f6:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c7 * T_f * T_f * RH) + (c8 * T_f * RH * RH) +
   b71fa:	eddf 7a70 	vldr	s15, [pc, #448]	; b73bc <_Z12hi_calculateff+0x2fc>
   b71fe:	ee69 7a27 	vmul.f32	s15, s18, s15
   b7202:	ee67 7aa8 	vmul.f32	s15, s15, s17
   b7206:	eea7 8aa8 	vfma.f32	s16, s15, s17
                (c9 * T_f * T_f * RH * RH);
   b720a:	eddf 7a6d 	vldr	s15, [pc, #436]	; b73c0 <_Z12hi_calculateff+0x300>
   b720e:	ee69 7a27 	vmul.f32	s15, s18, s15
   b7212:	ee67 7a89 	vmul.f32	s15, s15, s18
   b7216:	ee67 7aa8 	vmul.f32	s15, s15, s17
    HI_f = c1 + (c2 * T_f) + (c3 * RH) + (c4 * T_f * RH) +
   b721a:	eea7 8aa8 	vfma.f32	s16, s15, s17
    if ((RH < 13.0) && ((T_f > 80.0) && (T_f < 112.0)) ) {
   b721e:	d563      	bpl.n	b72e8 <_Z12hi_calculateff+0x228>
   b7220:	eeb4 9ac7 	vcmpe.f32	s18, s14
   b7224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7228:	dd5e      	ble.n	b72e8 <_Z12hi_calculateff+0x228>
   b722a:	eddf 7a66 	vldr	s15, [pc, #408]	; b73c4 <_Z12hi_calculateff+0x304>
   b722e:	eeb4 9ae7 	vcmpe.f32	s18, s15
   b7232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7236:	f140 8090 	bpl.w	b735a <_Z12hi_calculateff+0x29a>
      // If the RH is less than 13% and the temperature is between 80 and 112 degrees F, 
      // then the following adjustment is subtracted from HI: 
      // ADJUSTMENT = [(13-RH)/4]*SQRT{[17-ABS(T-95.)]/17}

      float Adjustment = ( (13 - RH) / 4 ) * sqrt( (17 - abs(T_f - 95.0) ) / 17 );
   b723a:	a34d      	add	r3, pc, #308	; (adr r3, b7370 <_Z12hi_calculateff+0x2b0>)
   b723c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7240:	4620      	mov	r0, r4
   b7242:	4629      	mov	r1, r5
   b7244:	f7fc fef0 	bl	b4028 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   b7248:	4602      	mov	r2, r0
   b724a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   b724e:	2000      	movs	r0, #0
   b7250:	495d      	ldr	r1, [pc, #372]	; (b73c8 <_Z12hi_calculateff+0x308>)
   b7252:	f7fc fee9 	bl	b4028 <__aeabi_dsub>
   b7256:	4b5c      	ldr	r3, [pc, #368]	; (b73c8 <_Z12hi_calculateff+0x308>)
   b7258:	2200      	movs	r2, #0
   b725a:	f7fd f9c7 	bl	b45ec <__aeabi_ddiv>
   b725e:	ec41 0b10 	vmov	d0, r0, r1
   b7262:	f010 fe7f 	bl	c7f64 <sqrt>
   b7266:	ee79 8ae8 	vsub.f32	s17, s19, s17
   b726a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   b726e:	ee68 7aa7 	vmul.f32	s15, s17, s15
   b7272:	ec55 4b10 	vmov	r4, r5, d0
   b7276:	ee17 0a90 	vmov	r0, s15
   b727a:	f7fd f835 	bl	b42e8 <__aeabi_f2d>
   b727e:	4622      	mov	r2, r4
   b7280:	462b      	mov	r3, r5
   b7282:	f7fd f889 	bl	b4398 <__aeabi_dmul>
   b7286:	f7fd fb7f 	bl	b4988 <__aeabi_d2f>

      HI_f = HI_f - Adjustment;
   b728a:	ee07 0a90 	vmov	s15, r0
   b728e:	ee38 8a67 	vsub.f32	s16, s16, s15
      HI_f = HI_f + Adjustment;
    }
  }

  // Convert Heat Index from Fahrenheit to Celsius
  HI = (HI_f - 32.0) * 5.0 / 9.0;
   b7292:	ee18 0a10 	vmov	r0, s16
   b7296:	f7fd f827 	bl	b42e8 <__aeabi_f2d>
   b729a:	4b3b      	ldr	r3, [pc, #236]	; (b7388 <_Z12hi_calculateff+0x2c8>)
   b729c:	2200      	movs	r2, #0
   b729e:	f7fc fec3 	bl	b4028 <__aeabi_dsub>
   b72a2:	4b38      	ldr	r3, [pc, #224]	; (b7384 <_Z12hi_calculateff+0x2c4>)
   b72a4:	2200      	movs	r2, #0
   b72a6:	f7fd f877 	bl	b4398 <__aeabi_dmul>
   b72aa:	4b35      	ldr	r3, [pc, #212]	; (b7380 <_Z12hi_calculateff+0x2c0>)
   b72ac:	2200      	movs	r2, #0
   b72ae:	f7fd f99d 	bl	b45ec <__aeabi_ddiv>
   b72b2:	f7fd fb69 	bl	b4988 <__aeabi_d2f>
   b72b6:	ee00 0a10 	vmov	s0, r0

  // Quality Control Check
  HI = (isnan(HI) || (HI < QC_MIN_HI)  || (HI >QC_MAX_HI))  ? QC_ERR_HI  : HI;
   b72ba:	eeb4 0a40 	vcmp.f32	s0, s0
   b72be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72c2:	d60b      	bvs.n	b72dc <_Z12hi_calculateff+0x21c>
   b72c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   b72c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72cc:	d406      	bmi.n	b72dc <_Z12hi_calculateff+0x21c>
   b72ce:	eddf 7a3f 	vldr	s15, [pc, #252]	; b73cc <_Z12hi_calculateff+0x30c>
   b72d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b72d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72da:	dd01      	ble.n	b72e0 <_Z12hi_calculateff+0x220>
   b72dc:	ed9f 0a3c 	vldr	s0, [pc, #240]	; b73d0 <_Z12hi_calculateff+0x310>

  return (HI);
}
   b72e0:	ecbd 8b04 	vpop	{d8-d9}
   b72e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
   b72e8:	eddf 7a3a 	vldr	s15, [pc, #232]	; b73d4 <_Z12hi_calculateff+0x314>
   b72ec:	eef4 8ae7 	vcmpe.f32	s17, s15
   b72f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72f4:	ddcd      	ble.n	b7292 <_Z12hi_calculateff+0x1d2>
   b72f6:	eeb4 9ac7 	vcmpe.f32	s18, s14
   b72fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b72fe:	ddc8      	ble.n	b7292 <_Z12hi_calculateff+0x1d2>
   b7300:	eddf 7a35 	vldr	s15, [pc, #212]	; b73d8 <_Z12hi_calculateff+0x318>
   b7304:	eeb4 9ae7 	vcmpe.f32	s18, s15
   b7308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b730c:	d5c1      	bpl.n	b7292 <_Z12hi_calculateff+0x1d2>
      float Adjustment = ( (RH - 85) / 10 ) * ( (87.0 - T_f) / 5 );
   b730e:	eddf 0a31 	vldr	s1, [pc, #196]	; b73d4 <_Z12hi_calculateff+0x314>
   b7312:	ee78 8ae0 	vsub.f32	s17, s17, s1
   b7316:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   b731a:	eec8 7aa7 	vdiv.f32	s15, s17, s15
   b731e:	ee17 0a90 	vmov	r0, s15
   b7322:	f7fc ffe1 	bl	b42e8 <__aeabi_f2d>
   b7326:	4622      	mov	r2, r4
   b7328:	4606      	mov	r6, r0
   b732a:	460f      	mov	r7, r1
   b732c:	462b      	mov	r3, r5
   b732e:	a112      	add	r1, pc, #72	; (adr r1, b7378 <_Z12hi_calculateff+0x2b8>)
   b7330:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7334:	f7fc fe78 	bl	b4028 <__aeabi_dsub>
   b7338:	4b12      	ldr	r3, [pc, #72]	; (b7384 <_Z12hi_calculateff+0x2c4>)
   b733a:	2200      	movs	r2, #0
   b733c:	f7fd f956 	bl	b45ec <__aeabi_ddiv>
   b7340:	4602      	mov	r2, r0
   b7342:	460b      	mov	r3, r1
   b7344:	4630      	mov	r0, r6
   b7346:	4639      	mov	r1, r7
   b7348:	f7fd f826 	bl	b4398 <__aeabi_dmul>
   b734c:	f7fd fb1c 	bl	b4988 <__aeabi_d2f>
      HI_f = HI_f + Adjustment;
   b7350:	ee07 0a90 	vmov	s15, r0
   b7354:	ee38 8a27 	vadd.f32	s16, s16, s15
   b7358:	e79b      	b.n	b7292 <_Z12hi_calculateff+0x1d2>
    else if ((RH > 85.0) && ((T_f > 80.0) && (T_f < 87.0)) ) {
   b735a:	eddf 7a1e 	vldr	s15, [pc, #120]	; b73d4 <_Z12hi_calculateff+0x314>
   b735e:	eef4 8ae7 	vcmpe.f32	s17, s15
   b7362:	e7ca      	b.n	b72fa <_Z12hi_calculateff+0x23a>
   b7364:	f3af 8000 	nop.w
   b7368:	4dd2f1aa 	.word	0x4dd2f1aa
   b736c:	3fb81062 	.word	0x3fb81062
   b7370:	00000000 	.word	0x00000000
   b7374:	4057c000 	.word	0x4057c000
   b7378:	00000000 	.word	0x00000000
   b737c:	4055c000 	.word	0x4055c000
   b7380:	40220000 	.word	0x40220000
   b7384:	40140000 	.word	0x40140000
   b7388:	40400000 	.word	0x40400000
   b738c:	40510000 	.word	0x40510000
   b7390:	3ff33333 	.word	0x3ff33333
   b7394:	404e8000 	.word	0x404e8000
   b7398:	3fe00000 	.word	0x3fe00000
   b739c:	42a00000 	.word	0x42a00000
   b73a0:	40032311 	.word	0x40032311
   b73a4:	c2298419 	.word	0xc2298419
   b73a8:	41224b16 	.word	0x41224b16
   b73ac:	be662648 	.word	0xbe662648
   b73b0:	bbe00fe0 	.word	0xbbe00fe0
   b73b4:	bd6087f8 	.word	0xbd6087f8
   b73b8:	3aa10dac 	.word	0x3aa10dac
   b73bc:	3a5f8fc8 	.word	0x3a5f8fc8
   b73c0:	b6058bf1 	.word	0xb6058bf1
   b73c4:	42e00000 	.word	0x42e00000
   b73c8:	40310000 	.word	0x40310000
   b73cc:	42700000 	.word	0x42700000
   b73d0:	c479f99a 	.word	0xc479f99a
   b73d4:	42aa0000 	.word	0x42aa0000
   b73d8:	42ae0000 	.word	0x42ae0000
   b73dc:	33333333 	.word	0x33333333
   b73e0:	c08f3f33 	.word	0xc08f3f33

000b73e4 <_Z15wbgt_initializev>:
/* 
 *=======================================================================================================================
 * wbgt_initialize() - Wet Bulb Globe Temperature
 *=======================================================================================================================
 */
void wbgt_initialize() {
   b73e4:	b508      	push	{r3, lr}
  Output("WBGT:INIT");
   b73e6:	480c      	ldr	r0, [pc, #48]	; (b7418 <_Z15wbgt_initializev+0x34>)
   b73e8:	f7fe fed0 	bl	b618c <_Z6OutputPKc>
  if (MCP_1_exists && SHT_1_exists) {
   b73ec:	4b0b      	ldr	r3, [pc, #44]	; (b741c <_Z15wbgt_initializev+0x38>)
   b73ee:	781b      	ldrb	r3, [r3, #0]
   b73f0:	b17b      	cbz	r3, b7412 <_Z15wbgt_initializev+0x2e>
   b73f2:	4b0b      	ldr	r3, [pc, #44]	; (b7420 <_Z15wbgt_initializev+0x3c>)
   b73f4:	781b      	ldrb	r3, [r3, #0]
   b73f6:	b163      	cbz	r3, b7412 <_Z15wbgt_initializev+0x2e>
    WBGT_exists = true;
   b73f8:	4b0a      	ldr	r3, [pc, #40]	; (b7424 <_Z15wbgt_initializev+0x40>)
   b73fa:	2201      	movs	r2, #1
   b73fc:	701a      	strb	r2, [r3, #0]
    if (MCP_3_exists) {
   b73fe:	4b0a      	ldr	r3, [pc, #40]	; (b7428 <_Z15wbgt_initializev+0x44>)
   b7400:	781b      	ldrb	r3, [r3, #0]
   b7402:	b123      	cbz	r3, b740e <_Z15wbgt_initializev+0x2a>
      Output ("WBGT:OK w/Globe");
   b7404:	4809      	ldr	r0, [pc, #36]	; (b742c <_Z15wbgt_initializev+0x48>)
    }
  }
  else {
    Output ("WBGT:NF");
  }
}
   b7406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("WBGT:NF");
   b740a:	f7fe bebf 	b.w	b618c <_Z6OutputPKc>
      Output ("WBGT:OK wo/Globe");
   b740e:	4808      	ldr	r0, [pc, #32]	; (b7430 <_Z15wbgt_initializev+0x4c>)
   b7410:	e7f9      	b.n	b7406 <_Z15wbgt_initializev+0x22>
    Output ("WBGT:NF");
   b7412:	4808      	ldr	r0, [pc, #32]	; (b7434 <_Z15wbgt_initializev+0x50>)
   b7414:	e7f7      	b.n	b7406 <_Z15wbgt_initializev+0x22>
   b7416:	bf00      	nop
   b7418:	000caa77 	.word	0x000caa77
   b741c:	2002dac8 	.word	0x2002dac8
   b7420:	2002df8c 	.word	0x2002df8c
   b7424:	2002dfa1 	.word	0x2002dfa1
   b7428:	2002daca 	.word	0x2002daca
   b742c:	000caa81 	.word	0x000caa81
   b7430:	000caa91 	.word	0x000caa91
   b7434:	000caaa2 	.word	0x000caaa2

000b7438 <_Z13wbgt_using_hid>:
/* 
 *=======================================================================================================================
 * wbgt_using_hi() - Compute Web Bulb Globe Temperature using Heat Index
 *=======================================================================================================================
 */
double wbgt_using_hi(double HIc) {
   b7438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b743a:	ec55 4b10 	vmov	r4, r5, d0

  if (HIc == -999.9) {
   b743e:	a32e      	add	r3, pc, #184	; (adr r3, b74f8 <_Z13wbgt_using_hid+0xc0>)
   b7440:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7444:	ee10 0a10 	vmov	r0, s0
   b7448:	4629      	mov	r1, r5
   b744a:	f7fd fa0d 	bl	b4868 <__aeabi_dcmpeq>
   b744e:	2800      	cmp	r0, #0
   b7450:	d140      	bne.n	b74d4 <_Z13wbgt_using_hid+0x9c>
    return (-999.9);
  }

  double HIf = HIc * 9.0 / 5.0 + 32.0;
   b7452:	4b2b      	ldr	r3, [pc, #172]	; (b7500 <_Z13wbgt_using_hid+0xc8>)
   b7454:	2200      	movs	r2, #0
   b7456:	4620      	mov	r0, r4
   b7458:	4629      	mov	r1, r5
   b745a:	f7fc ff9d 	bl	b4398 <__aeabi_dmul>
   b745e:	4b29      	ldr	r3, [pc, #164]	; (b7504 <_Z13wbgt_using_hid+0xcc>)
   b7460:	2200      	movs	r2, #0
   b7462:	f7fd f8c3 	bl	b45ec <__aeabi_ddiv>
   b7466:	4b28      	ldr	r3, [pc, #160]	; (b7508 <_Z13wbgt_using_hid+0xd0>)
   b7468:	2200      	movs	r2, #0
   b746a:	f7fc fddf 	bl	b402c <__adddf3>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
   b746e:	4602      	mov	r2, r0
   b7470:	460b      	mov	r3, r1
   b7472:	4604      	mov	r4, r0
   b7474:	460d      	mov	r5, r1
   b7476:	f7fc ff8f 	bl	b4398 <__aeabi_dmul>

  // Below produces Wet Bulb Globe Temperature in Celsius
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
   b747a:	a31b      	add	r3, pc, #108	; (adr r3, b74e8 <_Z13wbgt_using_hid+0xb0>)
   b747c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7480:	f7fc ff8a 	bl	b4398 <__aeabi_dmul>
   b7484:	a31a      	add	r3, pc, #104	; (adr r3, b74f0 <_Z13wbgt_using_hid+0xb8>)
   b7486:	e9d3 2300 	ldrd	r2, r3, [r3]
   b748a:	4606      	mov	r6, r0
   b748c:	460f      	mov	r7, r1
   b748e:	4620      	mov	r0, r4
   b7490:	4629      	mov	r1, r5
   b7492:	f7fc ff81 	bl	b4398 <__aeabi_dmul>
   b7496:	4602      	mov	r2, r0
   b7498:	460b      	mov	r3, r1
   b749a:	4630      	mov	r0, r6
   b749c:	4639      	mov	r1, r7
   b749e:	f7fc fdc5 	bl	b402c <__adddf3>
   b74a2:	4b1a      	ldr	r3, [pc, #104]	; (b750c <_Z13wbgt_using_hid+0xd4>)
   b74a4:	2200      	movs	r2, #0
   b74a6:	f7fc fdbf 	bl	b4028 <__aeabi_dsub>

  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
   b74aa:	4602      	mov	r2, r0
   b74ac:	460b      	mov	r3, r1
  double TWc = -0.0034 * pow(HIf, 2) + 0.96 * HIf - 34;
   b74ae:	4604      	mov	r4, r0
   b74b0:	460d      	mov	r5, r1
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
   b74b2:	f7fd fa0b 	bl	b48cc <__aeabi_dcmpun>
   b74b6:	b980      	cbnz	r0, b74da <_Z13wbgt_using_hid+0xa2>
   b74b8:	4b15      	ldr	r3, [pc, #84]	; (b7510 <_Z13wbgt_using_hid+0xd8>)
   b74ba:	2200      	movs	r2, #0
   b74bc:	4620      	mov	r0, r4
   b74be:	4629      	mov	r1, r5
   b74c0:	f7fd f9dc 	bl	b487c <__aeabi_dcmplt>
   b74c4:	b948      	cbnz	r0, b74da <_Z13wbgt_using_hid+0xa2>
   b74c6:	4b13      	ldr	r3, [pc, #76]	; (b7514 <_Z13wbgt_using_hid+0xdc>)
   b74c8:	2200      	movs	r2, #0
   b74ca:	4620      	mov	r0, r4
   b74cc:	4629      	mov	r1, r5
   b74ce:	f7fd f9f3 	bl	b48b8 <__aeabi_dcmpgt>
   b74d2:	b910      	cbnz	r0, b74da <_Z13wbgt_using_hid+0xa2>
  return (TWc);
}
   b74d4:	ec45 4b10 	vmov	d0, r4, r5
   b74d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TWc = (isnan(TWc) || (TWc < QC_MIN_T)  || (TWc >QC_MAX_T))  ? QC_ERR_T  : TWc;
   b74da:	a507      	add	r5, pc, #28	; (adr r5, b74f8 <_Z13wbgt_using_hid+0xc0>)
   b74dc:	e9d5 4500 	ldrd	r4, r5, [r5]
   b74e0:	e7f8      	b.n	b74d4 <_Z13wbgt_using_hid+0x9c>
   b74e2:	bf00      	nop
   b74e4:	f3af 8000 	nop.w
   b74e8:	19ce075f 	.word	0x19ce075f
   b74ec:	bf6bda51 	.word	0xbf6bda51
   b74f0:	eb851eb8 	.word	0xeb851eb8
   b74f4:	3feeb851 	.word	0x3feeb851
   b74f8:	33333333 	.word	0x33333333
   b74fc:	c08f3f33 	.word	0xc08f3f33
   b7500:	40220000 	.word	0x40220000
   b7504:	40140000 	.word	0x40140000
   b7508:	40400000 	.word	0x40400000
   b750c:	40410000 	.word	0x40410000
   b7510:	c0440000 	.word	0xc0440000
   b7514:	404e0000 	.word	0x404e0000

000b7518 <_Z14wbgt_using_wbtddd>:
/* 
 *=======================================================================================================================
 * wbgt_using_wbt() - Compute Web Bulb Globe Temperature using web bulb temperature
 *=======================================================================================================================
 */
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
   b7518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b751c:	ec51 0b12 	vmov	r0, r1, d2
  // Ta = mcp1 temp
  // Tg = mcp3 temp
  // Tw = wbt_calculate(Ta, RH)

  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
   b7520:	a325      	add	r3, pc, #148	; (adr r3, b75b8 <_Z14wbgt_using_wbtddd+0xa0>)
   b7522:	e9d3 2300 	ldrd	r2, r3, [r3]
double wbgt_using_wbt(double Ta, double Tg, double Tw) {
   b7526:	ec57 6b10 	vmov	r6, r7, d0
   b752a:	ec59 8b11 	vmov	r8, r9, d1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
   b752e:	f7fc ff33 	bl	b4398 <__aeabi_dmul>
   b7532:	a323      	add	r3, pc, #140	; (adr r3, b75c0 <_Z14wbgt_using_wbtddd+0xa8>)
   b7534:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7538:	4604      	mov	r4, r0
   b753a:	460d      	mov	r5, r1
   b753c:	4640      	mov	r0, r8
   b753e:	4649      	mov	r1, r9
   b7540:	f7fc ff2a 	bl	b4398 <__aeabi_dmul>
   b7544:	4602      	mov	r2, r0
   b7546:	460b      	mov	r3, r1
   b7548:	4620      	mov	r0, r4
   b754a:	4629      	mov	r1, r5
   b754c:	f7fc fd6e 	bl	b402c <__adddf3>
   b7550:	a31d      	add	r3, pc, #116	; (adr r3, b75c8 <_Z14wbgt_using_wbtddd+0xb0>)
   b7552:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7556:	4604      	mov	r4, r0
   b7558:	460d      	mov	r5, r1
   b755a:	4630      	mov	r0, r6
   b755c:	4639      	mov	r1, r7
   b755e:	f7fc ff1b 	bl	b4398 <__aeabi_dmul>
   b7562:	4602      	mov	r2, r0
   b7564:	460b      	mov	r3, r1
   b7566:	4620      	mov	r0, r4
   b7568:	4629      	mov	r1, r5
   b756a:	f7fc fd5f 	bl	b402c <__adddf3>

  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
   b756e:	4602      	mov	r2, r0
   b7570:	460b      	mov	r3, r1
  double wbgt = (0.7 * Tw) + (0.2 * Tg) + (0.1 * Ta);  // This will be Celsius
   b7572:	4604      	mov	r4, r0
   b7574:	460d      	mov	r5, r1
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
   b7576:	f7fd f9a9 	bl	b48cc <__aeabi_dcmpun>
   b757a:	b988      	cbnz	r0, b75a0 <_Z14wbgt_using_wbtddd+0x88>
   b757c:	4b0c      	ldr	r3, [pc, #48]	; (b75b0 <_Z14wbgt_using_wbtddd+0x98>)
   b757e:	2200      	movs	r2, #0
   b7580:	4620      	mov	r0, r4
   b7582:	4629      	mov	r1, r5
   b7584:	f7fd f97a 	bl	b487c <__aeabi_dcmplt>
   b7588:	b950      	cbnz	r0, b75a0 <_Z14wbgt_using_wbtddd+0x88>
   b758a:	4b0a      	ldr	r3, [pc, #40]	; (b75b4 <_Z14wbgt_using_wbtddd+0x9c>)
   b758c:	2200      	movs	r2, #0
   b758e:	4620      	mov	r0, r4
   b7590:	4629      	mov	r1, r5
   b7592:	f7fd f991 	bl	b48b8 <__aeabi_dcmpgt>
   b7596:	b918      	cbnz	r0, b75a0 <_Z14wbgt_using_wbtddd+0x88>

  return (wbgt);
}
   b7598:	ec45 4b10 	vmov	d0, r4, r5
   b759c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  wbgt = (isnan(wbgt) || (wbgt < QC_MIN_T)  || (wbgt >QC_MAX_T))  ? QC_ERR_T  : wbgt;
   b75a0:	a501      	add	r5, pc, #4	; (adr r5, b75a8 <_Z14wbgt_using_wbtddd+0x90>)
   b75a2:	e9d5 4500 	ldrd	r4, r5, [r5]
  return (wbgt);
   b75a6:	e7f7      	b.n	b7598 <_Z14wbgt_using_wbtddd+0x80>
   b75a8:	33333333 	.word	0x33333333
   b75ac:	c08f3f33 	.word	0xc08f3f33
   b75b0:	c0440000 	.word	0xc0440000
   b75b4:	404e0000 	.word	0x404e0000
   b75b8:	66666666 	.word	0x66666666
   b75bc:	3fe66666 	.word	0x3fe66666
   b75c0:	9999999a 	.word	0x9999999a
   b75c4:	3fc99999 	.word	0x3fc99999
   b75c8:	9999999a 	.word	0x9999999a
   b75cc:	3fb99999 	.word	0x3fb99999

000b75d0 <_Z17si1145_initializev>:
/* 
 *=======================================================================================================================
 * si1145_initialize() - SI1145 sensor initialize
 *=======================================================================================================================
 */
void si1145_initialize() {
   b75d0:	b570      	push	{r4, r5, r6, lr}
  Output("SI1145:INIT");
   b75d2:	484b      	ldr	r0, [pc, #300]	; (b7700 <_Z17si1145_initializev+0x130>)
   b75d4:	4d4b      	ldr	r5, [pc, #300]	; (b7704 <_Z17si1145_initializev+0x134>)
void si1145_initialize() {
   b75d6:	ed2d 8b02 	vpush	{d8}
  Output("SI1145:INIT");
   b75da:	f7fe fdd7 	bl	b618c <_Z6OutputPKc>
  
  // SSB_SI1145 UV index & IR & Visible Sensor (I2C ADDRESS = 0x60)
  if (! uv.begin(&Wire)) {
   b75de:	f010 f88b 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b75e2:	4601      	mov	r1, r0
   b75e4:	4848      	ldr	r0, [pc, #288]	; (b7708 <_Z17si1145_initializev+0x138>)
   b75e6:	f009 ff63 	bl	c14b0 <_ZN15Adafruit_SI11455beginEP7TwoWire>
   b75ea:	4604      	mov	r4, r0
   b75ec:	b958      	cbnz	r0, b7606 <_Z17si1145_initializev+0x36>
    Output ("SI:NF");
   b75ee:	4847      	ldr	r0, [pc, #284]	; (b770c <_Z17si1145_initializev+0x13c>)
   b75f0:	f7fe fdcc 	bl	b618c <_Z6OutputPKc>
    SI1145_exists = false;
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
   b75f4:	4a46      	ldr	r2, [pc, #280]	; (b7710 <_Z17si1145_initializev+0x140>)
    SI1145_exists = false;
   b75f6:	702c      	strb	r4, [r5, #0]
    SystemStatusBits |= SSB_SI1145;  // Turn On Bit
   b75f8:	6813      	ldr	r3, [r2, #0]
   b75fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   b75fe:	6013      	str	r3, [r2, #0]
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
    Output (msgbuf);
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
    Output (msgbuf);
  }
}
   b7600:	ecbd 8b02 	vpop	{d8}
   b7604:	bd70      	pop	{r4, r5, r6, pc}
    SI1145_exists = true;
   b7606:	2301      	movs	r3, #1
    Output ("SI:OK");
   b7608:	4842      	ldr	r0, [pc, #264]	; (b7714 <_Z17si1145_initializev+0x144>)
    SI1145_exists = true;
   b760a:	702b      	strb	r3, [r5, #0]
    Output ("SI:OK");
   b760c:	f7fe fdbe 	bl	b618c <_Z6OutputPKc>
    si_last_vis = uv.readVisible();
   b7610:	483d      	ldr	r0, [pc, #244]	; (b7708 <_Z17si1145_initializev+0x138>)
   b7612:	4c41      	ldr	r4, [pc, #260]	; (b7718 <_Z17si1145_initializev+0x148>)
    si_last_ir = uv.readIR();
   b7614:	4e41      	ldr	r6, [pc, #260]	; (b771c <_Z17si1145_initializev+0x14c>)
    si_last_uv = uv.readUV()/100.0;
   b7616:	4d42      	ldr	r5, [pc, #264]	; (b7720 <_Z17si1145_initializev+0x150>)
    si_last_vis = uv.readVisible();
   b7618:	f009 fe63 	bl	c12e2 <_ZN15Adafruit_SI114511readVisibleEv>
   b761c:	ee07 0a90 	vmov	s15, r0
   b7620:	eef8 7a67 	vcvt.f32.u32	s15, s15
    si_last_ir = uv.readIR();
   b7624:	4838      	ldr	r0, [pc, #224]	; (b7708 <_Z17si1145_initializev+0x138>)
    si_last_vis = uv.readVisible();
   b7626:	edc4 7a00 	vstr	s15, [r4]
    si_last_ir = uv.readIR();
   b762a:	f009 fe5d 	bl	c12e8 <_ZN15Adafruit_SI11456readIREv>
   b762e:	ee07 0a90 	vmov	s15, r0
   b7632:	eef8 7a67 	vcvt.f32.u32	s15, s15
    si_last_uv = uv.readUV()/100.0;
   b7636:	4834      	ldr	r0, [pc, #208]	; (b7708 <_Z17si1145_initializev+0x138>)
    si_last_ir = uv.readIR();
   b7638:	edc6 7a00 	vstr	s15, [r6]
    si_last_uv = uv.readUV()/100.0;
   b763c:	f009 fe4e 	bl	c12dc <_ZN15Adafruit_SI11456readUVEv>
   b7640:	f7fc fe40 	bl	b42c4 <__aeabi_i2d>
   b7644:	4b37      	ldr	r3, [pc, #220]	; (b7724 <_Z17si1145_initializev+0x154>)
   b7646:	2200      	movs	r2, #0
   b7648:	f7fc ffd0 	bl	b45ec <__aeabi_ddiv>
   b764c:	f7fd f99c 	bl	b4988 <__aeabi_d2f>
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
   b7650:	ed94 8a00 	vldr	s16, [r4]
    si_last_uv = uv.readUV()/100.0;
   b7654:	6028      	str	r0, [r5, #0]
    sprintf (msgbuf, "SI:VI[%d.%02d]", (int)si_last_vis, (int)(si_last_vis*100.0)%100); 
   b7656:	ee18 0a10 	vmov	r0, s16
   b765a:	f7fc fe45 	bl	b42e8 <__aeabi_f2d>
   b765e:	4b31      	ldr	r3, [pc, #196]	; (b7724 <_Z17si1145_initializev+0x154>)
   b7660:	2200      	movs	r2, #0
   b7662:	f7fc fe99 	bl	b4398 <__aeabi_dmul>
   b7666:	f7fd f947 	bl	b48f8 <__aeabi_d2iz>
   b766a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b766e:	2464      	movs	r4, #100	; 0x64
   b7670:	ee17 2a90 	vmov	r2, s15
   b7674:	fb90 f3f4 	sdiv	r3, r0, r4
   b7678:	492b      	ldr	r1, [pc, #172]	; (b7728 <_Z17si1145_initializev+0x158>)
   b767a:	fb03 0314 	mls	r3, r3, r4, r0
   b767e:	482b      	ldr	r0, [pc, #172]	; (b772c <_Z17si1145_initializev+0x15c>)
   b7680:	f00e f80e 	bl	c56a0 <sprintf>
    Output (msgbuf);
   b7684:	4829      	ldr	r0, [pc, #164]	; (b772c <_Z17si1145_initializev+0x15c>)
   b7686:	f7fe fd81 	bl	b618c <_Z6OutputPKc>
    sprintf (msgbuf, "SI:IR[%d.%02d]", (int)si_last_ir, (int)(si_last_ir*100.0)%100); 
   b768a:	ed96 8a00 	vldr	s16, [r6]
   b768e:	ee18 0a10 	vmov	r0, s16
   b7692:	f7fc fe29 	bl	b42e8 <__aeabi_f2d>
   b7696:	4b23      	ldr	r3, [pc, #140]	; (b7724 <_Z17si1145_initializev+0x154>)
   b7698:	2200      	movs	r2, #0
   b769a:	f7fc fe7d 	bl	b4398 <__aeabi_dmul>
   b769e:	f7fd f92b 	bl	b48f8 <__aeabi_d2iz>
   b76a2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b76a6:	4922      	ldr	r1, [pc, #136]	; (b7730 <_Z17si1145_initializev+0x160>)
   b76a8:	fb90 f3f4 	sdiv	r3, r0, r4
   b76ac:	ee17 2a90 	vmov	r2, s15
   b76b0:	fb03 0314 	mls	r3, r3, r4, r0
   b76b4:	481d      	ldr	r0, [pc, #116]	; (b772c <_Z17si1145_initializev+0x15c>)
   b76b6:	f00d fff3 	bl	c56a0 <sprintf>
    Output (msgbuf);
   b76ba:	481c      	ldr	r0, [pc, #112]	; (b772c <_Z17si1145_initializev+0x15c>)
   b76bc:	f7fe fd66 	bl	b618c <_Z6OutputPKc>
    sprintf (msgbuf, "SI:UV[%d.%02d]", (int)si_last_uv, (int)(si_last_uv*100.0)%100); 
   b76c0:	ed95 8a00 	vldr	s16, [r5]
   b76c4:	ee18 0a10 	vmov	r0, s16
   b76c8:	f7fc fe0e 	bl	b42e8 <__aeabi_f2d>
   b76cc:	4b15      	ldr	r3, [pc, #84]	; (b7724 <_Z17si1145_initializev+0x154>)
   b76ce:	2200      	movs	r2, #0
   b76d0:	f7fc fe62 	bl	b4398 <__aeabi_dmul>
   b76d4:	f7fd f910 	bl	b48f8 <__aeabi_d2iz>
   b76d8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b76dc:	fb90 f3f4 	sdiv	r3, r0, r4
   b76e0:	ee17 2a90 	vmov	r2, s15
   b76e4:	fb03 0314 	mls	r3, r3, r4, r0
   b76e8:	4912      	ldr	r1, [pc, #72]	; (b7734 <_Z17si1145_initializev+0x164>)
   b76ea:	4810      	ldr	r0, [pc, #64]	; (b772c <_Z17si1145_initializev+0x15c>)
   b76ec:	f00d ffd8 	bl	c56a0 <sprintf>
}
   b76f0:	ecbd 8b02 	vpop	{d8}
    Output (msgbuf);
   b76f4:	480d      	ldr	r0, [pc, #52]	; (b772c <_Z17si1145_initializev+0x15c>)
}
   b76f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output (msgbuf);
   b76fa:	f7fe bd47 	b.w	b618c <_Z6OutputPKc>
   b76fe:	bf00      	nop
   b7700:	000caaaa 	.word	0x000caaaa
   b7704:	2002df8e 	.word	0x2002df8e
   b7708:	2003e39c 	.word	0x2003e39c
   b770c:	000cbdf6 	.word	0x000cbdf6
   b7710:	2002d908 	.word	0x2002d908
   b7714:	000caab6 	.word	0x000caab6
   b7718:	2003e360 	.word	0x2003e360
   b771c:	2003e358 	.word	0x2003e358
   b7720:	2003e35c 	.word	0x2003e35c
   b7724:	40590000 	.word	0x40590000
   b7728:	000caabc 	.word	0x000caabc
   b772c:	200328c0 	.word	0x200328c0
   b7730:	000caacb 	.word	0x000caacb
   b7734:	000caada 	.word	0x000caada

000b7738 <_Z14vlx_initializev>:
 * 400  lx Sunrise or sunset on a clear day
 * 1000 lx Overcast day; typical TV studio lighting
 * 
 *=======================================================================================================================
 */
void vlx_initialize() {
   b7738:	b508      	push	{r3, lr}
  Output("VLX:INIT");
   b773a:	480f      	ldr	r0, [pc, #60]	; (b7778 <_Z14vlx_initializev+0x40>)
   b773c:	f7fe fd26 	bl	b618c <_Z6OutputPKc>

  if (veml.begin()) {
   b7740:	f00f ffda 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7744:	4601      	mov	r1, r0
   b7746:	480d      	ldr	r0, [pc, #52]	; (b777c <_Z14vlx_initializev+0x44>)
   b7748:	f00a fc23 	bl	c1f92 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   b774c:	4a0c      	ldr	r2, [pc, #48]	; (b7780 <_Z14vlx_initializev+0x48>)
   b774e:	4b0d      	ldr	r3, [pc, #52]	; (b7784 <_Z14vlx_initializev+0x4c>)
   b7750:	b140      	cbz	r0, b7764 <_Z14vlx_initializev+0x2c>
    VEML7700_exists = true;
   b7752:	2101      	movs	r1, #1
   b7754:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "VLX OK";
   b7756:	4a0c      	ldr	r2, [pc, #48]	; (b7788 <_Z14vlx_initializev+0x50>)
   b7758:	601a      	str	r2, [r3, #0]
  else {
    msgp = (char *) "VLX NF";
    VEML7700_exists = false;
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
  }
  Output (msgp);
   b775a:	6818      	ldr	r0, [r3, #0]
}
   b775c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
   b7760:	f7fe bd14 	b.w	b618c <_Z6OutputPKc>
    msgp = (char *) "VLX NF";
   b7764:	4909      	ldr	r1, [pc, #36]	; (b778c <_Z14vlx_initializev+0x54>)
   b7766:	6019      	str	r1, [r3, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
   b7768:	4909      	ldr	r1, [pc, #36]	; (b7790 <_Z14vlx_initializev+0x58>)
    VEML7700_exists = false;
   b776a:	7010      	strb	r0, [r2, #0]
    SystemStatusBits |= SSB_VLX;  // Turn On Bit
   b776c:	680a      	ldr	r2, [r1, #0]
   b776e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   b7772:	600a      	str	r2, [r1, #0]
   b7774:	e7f1      	b.n	b775a <_Z14vlx_initializev+0x22>
   b7776:	bf00      	nop
   b7778:	000caae9 	.word	0x000caae9
   b777c:	2003e3a4 	.word	0x2003e3a4
   b7780:	2002dfa0 	.word	0x2002dfa0
   b7784:	20032cc0 	.word	0x20032cc0
   b7788:	000caaf2 	.word	0x000caaf2
   b778c:	000caaf9 	.word	0x000caaf9
   b7790:	2002d908 	.word	0x2002d908

000b7794 <_Z14blx_initializev>:
/* 
 *=======================================================================================================================
 * blx_initialize() - DFRobot_B_LUX_V30B sensor
 *=======================================================================================================================
 */
void blx_initialize() {
   b7794:	b508      	push	{r3, lr}
  Output("BLX:INIT");
   b7796:	480d      	ldr	r0, [pc, #52]	; (b77cc <_Z14blx_initializev+0x38>)
   b7798:	f7fe fcf8 	bl	b618c <_Z6OutputPKc>

  if (I2C_Device_Exist(BLX_ADDRESS)) {
   b779c:	204a      	movs	r0, #74	; 0x4a
   b779e:	f7fe fae7 	bl	b5d70 <_Z16I2C_Device_Existh>
   b77a2:	4a0b      	ldr	r2, [pc, #44]	; (b77d0 <_Z14blx_initializev+0x3c>)
   b77a4:	4b0b      	ldr	r3, [pc, #44]	; (b77d4 <_Z14blx_initializev+0x40>)
   b77a6:	b140      	cbz	r0, b77ba <_Z14blx_initializev+0x26>
    BLX_exists = true;
   b77a8:	2101      	movs	r1, #1
   b77aa:	7011      	strb	r1, [r2, #0]
    msgp = (char *) "BLX:OK";
   b77ac:	4a0a      	ldr	r2, [pc, #40]	; (b77d8 <_Z14blx_initializev+0x44>)
   b77ae:	601a      	str	r2, [r3, #0]
  else {
    BLX_exists = false;
    msgp = (char *) "BLX:NF";
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
  }
  Output (msgp);
   b77b0:	6818      	ldr	r0, [r3, #0]
}
   b77b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
   b77b6:	f7fe bce9 	b.w	b618c <_Z6OutputPKc>
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
   b77ba:	4908      	ldr	r1, [pc, #32]	; (b77dc <_Z14blx_initializev+0x48>)
    BLX_exists = false;
   b77bc:	7010      	strb	r0, [r2, #0]
    msgp = (char *) "BLX:NF";
   b77be:	4a08      	ldr	r2, [pc, #32]	; (b77e0 <_Z14blx_initializev+0x4c>)
   b77c0:	601a      	str	r2, [r3, #0]
    SystemStatusBits |= SSB_BLX;  // Turn On Bit
   b77c2:	680a      	ldr	r2, [r1, #0]
   b77c4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   b77c8:	600a      	str	r2, [r1, #0]
   b77ca:	e7f1      	b.n	b77b0 <_Z14blx_initializev+0x1c>
   b77cc:	000cab00 	.word	0x000cab00
   b77d0:	2002da80 	.word	0x2002da80
   b77d4:	20032cc0 	.word	0x20032cc0
   b77d8:	000cab09 	.word	0x000cab09
   b77dc:	2002d908 	.word	0x2002d908
   b77e0:	000cab10 	.word	0x000cab10
   b77e4:	00000000 	.word	0x00000000

000b77e8 <_Z15blx_takereadingv>:
/* 
 *=======================================================================================================================
 * blx_takereading() - DFRobot_B_LUX_V30B sensor reading
 *=======================================================================================================================
 */
float blx_takereading() {
   b77e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t raw;
  uint8_t data[4]; // Array to hold the 4 bytes of data
  const unsigned long timeout = 1000; // Timeout in milliseconds
  unsigned long startTime;

  Wire.beginTransmission(BLX_ADDRESS);
   b77ea:	f00f ff85 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b77ee:	214a      	movs	r1, #74	; 0x4a
   b77f0:	f00e fd8e 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x00); // Point to the data register address
   b77f4:	f00f ff80 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b77f8:	2100      	movs	r1, #0
   b77fa:	f7fe f9e3 	bl	b5bc4 <_ZN7TwoWire5writeEi.isra.0>
  Wire.endTransmission(false); // false tells the I2C master to not release the bus between the write and read operations
   b77fe:	f00f ff7b 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7802:	2100      	movs	r1, #0
   b7804:	f00e fda1 	bl	c634a <_ZN7TwoWire15endTransmissionEh>

  // Request 4 bytes from the device
  Wire.requestFrom(BLX_ADDRESS, 4);
   b7808:	f00f ff76 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b780c:	2204      	movs	r2, #4
   b780e:	214a      	movs	r1, #74	; 0x4a
   b7810:	f00e fd77 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7814:	f00d fbfc 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
   b7818:	4604      	mov	r4, r0

  startTime = millis(); // Record the start time
  while (Wire.available() < 4) { // Wait for all bytes to be received
   b781a:	f00f ff6d 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b781e:	6803      	ldr	r3, [r0, #0]
   b7820:	691b      	ldr	r3, [r3, #16]
   b7822:	4798      	blx	r3
   b7824:	2803      	cmp	r0, #3
   b7826:	dc09      	bgt.n	b783c <_Z15blx_takereadingv+0x54>
   b7828:	f00d fbf2 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - startTime > timeout) { // Check if timeout has been reached
   b782c:	1b00      	subs	r0, r0, r4
   b782e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7832:	d826      	bhi.n	b7882 <_Z15blx_takereadingv+0x9a>
      return -1; // Return error code if timeout occurs
    }
    delay(1); // Short delay to prevent busy-waiting
   b7834:	2001      	movs	r0, #1
   b7836:	f00d ff7b 	bl	c5730 <delay>
  while (Wire.available() < 4) { // Wait for all bytes to be received
   b783a:	e7ee      	b.n	b781a <_Z15blx_takereadingv+0x32>
   b783c:	ad01      	add	r5, sp, #4
  }

  for (int i = 0; i < 4; i++) {
   b783e:	2400      	movs	r4, #0
    data[i] = Wire.read(); // Read each byte into the array
   b7840:	f00f ff5a 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7844:	6803      	ldr	r3, [r0, #0]
   b7846:	695b      	ldr	r3, [r3, #20]
   b7848:	4798      	blx	r3
  for (int i = 0; i < 4; i++) {
   b784a:	3401      	adds	r4, #1
   b784c:	2c04      	cmp	r4, #4
    data[i] = Wire.read(); // Read each byte into the array
   b784e:	f805 0b01 	strb.w	r0, [r5], #1
  for (int i = 0; i < 4; i++) {
   b7852:	d1f5      	bne.n	b7840 <_Z15blx_takereadingv+0x58>
  raw = data[3];
  raw = (raw<<8)|data[2];
  raw = (raw<<8)|data[1];
  raw = (raw<<8)|data[0];

  lux = ((float)raw*1.4) / 1000;  // Is 1.4 scaling multiplier based on the sensor's internal calibration ?
   b7854:	eddd 7a01 	vldr	s15, [sp, #4]
   b7858:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b785c:	ee17 0a90 	vmov	r0, s15
   b7860:	f7fc fd42 	bl	b42e8 <__aeabi_f2d>
   b7864:	a309      	add	r3, pc, #36	; (adr r3, b788c <_Z15blx_takereadingv+0xa4>)
   b7866:	e9d3 2300 	ldrd	r2, r3, [r3]
   b786a:	f7fc fd95 	bl	b4398 <__aeabi_dmul>
   b786e:	4b06      	ldr	r3, [pc, #24]	; (b7888 <_Z15blx_takereadingv+0xa0>)
   b7870:	2200      	movs	r2, #0
   b7872:	f7fc febb 	bl	b45ec <__aeabi_ddiv>
   b7876:	f7fd f887 	bl	b4988 <__aeabi_d2f>
   b787a:	ee00 0a10 	vmov	s0, r0
                                    // Is divide by 1000 converting from millilux ?

  // sprintf (msgbuf, "BLUX30 LUX %f RAW %lu\n", lux, raw);
  // Output (msgbuf);
  return(lux);
}
   b787e:	b003      	add	sp, #12
   b7880:	bd30      	pop	{r4, r5, pc}
      return -1; // Return error code if timeout occurs
   b7882:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   b7886:	e7fa      	b.n	b787e <_Z15blx_takereadingv+0x96>
   b7888:	408f4000 	.word	0x408f4000
   b788c:	66666666 	.word	0x66666666
   b7890:	3ff66666 	.word	0x3ff66666

000b7894 <_Z13pm25aqi_clearv>:
 *=======================================================================================================================
 * pm25aqi_clear() - clear observation
 *=======================================================================================================================
 */
void pm25aqi_clear() {
  pm25aqi_obs.max_s10 = 0;
   b7894:	4b04      	ldr	r3, [pc, #16]	; (b78a8 <_Z13pm25aqi_clearv+0x14>)
   b7896:	2200      	movs	r2, #0
   b7898:	801a      	strh	r2, [r3, #0]
  pm25aqi_obs.max_s25 = 0;
   b789a:	805a      	strh	r2, [r3, #2]
  pm25aqi_obs.max_s100 = 0;
   b789c:	809a      	strh	r2, [r3, #4]
  pm25aqi_obs.max_e10 = 0;
   b789e:	80da      	strh	r2, [r3, #6]
  pm25aqi_obs.max_e25 = 0;
   b78a0:	811a      	strh	r2, [r3, #8]
  pm25aqi_obs.max_e100 = 0;
   b78a2:	815a      	strh	r2, [r3, #10]
}
   b78a4:	4770      	bx	lr
   b78a6:	bf00      	nop
   b78a8:	2003e1a4 	.word	0x2003e1a4

000b78ac <_Z18pm25aqi_initializev>:
/* 
 *=======================================================================================================================
 * pm25aqi_initialize() - air quality sensor
 *=======================================================================================================================
 */
void pm25aqi_initialize() {
   b78ac:	b538      	push	{r3, r4, r5, lr}
  Output("PM25AQI:INIT");
   b78ae:	4817      	ldr	r0, [pc, #92]	; (b790c <_Z18pm25aqi_initializev+0x60>)
   b78b0:	4c17      	ldr	r4, [pc, #92]	; (b7910 <_Z18pm25aqi_initializev+0x64>)
   b78b2:	4d18      	ldr	r5, [pc, #96]	; (b7914 <_Z18pm25aqi_initializev+0x68>)
   b78b4:	f7fe fc6a 	bl	b618c <_Z6OutputPKc>
  Wire.beginTransmission(PM25AQI_ADDRESS);
   b78b8:	f00f ff1e 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b78bc:	2112      	movs	r1, #18
   b78be:	f00e fd27 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
   b78c2:	f00f ff19 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b78c6:	f00e fd44 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
   b78ca:	b168      	cbz	r0, b78e8 <_Z18pm25aqi_initializev+0x3c>
    msgp = (char *) "PM:NF";
   b78cc:	4b12      	ldr	r3, [pc, #72]	; (b7918 <_Z18pm25aqi_initializev+0x6c>)
    PM25AQI_exists = false;
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
   b78ce:	4a13      	ldr	r2, [pc, #76]	; (b791c <_Z18pm25aqi_initializev+0x70>)
    msgp = (char *) "PM:NF";
   b78d0:	6023      	str	r3, [r4, #0]
    PM25AQI_exists = false;
   b78d2:	2300      	movs	r3, #0
   b78d4:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
   b78d6:	6813      	ldr	r3, [r2, #0]
   b78d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   b78dc:	6013      	str	r3, [r2, #0]
      msgp = (char *) "PM:OK";
      PM25AQI_exists = true;
      pm25aqi_clear();
    }
  }
  Output (msgp);
   b78de:	6820      	ldr	r0, [r4, #0]
}
   b78e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
   b78e4:	f7fe bc52 	b.w	b618c <_Z6OutputPKc>
    if (! pmaq.begin_I2C()) {      // connect to the sensor over I2C
   b78e8:	f00f ff06 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b78ec:	4601      	mov	r1, r0
   b78ee:	480c      	ldr	r0, [pc, #48]	; (b7920 <_Z18pm25aqi_initializev+0x74>)
   b78f0:	f009 fb3d 	bl	c0f6e <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
   b78f4:	b918      	cbnz	r0, b78fe <_Z18pm25aqi_initializev+0x52>
      msgp = (char *) "PM:Begin NF";
   b78f6:	4b0b      	ldr	r3, [pc, #44]	; (b7924 <_Z18pm25aqi_initializev+0x78>)
   b78f8:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = false;
   b78fa:	7028      	strb	r0, [r5, #0]
   b78fc:	e7ef      	b.n	b78de <_Z18pm25aqi_initializev+0x32>
      msgp = (char *) "PM:OK";
   b78fe:	4b0a      	ldr	r3, [pc, #40]	; (b7928 <_Z18pm25aqi_initializev+0x7c>)
   b7900:	6023      	str	r3, [r4, #0]
      PM25AQI_exists = true;
   b7902:	2301      	movs	r3, #1
   b7904:	702b      	strb	r3, [r5, #0]
      pm25aqi_clear();
   b7906:	f7ff ffc5 	bl	b7894 <_Z13pm25aqi_clearv>
   b790a:	e7e8      	b.n	b78de <_Z18pm25aqi_initializev+0x32>
   b790c:	000cab17 	.word	0x000cab17
   b7910:	20032cc0 	.word	0x20032cc0
   b7914:	2002dacc 	.word	0x2002dacc
   b7918:	000cab24 	.word	0x000cab24
   b791c:	2002d908 	.word	0x2002d908
   b7920:	2003e1b0 	.word	0x2003e1b0
   b7924:	000cab2a 	.word	0x000cab2a
   b7928:	000cab36 	.word	0x000cab36

000b792c <_Z19pm25aqi_TakeReadingv>:
/* 
 *=======================================================================================================================
 * pm25aqi_TakeReading() - take air quality reading - keep the larger value
 *=======================================================================================================================
 */
void pm25aqi_TakeReading() {
   b792c:	b510      	push	{r4, lr}
  if (PM25AQI_exists) {
   b792e:	4c1d      	ldr	r4, [pc, #116]	; (b79a4 <_Z19pm25aqi_TakeReadingv+0x78>)
   b7930:	7823      	ldrb	r3, [r4, #0]
void pm25aqi_TakeReading() {
   b7932:	b088      	sub	sp, #32
  if (PM25AQI_exists) {
   b7934:	b34b      	cbz	r3, b798a <_Z19pm25aqi_TakeReadingv+0x5e>
    PM25_AQI_Data aqid;

    if (pmaq.read(&aqid)) {
   b7936:	481c      	ldr	r0, [pc, #112]	; (b79a8 <_Z19pm25aqi_TakeReadingv+0x7c>)
   b7938:	4669      	mov	r1, sp
   b793a:	f009 fb2e 	bl	c0f9a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>
   b793e:	b330      	cbz	r0, b798e <_Z19pm25aqi_TakeReadingv+0x62>
      if (aqid.pm10_standard  > pm25aqi_obs.max_s10)  { pm25aqi_obs.max_s10  = aqid.pm10_standard;  }
   b7940:	4b1a      	ldr	r3, [pc, #104]	; (b79ac <_Z19pm25aqi_TakeReadingv+0x80>)
   b7942:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   b7946:	8819      	ldrh	r1, [r3, #0]
   b7948:	4291      	cmp	r1, r2
   b794a:	bf38      	it	cc
   b794c:	801a      	strhcc	r2, [r3, #0]
      if (aqid.pm25_standard  > pm25aqi_obs.max_s25)  { pm25aqi_obs.max_s25  = aqid.pm25_standard;  }
   b794e:	8859      	ldrh	r1, [r3, #2]
   b7950:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   b7954:	4291      	cmp	r1, r2
   b7956:	bf38      	it	cc
   b7958:	805a      	strhcc	r2, [r3, #2]
      if (aqid.pm100_standard > pm25aqi_obs.max_s100) { pm25aqi_obs.max_s100 = aqid.pm100_standard; }
   b795a:	8899      	ldrh	r1, [r3, #4]
   b795c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   b7960:	4291      	cmp	r1, r2
   b7962:	bf38      	it	cc
   b7964:	809a      	strhcc	r2, [r3, #4]

      if (aqid.pm10_env  > pm25aqi_obs.max_e10)  { pm25aqi_obs.max_e10  = aqid.pm10_env;  }
   b7966:	88d9      	ldrh	r1, [r3, #6]
   b7968:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   b796c:	4291      	cmp	r1, r2
   b796e:	bf38      	it	cc
   b7970:	80da      	strhcc	r2, [r3, #6]
      if (aqid.pm25_env  > pm25aqi_obs.max_e25)  { pm25aqi_obs.max_e25  = aqid.pm25_env;  }
   b7972:	8919      	ldrh	r1, [r3, #8]
   b7974:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   b7978:	4291      	cmp	r1, r2
   b797a:	bf38      	it	cc
   b797c:	811a      	strhcc	r2, [r3, #8]
      if (aqid.pm100_env > pm25aqi_obs.max_e100) { pm25aqi_obs.max_e100 = aqid.pm100_env; }
   b797e:	8959      	ldrh	r1, [r3, #10]
   b7980:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   b7984:	4291      	cmp	r1, r2
   b7986:	d200      	bcs.n	b798a <_Z19pm25aqi_TakeReadingv+0x5e>
   b7988:	815a      	strh	r2, [r3, #10]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
    }
  }
}
   b798a:	b008      	add	sp, #32
   b798c:	bd10      	pop	{r4, pc}
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
   b798e:	4a08      	ldr	r2, [pc, #32]	; (b79b0 <_Z19pm25aqi_TakeReadingv+0x84>)
      PM25AQI_exists = false;
   b7990:	7020      	strb	r0, [r4, #0]
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
   b7992:	6813      	ldr	r3, [r2, #0]
      Output ("PM OFFLINE");
   b7994:	4807      	ldr	r0, [pc, #28]	; (b79b4 <_Z19pm25aqi_TakeReadingv+0x88>)
      SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
   b7996:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   b799a:	6013      	str	r3, [r2, #0]
      Output ("PM OFFLINE");
   b799c:	f7fe fbf6 	bl	b618c <_Z6OutputPKc>
}
   b79a0:	e7f3      	b.n	b798a <_Z19pm25aqi_TakeReadingv+0x5e>
   b79a2:	bf00      	nop
   b79a4:	2002dacc 	.word	0x2002dacc
   b79a8:	2003e1b0 	.word	0x2003e1b0
   b79ac:	2003e1a4 	.word	0x2003e1a4
   b79b0:	2002d908 	.word	0x2002d908
   b79b4:	000cab3c 	.word	0x000cab3c

000b79b8 <_Z14hdc_initializev>:
/* 
 *=======================================================================================================================
 * hdc_initialize() - HDC3002c sensor initialize
 *=======================================================================================================================
 */
void hdc_initialize() {
   b79b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b79ba:	b085      	sub	sp, #20
  Output("HDC:INIT");
   b79bc:	482b      	ldr	r0, [pc, #172]	; (b7a6c <_Z14hdc_initializev+0xb4>)
  
  // 1st HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x44)
  hdc1 = Adafruit_HDC302x();
   b79be:	4e2c      	ldr	r6, [pc, #176]	; (b7a70 <_Z14hdc_initializev+0xb8>)
   b79c0:	4d2c      	ldr	r5, [pc, #176]	; (b7a74 <_Z14hdc_initializev+0xbc>)
   b79c2:	4f2d      	ldr	r7, [pc, #180]	; (b7a78 <_Z14hdc_initializev+0xc0>)
   b79c4:	ac02      	add	r4, sp, #8
  Output("HDC:INIT");
   b79c6:	f7fe fbe1 	bl	b618c <_Z6OutputPKc>
  hdc1 = Adafruit_HDC302x();
   b79ca:	4620      	mov	r0, r4
   b79cc:	f008 ff1d 	bl	c080a <_ZN16Adafruit_HDC302xC1Ev>
   b79d0:	e894 0003 	ldmia.w	r4, {r0, r1}
   b79d4:	80b1      	strh	r1, [r6, #4]
   b79d6:	6030      	str	r0, [r6, #0]
  if (!hdc1.begin(HDC_ADDRESS_1, &Wire)) {
   b79d8:	f00f fe8e 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b79dc:	2146      	movs	r1, #70	; 0x46
   b79de:	4602      	mov	r2, r0
   b79e0:	4630      	mov	r0, r6
   b79e2:	f008 ffe5 	bl	c09b0 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
   b79e6:	bb48      	cbnz	r0, b7a3c <_Z14hdc_initializev+0x84>
    msgp = (char *) "HDC1 NF";
    HDC_1_exists = false;
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
   b79e8:	4a24      	ldr	r2, [pc, #144]	; (b7a7c <_Z14hdc_initializev+0xc4>)
    msgp = (char *) "HDC1 NF";
   b79ea:	4b25      	ldr	r3, [pc, #148]	; (b7a80 <_Z14hdc_initializev+0xc8>)
   b79ec:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
   b79ee:	6813      	ldr	r3, [r2, #0]
    HDC_1_exists = false;
   b79f0:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
   b79f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b79f6:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_1_exists = true;
    msgp = (char *) "HDC1 OK";
  }
  Output (msgp);
   b79f8:	6828      	ldr	r0, [r5, #0]

  // 2nd HDC I2C Temperature/Humidity Sensor (I2C ADDRESS = 0x45)
  hdc2 = Adafruit_HDC302x();
   b79fa:	4e22      	ldr	r6, [pc, #136]	; (b7a84 <_Z14hdc_initializev+0xcc>)
   b79fc:	4f22      	ldr	r7, [pc, #136]	; (b7a88 <_Z14hdc_initializev+0xd0>)
  Output (msgp);
   b79fe:	f7fe fbc5 	bl	b618c <_Z6OutputPKc>
  hdc2 = Adafruit_HDC302x();
   b7a02:	4620      	mov	r0, r4
   b7a04:	f008 ff01 	bl	c080a <_ZN16Adafruit_HDC302xC1Ev>
   b7a08:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7a0c:	80b1      	strh	r1, [r6, #4]
   b7a0e:	6030      	str	r0, [r6, #0]
  if (!hdc2.begin(HDC_ADDRESS_2, &Wire)) {
   b7a10:	f00f fe72 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7a14:	2147      	movs	r1, #71	; 0x47
   b7a16:	4602      	mov	r2, r0
   b7a18:	4630      	mov	r0, r6
   b7a1a:	f008 ffc9 	bl	c09b0 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>
   b7a1e:	b9c8      	cbnz	r0, b7a54 <_Z14hdc_initializev+0x9c>
    msgp = (char *) "HDC2 NF";
    HDC_2_exists = false;
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
   b7a20:	4a16      	ldr	r2, [pc, #88]	; (b7a7c <_Z14hdc_initializev+0xc4>)
    msgp = (char *) "HDC2 NF";
   b7a22:	4b1a      	ldr	r3, [pc, #104]	; (b7a8c <_Z14hdc_initializev+0xd4>)
   b7a24:	602b      	str	r3, [r5, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
   b7a26:	6813      	ldr	r3, [r2, #0]
    HDC_2_exists = false;
   b7a28:	7038      	strb	r0, [r7, #0]
    SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
   b7a2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   b7a2e:	6013      	str	r3, [r2, #0]
    double t,h;
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
    HDC_2_exists = true;
    msgp = (char *) "HDC2 OK";
  }
  Output (msgp);
   b7a30:	6828      	ldr	r0, [r5, #0]
}
   b7a32:	b005      	add	sp, #20
   b7a34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  Output (msgp);
   b7a38:	f7fe bba8 	b.w	b618c <_Z6OutputPKc>
    hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
   b7a3c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
   b7a40:	4622      	mov	r2, r4
   b7a42:	4669      	mov	r1, sp
   b7a44:	4630      	mov	r0, r6
   b7a46:	f008 ff83 	bl	c0950 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_1_exists = true;
   b7a4a:	2301      	movs	r3, #1
   b7a4c:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC1 OK";
   b7a4e:	4b10      	ldr	r3, [pc, #64]	; (b7a90 <_Z14hdc_initializev+0xd8>)
   b7a50:	602b      	str	r3, [r5, #0]
   b7a52:	e7d1      	b.n	b79f8 <_Z14hdc_initializev+0x40>
    hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0);
   b7a54:	f44f 5310 	mov.w	r3, #9216	; 0x2400
   b7a58:	4622      	mov	r2, r4
   b7a5a:	4669      	mov	r1, sp
   b7a5c:	4630      	mov	r0, r6
   b7a5e:	f008 ff77 	bl	c0950 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
    HDC_2_exists = true;
   b7a62:	2301      	movs	r3, #1
   b7a64:	703b      	strb	r3, [r7, #0]
    msgp = (char *) "HDC2 OK";
   b7a66:	4b0b      	ldr	r3, [pc, #44]	; (b7a94 <_Z14hdc_initializev+0xdc>)
   b7a68:	602b      	str	r3, [r5, #0]
   b7a6a:	e7e1      	b.n	b7a30 <_Z14hdc_initializev+0x78>
   b7a6c:	000cab47 	.word	0x000cab47
   b7a70:	2002e618 	.word	0x2002e618
   b7a74:	20032cc0 	.word	0x20032cc0
   b7a78:	2002daac 	.word	0x2002daac
   b7a7c:	2002d908 	.word	0x2002d908
   b7a80:	000cab50 	.word	0x000cab50
   b7a84:	2002e620 	.word	0x2002e620
   b7a88:	2002daad 	.word	0x2002daad
   b7a8c:	000cab60 	.word	0x000cab60
   b7a90:	000cab58 	.word	0x000cab58
   b7a94:	000cab68 	.word	0x000cab68

000b7a98 <_Z14lps_initializev>:
/* 
 *=======================================================================================================================
 * lps_initialize() - LPS35HW Pressure and Temperature initialize
 *=======================================================================================================================
 */
void lps_initialize() {
   b7a98:	b570      	push	{r4, r5, r6, lr}
  Output("LPS:INIT");
   b7a9a:	4831      	ldr	r0, [pc, #196]	; (b7b60 <_Z14lps_initializev+0xc8>)
  
  // 1st LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5D)
  lps1 = Adafruit_LPS35HW();
   b7a9c:	4c31      	ldr	r4, [pc, #196]	; (b7b64 <_Z14lps_initializev+0xcc>)
   b7a9e:	4e32      	ldr	r6, [pc, #200]	; (b7b68 <_Z14lps_initializev+0xd0>)
void lps_initialize() {
   b7aa0:	b088      	sub	sp, #32
  Output("LPS:INIT");
   b7aa2:	f7fe fb73 	bl	b618c <_Z6OutputPKc>
  lps1 = Adafruit_LPS35HW();
   b7aa6:	ad01      	add	r5, sp, #4
   b7aa8:	a801      	add	r0, sp, #4
   b7aaa:	f009 f881 	bl	c0bb0 <_ZN16Adafruit_LPS35HWC1Ev>
   b7aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b7ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  if (!lps1.begin_I2C(LPS_ADDRESS_1, &Wire)) {
   b7aba:	f00f fe1d 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7abe:	215d      	movs	r1, #93	; 0x5d
   b7ac0:	4602      	mov	r2, r0
   b7ac2:	f1a4 0010 	sub.w	r0, r4, #16
   b7ac6:	f009 f960 	bl	c0d8a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
   b7aca:	4d28      	ldr	r5, [pc, #160]	; (b7b6c <_Z14lps_initializev+0xd4>)
   b7acc:	2800      	cmp	r0, #0
   b7ace:	d12d      	bne.n	b7b2c <_Z14lps_initializev+0x94>
    msgp = (char *) "LPS1 NF";
    LPS_1_exists = false;
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
   b7ad0:	4a27      	ldr	r2, [pc, #156]	; (b7b70 <_Z14lps_initializev+0xd8>)
    msgp = (char *) "LPS1 NF";
   b7ad2:	4b28      	ldr	r3, [pc, #160]	; (b7b74 <_Z14lps_initializev+0xdc>)
   b7ad4:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
   b7ad6:	6813      	ldr	r3, [r2, #0]
    LPS_1_exists = false;
   b7ad8:	7028      	strb	r0, [r5, #0]
    SystemStatusBits |= SSB_LPS_1;  // Turn On Bit
   b7ada:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   b7ade:	6013      	str	r3, [r2, #0]
    t = lps1.readTemperature();
    p = lps1.readPressure();
    LPS_1_exists = true;
    msgp = (char *) "LPS1 OK";
  }
  Output (msgp);
   b7ae0:	6830      	ldr	r0, [r6, #0]

  // 2nd LPS I2C Pressure/Temperature Sensor (I2C ADDRESS = 0x5C)
  lps2 = Adafruit_LPS35HW();
   b7ae2:	4d25      	ldr	r5, [pc, #148]	; (b7b78 <_Z14lps_initializev+0xe0>)
  Output (msgp);
   b7ae4:	f7fe fb52 	bl	b618c <_Z6OutputPKc>
  lps2 = Adafruit_LPS35HW();
   b7ae8:	ac01      	add	r4, sp, #4
   b7aea:	a801      	add	r0, sp, #4
   b7aec:	f009 f860 	bl	c0bb0 <_ZN16Adafruit_LPS35HWC1Ev>
   b7af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7af4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   b7af8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (!lps2.begin_I2C(LPS_ADDRESS_2, &Wire)) {
   b7afc:	f00f fdfc 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7b00:	215c      	movs	r1, #92	; 0x5c
   b7b02:	4602      	mov	r2, r0
   b7b04:	f1a5 0010 	sub.w	r0, r5, #16
   b7b08:	f009 f93f 	bl	c0d8a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>
   b7b0c:	4c1b      	ldr	r4, [pc, #108]	; (b7b7c <_Z14lps_initializev+0xe4>)
   b7b0e:	b9d0      	cbnz	r0, b7b46 <_Z14lps_initializev+0xae>
    msgp = (char *) "LPS2 NF";
    LPS_2_exists = false;
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
   b7b10:	4a17      	ldr	r2, [pc, #92]	; (b7b70 <_Z14lps_initializev+0xd8>)
    msgp = (char *) "LPS2 NF";
   b7b12:	4b1b      	ldr	r3, [pc, #108]	; (b7b80 <_Z14lps_initializev+0xe8>)
   b7b14:	6033      	str	r3, [r6, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
   b7b16:	6813      	ldr	r3, [r2, #0]
    LPS_2_exists = false;
   b7b18:	7020      	strb	r0, [r4, #0]
    SystemStatusBits |= SSB_LPS_2;  // Turn On Bit
   b7b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   b7b1e:	6013      	str	r3, [r2, #0]
    t = lps2.readTemperature();
    p = lps2.readPressure();
    LPS_2_exists = true;
    msgp = (char *) "LPS2 OK";
  }
  Output (msgp);
   b7b20:	6830      	ldr	r0, [r6, #0]
}
   b7b22:	b008      	add	sp, #32
   b7b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Output (msgp);
   b7b28:	f7fe bb30 	b.w	b618c <_Z6OutputPKc>
    t = lps1.readTemperature();
   b7b2c:	f1a4 0010 	sub.w	r0, r4, #16
   b7b30:	f009 f856 	bl	c0be0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps1.readPressure();
   b7b34:	f1a4 0010 	sub.w	r0, r4, #16
   b7b38:	f009 f874 	bl	c0c24 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_1_exists = true;
   b7b3c:	2301      	movs	r3, #1
   b7b3e:	702b      	strb	r3, [r5, #0]
    msgp = (char *) "LPS1 OK";
   b7b40:	4b10      	ldr	r3, [pc, #64]	; (b7b84 <_Z14lps_initializev+0xec>)
   b7b42:	6033      	str	r3, [r6, #0]
   b7b44:	e7cc      	b.n	b7ae0 <_Z14lps_initializev+0x48>
    t = lps2.readTemperature();
   b7b46:	f1a5 0010 	sub.w	r0, r5, #16
   b7b4a:	f009 f849 	bl	c0be0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    p = lps2.readPressure();
   b7b4e:	f1a5 0010 	sub.w	r0, r5, #16
   b7b52:	f009 f867 	bl	c0c24 <_ZN16Adafruit_LPS35HW12readPressureEv>
    LPS_2_exists = true;
   b7b56:	2301      	movs	r3, #1
   b7b58:	7023      	strb	r3, [r4, #0]
    msgp = (char *) "LPS2 OK";
   b7b5a:	4b0b      	ldr	r3, [pc, #44]	; (b7b88 <_Z14lps_initializev+0xf0>)
   b7b5c:	6033      	str	r3, [r6, #0]
   b7b5e:	e7df      	b.n	b7b20 <_Z14lps_initializev+0x88>
   b7b60:	000cab70 	.word	0x000cab70
   b7b64:	20032858 	.word	0x20032858
   b7b68:	20032cc0 	.word	0x20032cc0
   b7b6c:	2002dab2 	.word	0x2002dab2
   b7b70:	2002d908 	.word	0x2002d908
   b7b74:	000cab79 	.word	0x000cab79
   b7b78:	20032874 	.word	0x20032874
   b7b7c:	2002dab3 	.word	0x2002dab3
   b7b80:	000cab89 	.word	0x000cab89
   b7b84:	000cab81 	.word	0x000cab81
   b7b88:	000cab91 	.word	0x000cab91

000b7b8c <_Z14tlw_initializev>:
/* 
 *=======================================================================================================================
 * tlw_initialize() -  Tinovi Leaf Wetness initialize
 *=======================================================================================================================
 */
void tlw_initialize() {
   b7b8c:	b538      	push	{r3, r4, r5, lr}
  Output("TLW:INIT");
   b7b8e:	480f      	ldr	r0, [pc, #60]	; (b7bcc <_Z14tlw_initializev+0x40>)
   b7b90:	4c0f      	ldr	r4, [pc, #60]	; (b7bd0 <_Z14tlw_initializev+0x44>)
   b7b92:	4d10      	ldr	r5, [pc, #64]	; (b7bd4 <_Z14tlw_initializev+0x48>)
   b7b94:	f7fe fafa 	bl	b618c <_Z6OutputPKc>
  
  // Tinovi Leaf Wetness initialize (I2C ADDRESS = 0x61)
  if (!I2C_Device_Exist(TLW_ADDRESS)) { 
   b7b98:	2061      	movs	r0, #97	; 0x61
   b7b9a:	f7fe f8e9 	bl	b5d70 <_Z16I2C_Device_Existh>
   b7b9e:	b938      	cbnz	r0, b7bb0 <_Z14tlw_initializev+0x24>
    msgp = (char *) "TLW NF";
   b7ba0:	4b0d      	ldr	r3, [pc, #52]	; (b7bd8 <_Z14tlw_initializev+0x4c>)
   b7ba2:	6023      	str	r3, [r4, #0]
    TLW_exists = false;
   b7ba4:	7028      	strb	r0, [r5, #0]
    tlw.init(TLW_ADDRESS);
    msgp = (char *) "TLW OK";
    TLW_exists = true;
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
  }
  Output (msgp);
   b7ba6:	6820      	ldr	r0, [r4, #0]
}
   b7ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
   b7bac:	f7fe baee 	b.w	b618c <_Z6OutputPKc>
    tlw.init(TLW_ADDRESS);
   b7bb0:	480a      	ldr	r0, [pc, #40]	; (b7bdc <_Z14tlw_initializev+0x50>)
   b7bb2:	2161      	movs	r1, #97	; 0x61
   b7bb4:	f00a fc08 	bl	c23c8 <_ZN8LeafSens4initEh>
    msgp = (char *) "TLW OK";
   b7bb8:	4b09      	ldr	r3, [pc, #36]	; (b7be0 <_Z14tlw_initializev+0x54>)
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
   b7bba:	4a0a      	ldr	r2, [pc, #40]	; (b7be4 <_Z14tlw_initializev+0x58>)
    msgp = (char *) "TLW OK";
   b7bbc:	6023      	str	r3, [r4, #0]
    TLW_exists = true;
   b7bbe:	2301      	movs	r3, #1
   b7bc0:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TLW;  // Turn On Bit
   b7bc2:	6813      	ldr	r3, [r2, #0]
   b7bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   b7bc8:	6013      	str	r3, [r2, #0]
   b7bca:	e7ec      	b.n	b7ba6 <_Z14tlw_initializev+0x1a>
   b7bcc:	000cab99 	.word	0x000cab99
   b7bd0:	20032cc0 	.word	0x20032cc0
   b7bd4:	2002df9c 	.word	0x2002df9c
   b7bd8:	000caba2 	.word	0x000caba2
   b7bdc:	2003e384 	.word	0x2003e384
   b7be0:	000caba9 	.word	0x000caba9
   b7be4:	2002d908 	.word	0x2002d908

000b7be8 <_Z14tsm_initializev>:
/* 
 *=======================================================================================================================
 * tsm_initialize() -  Tinovi Soil Moisture initialize
 *=======================================================================================================================
 */
void tsm_initialize() {
   b7be8:	b538      	push	{r3, r4, r5, lr}
  Output("TSM:INIT");
   b7bea:	480f      	ldr	r0, [pc, #60]	; (b7c28 <_Z14tsm_initializev+0x40>)
   b7bec:	4c0f      	ldr	r4, [pc, #60]	; (b7c2c <_Z14tsm_initializev+0x44>)
   b7bee:	4d10      	ldr	r5, [pc, #64]	; (b7c30 <_Z14tsm_initializev+0x48>)
   b7bf0:	f7fe facc 	bl	b618c <_Z6OutputPKc>
  
  // Tinovi Soil Moisture initialize (I2C ADDRESS = 0x63)
  if (!I2C_Device_Exist(TSM_ADDRESS)) { 
   b7bf4:	2063      	movs	r0, #99	; 0x63
   b7bf6:	f7fe f8bb 	bl	b5d70 <_Z16I2C_Device_Existh>
   b7bfa:	b938      	cbnz	r0, b7c0c <_Z14tsm_initializev+0x24>
    msgp = (char *) "TSM NF";
   b7bfc:	4b0d      	ldr	r3, [pc, #52]	; (b7c34 <_Z14tsm_initializev+0x4c>)
   b7bfe:	6023      	str	r3, [r4, #0]
    TSM_exists = false;
   b7c00:	7028      	strb	r0, [r5, #0]
    tsm.init(TSM_ADDRESS);
    msgp = (char *) "TSM OK";
    TSM_exists = true;
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
  }
  Output (msgp);
   b7c02:	6820      	ldr	r0, [r4, #0]
}
   b7c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
   b7c08:	f7fe bac0 	b.w	b618c <_Z6OutputPKc>
    tsm.init(TSM_ADDRESS);
   b7c0c:	480a      	ldr	r0, [pc, #40]	; (b7c38 <_Z14tsm_initializev+0x50>)
   b7c0e:	2163      	movs	r1, #99	; 0x63
   b7c10:	f00c ffd1 	bl	c4bb6 <_ZN5SVCS34initEi>
    msgp = (char *) "TSM OK";
   b7c14:	4b09      	ldr	r3, [pc, #36]	; (b7c3c <_Z14tsm_initializev+0x54>)
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
   b7c16:	4a0a      	ldr	r2, [pc, #40]	; (b7c40 <_Z14tsm_initializev+0x58>)
    msgp = (char *) "TSM OK";
   b7c18:	6023      	str	r3, [r4, #0]
    TSM_exists = true;
   b7c1a:	2301      	movs	r3, #1
   b7c1c:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TSM;  // Turn On Bit
   b7c1e:	6813      	ldr	r3, [r2, #0]
   b7c20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   b7c24:	6013      	str	r3, [r2, #0]
   b7c26:	e7ec      	b.n	b7c02 <_Z14tsm_initializev+0x1a>
   b7c28:	000cabb0 	.word	0x000cabb0
   b7c2c:	20032cc0 	.word	0x20032cc0
   b7c30:	2002df9e 	.word	0x2002df9e
   b7c34:	000cabb9 	.word	0x000cabb9
   b7c38:	2003e394 	.word	0x2003e394
   b7c3c:	000cabc0 	.word	0x000cabc0
   b7c40:	2002d908 	.word	0x2002d908

000b7c44 <_Z15tmsm_initializev>:
/* 
 *=======================================================================================================================
 * tmsm_initialize() -  Tinovi MultiLevel Soil Moisture initialize
 *=======================================================================================================================
 */
void tmsm_initialize() {
   b7c44:	b538      	push	{r3, r4, r5, lr}
  Output("TMSM:INIT");
   b7c46:	480f      	ldr	r0, [pc, #60]	; (b7c84 <_Z15tmsm_initializev+0x40>)
   b7c48:	4c0f      	ldr	r4, [pc, #60]	; (b7c88 <_Z15tmsm_initializev+0x44>)
   b7c4a:	4d10      	ldr	r5, [pc, #64]	; (b7c8c <_Z15tmsm_initializev+0x48>)
   b7c4c:	f7fe fa9e 	bl	b618c <_Z6OutputPKc>
  
  // Tinovi MultiLevel Soil Moisture initialize (I2C ADDRESS = 0x65)
  if (!I2C_Device_Exist(TMSM_ADDRESS)) { 
   b7c50:	2065      	movs	r0, #101	; 0x65
   b7c52:	f7fe f88d 	bl	b5d70 <_Z16I2C_Device_Existh>
   b7c56:	b938      	cbnz	r0, b7c68 <_Z15tmsm_initializev+0x24>
    msgp = (char *) "TMSM NF";
   b7c58:	4b0d      	ldr	r3, [pc, #52]	; (b7c90 <_Z15tmsm_initializev+0x4c>)
   b7c5a:	6023      	str	r3, [r4, #0]
    TMSM_exists = false;
   b7c5c:	7028      	strb	r0, [r5, #0]
    tmsm.init(TMSM_ADDRESS);
    msgp = (char *) "TMSM OK";
    TMSM_exists = true;
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
  }
  Output (msgp);
   b7c5e:	6820      	ldr	r0, [r4, #0]
}
   b7c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Output (msgp);
   b7c64:	f7fe ba92 	b.w	b618c <_Z6OutputPKc>
    tmsm.init(TMSM_ADDRESS);
   b7c68:	480a      	ldr	r0, [pc, #40]	; (b7c94 <_Z15tmsm_initializev+0x50>)
   b7c6a:	2165      	movs	r1, #101	; 0x65
   b7c6c:	f00d f869 	bl	c4d42 <_ZN7SVMULTI4initEi>
    msgp = (char *) "TMSM OK";
   b7c70:	4b09      	ldr	r3, [pc, #36]	; (b7c98 <_Z15tmsm_initializev+0x54>)
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
   b7c72:	4a0a      	ldr	r2, [pc, #40]	; (b7c9c <_Z15tmsm_initializev+0x58>)
    msgp = (char *) "TMSM OK";
   b7c74:	6023      	str	r3, [r4, #0]
    TMSM_exists = true;
   b7c76:	2301      	movs	r3, #1
   b7c78:	702b      	strb	r3, [r5, #0]
    SystemStatusBits |= SSB_TMSM;  // Turn On Bit
   b7c7a:	6813      	ldr	r3, [r2, #0]
   b7c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   b7c80:	6013      	str	r3, [r2, #0]
   b7c82:	e7ec      	b.n	b7c5e <_Z15tmsm_initializev+0x1a>
   b7c84:	000cabc7 	.word	0x000cabc7
   b7c88:	20032cc0 	.word	0x20032cc0
   b7c8c:	2002df9d 	.word	0x2002df9d
   b7c90:	000cabd1 	.word	0x000cabd1
   b7c94:	2003e38c 	.word	0x2003e38c
   b7c98:	000cabd9 	.word	0x000cabd9
   b7c9c:	2002d908 	.word	0x2002d908

000b7ca0 <_Z17as5600_initializev>:
/* 
 *=======================================================================================================================
 * as5600_initialize() - wind direction sensor
 *=======================================================================================================================
 */
void as5600_initialize() {
   b7ca0:	b508      	push	{r3, lr}
  Output("AS5600:INIT");
   b7ca2:	4810      	ldr	r0, [pc, #64]	; (b7ce4 <_Z17as5600_initializev+0x44>)
   b7ca4:	f7fe fa72 	bl	b618c <_Z6OutputPKc>
  Wire.beginTransmission(AS5600_ADR);
   b7ca8:	f00f fd26 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7cac:	4b0e      	ldr	r3, [pc, #56]	; (b7ce8 <_Z17as5600_initializev+0x48>)
   b7cae:	6819      	ldr	r1, [r3, #0]
   b7cb0:	f00e fb2e 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  if (Wire.endTransmission()) {
   b7cb4:	f00f fd20 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7cb8:	f00e fb4b 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
   b7cbc:	4b0b      	ldr	r3, [pc, #44]	; (b7cec <_Z17as5600_initializev+0x4c>)
   b7cbe:	b170      	cbz	r0, b7cde <_Z17as5600_initializev+0x3e>
    msgp = (char *) "WD:NF";
   b7cc0:	4a0b      	ldr	r2, [pc, #44]	; (b7cf0 <_Z17as5600_initializev+0x50>)
   b7cc2:	601a      	str	r2, [r3, #0]
    AS5600_exists = false;
   b7cc4:	4a0b      	ldr	r2, [pc, #44]	; (b7cf4 <_Z17as5600_initializev+0x54>)
   b7cc6:	2100      	movs	r1, #0
   b7cc8:	7011      	strb	r1, [r2, #0]
    SystemStatusBits |= SSB_AS5600;  // Turn On Bit
   b7cca:	490b      	ldr	r1, [pc, #44]	; (b7cf8 <_Z17as5600_initializev+0x58>)
   b7ccc:	680a      	ldr	r2, [r1, #0]
   b7cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   b7cd2:	600a      	str	r2, [r1, #0]
  }
  else {
    msgp = (char *) "WD:OK";
  }
  Output (msgp);
   b7cd4:	6818      	ldr	r0, [r3, #0]
}
   b7cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output (msgp);
   b7cda:	f7fe ba57 	b.w	b618c <_Z6OutputPKc>
    msgp = (char *) "WD:OK";
   b7cde:	4a07      	ldr	r2, [pc, #28]	; (b7cfc <_Z17as5600_initializev+0x5c>)
   b7ce0:	601a      	str	r2, [r3, #0]
   b7ce2:	e7f7      	b.n	b7cd4 <_Z17as5600_initializev+0x34>
   b7ce4:	000cabe1 	.word	0x000cabe1
   b7ce8:	2002d878 	.word	0x2002d878
   b7cec:	20032cc0 	.word	0x20032cc0
   b7cf0:	000cabed 	.word	0x000cabed
   b7cf4:	2002d87c 	.word	0x2002d87c
   b7cf8:	2002d908 	.word	0x2002d908
   b7cfc:	000cabf3 	.word	0x000cabf3

000b7d00 <_Z13A4_Initializev>:
/* 
 *=======================================================================================================================
 * A4_Initialize()
 *=======================================================================================================================
 */
void A4_Initialize() {
   b7d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
  Output ("A4:INIT");
   b7d02:	482b      	ldr	r0, [pc, #172]	; (b7db0 <_Z13A4_Initializev+0xb0>)
   b7d04:	f7fe fa42 	bl	b618c <_Z6OutputPKc>
  if (SD_exists) {
   b7d08:	4b2a      	ldr	r3, [pc, #168]	; (b7db4 <_Z13A4_Initializev+0xb4>)
   b7d0a:	781b      	ldrb	r3, [r3, #0]
   b7d0c:	2b00      	cmp	r3, #0
   b7d0e:	d04c      	beq.n	b7daa <_Z13A4_Initializev+0xaa>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
   b7d10:	4929      	ldr	r1, [pc, #164]	; (b7db8 <_Z13A4_Initializev+0xb8>)
   b7d12:	482a      	ldr	r0, [pc, #168]	; (b7dbc <_Z13A4_Initializev+0xbc>)
   b7d14:	f7fe f800 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_A4_DIST_FILE)) {
   b7d18:	4604      	mov	r4, r0
   b7d1a:	b1b8      	cbz	r0, b7d4c <_Z13A4_Initializev+0x4c>
      Output ("A4=DIST");
   b7d1c:	4828      	ldr	r0, [pc, #160]	; (b7dc0 <_Z13A4_Initializev+0xc0>)
   b7d1e:	f7fe fa35 	bl	b618c <_Z6OutputPKc>
      A4_State = A4_STATE_DISTANCE;
   b7d22:	4b28      	ldr	r3, [pc, #160]	; (b7dc4 <_Z13A4_Initializev+0xc4>)
   b7d24:	4928      	ldr	r1, [pc, #160]	; (b7dc8 <_Z13A4_Initializev+0xc8>)
   b7d26:	4825      	ldr	r0, [pc, #148]	; (b7dbc <_Z13A4_Initializev+0xbc>)
   b7d28:	2201      	movs	r2, #1
   b7d2a:	601a      	str	r2, [r3, #0]
   b7d2c:	f7fd fff4 	bl	b5d18 <_ZN7FatFile6existsEPKc>
   b7d30:	4b26      	ldr	r3, [pc, #152]	; (b7dcc <_Z13A4_Initializev+0xcc>)
      if (SD.exists(SD_5M_DIST_FILE)) {
   b7d32:	b138      	cbz	r0, b7d44 <_Z13A4_Initializev+0x44>
        dg_adjustment = 1.25;
   b7d34:	4a26      	ldr	r2, [pc, #152]	; (b7dd0 <_Z13A4_Initializev+0xd0>)
        Output ("DIST=5M");
   b7d36:	4827      	ldr	r0, [pc, #156]	; (b7dd4 <_Z13A4_Initializev+0xd4>)
        dg_adjustment = 1.25;
   b7d38:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A4=NULL,SD NF");
  }
}
   b7d3a:	b003      	add	sp, #12
   b7d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    Output ("A4=NULL,SD NF");
   b7d40:	f7fe ba24 	b.w	b618c <_Z6OutputPKc>
        dg_adjustment = 2.5;
   b7d44:	4a24      	ldr	r2, [pc, #144]	; (b7dd8 <_Z13A4_Initializev+0xd8>)
        Output ("DIST=10M");
   b7d46:	4825      	ldr	r0, [pc, #148]	; (b7ddc <_Z13A4_Initializev+0xdc>)
        dg_adjustment = 2.5;
   b7d48:	601a      	str	r2, [r3, #0]
        Output ("DIST=10M");
   b7d4a:	e7f6      	b.n	b7d3a <_Z13A4_Initializev+0x3a>
   b7d4c:	4924      	ldr	r1, [pc, #144]	; (b7de0 <_Z13A4_Initializev+0xe0>)
   b7d4e:	481b      	ldr	r0, [pc, #108]	; (b7dbc <_Z13A4_Initializev+0xbc>)
   b7d50:	f7fd ffe2 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    else if (SD.exists(SD_A4_RAIN_FILE)) {
   b7d54:	b1d8      	cbz	r0, b7d8e <_Z13A4_Initializev+0x8e>
      Output ("A4=RAIN");
   b7d56:	4823      	ldr	r0, [pc, #140]	; (b7de4 <_Z13A4_Initializev+0xe4>)
   b7d58:	f7fe fa18 	bl	b618c <_Z6OutputPKc>
      A4_State = A4_STATE_RAIN;
   b7d5c:	4b19      	ldr	r3, [pc, #100]	; (b7dc4 <_Z13A4_Initializev+0xc4>)
   b7d5e:	2502      	movs	r5, #2
   b7d60:	601d      	str	r5, [r3, #0]
      raingauge2_interrupt_count = 0;
   b7d62:	4b21      	ldr	r3, [pc, #132]	; (b7de8 <_Z13A4_Initializev+0xe8>)
   b7d64:	601c      	str	r4, [r3, #0]
      raingauge2_interrupt_stime = System.millis();
   b7d66:	f7fd ff75 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b7d6a:	4b20      	ldr	r3, [pc, #128]	; (b7dec <_Z13A4_Initializev+0xec>)
   b7d6c:	e9c3 0100 	strd	r0, r1, [r3]
      raingauge2_interrupt_ltime = 0;  // used to debounce the tip
   b7d70:	4b1f      	ldr	r3, [pc, #124]	; (b7df0 <_Z13A4_Initializev+0xf0>)
   b7d72:	2000      	movs	r0, #0
   b7d74:	2100      	movs	r1, #0
   b7d76:	e9c3 0100 	strd	r0, r1, [r3]
      attachInterrupt(RAINGAUGE2_IRQ_PIN, raingauge2_interrupt_handler, FALLING);
   b7d7a:	462a      	mov	r2, r5
   b7d7c:	491d      	ldr	r1, [pc, #116]	; (b7df4 <_Z13A4_Initializev+0xf4>)
   b7d7e:	9400      	str	r4, [sp, #0]
   b7d80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7d84:	200f      	movs	r0, #15
   b7d86:	f00e fb09 	bl	c639c <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   b7d8a:	b003      	add	sp, #12
   b7d8c:	bd30      	pop	{r4, r5, pc}
   b7d8e:	491a      	ldr	r1, [pc, #104]	; (b7df8 <_Z13A4_Initializev+0xf8>)
   b7d90:	480a      	ldr	r0, [pc, #40]	; (b7dbc <_Z13A4_Initializev+0xbc>)
   b7d92:	f7fd ffc1 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    else if (SD.exists(SD_A4_RAW_FILE)) {
   b7d96:	b130      	cbz	r0, b7da6 <_Z13A4_Initializev+0xa6>
      Output ("A4=RAW");
   b7d98:	4818      	ldr	r0, [pc, #96]	; (b7dfc <_Z13A4_Initializev+0xfc>)
   b7d9a:	f7fe f9f7 	bl	b618c <_Z6OutputPKc>
      A4_State = A4_STATE_RAW;
   b7d9e:	4b09      	ldr	r3, [pc, #36]	; (b7dc4 <_Z13A4_Initializev+0xc4>)
   b7da0:	2203      	movs	r2, #3
   b7da2:	601a      	str	r2, [r3, #0]
   b7da4:	e7f1      	b.n	b7d8a <_Z13A4_Initializev+0x8a>
      Output ("A4=NULL");
   b7da6:	4816      	ldr	r0, [pc, #88]	; (b7e00 <_Z13A4_Initializev+0x100>)
   b7da8:	e7c7      	b.n	b7d3a <_Z13A4_Initializev+0x3a>
    Output ("A4=NULL,SD NF");
   b7daa:	4816      	ldr	r0, [pc, #88]	; (b7e04 <_Z13A4_Initializev+0x104>)
   b7dac:	e7c5      	b.n	b7d3a <_Z13A4_Initializev+0x3a>
   b7dae:	bf00      	nop
   b7db0:	000cabf9 	.word	0x000cabf9
   b7db4:	2002df54 	.word	0x2002df54
   b7db8:	2002d893 	.word	0x2002d893
   b7dbc:	2002df0c 	.word	0x2002df0c
   b7dc0:	000cac01 	.word	0x000cac01
   b7dc4:	2002da5c 	.word	0x2002da5c
   b7dc8:	2002d888 	.word	0x2002d888
   b7dcc:	2002d930 	.word	0x2002d930
   b7dd0:	3fa00000 	.word	0x3fa00000
   b7dd4:	000cac09 	.word	0x000cac09
   b7dd8:	40200000 	.word	0x40200000
   b7ddc:	000cac11 	.word	0x000cac11
   b7de0:	2002d89e 	.word	0x2002d89e
   b7de4:	000cac1a 	.word	0x000cac1a
   b7de8:	2003e1f0 	.word	0x2003e1f0
   b7dec:	2003e200 	.word	0x2003e200
   b7df0:	2003e1f8 	.word	0x2003e1f8
   b7df4:	000b5cad 	.word	0x000b5cad
   b7df8:	2002d8a9 	.word	0x2002d8a9
   b7dfc:	000cac22 	.word	0x000cac22
   b7e00:	000cac29 	.word	0x000cac29
   b7e04:	000cac31 	.word	0x000cac31

000b7e08 <_Z13A5_Initializev>:
/* 
 *=======================================================================================================================
 * A5_Initialize()
 *=======================================================================================================================
 */
void A5_Initialize() {
   b7e08:	b508      	push	{r3, lr}
  Output ("A5:INIT");
   b7e0a:	480c      	ldr	r0, [pc, #48]	; (b7e3c <_Z13A5_Initializev+0x34>)
   b7e0c:	f7fe f9be 	bl	b618c <_Z6OutputPKc>
  if (SD_exists) {
   b7e10:	4b0b      	ldr	r3, [pc, #44]	; (b7e40 <_Z13A5_Initializev+0x38>)
   b7e12:	781b      	ldrb	r3, [r3, #0]
   b7e14:	b183      	cbz	r3, b7e38 <_Z13A5_Initializev+0x30>
   b7e16:	490b      	ldr	r1, [pc, #44]	; (b7e44 <_Z13A5_Initializev+0x3c>)
   b7e18:	480b      	ldr	r0, [pc, #44]	; (b7e48 <_Z13A5_Initializev+0x40>)
   b7e1a:	f7fd ff7d 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_A5_RAW_FILE)) {
   b7e1e:	b130      	cbz	r0, b7e2e <_Z13A5_Initializev+0x26>
      Output ("A5=RAW");
   b7e20:	480a      	ldr	r0, [pc, #40]	; (b7e4c <_Z13A5_Initializev+0x44>)
   b7e22:	f7fe f9b3 	bl	b618c <_Z6OutputPKc>
      A5_State = A5_STATE_RAW;
   b7e26:	4b0a      	ldr	r3, [pc, #40]	; (b7e50 <_Z13A5_Initializev+0x48>)
   b7e28:	2201      	movs	r2, #1
   b7e2a:	601a      	str	r2, [r3, #0]
    }
  }
  else {
    Output ("A5=NULL,SD NF");
  }
}
   b7e2c:	bd08      	pop	{r3, pc}
      Output ("A5=NULL");
   b7e2e:	4809      	ldr	r0, [pc, #36]	; (b7e54 <_Z13A5_Initializev+0x4c>)
}
   b7e30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Output ("A5=NULL,SD NF");
   b7e34:	f7fe b9aa 	b.w	b618c <_Z6OutputPKc>
   b7e38:	4807      	ldr	r0, [pc, #28]	; (b7e58 <_Z13A5_Initializev+0x50>)
   b7e3a:	e7f9      	b.n	b7e30 <_Z13A5_Initializev+0x28>
   b7e3c:	000cac3f 	.word	0x000cac3f
   b7e40:	2002df54 	.word	0x2002df54
   b7e44:	2002d8b3 	.word	0x2002d8b3
   b7e48:	2002df0c 	.word	0x2002df0c
   b7e4c:	000cac47 	.word	0x000cac47
   b7e50:	2002da60 	.word	0x2002da60
   b7e54:	000cac4e 	.word	0x000cac4e
   b7e58:	000cac56 	.word	0x000cac56

000b7e5c <_Z11Pin_ReadAvgi>:
/* 
 *=======================================================================================================================
 * Pin_ReadAvg()
 *=======================================================================================================================
 */
float Pin_ReadAvg(int pin) {
   b7e5c:	b570      	push	{r4, r5, r6, lr}
   b7e5e:	2505      	movs	r5, #5
  int numReadings = 5;
  int totalValue = 0;
   b7e60:	2400      	movs	r4, #0
  for (int i = 0; i < numReadings; i++) {
    totalValue += analogRead(pin);
   b7e62:	b286      	uxth	r6, r0
   b7e64:	4630      	mov	r0, r6
   b7e66:	f00f fbe4 	bl	c7632 <analogRead>
   b7e6a:	4404      	add	r4, r0
    delay(10);  // Short delay between readings
   b7e6c:	200a      	movs	r0, #10
   b7e6e:	f00d fc5f 	bl	c5730 <delay>
  for (int i = 0; i < numReadings; i++) {
   b7e72:	3d01      	subs	r5, #1
   b7e74:	d1f6      	bne.n	b7e64 <_Z11Pin_ReadAvgi+0x8>
  }
  return(totalValue / numReadings);
   b7e76:	2305      	movs	r3, #5
   b7e78:	fb94 f3f3 	sdiv	r3, r4, r3
   b7e7c:	ee00 3a10 	vmov	s0, r3
}
   b7e80:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   b7e84:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7e88 <_Z25DistanceGauge_TakeReadingv>:
/*
 * ======================================================================================================================
 * DistanceGauge_TakeReading() - measure every second             
 * ======================================================================================================================
 */
void DistanceGauge_TakeReading() {
   b7e88:	b508      	push	{r3, lr}
  dg_buckets[dg_bucket] = (int) analogRead(DISTANCE_GAUGE_PIN) * dg_adjustment;
   b7e8a:	200f      	movs	r0, #15
   b7e8c:	f00f fbd1 	bl	c7632 <analogRead>
   b7e90:	490c      	ldr	r1, [pc, #48]	; (b7ec4 <_Z25DistanceGauge_TakeReadingv+0x3c>)
   b7e92:	4a0d      	ldr	r2, [pc, #52]	; (b7ec8 <_Z25DistanceGauge_TakeReadingv+0x40>)
   b7e94:	ed91 7a00 	vldr	s14, [r1]
   b7e98:	6813      	ldr	r3, [r2, #0]
   b7e9a:	490c      	ldr	r1, [pc, #48]	; (b7ecc <_Z25DistanceGauge_TakeReadingv+0x44>)
   b7e9c:	ee07 0a90 	vmov	s15, r0
   b7ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
   b7ea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b7eac:	ee17 0a90 	vmov	r0, s15
   b7eb0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  dg_bucket = (++dg_bucket) % DG_BUCKETS; // Advance bucket index for next reading
   b7eb4:	3301      	adds	r3, #1
   b7eb6:	213c      	movs	r1, #60	; 0x3c
   b7eb8:	fbb3 f0f1 	udiv	r0, r3, r1
   b7ebc:	fb01 3310 	mls	r3, r1, r0, r3
   b7ec0:	6013      	str	r3, [r2, #0]
}
   b7ec2:	bd08      	pop	{r3, pc}
   b7ec4:	2002d930 	.word	0x2002d930
   b7ec8:	2002e418 	.word	0x2002e418
   b7ecc:	2002e41c 	.word	0x2002e41c

000b7ed0 <_Z20DistanceGauge_Medianv>:
/* 
 *=======================================================================================================================
 * DistanceGauge_Median()
 *=======================================================================================================================
 */
float DistanceGauge_Median() {
   b7ed0:	b508      	push	{r3, lr}
  int i;
  
  mysort(dg_buckets, DG_BUCKETS);
   b7ed2:	4804      	ldr	r0, [pc, #16]	; (b7ee4 <_Z20DistanceGauge_Medianv+0x14>)
   b7ed4:	213c      	movs	r1, #60	; 0x3c
   b7ed6:	f7fd ff7b 	bl	b5dd0 <_Z6mysortPjj>
  i = (DG_BUCKETS+1) / 2 - 1; // -1 as array indexing in C starts from 0
  
  return (dg_buckets[i]); 
   b7eda:	ed90 0a1d 	vldr	s0, [r0, #116]	; 0x74
}
   b7ede:	eeb8 0a40 	vcvt.f32.u32	s0, s0
   b7ee2:	bd08      	pop	{r3, pc}
   b7ee4:	2002e41c 	.word	0x2002e41c

000b7ee8 <_Z16Wind_SampleSpeedv>:
 * Optipolar Hall Effect Sensor SS451A - Anemometer
 * speed  = (( (signals/2) * (2 * pi * radius) ) / time) * calibration_factor
 * speed in m/s =  (   ( (interrupts/2) * (2 * 3.14156 * 0.079) )  / (time_period in ms / 1000)  )  * 2.64
 *=======================================================================================================================
 */
float Wind_SampleSpeed() {
   b7ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint64_t delta_ms;
  float wind_speed;
  
  delta_ms = System.millis()-anemometer_interrupt_stime;

  if (anemometer_interrupt_count) {
   b7eec:	4f2e      	ldr	r7, [pc, #184]	; (b7fa8 <_Z16Wind_SampleSpeedv+0xc0>)
   b7eee:	4e2f      	ldr	r6, [pc, #188]	; (b7fac <_Z16Wind_SampleSpeedv+0xc4>)
float Wind_SampleSpeed() {
   b7ef0:	ed2d 8b02 	vpush	{d8}
  delta_ms = System.millis()-anemometer_interrupt_stime;
   b7ef4:	f7fd feae 	bl	b5c54 <_ZN11SystemClass6millisEv>
  if (anemometer_interrupt_count) {
   b7ef8:	683b      	ldr	r3, [r7, #0]
  delta_ms = System.millis()-anemometer_interrupt_stime;
   b7efa:	4604      	mov	r4, r0
   b7efc:	460d      	mov	r5, r1
  if (anemometer_interrupt_count) {
   b7efe:	2b00      	cmp	r3, #0
   b7f00:	d048      	beq.n	b7f94 <_Z16Wind_SampleSpeedv+0xac>
    // wind_speed = (  ( (anemometer_interrupt_count/2) * (2 * 3.14156 * ws_radius) )  / 
    //  (float)( (float)delta_ms / 1000)  )  * ws_calibration;

    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
   b7f02:	6838      	ldr	r0, [r7, #0]
   b7f04:	f7fc f9ce 	bl	b42a4 <__aeabi_ui2d>
   b7f08:	a325      	add	r3, pc, #148	; (adr r3, b7fa0 <_Z16Wind_SampleSpeedv+0xb8>)
   b7f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7f0e:	f7fc fa43 	bl	b4398 <__aeabi_dmul>
   b7f12:	4b27      	ldr	r3, [pc, #156]	; (b7fb0 <_Z16Wind_SampleSpeedv+0xc8>)
   b7f14:	4680      	mov	r8, r0
   b7f16:	6818      	ldr	r0, [r3, #0]
   b7f18:	4689      	mov	r9, r1
   b7f1a:	f7fc f9e5 	bl	b42e8 <__aeabi_f2d>
   b7f1e:	4602      	mov	r2, r0
   b7f20:	460b      	mov	r3, r1
   b7f22:	4640      	mov	r0, r8
   b7f24:	4649      	mov	r1, r9
   b7f26:	f7fc fa37 	bl	b4398 <__aeabi_dmul>
   b7f2a:	4680      	mov	r8, r0
   b7f2c:	4689      	mov	r9, r1
  delta_ms = System.millis()-anemometer_interrupt_stime;
   b7f2e:	e9d6 0100 	ldrd	r0, r1, [r6]
   b7f32:	1a20      	subs	r0, r4, r0
   b7f34:	eb65 0101 	sbc.w	r1, r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
   b7f38:	f7fc fe3e 	bl	b4bb8 <__aeabi_ul2f>
   b7f3c:	eddf 7a1d 	vldr	s15, [pc, #116]	; b7fb4 <_Z16Wind_SampleSpeedv+0xcc>
   b7f40:	ee07 0a10 	vmov	s14, r0
   b7f44:	eec7 7a27 	vdiv.f32	s15, s14, s15
   b7f48:	ee17 0a90 	vmov	r0, s15
   b7f4c:	f7fc f9cc 	bl	b42e8 <__aeabi_f2d>
   b7f50:	4602      	mov	r2, r0
   b7f52:	460b      	mov	r3, r1
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
   b7f54:	4640      	mov	r0, r8
   b7f56:	4649      	mov	r1, r9
   b7f58:	f7fc fb48 	bl	b45ec <__aeabi_ddiv>
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
   b7f5c:	4b16      	ldr	r3, [pc, #88]	; (b7fb8 <_Z16Wind_SampleSpeedv+0xd0>)
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
   b7f5e:	4604      	mov	r4, r0
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
   b7f60:	6818      	ldr	r0, [r3, #0]
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
   b7f62:	460d      	mov	r5, r1
        (float)( (float)delta_ms / 1000) )  * ws_calibration;
   b7f64:	f7fc f9c0 	bl	b42e8 <__aeabi_f2d>
   b7f68:	4602      	mov	r2, r0
   b7f6a:	460b      	mov	r3, r1
   b7f6c:	4620      	mov	r0, r4
   b7f6e:	4629      	mov	r1, r5
   b7f70:	f7fc fa12 	bl	b4398 <__aeabi_dmul>
    wind_speed = ( ( anemometer_interrupt_count * 3.14156 * ws_radius)  / 
   b7f74:	f7fc fd08 	bl	b4988 <__aeabi_d2f>
   b7f78:	ee08 0a10 	vmov	s16, r0
  }
  else {
    wind_speed = 0.0;
  }

  anemometer_interrupt_count = 0;
   b7f7c:	2300      	movs	r3, #0
   b7f7e:	603b      	str	r3, [r7, #0]
  anemometer_interrupt_stime = System.millis();
   b7f80:	f7fd fe68 	bl	b5c54 <_ZN11SystemClass6millisEv>
  
  return (wind_speed);
} 
   b7f84:	eeb0 0a48 	vmov.f32	s0, s16
   b7f88:	ecbd 8b02 	vpop	{d8}
  anemometer_interrupt_stime = System.millis();
   b7f8c:	e9c6 0100 	strd	r0, r1, [r6]
} 
   b7f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    wind_speed = 0.0;
   b7f94:	ed9f 8a09 	vldr	s16, [pc, #36]	; b7fbc <_Z16Wind_SampleSpeedv+0xd4>
   b7f98:	e7f0      	b.n	b7f7c <_Z16Wind_SampleSpeedv+0x94>
   b7f9a:	bf00      	nop
   b7f9c:	f3af 8000 	nop.w
   b7fa0:	35935fc4 	.word	0x35935fc4
   b7fa4:	400921ea 	.word	0x400921ea
   b7fa8:	2002e0d0 	.word	0x2002e0d0
   b7fac:	2002e0d8 	.word	0x2002e0d8
   b7fb0:	2002d9d4 	.word	0x2002d9d4
   b7fb4:	447a0000 	.word	0x447a0000
   b7fb8:	2002d9d0 	.word	0x2002d9d0
   b7fbc:	00000000 	.word	0x00000000

000b7fc0 <_Z20Wind_SampleDirectionv>:
/* 
 *=======================================================================================================================
 * Wind_SampleDirection() -- Talk i2c to the AS5600 sensor and get direction
 *=======================================================================================================================
 */
int Wind_SampleDirection() {
   b7fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int degree;
  
  // Read Raw Angle Low Byte
  Wire.beginTransmission(AS5600_ADR);
   b7fc2:	4d39      	ldr	r5, [pc, #228]	; (b80a8 <_Z20Wind_SampleDirectionv+0xe8>)
   b7fc4:	4c39      	ldr	r4, [pc, #228]	; (b80ac <_Z20Wind_SampleDirectionv+0xec>)
   b7fc6:	f00f fb97 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7fca:	6829      	ldr	r1, [r5, #0]
   b7fcc:	f00e f9a0 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(AS5600_raw_ang_lo);
   b7fd0:	f00f fb92 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7fd4:	210d      	movs	r1, #13
   b7fd6:	f7fd fdf5 	bl	b5bc4 <_ZN7TwoWire5writeEi.isra.0>
  if (Wire.endTransmission()) {
   b7fda:	f00f fb8d 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b7fde:	f00e f9b8 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
   b7fe2:	b178      	cbz	r0, b8004 <_Z20Wind_SampleDirectionv+0x44>
    if (AS5600_exists) {
   b7fe4:	4b32      	ldr	r3, [pc, #200]	; (b80b0 <_Z20Wind_SampleDirectionv+0xf0>)
   b7fe6:	781b      	ldrb	r3, [r3, #0]
   b7fe8:	b113      	cbz	r3, b7ff0 <_Z20Wind_SampleDirectionv+0x30>
      Output ("WD Offline_L");
   b7fea:	4832      	ldr	r0, [pc, #200]	; (b80b4 <_Z20Wind_SampleDirectionv+0xf4>)
   b7fec:	f7fe f8ce 	bl	b618c <_Z6OutputPKc>
    }
    AS5600_exists = false;
   b7ff0:	4b2f      	ldr	r3, [pc, #188]	; (b80b0 <_Z20Wind_SampleDirectionv+0xf0>)
   b7ff2:	2200      	movs	r2, #0
   b7ff4:	701a      	strb	r2, [r3, #0]
      else {
        return (-1);
      }
    }
  }
  SystemStatusBits |= SSB_AS5600;  // Turn On Bit
   b7ff6:	6823      	ldr	r3, [r4, #0]
   b7ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b7ffc:	6023      	str	r3, [r4, #0]
  return (-1); // Not the best value to return 
   b7ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8002:	e04c      	b.n	b809e <_Z20Wind_SampleDirectionv+0xde>
  else if (Wire.requestFrom(AS5600_ADR, 1)) {
   b8004:	f00f fb78 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8008:	7829      	ldrb	r1, [r5, #0]
   b800a:	2201      	movs	r2, #1
   b800c:	f00e f979 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   b8010:	2800      	cmp	r0, #0
   b8012:	d0f0      	beq.n	b7ff6 <_Z20Wind_SampleDirectionv+0x36>
    int AS5600_lo_raw = Wire.read();
   b8014:	f00f fb70 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8018:	6803      	ldr	r3, [r0, #0]
   b801a:	695b      	ldr	r3, [r3, #20]
   b801c:	4798      	blx	r3
   b801e:	4606      	mov	r6, r0
    Wire.beginTransmission(AS5600_ADR);
   b8020:	f00f fb6a 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8024:	6829      	ldr	r1, [r5, #0]
   b8026:	f00e f973 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(AS5600_raw_ang_hi);
   b802a:	f00f fb65 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b802e:	210c      	movs	r1, #12
   b8030:	f7fd fdc8 	bl	b5bc4 <_ZN7TwoWire5writeEi.isra.0>
    if (Wire.endTransmission()) {
   b8034:	f00f fb60 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8038:	f00e f98b 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
   b803c:	b128      	cbz	r0, b804a <_Z20Wind_SampleDirectionv+0x8a>
      if (AS5600_exists) {
   b803e:	4b1c      	ldr	r3, [pc, #112]	; (b80b0 <_Z20Wind_SampleDirectionv+0xf0>)
   b8040:	781b      	ldrb	r3, [r3, #0]
   b8042:	2b00      	cmp	r3, #0
   b8044:	d0d4      	beq.n	b7ff0 <_Z20Wind_SampleDirectionv+0x30>
        Output ("WD Offline_H");
   b8046:	481c      	ldr	r0, [pc, #112]	; (b80b8 <_Z20Wind_SampleDirectionv+0xf8>)
   b8048:	e7d0      	b.n	b7fec <_Z20Wind_SampleDirectionv+0x2c>
    else if (Wire.requestFrom(AS5600_ADR, 1)) {
   b804a:	f00f fb55 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b804e:	7829      	ldrb	r1, [r5, #0]
   b8050:	2201      	movs	r2, #1
   b8052:	f00e f956 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   b8056:	2800      	cmp	r0, #0
   b8058:	d0cd      	beq.n	b7ff6 <_Z20Wind_SampleDirectionv+0x36>
      word AS5600_hi_raw = Wire.read();
   b805a:	f00f fb4d 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b805e:	6803      	ldr	r3, [r0, #0]
      if (!AS5600_exists) {
   b8060:	4f13      	ldr	r7, [pc, #76]	; (b80b0 <_Z20Wind_SampleDirectionv+0xf0>)
      word AS5600_hi_raw = Wire.read();
   b8062:	695b      	ldr	r3, [r3, #20]
   b8064:	4798      	blx	r3
      if (!AS5600_exists) {
   b8066:	783b      	ldrb	r3, [r7, #0]
      word AS5600_hi_raw = Wire.read();
   b8068:	4605      	mov	r5, r0
      if (!AS5600_exists) {
   b806a:	b913      	cbnz	r3, b8072 <_Z20Wind_SampleDirectionv+0xb2>
        Output ("WD Online");
   b806c:	4813      	ldr	r0, [pc, #76]	; (b80bc <_Z20Wind_SampleDirectionv+0xfc>)
   b806e:	f7fe f88d 	bl	b618c <_Z6OutputPKc>
      AS5600_exists = true;           // We made it 
   b8072:	2301      	movs	r3, #1
   b8074:	703b      	strb	r3, [r7, #0]
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
   b8076:	6823      	ldr	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
   b8078:	ea46 2005 	orr.w	r0, r6, r5, lsl #8
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
   b807c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   b8080:	6023      	str	r3, [r4, #0]
      degree = (int) AS5600_hi_raw * 0.0879;
   b8082:	f7fc f91f 	bl	b42c4 <__aeabi_i2d>
   b8086:	a306      	add	r3, pc, #24	; (adr r3, b80a0 <_Z20Wind_SampleDirectionv+0xe0>)
   b8088:	e9d3 2300 	ldrd	r2, r3, [r3]
   b808c:	f7fc f984 	bl	b4398 <__aeabi_dmul>
   b8090:	f7fc fc32 	bl	b48f8 <__aeabi_d2iz>
        return (-1);
   b8094:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
   b8098:	bf88      	it	hi
   b809a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b809e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b80a0:	495182aa 	.word	0x495182aa
   b80a4:	3fb6809d 	.word	0x3fb6809d
   b80a8:	2002d878 	.word	0x2002d878
   b80ac:	2002d908 	.word	0x2002d908
   b80b0:	2002d87c 	.word	0x2002d87c
   b80b4:	000cac64 	.word	0x000cac64
   b80b8:	000cac71 	.word	0x000cac71
   b80bc:	000cac7e 	.word	0x000cac7e

000b80c0 <_Z20Wind_DirectionVectorv>:
/* 
 *=======================================================================================================================
 * Wind_DirectionVector()
 *=======================================================================================================================
 */
int Wind_DirectionVector() {
   b80c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b80c4:	ed2d 8b08 	vpush	{d8-d11}

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
   b80c8:	f20f 190c 	addw	r9, pc, #268	; 0x10c
   b80cc:	e9d9 8900 	ldrd	r8, r9, [r9]
  double EW_vector_sum = 0.0;
   b80d0:	ed9f 8b3f 	vldr	d8, [pc, #252]	; b81d0 <_Z20Wind_DirectionVectorv+0x110>
   b80d4:	4c44      	ldr	r4, [pc, #272]	; (b81e8 <_Z20Wind_DirectionVectorv+0x128>)
  double NS_vector_sum = 0.0;
   b80d6:	eeb0 9a48 	vmov.f32	s18, s16
   b80da:	eef0 9a68 	vmov.f32	s19, s17
int Wind_DirectionVector() {
   b80de:	b083      	sub	sp, #12
  bool ws_zero = true;
   b80e0:	2501      	movs	r5, #1
  for (i=0; i<WIND_READINGS; i++) {
   b80e2:	f04f 0a00 	mov.w	sl, #0
    r = (d * 71) / 4068.0;
   b80e6:	f04f 0b47 	mov.w	fp, #71	; 0x47
    d = wind.bucket[i].direction;
   b80ea:	6820      	ldr	r0, [r4, #0]
    if (d == -1) {
   b80ec:	1c43      	adds	r3, r0, #1
   b80ee:	d068      	beq.n	b81c2 <_Z20Wind_DirectionVectorv+0x102>
    s = wind.bucket[i].speed;
   b80f0:	ed94 ba01 	vldr	s22, [r4, #4]
      ws_zero = false;  
   b80f4:	eeb5 ba40 	vcmp.f32	s22, #0.0
   b80f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
   b80fc:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
   b8100:	bfc8      	it	gt
   b8102:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
   b8104:	f7fc f8de 	bl	b42c4 <__aeabi_i2d>
   b8108:	4642      	mov	r2, r8
   b810a:	464b      	mov	r3, r9
   b810c:	f7fc fa6e 	bl	b45ec <__aeabi_ddiv>
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
   b8110:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
   b8114:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
   b8118:	f00f fd1e 	bl	c7b58 <cos>
   b811c:	ee1b 0a10 	vmov	r0, s22
   b8120:	ed8d 0b00 	vstr	d0, [sp]
   b8124:	f7fc f8e0 	bl	b42e8 <__aeabi_f2d>
   b8128:	4602      	mov	r2, r0
   b812a:	460b      	mov	r3, r1
   b812c:	4606      	mov	r6, r0
   b812e:	460f      	mov	r7, r1
   b8130:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8134:	f7fc f930 	bl	b4398 <__aeabi_dmul>
   b8138:	4602      	mov	r2, r0
   b813a:	460b      	mov	r3, r1
   b813c:	ec51 0b19 	vmov	r0, r1, d9
   b8140:	f7fb ff74 	bl	b402c <__adddf3>
    EW_vector_sum += sin(r) * s;
   b8144:	eeb0 0a4a 	vmov.f32	s0, s20
   b8148:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
   b814c:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
   b8150:	f00f fdea 	bl	c7d28 <sin>
   b8154:	4630      	mov	r0, r6
   b8156:	ec53 2b10 	vmov	r2, r3, d0
   b815a:	4639      	mov	r1, r7
   b815c:	f7fc f91c 	bl	b4398 <__aeabi_dmul>
   b8160:	4602      	mov	r2, r0
   b8162:	460b      	mov	r3, r1
   b8164:	ec51 0b18 	vmov	r0, r1, d8
   b8168:	f7fb ff60 	bl	b402c <__adddf3>
  for (i=0; i<WIND_READINGS; i++) {
   b816c:	f10a 0a01 	add.w	sl, sl, #1
   b8170:	f1ba 0f3c 	cmp.w	sl, #60	; 0x3c
    EW_vector_sum += sin(r) * s;
   b8174:	ec41 0b18 	vmov	d8, r0, r1
  for (i=0; i<WIND_READINGS; i++) {
   b8178:	f104 0408 	add.w	r4, r4, #8
   b817c:	d1b5      	bne.n	b80ea <_Z20Wind_DirectionVectorv+0x2a>
  }
  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
   b817e:	eeb0 1a49 	vmov.f32	s2, s18
   b8182:	eef0 1a69 	vmov.f32	s3, s19
   b8186:	ec41 0b10 	vmov	d0, r0, r1
   b818a:	f00f fe15 	bl	c7db8 <atan2>
   b818e:	a312      	add	r3, pc, #72	; (adr r3, b81d8 <_Z20Wind_DirectionVectorv+0x118>)
   b8190:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8194:	ec51 0b10 	vmov	r0, r1, d0
   b8198:	f7fc f8fe 	bl	b4398 <__aeabi_dmul>
   b819c:	a310      	add	r3, pc, #64	; (adr r3, b81e0 <_Z20Wind_DirectionVectorv+0x120>)
   b819e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b81a2:	f7fc fa23 	bl	b45ec <__aeabi_ddiv>
   b81a6:	f7fc fba7 	bl	b48f8 <__aeabi_d2iz>
  if (rtod<0) {
   b81aa:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
   b81ac:	bfb8      	it	lt
   b81ae:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 then we return current wind direction or 0 on failure of that.
  if (ws_zero) {
   b81b2:	b135      	cbz	r5, b81c2 <_Z20Wind_DirectionVectorv+0x102>
    return (Wind_SampleDirection()); // Can return -1
  }
  else {
    return (rtod);
  }
}
   b81b4:	b003      	add	sp, #12
   b81b6:	ecbd 8b08 	vpop	{d8-d11}
   b81ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return (Wind_SampleDirection()); // Can return -1
   b81be:	f7ff beff 	b.w	b7fc0 <_Z20Wind_SampleDirectionv>
}
   b81c2:	b003      	add	sp, #12
   b81c4:	ecbd 8b08 	vpop	{d8-d11}
   b81c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b81cc:	f3af 8000 	nop.w
	...
   b81dc:	40afc800 	.word	0x40afc800
   b81e0:	00000000 	.word	0x00000000
   b81e4:	4051c000 	.word	0x4051c000
   b81e8:	2003e3f0 	.word	0x2003e3f0

000b81ec <_Z17Wind_SpeedAveragev>:
 * Wind_SpeedAverage()
 *=======================================================================================================================
 */
float Wind_SpeedAverage() {
  float wind_speed = 0.0;
  for (int i=0; i<WIND_READINGS; i++) {
   b81ec:	4a08      	ldr	r2, [pc, #32]	; (b8210 <_Z17Wind_SpeedAveragev+0x24>)
  float wind_speed = 0.0;
   b81ee:	eddf 7a09 	vldr	s15, [pc, #36]	; b8214 <_Z17Wind_SpeedAveragev+0x28>
  for (int i=0; i<WIND_READINGS; i++) {
   b81f2:	2300      	movs	r3, #0
    // sum wind speeds for later average
    wind_speed += wind.bucket[i].speed;
   b81f4:	ed92 7a01 	vldr	s14, [r2, #4]
  for (int i=0; i<WIND_READINGS; i++) {
   b81f8:	3301      	adds	r3, #1
   b81fa:	2b3c      	cmp	r3, #60	; 0x3c
    wind_speed += wind.bucket[i].speed;
   b81fc:	ee77 7a87 	vadd.f32	s15, s15, s14
  for (int i=0; i<WIND_READINGS; i++) {
   b8200:	f102 0208 	add.w	r2, r2, #8
   b8204:	d1f6      	bne.n	b81f4 <_Z17Wind_SpeedAveragev+0x8>
  }
  return( wind_speed / (float) WIND_READINGS);
}
   b8206:	ed9f 0a04 	vldr	s0, [pc, #16]	; b8218 <_Z17Wind_SpeedAveragev+0x2c>
   b820a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b820e:	4770      	bx	lr
   b8210:	2003e3f0 	.word	0x2003e3f0
   b8214:	00000000 	.word	0x00000000
   b8218:	42700000 	.word	0x42700000
   b821c:	00000000 	.word	0x00000000

000b8220 <_Z15Wind_GustUpdatev>:
 *     Sum this reading with next 2.
 *     If greater than last, update last 
 * 
 *=======================================================================================================================
 */
void Wind_GustUpdate() {
   b8220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8224:	ed2d 8b08 	vpush	{d8-d11}
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
   b8228:	4963      	ldr	r1, [pc, #396]	; (b83b8 <_Z15Wind_GustUpdatev+0x198>)
  float ws_sum = 0.0;
   b822a:	ed9f 7a64 	vldr	s14, [pc, #400]	; b83bc <_Z15Wind_GustUpdatev+0x19c>
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
   b822e:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
void Wind_GustUpdate() {
   b8232:	b083      	sub	sp, #12
  int ws_bucket = bucket;
   b8234:	461c      	mov	r4, r3
  int bucket = wind.bucket_idx; // Start at next bucket to fill (aka oldest reading)
   b8236:	253a      	movs	r5, #58	; 0x3a
  float sum;

  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
    // sum wind speeds 
    sum = wind.bucket[bucket].speed +
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
   b8238:	203c      	movs	r0, #60	; 0x3c
    sum = wind.bucket[bucket].speed +
   b823a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   b823e:	461e      	mov	r6, r3
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
   b8240:	3301      	adds	r3, #1
    sum = wind.bucket[bucket].speed +
   b8242:	edd2 7a01 	vldr	s15, [r2, #4]
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
   b8246:	fb93 f2f0 	sdiv	r2, r3, r0
   b824a:	fb00 3312 	mls	r3, r0, r2, r3
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
   b824e:	1cb2      	adds	r2, r6, #2
   b8250:	fb92 f7f0 	sdiv	r7, r2, r0
   b8254:	fb00 2217 	mls	r2, r0, r7, r2
          wind.bucket[(bucket+1) % WIND_READINGS].speed +
   b8258:	eb01 07c3 	add.w	r7, r1, r3, lsl #3
    sum = wind.bucket[bucket].speed +
   b825c:	edd7 6a01 	vldr	s13, [r7, #4]
          wind.bucket[(bucket+2) % WIND_READINGS].speed;
   b8260:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    sum = wind.bucket[bucket].speed +
   b8264:	ee77 7aa6 	vadd.f32	s15, s15, s13
   b8268:	edd2 6a01 	vldr	s13, [r2, #4]
   b826c:	ee77 7aa6 	vadd.f32	s15, s15, s13
    if (sum >= ws_sum) {
   b8270:	eef4 7ac7 	vcmpe.f32	s15, s14
   b8274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8278:	bfa4      	itt	ge
   b827a:	4634      	movge	r4, r6
      ws_sum = sum;
   b827c:	eeb0 7a67 	vmovge.f32	s14, s15
  for (int i=0; i<(WIND_READINGS-2); i++) {  // subtract 2 because we are looking ahead at the next 2 buckets
   b8280:	3d01      	subs	r5, #1
   b8282:	d1da      	bne.n	b823a <_Z15Wind_GustUpdatev+0x1a>
      ws_bucket = bucket;
    }
    bucket = (++bucket) % WIND_READINGS;
  }
  wind.gust = ws_sum/3;
   b8284:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
   b8288:	eec7 7a26 	vdiv.f32	s15, s14, s13
  int d, i, rtod;
  bool ws_zero = true;

  bucket = ws_bucket;
  for (i=0; i<3; i++) {
    d = wind.bucket[bucket].direction;
   b828c:	f8df a128 	ldr.w	sl, [pc, #296]	; b83b8 <_Z15Wind_GustUpdatev+0x198>
  wind.gust = ws_sum/3;
   b8290:	f04f 0803 	mov.w	r8, #3
  bool ws_zero = true;
   b8294:	2501      	movs	r5, #1

    // Flag we have wind speed
    if (s > 0) {
      ws_zero = false;  
    }
    r = (d * 71) / 4068.0;
   b8296:	f04f 0b47 	mov.w	fp, #71	; 0x47
    
    // North South Direction 
    NS_vector_sum += cos(r) * s;
    EW_vector_sum += sin(r) * s;

    bucket = (++bucket) % WIND_READINGS;
   b829a:	f04f 093c 	mov.w	r9, #60	; 0x3c
  double EW_vector_sum = 0.0;
   b829e:	ed9f 8b40 	vldr	d8, [pc, #256]	; b83a0 <_Z15Wind_GustUpdatev+0x180>
  wind.gust = ws_sum/3;
   b82a2:	edc1 7a79 	vstr	s15, [r1, #484]	; 0x1e4
  double NS_vector_sum = 0.0;
   b82a6:	eeb0 9a48 	vmov.f32	s18, s16
   b82aa:	eef0 9a68 	vmov.f32	s19, s17
    d = wind.bucket[bucket].direction;
   b82ae:	f85a 0034 	ldr.w	r0, [sl, r4, lsl #3]
    if (d == -1) {
   b82b2:	1c43      	adds	r3, r0, #1
   b82b4:	d072      	beq.n	b839c <_Z15Wind_GustUpdatev+0x17c>
    s = wind.bucket[bucket].speed;
   b82b6:	eb0a 03c4 	add.w	r3, sl, r4, lsl #3
   b82ba:	ed93 ba01 	vldr	s22, [r3, #4]
      ws_zero = false;  
   b82be:	eeb5 ba40 	vcmp.f32	s22, #0.0
   b82c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    r = (d * 71) / 4068.0;
   b82c6:	fb0b f000 	mul.w	r0, fp, r0
      ws_zero = false;  
   b82ca:	bfc8      	it	gt
   b82cc:	2500      	movgt	r5, #0
    r = (d * 71) / 4068.0;
   b82ce:	f7fb fff9 	bl	b42c4 <__aeabi_i2d>
   b82d2:	a335      	add	r3, pc, #212	; (adr r3, b83a8 <_Z15Wind_GustUpdatev+0x188>)
   b82d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   b82d8:	f7fc f988 	bl	b45ec <__aeabi_ddiv>
    NS_vector_sum += cos(r) * s;
   b82dc:	ec41 0b10 	vmov	d0, r0, r1
    r = (d * 71) / 4068.0;
   b82e0:	ec41 0b1a 	vmov	d10, r0, r1
    NS_vector_sum += cos(r) * s;
   b82e4:	f00f fc38 	bl	c7b58 <cos>
   b82e8:	ee1b 0a10 	vmov	r0, s22
   b82ec:	ed8d 0b00 	vstr	d0, [sp]
   b82f0:	f7fb fffa 	bl	b42e8 <__aeabi_f2d>
   b82f4:	4602      	mov	r2, r0
   b82f6:	460b      	mov	r3, r1
   b82f8:	4606      	mov	r6, r0
   b82fa:	460f      	mov	r7, r1
   b82fc:	e9dd 0100 	ldrd	r0, r1, [sp]
   b8300:	f7fc f84a 	bl	b4398 <__aeabi_dmul>
   b8304:	4602      	mov	r2, r0
   b8306:	460b      	mov	r3, r1
   b8308:	ec51 0b19 	vmov	r0, r1, d9
   b830c:	f7fb fe8e 	bl	b402c <__adddf3>
    EW_vector_sum += sin(r) * s;
   b8310:	eeb0 0a4a 	vmov.f32	s0, s20
   b8314:	eef0 0a6a 	vmov.f32	s1, s21
    NS_vector_sum += cos(r) * s;
   b8318:	ec41 0b19 	vmov	d9, r0, r1
    EW_vector_sum += sin(r) * s;
   b831c:	f00f fd04 	bl	c7d28 <sin>
   b8320:	4630      	mov	r0, r6
   b8322:	ec53 2b10 	vmov	r2, r3, d0
   b8326:	4639      	mov	r1, r7
   b8328:	f7fc f836 	bl	b4398 <__aeabi_dmul>
   b832c:	460b      	mov	r3, r1
   b832e:	4602      	mov	r2, r0
   b8330:	ec51 0b18 	vmov	r0, r1, d8
   b8334:	f7fb fe7a 	bl	b402c <__adddf3>
    bucket = (++bucket) % WIND_READINGS;
   b8338:	3401      	adds	r4, #1
  for (i=0; i<3; i++) {
   b833a:	f1b8 0801 	subs.w	r8, r8, #1
    bucket = (++bucket) % WIND_READINGS;
   b833e:	fb94 f3f9 	sdiv	r3, r4, r9
    EW_vector_sum += sin(r) * s;
   b8342:	ec41 0b18 	vmov	d8, r0, r1
    bucket = (++bucket) % WIND_READINGS;
   b8346:	fb09 4413 	mls	r4, r9, r3, r4
  for (i=0; i<3; i++) {
   b834a:	d1b0      	bne.n	b82ae <_Z15Wind_GustUpdatev+0x8e>
  }

  rtod = (atan2(EW_vector_sum, NS_vector_sum)*4068.0)/71.0;
   b834c:	eeb0 1a49 	vmov.f32	s2, s18
   b8350:	eef0 1a69 	vmov.f32	s3, s19
   b8354:	eeb0 0a48 	vmov.f32	s0, s16
   b8358:	eef0 0a68 	vmov.f32	s1, s17
   b835c:	f00f fd2c 	bl	c7db8 <atan2>
   b8360:	a311      	add	r3, pc, #68	; (adr r3, b83a8 <_Z15Wind_GustUpdatev+0x188>)
   b8362:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8366:	ec51 0b10 	vmov	r0, r1, d0
   b836a:	f7fc f815 	bl	b4398 <__aeabi_dmul>
   b836e:	a310      	add	r3, pc, #64	; (adr r3, b83b0 <_Z15Wind_GustUpdatev+0x190>)
   b8370:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8374:	f7fc f93a 	bl	b45ec <__aeabi_ddiv>
   b8378:	f7fc fabe 	bl	b48f8 <__aeabi_d2iz>
  if (rtod<0) {
   b837c:	2800      	cmp	r0, #0
    rtod = 360 + rtod;
   b837e:	bfb8      	it	lt
   b8380:	f500 70b4 	addlt.w	r0, r0, #360	; 0x168
  }

  // If all the winds speeds are 0 or we have a -1 direction then set -1 for direction.
  if (ws_zero) {
   b8384:	4b0c      	ldr	r3, [pc, #48]	; (b83b8 <_Z15Wind_GustUpdatev+0x198>)
    wind.gust_direction = -1;
   b8386:	2d00      	cmp	r5, #0
   b8388:	bf18      	it	ne
   b838a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b838e:	f8c3 01e8 	str.w	r0, [r3, #488]	; 0x1e8
  }
  else {
    wind.gust_direction = rtod;
  }
}
   b8392:	b003      	add	sp, #12
   b8394:	ecbd 8b08 	vpop	{d8-d11}
   b8398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ws_zero = true;
   b839c:	2501      	movs	r5, #1
   b839e:	e7d5      	b.n	b834c <_Z15Wind_GustUpdatev+0x12c>
	...
   b83ac:	40afc800 	.word	0x40afc800
   b83b0:	00000000 	.word	0x00000000
   b83b4:	4051c000 	.word	0x4051c000
   b83b8:	2003e3f0 	.word	0x2003e3f0
   b83bc:	00000000 	.word	0x00000000

000b83c0 <_Z16Wind_TakeReadingv>:
/*
 * ======================================================================================================================
 * Wind_TakeReading() - Wind direction and speed, measure every second             
 * ======================================================================================================================
 */
void Wind_TakeReading() {
   b83c0:	b538      	push	{r3, r4, r5, lr}
  wind.bucket[wind.bucket_idx].direction = (int) Wind_SampleDirection();
   b83c2:	4c0d      	ldr	r4, [pc, #52]	; (b83f8 <_Z16Wind_TakeReadingv+0x38>)
   b83c4:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   b83c8:	f7ff fdfa 	bl	b7fc0 <_Z20Wind_SampleDirectionv>
   b83cc:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
   b83d0:	f8d4 51e0 	ldr.w	r5, [r4, #480]	; 0x1e0
   b83d4:	f7ff fd88 	bl	b7ee8 <_Z16Wind_SampleSpeedv>
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
   b83d8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
   b83dc:	223c      	movs	r2, #60	; 0x3c
   b83de:	3301      	adds	r3, #1
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
   b83e0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
   b83e4:	fb93 f1f2 	sdiv	r1, r3, r2
  wind.bucket[wind.bucket_idx].speed = Wind_SampleSpeed();
   b83e8:	ed85 0a01 	vstr	s0, [r5, #4]
  wind.bucket_idx = (++wind.bucket_idx) % WIND_READINGS; // Advance bucket index for next reading
   b83ec:	fb02 3311 	mls	r3, r2, r1, r3
   b83f0:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
}
   b83f4:	bd38      	pop	{r3, r4, r5, pc}
   b83f6:	bf00      	nop
   b83f8:	2003e3f0 	.word	0x2003e3f0

000b83fc <_Z17I2C_Check_Sensorsv>:
/*
 * ======================================================================================================================
 * I2C_Check_Sensors() - See if each I2C sensor responds on the bus and take action accordingly             
 * ======================================================================================================================
 */
void I2C_Check_Sensors() {
   b83fc:	b570      	push	{r4, r5, r6, lr}

  // BMX_1 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
   b83fe:	2077      	movs	r0, #119	; 0x77
   b8400:	f7fd fcb6 	bl	b5d70 <_Z16I2C_Device_Existh>
   b8404:	4ca7      	ldr	r4, [pc, #668]	; (b86a4 <_Z17I2C_Check_Sensorsv+0x2a8>)
    // Sensor online but our state had it offline
    if (BMX_1_exists == false) {
   b8406:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_1)) {
   b8408:	2800      	cmp	r0, #0
   b840a:	f000 80ef 	beq.w	b85ec <_Z17I2C_Check_Sensorsv+0x1f0>
    if (BMX_1_exists == false) {
   b840e:	b99b      	cbnz	r3, b8438 <_Z17I2C_Check_Sensorsv+0x3c>
      if (BMX_1_chip_id == BMP280_CHIP_ID) {
   b8410:	4ba5      	ldr	r3, [pc, #660]	; (b86a8 <_Z17I2C_Check_Sensorsv+0x2ac>)
   b8412:	781a      	ldrb	r2, [r3, #0]
   b8414:	2a58      	cmp	r2, #88	; 0x58
   b8416:	f040 80b1 	bne.w	b857c <_Z17I2C_Check_Sensorsv+0x180>
        if (bmp1.begin(BMX_ADDRESS_1)) { 
   b841a:	48a4      	ldr	r0, [pc, #656]	; (b86ac <_Z17I2C_Check_Sensorsv+0x2b0>)
   b841c:	2177      	movs	r1, #119	; 0x77
   b841e:	f007 f8a5 	bl	bf56c <_ZN15Adafruit_BMP2805beginEhh>
   b8422:	b148      	cbz	r0, b8438 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
   b8424:	2301      	movs	r3, #1
          Output ("BMP1 ONLINE");
   b8426:	48a2      	ldr	r0, [pc, #648]	; (b86b0 <_Z17I2C_Check_Sensorsv+0x2b4>)
          BMX_1_exists = true;
   b8428:	7023      	strb	r3, [r4, #0]
        }        
      }
      else {
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
          BMX_1_exists = true;
          Output ("BM31 ONLINE");
   b842a:	f7fd feaf 	bl	b618c <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
   b842e:	4aa1      	ldr	r2, [pc, #644]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b8430:	6813      	ldr	r3, [r2, #0]
   b8432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  else {
    // Sensor offline but our state has it online
    if (BMX_1_exists == true) {
      BMX_1_exists = false;
      Output ("BMX1 OFFLINE");
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
   b8436:	6013      	str	r3, [r2, #0]
    }    
  }

  // BMX_2 Barometric Pressure 
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
   b8438:	2076      	movs	r0, #118	; 0x76
   b843a:	f7fd fc99 	bl	b5d70 <_Z16I2C_Device_Existh>
   b843e:	4d9e      	ldr	r5, [pc, #632]	; (b86b8 <_Z17I2C_Check_Sensorsv+0x2bc>)
    // Sensor online but our state had it offline
    if (BMX_2_exists == false) {
   b8440:	782b      	ldrb	r3, [r5, #0]
  if (I2C_Device_Exist (BMX_ADDRESS_2)) {
   b8442:	2800      	cmp	r0, #0
   b8444:	f000 8116 	beq.w	b8674 <_Z17I2C_Check_Sensorsv+0x278>
    if (BMX_2_exists == false) {
   b8448:	b99b      	cbnz	r3, b8472 <_Z17I2C_Check_Sensorsv+0x76>
      if (BMX_2_chip_id == BMP280_CHIP_ID) {
   b844a:	4b9c      	ldr	r3, [pc, #624]	; (b86bc <_Z17I2C_Check_Sensorsv+0x2c0>)
   b844c:	781a      	ldrb	r2, [r3, #0]
   b844e:	2a58      	cmp	r2, #88	; 0x58
   b8450:	f040 80d8 	bne.w	b8604 <_Z17I2C_Check_Sensorsv+0x208>
        if (bmp2.begin(BMX_ADDRESS_2)) { 
   b8454:	489a      	ldr	r0, [pc, #616]	; (b86c0 <_Z17I2C_Check_Sensorsv+0x2c4>)
   b8456:	2176      	movs	r1, #118	; 0x76
   b8458:	f007 f888 	bl	bf56c <_ZN15Adafruit_BMP2805beginEhh>
   b845c:	b148      	cbz	r0, b8472 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
   b845e:	2301      	movs	r3, #1
          Output ("BMP2 ONLINE");
   b8460:	4898      	ldr	r0, [pc, #608]	; (b86c4 <_Z17I2C_Check_Sensorsv+0x2c8>)
          BMX_2_exists = true;
   b8462:	702b      	strb	r3, [r5, #0]
        }        
      }
      else {
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
          BMX_2_exists = true;
          Output ("BM32 ONLINE");
   b8464:	f7fd fe92 	bl	b618c <_Z6OutputPKc>
          SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
   b8468:	4a92      	ldr	r2, [pc, #584]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b846a:	6813      	ldr	r3, [r2, #0]
   b846c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  else {
    // Sensor offline but we our state has it online
    if (BMX_2_exists == true) {
      BMX_2_exists = false;
      Output ("BMX2 OFFLINE");
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
   b8470:	6013      	str	r3, [r2, #0]
    }    
  }

  // HTU21DF Humidity & Temp Sensor
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
   b8472:	2040      	movs	r0, #64	; 0x40
   b8474:	f7fd fc7c 	bl	b5d70 <_Z16I2C_Device_Existh>
   b8478:	4c93      	ldr	r4, [pc, #588]	; (b86c8 <_Z17I2C_Check_Sensorsv+0x2cc>)
    // Sensor online but our state had it offline
    if (HTU21DF_exists == false) {
   b847a:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (HTU21DF_I2CADDR)) {
   b847c:	2800      	cmp	r0, #0
   b847e:	f000 8105 	beq.w	b868c <_Z17I2C_Check_Sensorsv+0x290>
    if (HTU21DF_exists == false) {
   b8482:	b983      	cbnz	r3, b84a6 <_Z17I2C_Check_Sensorsv+0xaa>
      // See if we can bring sensor online
      if (htu.begin()) {
   b8484:	f00f f938 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8488:	4601      	mov	r1, r0
   b848a:	4890      	ldr	r0, [pc, #576]	; (b86cc <_Z17I2C_Check_Sensorsv+0x2d0>)
   b848c:	f008 fae6 	bl	c0a5c <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>
   b8490:	b148      	cbz	r0, b84a6 <_Z17I2C_Check_Sensorsv+0xaa>
        HTU21DF_exists = true;
   b8492:	2301      	movs	r3, #1
        Output ("HTU ONLINE");
   b8494:	488e      	ldr	r0, [pc, #568]	; (b86d0 <_Z17I2C_Check_Sensorsv+0x2d4>)
        HTU21DF_exists = true;
   b8496:	7023      	strb	r3, [r4, #0]
        Output ("HTU ONLINE");
   b8498:	f7fd fe78 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_HTU21DF; // Turn Off Bit
   b849c:	4a85      	ldr	r2, [pc, #532]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b849e:	6813      	ldr	r3, [r2, #0]
   b84a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  else {
    // Sensor offline but we our state has it online
    if (HTU21DF_exists == true) {
      HTU21DF_exists = false;
      Output ("HTU OFFLINE");
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
   b84a4:	6013      	str	r3, [r2, #0]
    }   
  }
#endif

  // SI1145 UV index & IR & Visible Sensor
  if (I2C_Device_Exist (SI1145_ADDR)) {
   b84a6:	2060      	movs	r0, #96	; 0x60
   b84a8:	f7fd fc62 	bl	b5d70 <_Z16I2C_Device_Existh>
   b84ac:	4c89      	ldr	r4, [pc, #548]	; (b86d4 <_Z17I2C_Check_Sensorsv+0x2d8>)
    // Sensor online but our state had it offline
    if (SI1145_exists == false) {
   b84ae:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (SI1145_ADDR)) {
   b84b0:	2800      	cmp	r0, #0
   b84b2:	f000 8141 	beq.w	b8738 <_Z17I2C_Check_Sensorsv+0x33c>
    if (SI1145_exists == false) {
   b84b6:	b98b      	cbnz	r3, b84dc <_Z17I2C_Check_Sensorsv+0xe0>
      // See if we can bring sensore online
      if (uv.begin()) {
   b84b8:	f00f f91e 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b84bc:	2160      	movs	r1, #96	; 0x60
   b84be:	4602      	mov	r2, r0
   b84c0:	4885      	ldr	r0, [pc, #532]	; (b86d8 <_Z17I2C_Check_Sensorsv+0x2dc>)
   b84c2:	f008 ff73 	bl	c13ac <_ZN15Adafruit_SI11455beginEhP7TwoWire>
   b84c6:	b148      	cbz	r0, b84dc <_Z17I2C_Check_Sensorsv+0xe0>
        SI1145_exists = true;
   b84c8:	2301      	movs	r3, #1
        Output ("SI ONLINE");
   b84ca:	4884      	ldr	r0, [pc, #528]	; (b86dc <_Z17I2C_Check_Sensorsv+0x2e0>)
        SI1145_exists = true;
   b84cc:	7023      	strb	r3, [r4, #0]
        Output ("SI ONLINE");
   b84ce:	f7fd fe5d 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
   b84d2:	4a78      	ldr	r2, [pc, #480]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b84d4:	6813      	ldr	r3, [r2, #0]
   b84d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  else {
    // Sensor offline but we our state has it online
    if (SI1145_exists == true) {
      SI1145_exists = false;
      Output ("SI OFFLINE");
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
   b84da:	6013      	str	r3, [r2, #0]
    }   
  }

  // AS5600 Wind Direction
  if (I2C_Device_Exist (AS5600_ADR)) {
   b84dc:	4b80      	ldr	r3, [pc, #512]	; (b86e0 <_Z17I2C_Check_Sensorsv+0x2e4>)
   b84de:	7818      	ldrb	r0, [r3, #0]
   b84e0:	f7fd fc46 	bl	b5d70 <_Z16I2C_Device_Existh>
   b84e4:	4b7f      	ldr	r3, [pc, #508]	; (b86e4 <_Z17I2C_Check_Sensorsv+0x2e8>)
    // Sensor online but our state had it offline
    if (AS5600_exists == false) {
   b84e6:	781a      	ldrb	r2, [r3, #0]
  if (I2C_Device_Exist (AS5600_ADR)) {
   b84e8:	2800      	cmp	r0, #0
   b84ea:	f000 8131 	beq.w	b8750 <_Z17I2C_Check_Sensorsv+0x354>
    if (AS5600_exists == false) {
   b84ee:	b94a      	cbnz	r2, b8504 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = true;
   b84f0:	2201      	movs	r2, #1
      Output ("WD ONLINE");
   b84f2:	487d      	ldr	r0, [pc, #500]	; (b86e8 <_Z17I2C_Check_Sensorsv+0x2ec>)
      AS5600_exists = true;
   b84f4:	701a      	strb	r2, [r3, #0]
      Output ("WD ONLINE");
   b84f6:	f7fd fe49 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits &= ~SSB_AS5600; // Turn Off Bit
   b84fa:	4a6e      	ldr	r2, [pc, #440]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b84fc:	6813      	ldr	r3, [r2, #0]
   b84fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  else {
    // Sensor offline but we our state has it online
    if (AS5600_exists == true) {
      AS5600_exists = false;
      Output ("WD OFFLINE");
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
   b8502:	6013      	str	r3, [r2, #0]
    }   
  }

  // VEML7700 Lux 
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
   b8504:	2010      	movs	r0, #16
   b8506:	f7fd fc33 	bl	b5d70 <_Z16I2C_Device_Existh>
   b850a:	4c78      	ldr	r4, [pc, #480]	; (b86ec <_Z17I2C_Check_Sensorsv+0x2f0>)
    // Sensor online but our state had it offline
    if (VEML7700_exists == false) {
   b850c:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (VEML7700_ADDRESS)) {
   b850e:	2800      	cmp	r0, #0
   b8510:	f000 812a 	beq.w	b8768 <_Z17I2C_Check_Sensorsv+0x36c>
    if (VEML7700_exists == false) {
   b8514:	b983      	cbnz	r3, b8538 <_Z17I2C_Check_Sensorsv+0x13c>
      // See if we can bring sensor online
      if (veml.begin()) {
   b8516:	f00f f8ef 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b851a:	4601      	mov	r1, r0
   b851c:	4874      	ldr	r0, [pc, #464]	; (b86f0 <_Z17I2C_Check_Sensorsv+0x2f4>)
   b851e:	f009 fd38 	bl	c1f92 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   b8522:	b148      	cbz	r0, b8538 <_Z17I2C_Check_Sensorsv+0x13c>
        VEML7700_exists = true;
   b8524:	2301      	movs	r3, #1
        Output ("VLX ONLINE");
   b8526:	4873      	ldr	r0, [pc, #460]	; (b86f4 <_Z17I2C_Check_Sensorsv+0x2f8>)
        VEML7700_exists = true;
   b8528:	7023      	strb	r3, [r4, #0]
        Output ("VLX ONLINE");
   b852a:	f7fd fe2f 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_VLX; // Turn Off Bit
   b852e:	4a61      	ldr	r2, [pc, #388]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b8530:	6813      	ldr	r3, [r2, #0]
   b8532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
  else {
    // Sensor offline but we our state has it online
    if (VEML7700_exists == true) {
      VEML7700_exists = false;
      Output ("VLX OFFLINE");
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
   b8536:	6013      	str	r3, [r2, #0]
    }   
  }

  // PM25AQI
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
   b8538:	2012      	movs	r0, #18
   b853a:	f7fd fc19 	bl	b5d70 <_Z16I2C_Device_Existh>
   b853e:	4c6e      	ldr	r4, [pc, #440]	; (b86f8 <_Z17I2C_Check_Sensorsv+0x2fc>)
    // Sensor online but our state had it offline
    if (PM25AQI_exists == false) {
   b8540:	7823      	ldrb	r3, [r4, #0]
  if (I2C_Device_Exist (PM25AQI_ADDRESS)) {
   b8542:	2800      	cmp	r0, #0
   b8544:	f000 811c 	beq.w	b8780 <_Z17I2C_Check_Sensorsv+0x384>
    if (PM25AQI_exists == false) {
   b8548:	2b00      	cmp	r3, #0
   b854a:	f040 8123 	bne.w	b8794 <_Z17I2C_Check_Sensorsv+0x398>
      // See if we can bring sensor online
      if (pmaq.begin_I2C()) {
   b854e:	f00f f8d3 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8552:	4601      	mov	r1, r0
   b8554:	4869      	ldr	r0, [pc, #420]	; (b86fc <_Z17I2C_Check_Sensorsv+0x300>)
   b8556:	f008 fd0a 	bl	c0f6e <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>
   b855a:	2800      	cmp	r0, #0
   b855c:	f000 811a 	beq.w	b8794 <_Z17I2C_Check_Sensorsv+0x398>
        PM25AQI_exists = true;
   b8560:	2301      	movs	r3, #1
        Output ("PM ONLINE");
   b8562:	4867      	ldr	r0, [pc, #412]	; (b8700 <_Z17I2C_Check_Sensorsv+0x304>)
        PM25AQI_exists = true;
   b8564:	7023      	strb	r3, [r4, #0]
        Output ("PM ONLINE");
   b8566:	f7fd fe11 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_PM25AQI; // Turn Off Bit
   b856a:	4a52      	ldr	r2, [pc, #328]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b856c:	6813      	ldr	r3, [r2, #0]
   b856e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   b8572:	6013      	str	r3, [r2, #0]
      PM25AQI_exists = false;
      Output ("PM OFFLINE");
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
    }   
  }
}
   b8574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pm25aqi_clear();
   b8578:	f7ff b98c 	b.w	b7894 <_Z13pm25aqi_clearv>
      else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
   b857c:	2a60      	cmp	r2, #96	; 0x60
   b857e:	d127      	bne.n	b85d0 <_Z17I2C_Check_Sensorsv+0x1d4>
        if (BMX_1_type == BMX_TYPE_BME280) {
   b8580:	4d60      	ldr	r5, [pc, #384]	; (b8704 <_Z17I2C_Check_Sensorsv+0x308>)
   b8582:	782b      	ldrb	r3, [r5, #0]
   b8584:	2b02      	cmp	r3, #2
   b8586:	d111      	bne.n	b85ac <_Z17I2C_Check_Sensorsv+0x1b0>
          if (bme1.begin(BMX_ADDRESS_1)) { 
   b8588:	f00f f8b6 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b858c:	2177      	movs	r1, #119	; 0x77
   b858e:	4602      	mov	r2, r0
   b8590:	485d      	ldr	r0, [pc, #372]	; (b8708 <_Z17I2C_Check_Sensorsv+0x30c>)
   b8592:	f006 fbf6 	bl	bed82 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
   b8596:	b148      	cbz	r0, b85ac <_Z17I2C_Check_Sensorsv+0x1b0>
            BMX_1_exists = true;
   b8598:	2301      	movs	r3, #1
            Output ("BME1 ONLINE");
   b859a:	485c      	ldr	r0, [pc, #368]	; (b870c <_Z17I2C_Check_Sensorsv+0x310>)
            BMX_1_exists = true;
   b859c:	7023      	strb	r3, [r4, #0]
            Output ("BME1 ONLINE");
   b859e:	f7fd fdf5 	bl	b618c <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_1; // Turn Off Bit
   b85a2:	4a44      	ldr	r2, [pc, #272]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b85a4:	6813      	ldr	r3, [r2, #0]
   b85a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   b85aa:	6013      	str	r3, [r2, #0]
        if (BMX_1_type == BMX_TYPE_BMP390) {
   b85ac:	782b      	ldrb	r3, [r5, #0]
   b85ae:	2b04      	cmp	r3, #4
   b85b0:	f47f af42 	bne.w	b8438 <_Z17I2C_Check_Sensorsv+0x3c>
          if (bm31.begin_I2C(BMX_ADDRESS_1)) {
   b85b4:	f00f f8a0 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b85b8:	2177      	movs	r1, #119	; 0x77
   b85ba:	4602      	mov	r2, r0
   b85bc:	4854      	ldr	r0, [pc, #336]	; (b8710 <_Z17I2C_Check_Sensorsv+0x314>)
   b85be:	f007 f9d9 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b85c2:	2800      	cmp	r0, #0
   b85c4:	f43f af38 	beq.w	b8438 <_Z17I2C_Check_Sensorsv+0x3c>
            BMX_1_exists = true;
   b85c8:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
   b85ca:	4852      	ldr	r0, [pc, #328]	; (b8714 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
   b85cc:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
   b85ce:	e72c      	b.n	b842a <_Z17I2C_Check_Sensorsv+0x2e>
        if (bm31.begin_I2C(BMX_ADDRESS_1)) { 
   b85d0:	f00f f892 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b85d4:	2177      	movs	r1, #119	; 0x77
   b85d6:	4602      	mov	r2, r0
   b85d8:	484d      	ldr	r0, [pc, #308]	; (b8710 <_Z17I2C_Check_Sensorsv+0x314>)
   b85da:	f007 f9cb 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b85de:	2800      	cmp	r0, #0
   b85e0:	f43f af2a 	beq.w	b8438 <_Z17I2C_Check_Sensorsv+0x3c>
          BMX_1_exists = true;
   b85e4:	2301      	movs	r3, #1
          Output ("BM31 ONLINE");
   b85e6:	484c      	ldr	r0, [pc, #304]	; (b8718 <_Z17I2C_Check_Sensorsv+0x31c>)
          BMX_1_exists = true;
   b85e8:	7023      	strb	r3, [r4, #0]
          Output ("BM31 ONLINE");
   b85ea:	e71e      	b.n	b842a <_Z17I2C_Check_Sensorsv+0x2e>
    if (BMX_1_exists == true) {
   b85ec:	2b00      	cmp	r3, #0
   b85ee:	f43f af23 	beq.w	b8438 <_Z17I2C_Check_Sensorsv+0x3c>
      BMX_1_exists = false;
   b85f2:	7020      	strb	r0, [r4, #0]
      Output ("BMX1 OFFLINE");
   b85f4:	4849      	ldr	r0, [pc, #292]	; (b871c <_Z17I2C_Check_Sensorsv+0x320>)
   b85f6:	f7fd fdc9 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_1;  // Turn On Bit 
   b85fa:	4a2e      	ldr	r2, [pc, #184]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b85fc:	6813      	ldr	r3, [r2, #0]
   b85fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   b8602:	e718      	b.n	b8436 <_Z17I2C_Check_Sensorsv+0x3a>
      else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
   b8604:	2a60      	cmp	r2, #96	; 0x60
   b8606:	d127      	bne.n	b8658 <_Z17I2C_Check_Sensorsv+0x25c>
        if (BMX_2_type == BMX_TYPE_BME280) {
   b8608:	4e45      	ldr	r6, [pc, #276]	; (b8720 <_Z17I2C_Check_Sensorsv+0x324>)
   b860a:	7833      	ldrb	r3, [r6, #0]
   b860c:	2b02      	cmp	r3, #2
   b860e:	d111      	bne.n	b8634 <_Z17I2C_Check_Sensorsv+0x238>
          if (bme1.begin(BMX_ADDRESS_2)) { 
   b8610:	f00f f872 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8614:	2176      	movs	r1, #118	; 0x76
   b8616:	4602      	mov	r2, r0
   b8618:	483b      	ldr	r0, [pc, #236]	; (b8708 <_Z17I2C_Check_Sensorsv+0x30c>)
   b861a:	f006 fbb2 	bl	bed82 <_ZN15Adafruit_BME2805beginEhP7TwoWire>
   b861e:	b148      	cbz	r0, b8634 <_Z17I2C_Check_Sensorsv+0x238>
            BMX_2_exists = true;
   b8620:	2301      	movs	r3, #1
            Output ("BME2 ONLINE");
   b8622:	4840      	ldr	r0, [pc, #256]	; (b8724 <_Z17I2C_Check_Sensorsv+0x328>)
            BMX_2_exists = true;
   b8624:	702b      	strb	r3, [r5, #0]
            Output ("BME2 ONLINE");
   b8626:	f7fd fdb1 	bl	b618c <_Z6OutputPKc>
            SystemStatusBits &= ~SSB_BMX_2; // Turn Off Bit
   b862a:	4a22      	ldr	r2, [pc, #136]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b862c:	6813      	ldr	r3, [r2, #0]
   b862e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   b8632:	6013      	str	r3, [r2, #0]
        if (BMX_2_type == BMX_TYPE_BMP390) {
   b8634:	7833      	ldrb	r3, [r6, #0]
   b8636:	2b04      	cmp	r3, #4
   b8638:	f47f af1b 	bne.w	b8472 <_Z17I2C_Check_Sensorsv+0x76>
          if (bm31.begin_I2C(BMX_ADDRESS_2)) {
   b863c:	f00f f85c 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b8640:	2176      	movs	r1, #118	; 0x76
   b8642:	4602      	mov	r2, r0
   b8644:	4832      	ldr	r0, [pc, #200]	; (b8710 <_Z17I2C_Check_Sensorsv+0x314>)
   b8646:	f007 f995 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b864a:	2800      	cmp	r0, #0
   b864c:	f43f af11 	beq.w	b8472 <_Z17I2C_Check_Sensorsv+0x76>
            BMX_1_exists = true;
   b8650:	2301      	movs	r3, #1
            Output ("BMP390_1 ONLINE");
   b8652:	4830      	ldr	r0, [pc, #192]	; (b8714 <_Z17I2C_Check_Sensorsv+0x318>)
            BMX_1_exists = true;
   b8654:	7023      	strb	r3, [r4, #0]
            Output ("BMP390_1 ONLINE");
   b8656:	e705      	b.n	b8464 <_Z17I2C_Check_Sensorsv+0x68>
         if (bm32.begin_I2C(BMX_ADDRESS_2)) { 
   b8658:	f00f f84e 	bl	c76f8 <_Z19__fetch_global_Wirev>
   b865c:	2176      	movs	r1, #118	; 0x76
   b865e:	4602      	mov	r2, r0
   b8660:	4831      	ldr	r0, [pc, #196]	; (b8728 <_Z17I2C_Check_Sensorsv+0x32c>)
   b8662:	f007 f987 	bl	bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>
   b8666:	2800      	cmp	r0, #0
   b8668:	f43f af03 	beq.w	b8472 <_Z17I2C_Check_Sensorsv+0x76>
          BMX_2_exists = true;
   b866c:	2301      	movs	r3, #1
          Output ("BM32 ONLINE");
   b866e:	482f      	ldr	r0, [pc, #188]	; (b872c <_Z17I2C_Check_Sensorsv+0x330>)
          BMX_2_exists = true;
   b8670:	702b      	strb	r3, [r5, #0]
          Output ("BM32 ONLINE");
   b8672:	e6f7      	b.n	b8464 <_Z17I2C_Check_Sensorsv+0x68>
    if (BMX_2_exists == true) {
   b8674:	2b00      	cmp	r3, #0
   b8676:	f43f aefc 	beq.w	b8472 <_Z17I2C_Check_Sensorsv+0x76>
      BMX_2_exists = false;
   b867a:	7028      	strb	r0, [r5, #0]
      Output ("BMX2 OFFLINE");
   b867c:	482c      	ldr	r0, [pc, #176]	; (b8730 <_Z17I2C_Check_Sensorsv+0x334>)
   b867e:	f7fd fd85 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_BMX_2;  // Turn On Bit 
   b8682:	4a0c      	ldr	r2, [pc, #48]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b8684:	6813      	ldr	r3, [r2, #0]
   b8686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   b868a:	e6f1      	b.n	b8470 <_Z17I2C_Check_Sensorsv+0x74>
    if (HTU21DF_exists == true) {
   b868c:	2b00      	cmp	r3, #0
   b868e:	f43f af0a 	beq.w	b84a6 <_Z17I2C_Check_Sensorsv+0xaa>
      HTU21DF_exists = false;
   b8692:	7020      	strb	r0, [r4, #0]
      Output ("HTU OFFLINE");
   b8694:	4827      	ldr	r0, [pc, #156]	; (b8734 <_Z17I2C_Check_Sensorsv+0x338>)
   b8696:	f7fd fd79 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HTU21DF;  // Turn On Bit
   b869a:	4a06      	ldr	r2, [pc, #24]	; (b86b4 <_Z17I2C_Check_Sensorsv+0x2b8>)
   b869c:	6813      	ldr	r3, [r2, #0]
   b869e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b86a2:	e6ff      	b.n	b84a4 <_Z17I2C_Check_Sensorsv+0xa8>
   b86a4:	2002da82 	.word	0x2002da82
   b86a8:	2002da81 	.word	0x2002da81
   b86ac:	2002e390 	.word	0x2002e390
   b86b0:	000cac88 	.word	0x000cac88
   b86b4:	2002d908 	.word	0x2002d908
   b86b8:	2002da85 	.word	0x2002da85
   b86bc:	2002da84 	.word	0x2002da84
   b86c0:	2002e3d0 	.word	0x2002e3d0
   b86c4:	000cacc9 	.word	0x000cacc9
   b86c8:	2002dab0 	.word	0x2002dab0
   b86cc:	2002e628 	.word	0x2002e628
   b86d0:	000cacfa 	.word	0x000cacfa
   b86d4:	2002df8e 	.word	0x2002df8e
   b86d8:	2003e39c 	.word	0x2003e39c
   b86dc:	000cad11 	.word	0x000cad11
   b86e0:	2002d878 	.word	0x2002d878
   b86e4:	2002d87c 	.word	0x2002d87c
   b86e8:	000cad26 	.word	0x000cad26
   b86ec:	2002dfa0 	.word	0x2002dfa0
   b86f0:	2003e3a4 	.word	0x2003e3a4
   b86f4:	000cad3b 	.word	0x000cad3b
   b86f8:	2002dacc 	.word	0x2002dacc
   b86fc:	2003e1b0 	.word	0x2003e1b0
   b8700:	000cad52 	.word	0x000cad52
   b8704:	2002da83 	.word	0x2002da83
   b8708:	2002e2e0 	.word	0x2002e2e0
   b870c:	000cac94 	.word	0x000cac94
   b8710:	2002e0e0 	.word	0x2002e0e0
   b8714:	000caca0 	.word	0x000caca0
   b8718:	000cacb0 	.word	0x000cacb0
   b871c:	000cacbc 	.word	0x000cacbc
   b8720:	2002da86 	.word	0x2002da86
   b8724:	000cacd5 	.word	0x000cacd5
   b8728:	2002e1e0 	.word	0x2002e1e0
   b872c:	000cace1 	.word	0x000cace1
   b8730:	000caced 	.word	0x000caced
   b8734:	000cad05 	.word	0x000cad05
    if (SI1145_exists == true) {
   b8738:	2b00      	cmp	r3, #0
   b873a:	f43f aecf 	beq.w	b84dc <_Z17I2C_Check_Sensorsv+0xe0>
      SI1145_exists = false;
   b873e:	7020      	strb	r0, [r4, #0]
      Output ("SI OFFLINE");
   b8740:	4815      	ldr	r0, [pc, #84]	; (b8798 <_Z17I2C_Check_Sensorsv+0x39c>)
   b8742:	f7fd fd23 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_SI1145;  // Turn On Bit
   b8746:	4a15      	ldr	r2, [pc, #84]	; (b879c <_Z17I2C_Check_Sensorsv+0x3a0>)
   b8748:	6813      	ldr	r3, [r2, #0]
   b874a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   b874e:	e6c4      	b.n	b84da <_Z17I2C_Check_Sensorsv+0xde>
    if (AS5600_exists == true) {
   b8750:	2a00      	cmp	r2, #0
   b8752:	f43f aed7 	beq.w	b8504 <_Z17I2C_Check_Sensorsv+0x108>
      AS5600_exists = false;
   b8756:	7018      	strb	r0, [r3, #0]
      Output ("WD OFFLINE");
   b8758:	4811      	ldr	r0, [pc, #68]	; (b87a0 <_Z17I2C_Check_Sensorsv+0x3a4>)
   b875a:	f7fd fd17 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_AS5600;  // Turn On Bit
   b875e:	4a0f      	ldr	r2, [pc, #60]	; (b879c <_Z17I2C_Check_Sensorsv+0x3a0>)
   b8760:	6813      	ldr	r3, [r2, #0]
   b8762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   b8766:	e6cc      	b.n	b8502 <_Z17I2C_Check_Sensorsv+0x106>
    if (VEML7700_exists == true) {
   b8768:	2b00      	cmp	r3, #0
   b876a:	f43f aee5 	beq.w	b8538 <_Z17I2C_Check_Sensorsv+0x13c>
      VEML7700_exists = false;
   b876e:	7020      	strb	r0, [r4, #0]
      Output ("VLX OFFLINE");
   b8770:	480c      	ldr	r0, [pc, #48]	; (b87a4 <_Z17I2C_Check_Sensorsv+0x3a8>)
   b8772:	f7fd fd0b 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_VLX;  // Turn On Bit
   b8776:	4a09      	ldr	r2, [pc, #36]	; (b879c <_Z17I2C_Check_Sensorsv+0x3a0>)
   b8778:	6813      	ldr	r3, [r2, #0]
   b877a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   b877e:	e6da      	b.n	b8536 <_Z17I2C_Check_Sensorsv+0x13a>
    if (PM25AQI_exists == true) {
   b8780:	b143      	cbz	r3, b8794 <_Z17I2C_Check_Sensorsv+0x398>
      PM25AQI_exists = false;
   b8782:	7020      	strb	r0, [r4, #0]
      Output ("PM OFFLINE");
   b8784:	4808      	ldr	r0, [pc, #32]	; (b87a8 <_Z17I2C_Check_Sensorsv+0x3ac>)
   b8786:	f7fd fd01 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_PM25AQI;  // Turn On Bit
   b878a:	4a04      	ldr	r2, [pc, #16]	; (b879c <_Z17I2C_Check_Sensorsv+0x3a0>)
   b878c:	6813      	ldr	r3, [r2, #0]
   b878e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   b8792:	6013      	str	r3, [r2, #0]
}
   b8794:	bd70      	pop	{r4, r5, r6, pc}
   b8796:	bf00      	nop
   b8798:	000cad1b 	.word	0x000cad1b
   b879c:	2002d908 	.word	0x2002d908
   b87a0:	000cad30 	.word	0x000cad30
   b87a4:	000cad46 	.word	0x000cad46
   b87a8:	000cab3c 	.word	0x000cab3c

000b87ac <_Z22EEPROM_ChecksumComputev>:
 *=======================================================================================================================
 */
unsigned long EEPROM_ChecksumCompute() {
  unsigned long checksum=0;

  checksum += (unsigned long) eeprom.rgt1;
   b87ac:	4910      	ldr	r1, [pc, #64]	; (b87f0 <_Z22EEPROM_ChecksumComputev+0x44>)
   b87ae:	edd1 7a00 	vldr	s15, [r1]
   b87b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b87b6:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp1;
   b87ba:	edd1 7a01 	vldr	s15, [r1, #4]
   b87be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b87c2:	ee17 2a90 	vmov	r2, s15
  checksum += (unsigned long) eeprom.rgt2;
   b87c6:	edd1 7a02 	vldr	s15, [r1, #8]
  checksum += (unsigned long) eeprom.rgp1;
   b87ca:	4410      	add	r0, r2
  checksum += (unsigned long) eeprom.rgt2;
   b87cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b87d0:	694a      	ldr	r2, [r1, #20]
   b87d2:	4402      	add	r2, r0
   b87d4:	ee17 0a90 	vmov	r0, s15
  checksum += (unsigned long) eeprom.rgp2;
   b87d8:	edd1 7a03 	vldr	s15, [r1, #12]
   b87dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   b87e0:	4410      	add	r0, r2
   b87e2:	ee17 3a90 	vmov	r3, s15
   b87e6:	4403      	add	r3, r0
  checksum += (unsigned long) eeprom.rgts;
  checksum += (unsigned long) eeprom.n2sfp;
   b87e8:	6908      	ldr	r0, [r1, #16]
  return (checksum);
}
   b87ea:	4418      	add	r0, r3
   b87ec:	4770      	bx	lr
   b87ee:	bf00      	nop
   b87f0:	2002e5f4 	.word	0x2002e5f4

000b87f4 <_Z21EEPROM_ChecksumUpdatev>:
/* 
 *=======================================================================================================================
 * EEPROM_ChecksumUpdate()
 *=======================================================================================================================
 */
void EEPROM_ChecksumUpdate() {
   b87f4:	b508      	push	{r3, lr}
  eeprom.checksum = EEPROM_ChecksumCompute();
   b87f6:	f7ff ffd9 	bl	b87ac <_Z22EEPROM_ChecksumComputev>
   b87fa:	4b01      	ldr	r3, [pc, #4]	; (b8800 <_Z21EEPROM_ChecksumUpdatev+0xc>)
   b87fc:	6198      	str	r0, [r3, #24]
}
   b87fe:	bd08      	pop	{r3, pc}
   b8800:	2002e5f4 	.word	0x2002e5f4

000b8804 <_Z12EEPROM_Resetl.part.0>:
 *=======================================================================================================================
 * EEPROM_Reset() - Reset to default values
 *                  Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Reset(time32_t current_time) {
   b8804:	b510      	push	{r4, lr}
  if (Time.isValid()) {
    eeprom.rgt1 = 0.0;
   b8806:	4c0a      	ldr	r4, [pc, #40]	; (b8830 <_Z12EEPROM_Resetl.part.0+0x2c>)
   b8808:	2300      	movs	r3, #0
   b880a:	6023      	str	r3, [r4, #0]
    eeprom.rgp1 = 0.0;
   b880c:	6063      	str	r3, [r4, #4]
    eeprom.rgt2 = 0.0;
   b880e:	60a3      	str	r3, [r4, #8]
    eeprom.rgp2 = 0.0;
   b8810:	60e3      	str	r3, [r4, #12]
    eeprom.rgts = current_time;
    eeprom.n2sfp = 0;
   b8812:	2300      	movs	r3, #0
   b8814:	6163      	str	r3, [r4, #20]
    eeprom.rgts = current_time;
   b8816:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
   b8818:	f7ff ffec 	bl	b87f4 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
   b881c:	f00e ff20 	bl	c7660 <_Z21__fetch_global_EEPROMv>
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b8820:	4b04      	ldr	r3, [pc, #16]	; (b8834 <_Z12EEPROM_Resetl.part.0+0x30>)
   b8822:	4621      	mov	r1, r4
   b8824:	6818      	ldr	r0, [r3, #0]
  }
  else {
    Output("EEPROM RESET ERROR");
  }
}
   b8826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b882a:	221c      	movs	r2, #28
   b882c:	f00c bc10 	b.w	c5050 <HAL_EEPROM_Put>
   b8830:	2002e5f4 	.word	0x2002e5f4
   b8834:	2002e610 	.word	0x2002e610

000b8838 <_Z20EEPROM_ChecksumValidv>:
bool EEPROM_ChecksumValid() {
   b8838:	b508      	push	{r3, lr}
  unsigned long checksum = EEPROM_ChecksumCompute();
   b883a:	f7ff ffb7 	bl	b87ac <_Z22EEPROM_ChecksumComputev>
  if (checksum == eeprom.checksum) {
   b883e:	4b03      	ldr	r3, [pc, #12]	; (b884c <_Z20EEPROM_ChecksumValidv+0x14>)
   b8840:	699b      	ldr	r3, [r3, #24]
}
   b8842:	1a1b      	subs	r3, r3, r0
   b8844:	4258      	negs	r0, r3
   b8846:	4158      	adcs	r0, r3
   b8848:	bd08      	pop	{r3, pc}
   b884a:	bf00      	nop
   b884c:	2002e5f4 	.word	0x2002e5f4

000b8850 <_Z22EEPROM_ClearRainTotalsl>:
 *=======================================================================================================================
 * EEPROM_ClearRainTotals() - Reset to default values
 *                           Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRainTotals(time32_t current_time) {
   b8850:	b510      	push	{r4, lr}
   b8852:	4604      	mov	r4, r0
  if (Time.isValid()) {
   b8854:	f00e fc69 	bl	c712a <_ZN9TimeClass7isValidEv>
   b8858:	b120      	cbz	r0, b8864 <_Z22EEPROM_ClearRainTotalsl+0x14>
   b885a:	4620      	mov	r0, r4
    EEPROM.put(eeprom_address, eeprom);
  }
  else {
    Output("EEPROM CLEAR ERROR");
  }
}
   b885c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8860:	f7ff bfd0 	b.w	b8804 <_Z12EEPROM_Resetl.part.0>
   b8864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM CLEAR ERROR");
   b8868:	4801      	ldr	r0, [pc, #4]	; (b8870 <_Z22EEPROM_ClearRainTotalsl+0x20>)
   b886a:	f7fd bc8f 	b.w	b618c <_Z6OutputPKc>
   b886e:	bf00      	nop
   b8870:	000cad5c 	.word	0x000cad5c

000b8874 <_Z23EEPROM_ClearRain2Totalsv>:
 *=======================================================================================================================
 * EEPROM_ClearRain2Totals() - Reset Rain 2 Totals
 *                             Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_ClearRain2Totals() {
   b8874:	b510      	push	{r4, lr}
  eeprom.rgt2 = 0.0;
   b8876:	4c08      	ldr	r4, [pc, #32]	; (b8898 <_Z23EEPROM_ClearRain2Totalsv+0x24>)
   b8878:	2300      	movs	r3, #0
   b887a:	60a3      	str	r3, [r4, #8]
  eeprom.rgp2 = 0.0;
   b887c:	60e3      	str	r3, [r4, #12]
  EEPROM_ChecksumUpdate();
   b887e:	f7ff ffb9 	bl	b87f4 <_Z21EEPROM_ChecksumUpdatev>
  EEPROM.put(eeprom_address, eeprom);
   b8882:	f00e feed 	bl	c7660 <_Z21__fetch_global_EEPROMv>
   b8886:	4b05      	ldr	r3, [pc, #20]	; (b889c <_Z23EEPROM_ClearRain2Totalsv+0x28>)
   b8888:	4621      	mov	r1, r4
   b888a:	6818      	ldr	r0, [r3, #0]
}
   b888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8890:	221c      	movs	r2, #28
   b8892:	f00c bbdd 	b.w	c5050 <HAL_EEPROM_Put>
   b8896:	bf00      	nop
   b8898:	2002e5f4 	.word	0x2002e5f4
   b889c:	2002e610 	.word	0x2002e610

000b88a0 <_Z17EEPROM_Initializev>:
 *=======================================================================================================================
 * EEPROM_Initialize() - Check status of EEPROM information and determine status
 *                       Requires system clock to be valid
 *=======================================================================================================================
 */
void EEPROM_Initialize() {
   b88a0:	b570      	push	{r4, r5, r6, lr}
  if (Time.isValid()) {
   b88a2:	f00e fc42 	bl	c712a <_ZN9TimeClass7isValidEv>
   b88a6:	2800      	cmp	r0, #0
   b88a8:	d062      	beq.n	b8970 <_Z17EEPROM_Initializev+0xd0>
    time32_t current_time = Time.now();
   b88aa:	f00e fc5b 	bl	c7164 <_ZN9TimeClass3nowEv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b88ae:	4c33      	ldr	r4, [pc, #204]	; (b897c <_Z17EEPROM_Initializev+0xdc>)

    EEPROM.get(eeprom_address, eeprom);
   b88b0:	4e33      	ldr	r6, [pc, #204]	; (b8980 <_Z17EEPROM_Initializev+0xe0>)
    time32_t current_time = Time.now();
   b88b2:	4605      	mov	r5, r0
    EEPROM.get(eeprom_address, eeprom);
   b88b4:	f00e fed4 	bl	c7660 <_Z21__fetch_global_EEPROMv>
   b88b8:	6830      	ldr	r0, [r6, #0]
   b88ba:	221c      	movs	r2, #28
   b88bc:	4621      	mov	r1, r4
   b88be:	f00c fbbf 	bl	c5040 <HAL_EEPROM_Get>

    if (!EEPROM_ChecksumValid()) {
   b88c2:	f7ff ffb9 	bl	b8838 <_Z20EEPROM_ChecksumValidv>
   b88c6:	b918      	cbnz	r0, b88d0 <_Z17EEPROM_Initializev+0x30>
          EEPROM.put(eeprom_address, eeprom);
        }
        else {
          // if current time is before 6am and RT time before 6am 2 days ago - EEPROM has no valid data - clear EEPROM
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
          EEPROM_ClearRainTotals(current_time);
   b88c8:	4628      	mov	r0, r5
   b88ca:	f7ff ffc1 	bl	b8850 <_Z22EEPROM_ClearRainTotalsl>
   b88ce:	e02b      	b.n	b8928 <_Z17EEPROM_Initializev+0x88>
      time32_t seconds_today        = current_time % 86400;
   b88d0:	4a2c      	ldr	r2, [pc, #176]	; (b8984 <_Z17EEPROM_Initializev+0xe4>)
   b88d2:	fb95 f3f2 	sdiv	r3, r5, r2
   b88d6:	fb02 5313 	mls	r3, r2, r3, r5
      time32_t seconds_at_0000      = current_time - seconds_today;
   b88da:	1aeb      	subs	r3, r5, r3
      time32_t seconds_at_0600      = seconds_at_0000 + 21600;
   b88dc:	f503 40a8 	add.w	r0, r3, #21504	; 0x5400
   b88e0:	3060      	adds	r0, #96	; 0x60
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
   b88e2:	f5a3 417d 	sub.w	r1, r3, #64768	; 0xfd00
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
   b88e6:	4285      	cmp	r5, r0
   b88e8:	6922      	ldr	r2, [r4, #16]
      time32_t seconds_yesterday_at_0600 = seconds_at_0600 - 86400;
   b88ea:	f1a1 0120 	sub.w	r1, r1, #32
      if ((current_time > seconds_at_0600) && (eeprom.rgts > seconds_at_0600)) {
   b88ee:	dd1f      	ble.n	b8930 <_Z17EEPROM_Initializev+0x90>
   b88f0:	4290      	cmp	r0, r2
   b88f2:	da03      	bge.n	b88fc <_Z17EEPROM_Initializev+0x5c>
        Output("T>6, RT>6 - OK");
   b88f4:	4824      	ldr	r0, [pc, #144]	; (b8988 <_Z17EEPROM_Initializev+0xe8>)
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
   b88f6:	f7fd fc49 	bl	b618c <_Z6OutputPKc>
   b88fa:	e00b      	b.n	b8914 <_Z17EEPROM_Initializev+0x74>
      else if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600) && (eeprom.rgts > seconds_yesterday_at_0600)){
   b88fc:	4291      	cmp	r1, r2
   b88fe:	da1b      	bge.n	b8938 <_Z17EEPROM_Initializev+0x98>
          Output("T>6, RT<=6 &&  RT>6Y- Move");  
   b8900:	4822      	ldr	r0, [pc, #136]	; (b898c <_Z17EEPROM_Initializev+0xec>)
   b8902:	f7fd fc43 	bl	b618c <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
   b8906:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
   b8908:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
   b890a:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
   b890c:	2300      	movs	r3, #0
   b890e:	6023      	str	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
   b8910:	60e2      	str	r2, [r4, #12]
          eeprom.rgt2 = 0.0;
   b8912:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
   b8914:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
   b8916:	f7ff ff6d 	bl	b87f4 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);          
   b891a:	f00e fea1 	bl	c7660 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   b891e:	221c      	movs	r2, #28
   b8920:	4621      	mov	r1, r4
   b8922:	6830      	ldr	r0, [r6, #0]
   b8924:	f00c fb94 	bl	c5050 <HAL_EEPROM_Put>
        }
      }
    }
    eeprom_valid = true;
   b8928:	4b19      	ldr	r3, [pc, #100]	; (b8990 <_Z17EEPROM_Initializev+0xf0>)
   b892a:	2201      	movs	r2, #1
   b892c:	701a      	strb	r2, [r3, #0]
  }
  else {
    Output("EEPROM INIT ERROR");
  }
}
   b892e:	bd70      	pop	{r4, r5, r6, pc}
        if (eeprom.rgts > seconds_yesterday_at_0600) {
   b8930:	4291      	cmp	r1, r2
   b8932:	da01      	bge.n	b8938 <_Z17EEPROM_Initializev+0x98>
          Output("T<6, RT<6 & RT>6 Yesterday - OK");
   b8934:	4817      	ldr	r0, [pc, #92]	; (b8994 <_Z17EEPROM_Initializev+0xf4>)
   b8936:	e7de      	b.n	b88f6 <_Z17EEPROM_Initializev+0x56>
        else if (eeprom.rgts > (seconds_yesterday_at_0600 - 84600)) { 
   b8938:	f5a3 3311 	sub.w	r3, r3, #148480	; 0x24400
   b893c:	f2a3 3397 	subw	r3, r3, #919	; 0x397
   b8940:	429a      	cmp	r2, r3
   b8942:	db11      	blt.n	b8968 <_Z17EEPROM_Initializev+0xc8>
          Output("T<6, RT<6 && RT>6-2d - Move");  
   b8944:	4814      	ldr	r0, [pc, #80]	; (b8998 <_Z17EEPROM_Initializev+0xf8>)
   b8946:	f7fd fc21 	bl	b618c <_Z6OutputPKc>
          eeprom.rgp1 = eeprom.rgt1;
   b894a:	6823      	ldr	r3, [r4, #0]
          eeprom.rgp2 = eeprom.rgt2;
   b894c:	68a2      	ldr	r2, [r4, #8]
          eeprom.rgp1 = eeprom.rgt1;
   b894e:	6063      	str	r3, [r4, #4]
          eeprom.rgt1 = 0.0;
   b8950:	2300      	movs	r3, #0
          eeprom.rgp2 = eeprom.rgt2;
   b8952:	60e2      	str	r2, [r4, #12]
          eeprom.rgt1 = 0.0;
   b8954:	6023      	str	r3, [r4, #0]
          eeprom.rgt2 = 0.0;
   b8956:	60a3      	str	r3, [r4, #8]
          eeprom.rgts = current_time;
   b8958:	6125      	str	r5, [r4, #16]
          EEPROM_ChecksumUpdate();
   b895a:	f7ff ff4b 	bl	b87f4 <_Z21EEPROM_ChecksumUpdatev>
          EEPROM.put(eeprom_address, eeprom);
   b895e:	f00e fe7f 	bl	c7660 <_Z21__fetch_global_EEPROMv>
   b8962:	4906      	ldr	r1, [pc, #24]	; (b897c <_Z17EEPROM_Initializev+0xdc>)
   b8964:	221c      	movs	r2, #28
   b8966:	e7dc      	b.n	b8922 <_Z17EEPROM_Initializev+0x82>
          Output("T<6, RT<6 && RT<=6-2d - Clear");  
   b8968:	480c      	ldr	r0, [pc, #48]	; (b899c <_Z17EEPROM_Initializev+0xfc>)
   b896a:	f7fd fc0f 	bl	b618c <_Z6OutputPKc>
   b896e:	e7ab      	b.n	b88c8 <_Z17EEPROM_Initializev+0x28>
}
   b8970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Output("EEPROM INIT ERROR");
   b8974:	480a      	ldr	r0, [pc, #40]	; (b89a0 <_Z17EEPROM_Initializev+0x100>)
   b8976:	f7fd bc09 	b.w	b618c <_Z6OutputPKc>
   b897a:	bf00      	nop
   b897c:	2002e5f4 	.word	0x2002e5f4
   b8980:	2002e610 	.word	0x2002e610
   b8984:	00015180 	.word	0x00015180
   b8988:	000cad6f 	.word	0x000cad6f
   b898c:	000cad7e 	.word	0x000cad7e
   b8990:	2002e614 	.word	0x2002e614
   b8994:	000cad99 	.word	0x000cad99
   b8998:	000cadb9 	.word	0x000cadb9
   b899c:	000cadd5 	.word	0x000cadd5
   b89a0:	000cadf3 	.word	0x000cadf3

000b89a4 <_Z23EEPROM_UpdateRainTotalsff>:
/* 
 *=======================================================================================================================
 * EEPROM_UpdateRainTotals() - 
 *=======================================================================================================================
 */
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
   b89a4:	b510      	push	{r4, lr}
   b89a6:	ed2d 8b02 	vpush	{d8}
  if (eeprom_valid) {
   b89aa:	4b30      	ldr	r3, [pc, #192]	; (b8a6c <_Z23EEPROM_UpdateRainTotalsff+0xc8>)
   b89ac:	781b      	ldrb	r3, [r3, #0]
void EEPROM_UpdateRainTotals(float rgt1, float rgt2) {
   b89ae:	eeb0 8a40 	vmov.f32	s16, s0
   b89b2:	eef0 8a60 	vmov.f32	s17, s1
  if (eeprom_valid) {
   b89b6:	2b00      	cmp	r3, #0
   b89b8:	d054      	beq.n	b8a64 <_Z23EEPROM_UpdateRainTotalsff+0xc0>
    time32_t current_time     = Time.now();
   b89ba:	f00e fbd3 	bl	c7164 <_ZN9TimeClass3nowEv>
    time32_t seconds_at_0600  = current_time - (current_time % 86400) + 21600; // time - seconds so far today + seconds to 0600
   b89be:	4b2c      	ldr	r3, [pc, #176]	; (b8a70 <_Z23EEPROM_UpdateRainTotalsff+0xcc>)
   b89c0:	fb90 f2f3 	sdiv	r2, r0, r3
   b89c4:	fb03 0212 	mls	r2, r3, r2, r0
   b89c8:	1a82      	subs	r2, r0, r2
   b89ca:	f502 42a8 	add.w	r2, r2, #21504	; 0x5400
   b89ce:	3260      	adds	r2, #96	; 0x60

    if ((current_time > seconds_at_0600) && (eeprom.rgts <= seconds_at_0600)) {
   b89d0:	4290      	cmp	r0, r2
   b89d2:	4b28      	ldr	r3, [pc, #160]	; (b8a74 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
   b89d4:	4928      	ldr	r1, [pc, #160]	; (b8a78 <_Z23EEPROM_UpdateRainTotalsff+0xd4>)
   b89d6:	dd29      	ble.n	b8a2c <_Z23EEPROM_UpdateRainTotalsff+0x88>
   b89d8:	691c      	ldr	r4, [r3, #16]
   b89da:	42a2      	cmp	r2, r4
   b89dc:	db26      	blt.n	b8a2c <_Z23EEPROM_UpdateRainTotalsff+0x88>
      // if rgts is before 0600 then we need to move today's totals to prior day
      eeprom.rgp1 = eeprom.rgt1;
      eeprom.rgt1 = 0;

      if (A4_State == A4_STATE_RAIN) {
   b89de:	680c      	ldr	r4, [r1, #0]
      eeprom.rgp1 = eeprom.rgt1;
   b89e0:	681a      	ldr	r2, [r3, #0]
   b89e2:	605a      	str	r2, [r3, #4]
      if (A4_State == A4_STATE_RAIN) {
   b89e4:	2c02      	cmp	r4, #2
      eeprom.rgt1 = 0;
   b89e6:	f04f 0200 	mov.w	r2, #0
   b89ea:	601a      	str	r2, [r3, #0]
      if (A4_State == A4_STATE_RAIN) {
   b89ec:	d134      	bne.n	b8a58 <_Z23EEPROM_UpdateRainTotalsff+0xb4>
        eeprom.rgt2 = 0;
      }
    }

    // Only add valid rain to the total
    if (rgt1>0) {
   b89ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
        eeprom.rgp2 = eeprom.rgt2;
   b89f2:	689c      	ldr	r4, [r3, #8]
   b89f4:	60dc      	str	r4, [r3, #12]
    if (rgt1>0) {
   b89f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        eeprom.rgt2 = 0;
   b89fa:	609a      	str	r2, [r3, #8]
    if (rgt1>0) {
   b89fc:	dc1b      	bgt.n	b8a36 <_Z23EEPROM_UpdateRainTotalsff+0x92>
      eeprom.rgt1 += rgt1;
    }
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
   b89fe:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   b8a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8a06:	dc20      	bgt.n	b8a4a <_Z23EEPROM_UpdateRainTotalsff+0xa6>
      eeprom.rgt2 += rgt2;
    }

    eeprom.rgts = current_time;
   b8a08:	6118      	str	r0, [r3, #16]
    EEPROM_ChecksumUpdate();
   b8a0a:	f7ff fef3 	bl	b87f4 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
   b8a0e:	f00e fe27 	bl	c7660 <_Z21__fetch_global_EEPROMv>
   b8a12:	4b1a      	ldr	r3, [pc, #104]	; (b8a7c <_Z23EEPROM_UpdateRainTotalsff+0xd8>)
   b8a14:	4917      	ldr	r1, [pc, #92]	; (b8a74 <_Z23EEPROM_UpdateRainTotalsff+0xd0>)
   b8a16:	6818      	ldr	r0, [r3, #0]
   b8a18:	221c      	movs	r2, #28
   b8a1a:	f00c fb19 	bl	c5050 <HAL_EEPROM_Put>
    Output("EEPROM RT UPDATED");
  }
}
   b8a1e:	ecbd 8b02 	vpop	{d8}
    Output("EEPROM RT UPDATED");
   b8a22:	4817      	ldr	r0, [pc, #92]	; (b8a80 <_Z23EEPROM_UpdateRainTotalsff+0xdc>)
}
   b8a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM RT UPDATED");
   b8a28:	f7fd bbb0 	b.w	b618c <_Z6OutputPKc>
    if (rgt1>0) {
   b8a2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b8a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8a34:	dd05      	ble.n	b8a42 <_Z23EEPROM_UpdateRainTotalsff+0x9e>
      eeprom.rgt1 += rgt1;
   b8a36:	ed93 0a00 	vldr	s0, [r3]
   b8a3a:	ee30 8a08 	vadd.f32	s16, s0, s16
   b8a3e:	ed83 8a00 	vstr	s16, [r3]
    if ((A4_State == A4_STATE_RAIN) && (rgt2>0)) {
   b8a42:	680a      	ldr	r2, [r1, #0]
   b8a44:	2a02      	cmp	r2, #2
   b8a46:	d1df      	bne.n	b8a08 <_Z23EEPROM_UpdateRainTotalsff+0x64>
   b8a48:	e7d9      	b.n	b89fe <_Z23EEPROM_UpdateRainTotalsff+0x5a>
      eeprom.rgt2 += rgt2;
   b8a4a:	edd3 0a02 	vldr	s1, [r3, #8]
   b8a4e:	ee70 8aa8 	vadd.f32	s17, s1, s17
   b8a52:	edc3 8a02 	vstr	s17, [r3, #8]
   b8a56:	e7d7      	b.n	b8a08 <_Z23EEPROM_UpdateRainTotalsff+0x64>
    if (rgt1>0) {
   b8a58:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   b8a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b8a60:	dce9      	bgt.n	b8a36 <_Z23EEPROM_UpdateRainTotalsff+0x92>
   b8a62:	e7d1      	b.n	b8a08 <_Z23EEPROM_UpdateRainTotalsff+0x64>
}
   b8a64:	ecbd 8b02 	vpop	{d8}
   b8a68:	bd10      	pop	{r4, pc}
   b8a6a:	bf00      	nop
   b8a6c:	2002e614 	.word	0x2002e614
   b8a70:	00015180 	.word	0x00015180
   b8a74:	2002e5f4 	.word	0x2002e5f4
   b8a78:	2002da5c 	.word	0x2002da5c
   b8a7c:	2002e610 	.word	0x2002e610
   b8a80:	000cae05 	.word	0x000cae05
   b8a84:	00000000 	.word	0x00000000

000b8a88 <_Z25EEPROM_SaveUnreportedRainv>:
/* 
 *=======================================================================================================================
 * EEPROM_SaveUnreportedRain() - 
 *=======================================================================================================================
 */
void EEPROM_SaveUnreportedRain() {
   b8a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8a8a:	ed2d 8b02 	vpush	{d8}
  if (raingauge1_interrupt_count || ((A4_State == A4_STATE_RAIN) && raingauge2_interrupt_count)) {
   b8a8e:	4b50      	ldr	r3, [pc, #320]	; (b8bd0 <_Z25EEPROM_SaveUnreportedRainv+0x148>)
   b8a90:	4f50      	ldr	r7, [pc, #320]	; (b8bd4 <_Z25EEPROM_SaveUnreportedRainv+0x14c>)
   b8a92:	681a      	ldr	r2, [r3, #0]
   b8a94:	b942      	cbnz	r2, b8aa8 <_Z25EEPROM_SaveUnreportedRainv+0x20>
   b8a96:	683a      	ldr	r2, [r7, #0]
   b8a98:	2a02      	cmp	r2, #2
   b8a9a:	f040 8090 	bne.w	b8bbe <_Z25EEPROM_SaveUnreportedRainv+0x136>
   b8a9e:	4a4e      	ldr	r2, [pc, #312]	; (b8bd8 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
   b8aa0:	6812      	ldr	r2, [r2, #0]
   b8aa2:	2a00      	cmp	r2, #0
   b8aa4:	f000 808b 	beq.w	b8bbe <_Z25EEPROM_SaveUnreportedRainv+0x136>
    unsigned long rgds;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    unsigned long rg2ds = 0;     // rain gauge delta seconds, seconds since last rain gauge observation logged
    float rain2 = 0.0;

    float rain = raingauge1_interrupt_count * 0.2;
   b8aa8:	6818      	ldr	r0, [r3, #0]
   b8aaa:	f7fb fbfb 	bl	b42a4 <__aeabi_ui2d>
   b8aae:	a346      	add	r3, pc, #280	; (adr r3, b8bc8 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
   b8ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8ab4:	f7fb fc70 	bl	b4398 <__aeabi_dmul>
   b8ab8:	f7fb ff66 	bl	b4988 <__aeabi_d2f>
   b8abc:	ee08 0a90 	vmov	s17, r0
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
   b8ac0:	f7fd f8c8 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b8ac4:	4a45      	ldr	r2, [pc, #276]	; (b8bdc <_Z25EEPROM_SaveUnreportedRainv+0x154>)
   b8ac6:	e9d2 3400 	ldrd	r3, r4, [r2]
   b8aca:	1ac0      	subs	r0, r0, r3
   b8acc:	eb61 0104 	sbc.w	r1, r1, r4
   b8ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8ad4:	2300      	movs	r3, #0
   b8ad6:	f7fc f905 	bl	b4ce4 <__aeabi_uldivmod>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
   b8ada:	eef4 8a68 	vcmp.f32	s17, s17
   b8ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    rgds = (System.millis()-raingauge1_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
   b8ae2:	4606      	mov	r6, r0
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
   b8ae4:	d662      	bvs.n	b8bac <_Z25EEPROM_SaveUnreportedRainv+0x124>
   b8ae6:	ee18 0a90 	vmov	r0, s17
   b8aea:	f7fb fbfd 	bl	b42e8 <__aeabi_f2d>
   b8aee:	4604      	mov	r4, r0
   b8af0:	203c      	movs	r0, #60	; 0x3c
   b8af2:	fbb6 f0f0 	udiv	r0, r6, r0
   b8af6:	460d      	mov	r5, r1
   b8af8:	f7fb fbd4 	bl	b42a4 <__aeabi_ui2d>
   b8afc:	4b38      	ldr	r3, [pc, #224]	; (b8be0 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
   b8afe:	2200      	movs	r2, #0
   b8b00:	f7fb fc4a 	bl	b4398 <__aeabi_dmul>
   b8b04:	4602      	mov	r2, r0
   b8b06:	460b      	mov	r3, r1
   b8b08:	4620      	mov	r0, r4
   b8b0a:	4629      	mov	r1, r5
   b8b0c:	f7fb fed4 	bl	b48b8 <__aeabi_dcmpgt>
   b8b10:	eddf 7a34 	vldr	s15, [pc, #208]	; b8be4 <_Z25EEPROM_SaveUnreportedRainv+0x15c>
   b8b14:	2800      	cmp	r0, #0
   b8b16:	bf18      	it	ne
   b8b18:	eef0 8a67 	vmovne.f32	s17, s15
    
    if (A4_State == A4_STATE_RAIN) {
   b8b1c:	683b      	ldr	r3, [r7, #0]
   b8b1e:	2b02      	cmp	r3, #2
   b8b20:	d147      	bne.n	b8bb2 <_Z25EEPROM_SaveUnreportedRainv+0x12a>
      rain2 = raingauge2_interrupt_count * 0.2;
   b8b22:	4b2d      	ldr	r3, [pc, #180]	; (b8bd8 <_Z25EEPROM_SaveUnreportedRainv+0x150>)
   b8b24:	6818      	ldr	r0, [r3, #0]
   b8b26:	f7fb fbbd 	bl	b42a4 <__aeabi_ui2d>
   b8b2a:	a327      	add	r3, pc, #156	; (adr r3, b8bc8 <_Z25EEPROM_SaveUnreportedRainv+0x140>)
   b8b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b8b30:	f7fb fc32 	bl	b4398 <__aeabi_dmul>
   b8b34:	f7fb ff28 	bl	b4988 <__aeabi_d2f>
   b8b38:	ee08 0a10 	vmov	s16, r0
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
   b8b3c:	f7fd f88a 	bl	b5c54 <_ZN11SystemClass6millisEv>
   b8b40:	4a29      	ldr	r2, [pc, #164]	; (b8be8 <_Z25EEPROM_SaveUnreportedRainv+0x160>)
   b8b42:	e9d2 3400 	ldrd	r3, r4, [r2]
   b8b46:	1ac0      	subs	r0, r0, r3
   b8b48:	eb61 0104 	sbc.w	r1, r1, r4
   b8b4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8b50:	2300      	movs	r3, #0
   b8b52:	f7fc f8c7 	bl	b4ce4 <__aeabi_uldivmod>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
   b8b56:	eeb4 8a48 	vcmp.f32	s16, s16
   b8b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;  // seconds since last rain gauge observation logged
   b8b5e:	4606      	mov	r6, r0
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
   b8b60:	d62a      	bvs.n	b8bb8 <_Z25EEPROM_SaveUnreportedRainv+0x130>
   b8b62:	ee18 0a10 	vmov	r0, s16
   b8b66:	f7fb fbbf 	bl	b42e8 <__aeabi_f2d>
   b8b6a:	4604      	mov	r4, r0
   b8b6c:	203c      	movs	r0, #60	; 0x3c
   b8b6e:	fbb6 f0f0 	udiv	r0, r6, r0
   b8b72:	460d      	mov	r5, r1
   b8b74:	f7fb fb96 	bl	b42a4 <__aeabi_ui2d>
   b8b78:	4b19      	ldr	r3, [pc, #100]	; (b8be0 <_Z25EEPROM_SaveUnreportedRainv+0x158>)
   b8b7a:	2200      	movs	r2, #0
   b8b7c:	f7fb fc0c 	bl	b4398 <__aeabi_dmul>
   b8b80:	4602      	mov	r2, r0
   b8b82:	460b      	mov	r3, r1
   b8b84:	4620      	mov	r0, r4
   b8b86:	4629      	mov	r1, r5
   b8b88:	f7fb fe96 	bl	b48b8 <__aeabi_dcmpgt>
   b8b8c:	eddf 7a15 	vldr	s15, [pc, #84]	; b8be4 <_Z25EEPROM_SaveUnreportedRainv+0x15c>
   b8b90:	2800      	cmp	r0, #0
   b8b92:	bf18      	it	ne
   b8b94:	eeb0 8a67 	vmovne.f32	s16, s15
    }

    EEPROM_UpdateRainTotals(rain, rain2);
   b8b98:	eef0 0a48 	vmov.f32	s1, s16
   b8b9c:	eeb0 0a68 	vmov.f32	s0, s17
  }
}
   b8ba0:	ecbd 8b02 	vpop	{d8}
   b8ba4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    EEPROM_UpdateRainTotals(rain, rain2);
   b8ba8:	f7ff befc 	b.w	b89a4 <_Z23EEPROM_UpdateRainTotalsff>
    rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
   b8bac:	eddf 8a0d 	vldr	s17, [pc, #52]	; b8be4 <_Z25EEPROM_SaveUnreportedRainv+0x15c>
   b8bb0:	e7b4      	b.n	b8b1c <_Z25EEPROM_SaveUnreportedRainv+0x94>
    float rain2 = 0.0;
   b8bb2:	ed9f 8a0e 	vldr	s16, [pc, #56]	; b8bec <_Z25EEPROM_SaveUnreportedRainv+0x164>
   b8bb6:	e7ef      	b.n	b8b98 <_Z25EEPROM_SaveUnreportedRainv+0x110>
      rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
   b8bb8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; b8be4 <_Z25EEPROM_SaveUnreportedRainv+0x15c>
   b8bbc:	e7ec      	b.n	b8b98 <_Z25EEPROM_SaveUnreportedRainv+0x110>
}
   b8bbe:	ecbd 8b02 	vpop	{d8}
   b8bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8bc4:	f3af 8000 	nop.w
   b8bc8:	9999999a 	.word	0x9999999a
   b8bcc:	3fc99999 	.word	0x3fc99999
   b8bd0:	2003e1dc 	.word	0x2003e1dc
   b8bd4:	2002da5c 	.word	0x2002da5c
   b8bd8:	2003e1f0 	.word	0x2003e1f0
   b8bdc:	2003e1e8 	.word	0x2003e1e8
   b8be0:	403e0000 	.word	0x403e0000
   b8be4:	c479f99a 	.word	0xc479f99a
   b8be8:	2003e200 	.word	0x2003e200
   b8bec:	00000000 	.word	0x00000000

000b8bf0 <_Z13EEPROM_Updatev>:
/* 
 *=======================================================================================================================
 * EEPROM_Update() - Check status of EEPROM information and determine status
 *=======================================================================================================================
 */
void EEPROM_Update() {
   b8bf0:	b510      	push	{r4, lr}
  if (eeprom_valid && Time.isValid()) {
   b8bf2:	4b0d      	ldr	r3, [pc, #52]	; (b8c28 <_Z13EEPROM_Updatev+0x38>)
   b8bf4:	781b      	ldrb	r3, [r3, #0]
   b8bf6:	b1ab      	cbz	r3, b8c24 <_Z13EEPROM_Updatev+0x34>
   b8bf8:	f00e fa97 	bl	c712a <_ZN9TimeClass7isValidEv>
   b8bfc:	b190      	cbz	r0, b8c24 <_Z13EEPROM_Updatev+0x34>
    eeprom.rgts = Time.now();
   b8bfe:	f00e fab1 	bl	c7164 <_ZN9TimeClass3nowEv>
   b8c02:	4c0a      	ldr	r4, [pc, #40]	; (b8c2c <_Z13EEPROM_Updatev+0x3c>)
   b8c04:	6120      	str	r0, [r4, #16]
    EEPROM_ChecksumUpdate();
   b8c06:	f7ff fdf5 	bl	b87f4 <_Z21EEPROM_ChecksumUpdatev>
    EEPROM.put(eeprom_address, eeprom);
   b8c0a:	f00e fd29 	bl	c7660 <_Z21__fetch_global_EEPROMv>
   b8c0e:	4b08      	ldr	r3, [pc, #32]	; (b8c30 <_Z13EEPROM_Updatev+0x40>)
   b8c10:	4621      	mov	r1, r4
   b8c12:	6818      	ldr	r0, [r3, #0]
   b8c14:	221c      	movs	r2, #28
   b8c16:	f00c fa1b 	bl	c5050 <HAL_EEPROM_Put>
    Output("EEPROM UPDATED");
  }
}
   b8c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output("EEPROM UPDATED");
   b8c1e:	4805      	ldr	r0, [pc, #20]	; (b8c34 <_Z13EEPROM_Updatev+0x44>)
   b8c20:	f7fd bab4 	b.w	b618c <_Z6OutputPKc>
}
   b8c24:	bd10      	pop	{r4, pc}
   b8c26:	bf00      	nop
   b8c28:	2002e614 	.word	0x2002e614
   b8c2c:	2002e5f4 	.word	0x2002e5f4
   b8c30:	2002e610 	.word	0x2002e610
   b8c34:	000cae17 	.word	0x000cae17

000b8c38 <_Z11EEPROM_Dumpv>:
/* 
 *=======================================================================================================================
 * EEPROM_Dump() - 
 *=======================================================================================================================
 */
void EEPROM_Dump() {
   b8c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8c3a:	ed2d 8b02 	vpush	{d8}
  size_t EEPROM_length = EEPROM.length();
   b8c3e:	f00e fd0f 	bl	c7660 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
   b8c42:	f00c f9f5 	bl	c5030 <HAL_EEPROM_Length>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b8c46:	4d4e      	ldr	r5, [pc, #312]	; (b8d80 <_Z11EEPROM_Dumpv+0x148>)

  unsigned long checksum = EEPROM_ChecksumCompute();

  Output("EEPROM DUMP");

  sprintf (msgbuf, " LEN:%d", EEPROM_length);
   b8c48:	4e4e      	ldr	r6, [pc, #312]	; (b8d84 <_Z11EEPROM_Dumpv+0x14c>)
  Output(msgbuf);

  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
   b8c4a:	ed9f 8a4f 	vldr	s16, [pc, #316]	; b8d88 <_Z11EEPROM_Dumpv+0x150>
    uint16_t length()                    { return HAL_EEPROM_Length(); }
   b8c4e:	4604      	mov	r4, r0
  EEPROM.get(eeprom_address, eeprom);
   b8c50:	f00e fd06 	bl	c7660 <_Z21__fetch_global_EEPROMv>
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   b8c54:	4b4d      	ldr	r3, [pc, #308]	; (b8d8c <_Z11EEPROM_Dumpv+0x154>)
   b8c56:	4629      	mov	r1, r5
   b8c58:	6818      	ldr	r0, [r3, #0]
   b8c5a:	221c      	movs	r2, #28
   b8c5c:	f00c f9f0 	bl	c5040 <HAL_EEPROM_Get>
  unsigned long checksum = EEPROM_ChecksumCompute();
   b8c60:	f7ff fda4 	bl	b87ac <_Z22EEPROM_ChecksumComputev>
   b8c64:	4607      	mov	r7, r0
  Output("EEPROM DUMP");
   b8c66:	484a      	ldr	r0, [pc, #296]	; (b8d90 <_Z11EEPROM_Dumpv+0x158>)
   b8c68:	f7fd fa90 	bl	b618c <_Z6OutputPKc>
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
   b8c6c:	b2a2      	uxth	r2, r4
   b8c6e:	4949      	ldr	r1, [pc, #292]	; (b8d94 <_Z11EEPROM_Dumpv+0x15c>)
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
   b8c70:	4c49      	ldr	r4, [pc, #292]	; (b8d98 <_Z11EEPROM_Dumpv+0x160>)
  sprintf (msgbuf, " LEN:%d", EEPROM_length);
   b8c72:	4630      	mov	r0, r6
   b8c74:	f00c fd14 	bl	c56a0 <sprintf>
  Output(msgbuf);
   b8c78:	4630      	mov	r0, r6
   b8c7a:	f7fd fa87 	bl	b618c <_Z6OutputPKc>
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
   b8c7e:	ed95 7a00 	vldr	s14, [r5]
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
   b8c82:	4946      	ldr	r1, [pc, #280]	; (b8d9c <_Z11EEPROM_Dumpv+0x164>)
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
   b8c84:	ee67 7a08 	vmul.f32	s15, s14, s16
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
   b8c88:	2664      	movs	r6, #100	; 0x64
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
   b8c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
   b8c8e:	4620      	mov	r0, r4
    (int)eeprom.rgt1, (int)(eeprom.rgt1*100)%100); 
   b8c90:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT1:%d.%02d", 
   b8c94:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   b8c98:	fb93 f2f6 	sdiv	r2, r3, r6
   b8c9c:	fb06 3312 	mls	r3, r6, r2, r3
   b8ca0:	ee17 2a90 	vmov	r2, s15
   b8ca4:	f00c fcfc 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8ca8:	4620      	mov	r0, r4
   b8caa:	f7fd fa6f 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
   b8cae:	ed95 7a01 	vldr	s14, [r5, #4]
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
   b8cb2:	493b      	ldr	r1, [pc, #236]	; (b8da0 <_Z11EEPROM_Dumpv+0x168>)
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
   b8cb4:	ee67 7a08 	vmul.f32	s15, s14, s16
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
   b8cb8:	4620      	mov	r0, r4
  (int)eeprom.rgp1, (int)(eeprom.rgp1*100)%100); 
   b8cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b8cbe:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RP1:%d.%02d", 
   b8cc2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   b8cc6:	fb93 f2f6 	sdiv	r2, r3, r6
   b8cca:	fb06 3312 	mls	r3, r6, r2, r3
   b8cce:	ee17 2a90 	vmov	r2, s15
   b8cd2:	f00c fce5 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8cd6:	4620      	mov	r0, r4
   b8cd8:	f7fd fa58 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
   b8cdc:	ed95 7a02 	vldr	s14, [r5, #8]
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
   b8ce0:	4930      	ldr	r1, [pc, #192]	; (b8da4 <_Z11EEPROM_Dumpv+0x16c>)
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
   b8ce2:	ee67 7a08 	vmul.f32	s15, s14, s16
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
   b8ce6:	4620      	mov	r0, r4
    (int)eeprom.rgt2, (int)(eeprom.rgt2*100)%100); 
   b8ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   b8cec:	ee17 3a90 	vmov	r3, s15
  sprintf (Buffer32Bytes, " RT2:%d.%02d", 
   b8cf0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
   b8cf4:	fb93 f2f6 	sdiv	r2, r3, r6
   b8cf8:	fb06 3312 	mls	r3, r6, r2, r3
   b8cfc:	ee17 2a90 	vmov	r2, s15
   b8d00:	f00c fcce 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8d04:	4620      	mov	r0, r4
   b8d06:	f7fd fa41 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
   b8d0a:	edd5 7a03 	vldr	s15, [r5, #12]
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
   b8d0e:	4926      	ldr	r1, [pc, #152]	; (b8da8 <_Z11EEPROM_Dumpv+0x170>)
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
   b8d10:	ee27 8a88 	vmul.f32	s16, s15, s16
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
   b8d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
   b8d18:	eebd 7ac8 	vcvt.s32.f32	s14, s16
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
   b8d1c:	4620      	mov	r0, r4
  (int)eeprom.rgp2, (int)(eeprom.rgp2*100)%100); 
   b8d1e:	ee17 3a10 	vmov	r3, s14
  sprintf (Buffer32Bytes, " RP2:%d.%02d", 
   b8d22:	fb93 f2f6 	sdiv	r2, r3, r6
   b8d26:	fb06 3312 	mls	r3, r6, r2, r3
   b8d2a:	ee17 2a90 	vmov	r2, s15
   b8d2e:	f00c fcb7 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8d32:	4620      	mov	r0, r4
   b8d34:	f7fd fa2a 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " RGTS:%lu", eeprom.rgts);
   b8d38:	692a      	ldr	r2, [r5, #16]
   b8d3a:	491c      	ldr	r1, [pc, #112]	; (b8dac <_Z11EEPROM_Dumpv+0x174>)
   b8d3c:	4620      	mov	r0, r4
   b8d3e:	f00c fcaf 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8d42:	4620      	mov	r0, r4
   b8d44:	f7fd fa22 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " N2SFP:%lu", eeprom.n2sfp);
   b8d48:	696a      	ldr	r2, [r5, #20]
   b8d4a:	4919      	ldr	r1, [pc, #100]	; (b8db0 <_Z11EEPROM_Dumpv+0x178>)
   b8d4c:	4620      	mov	r0, r4
   b8d4e:	f00c fca7 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8d52:	4620      	mov	r0, r4
   b8d54:	f7fd fa1a 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CS:%lu", eeprom.checksum);
   b8d58:	69aa      	ldr	r2, [r5, #24]
   b8d5a:	4916      	ldr	r1, [pc, #88]	; (b8db4 <_Z11EEPROM_Dumpv+0x17c>)
   b8d5c:	4620      	mov	r0, r4
   b8d5e:	f00c fc9f 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b8d62:	4620      	mov	r0, r4
   b8d64:	f7fd fa12 	bl	b618c <_Z6OutputPKc>

  sprintf (Buffer32Bytes, " CSC:%lu", checksum);
   b8d68:	463a      	mov	r2, r7
   b8d6a:	4620      	mov	r0, r4
   b8d6c:	4912      	ldr	r1, [pc, #72]	; (b8db8 <_Z11EEPROM_Dumpv+0x180>)
   b8d6e:	f00c fc97 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
}
   b8d72:	ecbd 8b02 	vpop	{d8}
  Output (Buffer32Bytes);
   b8d76:	4620      	mov	r0, r4
}
   b8d78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Output (Buffer32Bytes);
   b8d7c:	f7fd ba06 	b.w	b618c <_Z6OutputPKc>
   b8d80:	2002e5f4 	.word	0x2002e5f4
   b8d84:	200328c0 	.word	0x200328c0
   b8d88:	42c80000 	.word	0x42c80000
   b8d8c:	2002e610 	.word	0x2002e610
   b8d90:	000cae26 	.word	0x000cae26
   b8d94:	000cae32 	.word	0x000cae32
   b8d98:	2002da87 	.word	0x2002da87
   b8d9c:	000cae3a 	.word	0x000cae3a
   b8da0:	000cae47 	.word	0x000cae47
   b8da4:	000cae54 	.word	0x000cae54
   b8da8:	000cae61 	.word	0x000cae61
   b8dac:	000cae6e 	.word	0x000cae6e
   b8db0:	000cae78 	.word	0x000cae78
   b8db4:	000cae83 	.word	0x000cae83
   b8db8:	000cae8b 	.word	0x000cae8b

000b8dbc <_Z13SD_initializev>:
/* 
 *=======================================================================================================================
 * SD_initialize()
 *=======================================================================================================================
 */
void SD_initialize() {
   b8dbc:	b570      	push	{r4, r5, r6, lr}
   b8dbe:	b08a      	sub	sp, #40	; 0x28
class SPISettings : public Printable {
   b8dc0:	4b36      	ldr	r3, [pc, #216]	; (b8e9c <_Z13SD_initializev+0xe0>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b8dc2:	4c37      	ldr	r4, [pc, #220]	; (b8ea0 <_Z13SD_initializev+0xe4>)
   b8dc4:	9301      	str	r3, [sp, #4]
   b8dc6:	2300      	movs	r3, #0
   b8dc8:	f88d 3008 	strb.w	r3, [sp, #8]
   b8dcc:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b8dd0:	4b34      	ldr	r3, [pc, #208]	; (b8ea4 <_Z13SD_initializev+0xe8>)
   b8dd2:	9303      	str	r3, [sp, #12]
   b8dd4:	2501      	movs	r5, #1
   b8dd6:	ab01      	add	r3, sp, #4
   b8dd8:	2205      	movs	r2, #5
   b8dda:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b8dde:	4630      	mov	r0, r6
   b8de0:	f8ad 5010 	strh.w	r5, [sp, #16]
   b8de4:	f00b fcce 	bl	c4784 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b8de8:	2800      	cmp	r0, #0
   b8dea:	d036      	beq.n	b8e5a <_Z13SD_initializev+0x9e>
    vwd()->close();
   b8dec:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
   b8df0:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b8df2:	f00a fc1b 	bl	c362c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b8df6:	4629      	mov	r1, r5
   b8df8:	4620      	mov	r0, r4
   b8dfa:	f00b fb6d 	bl	c44d8 <_ZN9FatVolume4initEh>
   b8dfe:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b8e02:	4601      	mov	r1, r0
   b8e04:	b320      	cbz	r0, b8e50 <_Z13SD_initializev+0x94>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b8e06:	4926      	ldr	r1, [pc, #152]	; (b8ea0 <_Z13SD_initializev+0xe4>)
   b8e08:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b8e0c:	f00a fa45 	bl	c329a <_ZN7FatFile8openRootEP9FatVolume>
   b8e10:	b318      	cbz	r0, b8e5a <_Z13SD_initializev+0x9e>
    if (!dir->isDir()) {
   b8e12:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b8e16:	f013 0f70 	tst.w	r3, #112	; 0x70
   b8e1a:	d01e      	beq.n	b8e5a <_Z13SD_initializev+0x9e>
    m_cwd = dir;
   b8e1c:	4b22      	ldr	r3, [pc, #136]	; (b8ea8 <_Z13SD_initializev+0xec>)
    return vwd()->exists(path);
   b8e1e:	4923      	ldr	r1, [pc, #140]	; (b8eac <_Z13SD_initializev+0xf0>)
   b8e20:	4823      	ldr	r0, [pc, #140]	; (b8eb0 <_Z13SD_initializev+0xf4>)
   b8e22:	601d      	str	r5, [r3, #0]
   b8e24:	f7fc ff78 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    Output ("SD:NF");
    SystemStatusBits |= SSB_SD;
    delay (5000);
  }
  else {
    if (!SD.exists(SD_obsdir)) {
   b8e28:	2800      	cmp	r0, #0
   b8e2a:	d132      	bne.n	b8e92 <_Z13SD_initializev+0xd6>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b8e2c:	9001      	str	r0, [sp, #4]
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
   b8e2e:	4a1f      	ldr	r2, [pc, #124]	; (b8eac <_Z13SD_initializev+0xf0>)
   b8e30:	491f      	ldr	r1, [pc, #124]	; (b8eb0 <_Z13SD_initializev+0xf4>)
   b8e32:	2301      	movs	r3, #1
   b8e34:	a801      	add	r0, sp, #4
   b8e36:	f00a fcd4 	bl	c37e2 <_ZN7FatFile5mkdirEPS_PKcb>
      if (SD.mkdir(SD_obsdir)) {
   b8e3a:	b1e8      	cbz	r0, b8e78 <_Z13SD_initializev+0xbc>
        Output ("SD:MKDIR OBS OK");
   b8e3c:	481d      	ldr	r0, [pc, #116]	; (b8eb4 <_Z13SD_initializev+0xf8>)
   b8e3e:	f7fd f9a5 	bl	b618c <_Z6OutputPKc>
        Output ("SD:Online");
   b8e42:	481d      	ldr	r0, [pc, #116]	; (b8eb8 <_Z13SD_initializev+0xfc>)
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
      } 
    }
    else {
      Output ("SD:Online");
      Output ("SD:OBS DIR Exists");
   b8e44:	f7fd f9a2 	bl	b618c <_Z6OutputPKc>
      SD_exists = true;
   b8e48:	4b1c      	ldr	r3, [pc, #112]	; (b8ebc <_Z13SD_initializev+0x100>)
   b8e4a:	2201      	movs	r2, #1
   b8e4c:	701a      	strb	r2, [r3, #0]
    }
  }
}
   b8e4e:	e01e      	b.n	b8e8e <_Z13SD_initializev+0xd2>
    return (part ? init(part) : init(1) || init(0))
   b8e50:	4620      	mov	r0, r4
   b8e52:	f00b fb41 	bl	c44d8 <_ZN9FatVolume4initEh>
   b8e56:	2800      	cmp	r0, #0
   b8e58:	d1d5      	bne.n	b8e06 <_Z13SD_initializev+0x4a>
    Output ("SD:NF");
   b8e5a:	4819      	ldr	r0, [pc, #100]	; (b8ec0 <_Z13SD_initializev+0x104>)
   b8e5c:	f7fd f996 	bl	b618c <_Z6OutputPKc>
    SystemStatusBits |= SSB_SD;
   b8e60:	4a18      	ldr	r2, [pc, #96]	; (b8ec4 <_Z13SD_initializev+0x108>)
   b8e62:	6813      	ldr	r3, [r2, #0]
    delay (5000);
   b8e64:	f241 3088 	movw	r0, #5000	; 0x1388
    SystemStatusBits |= SSB_SD;
   b8e68:	f043 0302 	orr.w	r3, r3, #2
   b8e6c:	6013      	str	r3, [r2, #0]
}
   b8e6e:	b00a      	add	sp, #40	; 0x28
   b8e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay (5000);
   b8e74:	f00c bc5c 	b.w	c5730 <delay>
        Output ("SD:MKDIR OBS ERR");
   b8e78:	4813      	ldr	r0, [pc, #76]	; (b8ec8 <_Z13SD_initializev+0x10c>)
   b8e7a:	f7fd f987 	bl	b618c <_Z6OutputPKc>
        Output ("SD:Offline");
   b8e7e:	4813      	ldr	r0, [pc, #76]	; (b8ecc <_Z13SD_initializev+0x110>)
   b8e80:	f7fd f984 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits |= SSB_SD;  // Turn On Bit     
   b8e84:	4a0f      	ldr	r2, [pc, #60]	; (b8ec4 <_Z13SD_initializev+0x108>)
   b8e86:	6813      	ldr	r3, [r2, #0]
   b8e88:	f043 0302 	orr.w	r3, r3, #2
   b8e8c:	6013      	str	r3, [r2, #0]
}
   b8e8e:	b00a      	add	sp, #40	; 0x28
   b8e90:	bd70      	pop	{r4, r5, r6, pc}
      Output ("SD:Online");
   b8e92:	4809      	ldr	r0, [pc, #36]	; (b8eb8 <_Z13SD_initializev+0xfc>)
   b8e94:	f7fd f97a 	bl	b618c <_Z6OutputPKc>
      Output ("SD:OBS DIR Exists");
   b8e98:	480d      	ldr	r0, [pc, #52]	; (b8ed0 <_Z13SD_initializev+0x114>)
   b8e9a:	e7d3      	b.n	b8e44 <_Z13SD_initializev+0x88>
   b8e9c:	000cbe8c 	.word	0x000cbe8c
   b8ea0:	2002dad0 	.word	0x2002dad0
   b8ea4:	02faf080 	.word	0x02faf080
   b8ea8:	2003e620 	.word	0x2003e620
   b8eac:	2002d8ec 	.word	0x2002d8ec
   b8eb0:	2002df0c 	.word	0x2002df0c
   b8eb4:	000cae9a 	.word	0x000cae9a
   b8eb8:	000caeaa 	.word	0x000caeaa
   b8ebc:	2002df54 	.word	0x2002df54
   b8ec0:	000cae94 	.word	0x000cae94
   b8ec4:	2002d908 	.word	0x2002d908
   b8ec8:	000caeb4 	.word	0x000caeb4
   b8ecc:	000caec5 	.word	0x000caec5
   b8ed0:	000caed0 	.word	0x000caed0

000b8ed4 <_Z17SD_LogObservationPc>:
/* 
 *=======================================================================================================================
 * SD_LogObservation()
 *=======================================================================================================================
 */
void SD_LogObservation(char *observations) {
   b8ed4:	b570      	push	{r4, r5, r6, lr}
   b8ed6:	b0a4      	sub	sp, #144	; 0x90
   b8ed8:	4606      	mov	r6, r0
  char SD_logfile[24];
  File fp;
   b8eda:	a80a      	add	r0, sp, #40	; 0x28
   b8edc:	f7fc ff3c 	bl	b5d58 <_ZN4FileC1Ev>

  if (!SD_exists) {
   b8ee0:	4b24      	ldr	r3, [pc, #144]	; (b8f74 <_Z17SD_LogObservationPc+0xa0>)
   b8ee2:	781b      	ldrb	r3, [r3, #0]
   b8ee4:	2b00      	cmp	r3, #0
   b8ee6:	d03a      	beq.n	b8f5e <_Z17SD_LogObservationPc+0x8a>
    return;
  }

  if (!Time.isValid()) {
   b8ee8:	f00e f91f 	bl	c712a <_ZN9TimeClass7isValidEv>
   b8eec:	2800      	cmp	r0, #0
   b8eee:	d036      	beq.n	b8f5e <_Z17SD_LogObservationPc+0x8a>
    return;
  }
  
  sprintf (SD_logfile, "%s/%4d%02d%02d.log", SD_obsdir, Time.year(), Time.month(), Time.day());
   b8ef0:	f00e f980 	bl	c71f4 <_ZN9TimeClass4yearEv>
   b8ef4:	9003      	str	r0, [sp, #12]
   b8ef6:	f00e f975 	bl	c71e4 <_ZN9TimeClass5monthEv>
   b8efa:	4604      	mov	r4, r0
   b8efc:	f00e f966 	bl	c71cc <_ZN9TimeClass3dayEv>
   b8f00:	9b03      	ldr	r3, [sp, #12]
   b8f02:	4a1d      	ldr	r2, [pc, #116]	; (b8f78 <_Z17SD_LogObservationPc+0xa4>)
   b8f04:	491d      	ldr	r1, [pc, #116]	; (b8f7c <_Z17SD_LogObservationPc+0xa8>)
   b8f06:	e9cd 4000 	strd	r4, r0, [sp]
   b8f0a:	a804      	add	r0, sp, #16
   b8f0c:	f00c fbc8 	bl	c56a0 <sprintf>
    File tmpFile;
   b8f10:	a817      	add	r0, sp, #92	; 0x5c
   b8f12:	f7fc ff21 	bl	b5d58 <_ZN4FileC1Ev>
class File : public FatFile, public Stream {
   b8f16:	ac1b      	add	r4, sp, #108	; 0x6c
    tmpFile.open(vwd(), path, oflag);
   b8f18:	4919      	ldr	r1, [pc, #100]	; (b8f80 <_Z17SD_LogObservationPc+0xac>)
   b8f1a:	f244 2302 	movw	r3, #16898	; 0x4202
   b8f1e:	aa04      	add	r2, sp, #16
   b8f20:	a81b      	add	r0, sp, #108	; 0x6c
   b8f22:	f00a fb8a 	bl	c363a <_ZN7FatFile4openEPS_PKci>
   b8f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8f28:	ad0e      	add	r5, sp, #56	; 0x38
   b8f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8f30:	6823      	ldr	r3, [r4, #0]
   b8f32:	602b      	str	r3, [r5, #0]
class Print
   b8f34:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b8f36:	930b      	str	r3, [sp, #44]	; 0x2c
class Stream : public Print
   b8f38:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b8f3a:	930c      	str	r3, [sp, #48]	; 0x30
   b8f3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b8f3e:	930d      	str	r3, [sp, #52]	; 0x34
  
  fp = SD.open(SD_logfile, FILE_WRITE); 
  if (fp) {
   b8f40:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   b8f44:	4c0f      	ldr	r4, [pc, #60]	; (b8f84 <_Z17SD_LogObservationPc+0xb0>)
   b8f46:	b163      	cbz	r3, b8f62 <_Z17SD_LogObservationPc+0x8e>
    fp.println(observations);
   b8f48:	4631      	mov	r1, r6
   b8f4a:	a80a      	add	r0, sp, #40	; 0x28
   b8f4c:	f00d fdd3 	bl	c6af6 <_ZN5Print7printlnEPKc>
    fp.close();
   b8f50:	a80e      	add	r0, sp, #56	; 0x38
   b8f52:	f00a fb6b 	bl	c362c <_ZN7FatFile5closeEv>
    SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
   b8f56:	6823      	ldr	r3, [r4, #0]
   b8f58:	f023 0302 	bic.w	r3, r3, #2
   b8f5c:	6023      	str	r3, [r4, #0]
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("SD:Open(Log)ERR");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
   b8f5e:	b024      	add	sp, #144	; 0x90
   b8f60:	bd70      	pop	{r4, r5, r6, pc}
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
   b8f62:	6823      	ldr	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
   b8f64:	4808      	ldr	r0, [pc, #32]	; (b8f88 <_Z17SD_LogObservationPc+0xb4>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
   b8f66:	f043 0302 	orr.w	r3, r3, #2
   b8f6a:	6023      	str	r3, [r4, #0]
    Output ("SD:Open(Log)ERR");
   b8f6c:	f7fd f90e 	bl	b618c <_Z6OutputPKc>
    virtual ~Print() {}
   b8f70:	e7f5      	b.n	b8f5e <_Z17SD_LogObservationPc+0x8a>
   b8f72:	bf00      	nop
   b8f74:	2002df54 	.word	0x2002df54
   b8f78:	2002d8ec 	.word	0x2002d8ec
   b8f7c:	000caee2 	.word	0x000caee2
   b8f80:	2002df0c 	.word	0x2002df0c
   b8f84:	2002d908 	.word	0x2002d908
   b8f88:	000caef5 	.word	0x000caef5

000b8f8c <_Z13SD_N2S_Deletev>:
/* 
 *=======================================================================================================================
 * SD_N2S_Delete()
 *=======================================================================================================================
 */
bool SD_N2S_Delete() {
   b8f8c:	b538      	push	{r3, r4, r5, lr}
  bool result;

  if (SD_exists && SD.exists(SD_n2s_file)) {
   b8f8e:	4b17      	ldr	r3, [pc, #92]	; (b8fec <_Z13SD_N2S_Deletev+0x60>)
   b8f90:	4c17      	ldr	r4, [pc, #92]	; (b8ff0 <_Z13SD_N2S_Deletev+0x64>)
   b8f92:	781b      	ldrb	r3, [r3, #0]
   b8f94:	b193      	cbz	r3, b8fbc <_Z13SD_N2S_Deletev+0x30>
    return vwd()->exists(path);
   b8f96:	4917      	ldr	r1, [pc, #92]	; (b8ff4 <_Z13SD_N2S_Deletev+0x68>)
   b8f98:	4817      	ldr	r0, [pc, #92]	; (b8ff8 <_Z13SD_N2S_Deletev+0x6c>)
   b8f9a:	f7fc febd 	bl	b5d18 <_ZN7FatFile6existsEPKc>
   b8f9e:	b168      	cbz	r0, b8fbc <_Z13SD_N2S_Deletev+0x30>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b8fa0:	4914      	ldr	r1, [pc, #80]	; (b8ff4 <_Z13SD_N2S_Deletev+0x68>)
   b8fa2:	4815      	ldr	r0, [pc, #84]	; (b8ff8 <_Z13SD_N2S_Deletev+0x6c>)
   b8fa4:	f00a fb95 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
    if (SD.remove (SD_n2s_file)) {
   b8fa8:	4605      	mov	r5, r0
   b8faa:	b9b0      	cbnz	r0, b8fda <_Z13SD_N2S_Deletev+0x4e>
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
      Output ("N2S->DEL:OK");
      result = true;
    }
    else {
      Output ("N2S->DEL:ERR");
   b8fac:	4813      	ldr	r0, [pc, #76]	; (b8ffc <_Z13SD_N2S_Deletev+0x70>)
   b8fae:	f7fd f8ed 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_SD; // Turn On Bit
   b8fb2:	6823      	ldr	r3, [r4, #0]
   b8fb4:	f043 0302 	orr.w	r3, r3, #2
   b8fb8:	6023      	str	r3, [r4, #0]
      result = false;
   b8fba:	e007      	b.n	b8fcc <_Z13SD_N2S_Deletev+0x40>
    }
  }
  else {
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
   b8fbc:	6823      	ldr	r3, [r4, #0]
    Output ("N2S->DEL:NF");
   b8fbe:	4810      	ldr	r0, [pc, #64]	; (b9000 <_Z13SD_N2S_Deletev+0x74>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
   b8fc0:	f023 0310 	bic.w	r3, r3, #16
   b8fc4:	6023      	str	r3, [r4, #0]
    Output ("N2S->DEL:NF");
   b8fc6:	f7fd f8e1 	bl	b618c <_Z6OutputPKc>
    result = true;
   b8fca:	2501      	movs	r5, #1
  }
  eeprom.n2sfp = 0;
   b8fcc:	4b0d      	ldr	r3, [pc, #52]	; (b9004 <_Z13SD_N2S_Deletev+0x78>)
   b8fce:	2200      	movs	r2, #0
   b8fd0:	615a      	str	r2, [r3, #20]
  EEPROM_Update();
   b8fd2:	f7ff fe0d 	bl	b8bf0 <_Z13EEPROM_Updatev>
  return (result);
}
   b8fd6:	4628      	mov	r0, r5
   b8fd8:	bd38      	pop	{r3, r4, r5, pc}
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
   b8fda:	6823      	ldr	r3, [r4, #0]
      Output ("N2S->DEL:OK");
   b8fdc:	480a      	ldr	r0, [pc, #40]	; (b9008 <_Z13SD_N2S_Deletev+0x7c>)
      SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
   b8fde:	f023 0310 	bic.w	r3, r3, #16
   b8fe2:	6023      	str	r3, [r4, #0]
      Output ("N2S->DEL:OK");
   b8fe4:	f7fd f8d2 	bl	b618c <_Z6OutputPKc>
      result = true;
   b8fe8:	e7f0      	b.n	b8fcc <_Z13SD_N2S_Deletev+0x40>
   b8fea:	bf00      	nop
   b8fec:	2002df54 	.word	0x2002df54
   b8ff0:	2002d908 	.word	0x2002d908
   b8ff4:	2002d8db 	.word	0x2002d8db
   b8ff8:	2002df0c 	.word	0x2002df0c
   b8ffc:	000caf1d 	.word	0x000caf1d
   b9000:	000caf05 	.word	0x000caf05
   b9004:	2002e5f4 	.word	0x2002e5f4
   b9008:	000caf11 	.word	0x000caf11

000b900c <_Z17SD_NeedToSend_AddPc>:
/* 
 *=======================================================================================================================
 * SD_NeedToSend_Add()
 *=======================================================================================================================
 */
void SD_NeedToSend_Add(char *observation) {
   b900c:	b570      	push	{r4, r5, r6, lr}
   b900e:	b09a      	sub	sp, #104	; 0x68
   b9010:	4606      	mov	r6, r0
  File fp;
   b9012:	4668      	mov	r0, sp
   b9014:	f7fc fea0 	bl	b5d58 <_ZN4FileC1Ev>

  if (!SD_exists) {
   b9018:	4b25      	ldr	r3, [pc, #148]	; (b90b0 <_Z17SD_NeedToSend_AddPc+0xa4>)
   b901a:	781b      	ldrb	r3, [r3, #0]
   b901c:	2b00      	cmp	r3, #0
   b901e:	d02b      	beq.n	b9078 <_Z17SD_NeedToSend_AddPc+0x6c>
    File tmpFile;
   b9020:	a80d      	add	r0, sp, #52	; 0x34
   b9022:	f7fc fe99 	bl	b5d58 <_ZN4FileC1Ev>
   b9026:	ac11      	add	r4, sp, #68	; 0x44
    tmpFile.open(vwd(), path, oflag);
   b9028:	4a22      	ldr	r2, [pc, #136]	; (b90b4 <_Z17SD_NeedToSend_AddPc+0xa8>)
   b902a:	4923      	ldr	r1, [pc, #140]	; (b90b8 <_Z17SD_NeedToSend_AddPc+0xac>)
   b902c:	f244 2302 	movw	r3, #16898	; 0x4202
   b9030:	a811      	add	r0, sp, #68	; 0x44
   b9032:	f00a fb02 	bl	c363a <_ZN7FatFile4openEPS_PKci>
   b9036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9038:	ad04      	add	r5, sp, #16
   b903a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b903c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b903e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9040:	6823      	ldr	r3, [r4, #0]
   b9042:	602b      	str	r3, [r5, #0]
class Print
   b9044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b9046:	9301      	str	r3, [sp, #4]
   b9048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b904a:	9302      	str	r3, [sp, #8]
   b904c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b904e:	9303      	str	r3, [sp, #12]
    return;
  }
  
  fp = SD.open(SD_n2s_file, FILE_WRITE); // Open the file for reading and writing, starting at the end of the file.
                                         // It will be created if it doesn't already exist.
  if (fp) {  
   b9050:	f89d 3010 	ldrb.w	r3, [sp, #16]
   b9054:	b323      	cbz	r3, b90a0 <_Z17SD_NeedToSend_AddPc+0x94>
    if (fp.size() > SD_n2s_max_filesz) {
   b9056:	4b19      	ldr	r3, [pc, #100]	; (b90bc <_Z17SD_NeedToSend_AddPc+0xb0>)
   b9058:	681a      	ldr	r2, [r3, #0]
   b905a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b905c:	429a      	cmp	r2, r3
   b905e:	d20d      	bcs.n	b907c <_Z17SD_NeedToSend_AddPc+0x70>
      fp.close();
   b9060:	a804      	add	r0, sp, #16
   b9062:	f00a fae3 	bl	c362c <_ZN7FatFile5closeEv>
      Output ("N2S:Full");
   b9066:	4816      	ldr	r0, [pc, #88]	; (b90c0 <_Z17SD_NeedToSend_AddPc+0xb4>)
   b9068:	f7fd f890 	bl	b618c <_Z6OutputPKc>
      if (SD_N2S_Delete()) {
   b906c:	f7ff ff8e 	bl	b8f8c <_Z13SD_N2S_Deletev>
   b9070:	b110      	cbz	r0, b9078 <_Z17SD_NeedToSend_AddPc+0x6c>
        // Only call ourself again if we truely deleted the file. Otherwise infinate loop.
        SD_NeedToSend_Add(observation); // Now go and log the data
   b9072:	4630      	mov	r0, r6
   b9074:	f7ff ffca 	bl	b900c <_Z17SD_NeedToSend_AddPc>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
    Output ("N2S:Open Error");
    // At thins point we could set SD_exists to false and/or set a status bit to report it
    // sd_initialize();  // Reports SD NOT Found. Library bug with SD
  }
}
   b9078:	b01a      	add	sp, #104	; 0x68
   b907a:	bd70      	pop	{r4, r5, r6, pc}
      fp.println(observation); //Print data, followed by a carriage return and newline, to the File
   b907c:	4631      	mov	r1, r6
   b907e:	4668      	mov	r0, sp
   b9080:	f00d fd39 	bl	c6af6 <_ZN5Print7printlnEPKc>
      fp.close();
   b9084:	a804      	add	r0, sp, #16
   b9086:	f00a fad1 	bl	c362c <_ZN7FatFile5closeEv>
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
   b908a:	4a0e      	ldr	r2, [pc, #56]	; (b90c4 <_Z17SD_NeedToSend_AddPc+0xb8>)
      Output ("N2S:OBS Added");
   b908c:	480e      	ldr	r0, [pc, #56]	; (b90c8 <_Z17SD_NeedToSend_AddPc+0xbc>)
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
   b908e:	6813      	ldr	r3, [r2, #0]
   b9090:	f023 0302 	bic.w	r3, r3, #2
      SystemStatusBits |= SSB_N2S; // Turn on Bit that says there are entries in the N2S File
   b9094:	f043 0310 	orr.w	r3, r3, #16
   b9098:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
   b909a:	f7fd f877 	bl	b618c <_Z6OutputPKc>
   b909e:	e7eb      	b.n	b9078 <_Z17SD_NeedToSend_AddPc+0x6c>
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
   b90a0:	4a08      	ldr	r2, [pc, #32]	; (b90c4 <_Z17SD_NeedToSend_AddPc+0xb8>)
    Output ("N2S:Open Error");
   b90a2:	480a      	ldr	r0, [pc, #40]	; (b90cc <_Z17SD_NeedToSend_AddPc+0xc0>)
    SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
   b90a4:	6813      	ldr	r3, [r2, #0]
   b90a6:	f043 0302 	orr.w	r3, r3, #2
   b90aa:	6013      	str	r3, [r2, #0]
    Output ("N2S:Open Error");
   b90ac:	e7f5      	b.n	b909a <_Z17SD_NeedToSend_AddPc+0x8e>
   b90ae:	bf00      	nop
   b90b0:	2002df54 	.word	0x2002df54
   b90b4:	2002d8db 	.word	0x2002d8db
   b90b8:	2002df0c 	.word	0x2002df0c
   b90bc:	2002d8e8 	.word	0x2002d8e8
   b90c0:	000caf2a 	.word	0x000caf2a
   b90c4:	2002d908 	.word	0x2002d908
   b90c8:	000caf33 	.word	0x000caf33
   b90cc:	000caf41 	.word	0x000caf41

000b90d0 <_Z16lora_msgs_to_n2sv>:
void lora_msgs_to_n2s() {
   b90d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (LORA_exists) {
   b90d4:	4b14      	ldr	r3, [pc, #80]	; (b9128 <_Z16lora_msgs_to_n2sv+0x58>)
   b90d6:	781b      	ldrb	r3, [r3, #0]
   b90d8:	b31b      	cbz	r3, b9122 <_Z16lora_msgs_to_n2sv+0x52>
   b90da:	4c14      	ldr	r4, [pc, #80]	; (b912c <_Z16lora_msgs_to_n2sv+0x5c>)
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
   b90dc:	4f14      	ldr	r7, [pc, #80]	; (b9130 <_Z16lora_msgs_to_n2sv+0x60>)
   b90de:	f8df 8060 	ldr.w	r8, [pc, #96]	; b9140 <_Z16lora_msgs_to_n2sv+0x70>
   b90e2:	4e14      	ldr	r6, [pc, #80]	; (b9134 <_Z16lora_msgs_to_n2sv+0x64>)
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b90e4:	2500      	movs	r5, #0
      if (m->need2log) {
   b90e6:	7823      	ldrb	r3, [r4, #0]
   b90e8:	b1b3      	cbz	r3, b9118 <_Z16lora_msgs_to_n2sv+0x48>
        sprintf (msgbuf, "%s,%s", m->message, relay_msgtypes[m->message_type]);
   b90ea:	6863      	ldr	r3, [r4, #4]
   b90ec:	f104 0208 	add.w	r2, r4, #8
   b90f0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
   b90f4:	4641      	mov	r1, r8
   b90f6:	4630      	mov	r0, r6
   b90f8:	f00c fad2 	bl	c56a0 <sprintf>
        SD_NeedToSend_Add(msgbuf); // Save to N2F File
   b90fc:	4630      	mov	r0, r6
   b90fe:	f7ff ff85 	bl	b900c <_Z17SD_NeedToSend_AddPc>
        lora_relay_msg_free(m);
   b9102:	4620      	mov	r0, r4
   b9104:	f7fd fa28 	bl	b6558 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
        sprintf (Buffer32Bytes, "LoRaMsg[%d]->N2S", i);
   b9108:	490b      	ldr	r1, [pc, #44]	; (b9138 <_Z16lora_msgs_to_n2sv+0x68>)
   b910a:	480c      	ldr	r0, [pc, #48]	; (b913c <_Z16lora_msgs_to_n2sv+0x6c>)
   b910c:	462a      	mov	r2, r5
   b910e:	f00c fac7 	bl	c56a0 <sprintf>
        Output (Buffer32Bytes);
   b9112:	480a      	ldr	r0, [pc, #40]	; (b913c <_Z16lora_msgs_to_n2sv+0x6c>)
   b9114:	f7fd f83a 	bl	b618c <_Z6OutputPKc>
    for (int i=0; i< LORA_RELAY_MSGCNT; i++) {
   b9118:	3501      	adds	r5, #1
   b911a:	2d40      	cmp	r5, #64	; 0x40
   b911c:	f504 7484 	add.w	r4, r4, #264	; 0x108
   b9120:	d1e1      	bne.n	b90e6 <_Z16lora_msgs_to_n2sv+0x16>
}
   b9122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b9126:	bf00      	nop
   b9128:	2002dab1 	.word	0x2002dab1
   b912c:	2002e658 	.word	0x2002e658
   b9130:	2002d9c4 	.word	0x2002d9c4
   b9134:	200328c0 	.word	0x200328c0
   b9138:	000caf56 	.word	0x000caf56
   b913c:	2002da87 	.word	0x2002da87
   b9140:	000caf50 	.word	0x000caf50

000b9144 <_Z14lora_relay_msgPc>:
 *   INT,   Station ID
 *   INT,   Message Counter
 *   OBS    JSON Observation
 *=======================================================================================================================
 */
void lora_relay_msg(char *obs) {
   b9144:	b5f0      	push	{r4, r5, r6, r7, lr}
  int unit_id = 0;
  unsigned int message_counter = 0;
  char *message;
  char *p;

  if ((obs[0] == 'I') && (obs[1] == 'F')) {
   b9146:	7802      	ldrb	r2, [r0, #0]
   b9148:	7843      	ldrb	r3, [r0, #1]
   b914a:	2a49      	cmp	r2, #73	; 0x49
void lora_relay_msg(char *obs) {
   b914c:	b087      	sub	sp, #28
  if ((obs[0] == 'I') && (obs[1] == 'F')) {
   b914e:	d133      	bne.n	b91b8 <_Z14lora_relay_msgPc+0x74>
   b9150:	2b46      	cmp	r3, #70	; 0x46
   b9152:	d135      	bne.n	b91c0 <_Z14lora_relay_msgPc+0x7c>
    message_type = 1;
   b9154:	2501      	movs	r5, #1
    Output (Buffer32Bytes);
    return;
  }

  p = &obs[2]; // Start after message type 
  unit_id = atoi (strtok_r(p, ",", &p));
   b9156:	492c      	ldr	r1, [pc, #176]	; (b9208 <_Z14lora_relay_msgPc+0xc4>)
  message_counter = atoi (strtok_r(p, ",", &p));
  message = p;

  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
   b9158:	4e2c      	ldr	r6, [pc, #176]	; (b920c <_Z14lora_relay_msgPc+0xc8>)
  unit_id = atoi (strtok_r(p, ",", &p));
   b915a:	aa05      	add	r2, sp, #20
  p = &obs[2]; // Start after message type 
   b915c:	3002      	adds	r0, #2
   b915e:	9005      	str	r0, [sp, #20]
  unit_id = atoi (strtok_r(p, ",", &p));
   b9160:	f011 f904 	bl	ca36c <strtok_r>
   b9164:	f011 f804 	bl	ca170 <atoi>
  message_counter = atoi (strtok_r(p, ",", &p));
   b9168:	4927      	ldr	r1, [pc, #156]	; (b9208 <_Z14lora_relay_msgPc+0xc4>)
  unit_id = atoi (strtok_r(p, ",", &p));
   b916a:	9003      	str	r0, [sp, #12]
  message_counter = atoi (strtok_r(p, ",", &p));
   b916c:	aa05      	add	r2, sp, #20
   b916e:	9805      	ldr	r0, [sp, #20]
   b9170:	f011 f8fc 	bl	ca36c <strtok_r>
   b9174:	f010 fffc 	bl	ca170 <atoi>
  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
   b9178:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
   b917c:	9b03      	ldr	r3, [sp, #12]
   b917e:	4924      	ldr	r1, [pc, #144]	; (b9210 <_Z14lora_relay_msgPc+0xcc>)
   b9180:	9000      	str	r0, [sp, #0]
   b9182:	4824      	ldr	r0, [pc, #144]	; (b9214 <_Z14lora_relay_msgPc+0xd0>)
  message = p;
   b9184:	9f05      	ldr	r7, [sp, #20]
  sprintf (Buffer32Bytes, "Relay %s ID:%d CNT:%d", relay_msgtypes[message_type], unit_id, message_counter);
   b9186:	f00c fa8b 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b918a:	4822      	ldr	r0, [pc, #136]	; (b9214 <_Z14lora_relay_msgPc+0xd0>)
   b918c:	f7fc fffe 	bl	b618c <_Z6OutputPKc>
  // Output (message);

  // Locate storage index
  int idx = lora_relay_notinuse();
   b9190:	f7fd f9f8 	bl	b6584 <_Z19lora_relay_notinusev>

  if (idx == -1) {
   b9194:	1c42      	adds	r2, r0, #1
  int idx = lora_relay_notinuse();
   b9196:	4604      	mov	r4, r0
  if (idx == -1) {
   b9198:	d11e      	bne.n	b91d8 <_Z14lora_relay_msgPc+0x94>
    Output ("LORA Relay NoSpace");
   b919a:	481f      	ldr	r0, [pc, #124]	; (b9218 <_Z14lora_relay_msgPc+0xd4>)
   b919c:	f7fc fff6 	bl	b618c <_Z6OutputPKc>

    // Dump all LoRA messages to N2S
    lora_msgs_to_n2s();  // No Space - Dump all LoRA messages to N2S, then save new message
   b91a0:	f7ff ff96 	bl	b90d0 <_Z16lora_msgs_to_n2sv>

    idx = lora_relay_notinuse(); // This better not be -1 after freeing
   b91a4:	f7fd f9ee 	bl	b6584 <_Z19lora_relay_notinusev>
    if (idx == -1) {
   b91a8:	1c43      	adds	r3, r0, #1
    idx = lora_relay_notinuse(); // This better not be -1 after freeing
   b91aa:	4604      	mov	r4, r0
    if (idx == -1) {
   b91ac:	d114      	bne.n	b91d8 <_Z14lora_relay_msgPc+0x94>
      Output ("LORA Relay MsgLost");
   b91ae:	481b      	ldr	r0, [pc, #108]	; (b921c <_Z14lora_relay_msgPc+0xd8>)
  m = &lora_msg_relay[idx]; // Lets work with a pointer and not the index
  m->need2log = true;
  m->message_type = message_type;
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
  Output (Buffer32Bytes);
   b91b0:	f7fc ffec 	bl	b618c <_Z6OutputPKc>
}
   b91b4:	b007      	add	sp, #28
   b91b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((obs[0] == 'L') && (obs[1] == 'R')) {
   b91b8:	2a4c      	cmp	r2, #76	; 0x4c
   b91ba:	d101      	bne.n	b91c0 <_Z14lora_relay_msgPc+0x7c>
   b91bc:	2b52      	cmp	r3, #82	; 0x52
   b91be:	d009      	beq.n	b91d4 <_Z14lora_relay_msgPc+0x90>
    sprintf (Buffer32Bytes, "LORA Relay %c%c Unkn", obs[0], obs[1]);
   b91c0:	4917      	ldr	r1, [pc, #92]	; (b9220 <_Z14lora_relay_msgPc+0xdc>)
   b91c2:	4814      	ldr	r0, [pc, #80]	; (b9214 <_Z14lora_relay_msgPc+0xd0>)
   b91c4:	f00c fa6c 	bl	c56a0 <sprintf>
    Output (Buffer32Bytes);
   b91c8:	4812      	ldr	r0, [pc, #72]	; (b9214 <_Z14lora_relay_msgPc+0xd0>)
}
   b91ca:	b007      	add	sp, #28
   b91cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Output (Buffer32Bytes);
   b91d0:	f7fc bfdc 	b.w	b618c <_Z6OutputPKc>
    message_type = 2; 
   b91d4:	2502      	movs	r5, #2
   b91d6:	e7be      	b.n	b9156 <_Z14lora_relay_msgPc+0x12>
  m->need2log = true;
   b91d8:	4812      	ldr	r0, [pc, #72]	; (b9224 <_Z14lora_relay_msgPc+0xe0>)
   b91da:	f44f 7384 	mov.w	r3, #264	; 0x108
   b91de:	4363      	muls	r3, r4
   b91e0:	18c2      	adds	r2, r0, r3
   b91e2:	2101      	movs	r1, #1
   b91e4:	54c1      	strb	r1, [r0, r3]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
   b91e6:	3308      	adds	r3, #8
  m->message_type = message_type;
   b91e8:	6055      	str	r5, [r2, #4]
  strncpy (m->message, message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
   b91ea:	4639      	mov	r1, r7
   b91ec:	22ff      	movs	r2, #255	; 0xff
   b91ee:	4418      	add	r0, r3
   b91f0:	f011 f881 	bl	ca2f6 <strncpy>
  sprintf (Buffer32Bytes, "LORA Relay %s -> Queued:%d", relay_msgtypes[message_type], idx);
   b91f4:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
   b91f8:	490b      	ldr	r1, [pc, #44]	; (b9228 <_Z14lora_relay_msgPc+0xe4>)
   b91fa:	4806      	ldr	r0, [pc, #24]	; (b9214 <_Z14lora_relay_msgPc+0xd0>)
   b91fc:	4623      	mov	r3, r4
   b91fe:	f00c fa4f 	bl	c56a0 <sprintf>
  Output (Buffer32Bytes);
   b9202:	4804      	ldr	r0, [pc, #16]	; (b9214 <_Z14lora_relay_msgPc+0xd0>)
   b9204:	e7d4      	b.n	b91b0 <_Z14lora_relay_msgPc+0x6c>
   b9206:	bf00      	nop
   b9208:	000caf7c 	.word	0x000caf7c
   b920c:	2002d9c4 	.word	0x2002d9c4
   b9210:	000caf7e 	.word	0x000caf7e
   b9214:	2002da87 	.word	0x2002da87
   b9218:	000caf94 	.word	0x000caf94
   b921c:	000cafa7 	.word	0x000cafa7
   b9220:	000caf67 	.word	0x000caf67
   b9224:	2002e658 	.word	0x2002e658
   b9228:	000cafba 	.word	0x000cafba

000b922c <_Z10SD_findKeyPK19__FlashStringHelperPc>:
 *  myInt_1=2
 *  myFloat_1=0.74
 * =======================================================================================================================
 */

int SD_findKey(const __FlashStringHelper * key, char * value) {
   b922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9230:	4607      	mov	r7, r0
   b9232:	b0a6      	sub	sp, #152	; 0x98
  
  // Disable LoRA SPI0 Chip Select
  pinMode(LORA_SS, OUTPUT);
   b9234:	200a      	movs	r0, #10
int SD_findKey(const __FlashStringHelper * key, char * value) {
   b9236:	460e      	mov	r6, r1
  pinMode(LORA_SS, OUTPUT);
   b9238:	2101      	movs	r1, #1
   b923a:	f00e f9bd 	bl	c75b8 <pinMode>
  digitalWrite(LORA_SS, HIGH);
   b923e:	2101      	movs	r1, #1
   b9240:	200a      	movs	r0, #10
   b9242:	f00e f9ca 	bl	c75da <digitalWrite>
    File tmpFile;
   b9246:	a809      	add	r0, sp, #36	; 0x24
   b9248:	f7fc fd86 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b924c:	4a28      	ldr	r2, [pc, #160]	; (b92f0 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
   b924e:	4929      	ldr	r1, [pc, #164]	; (b92f4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc8>)
   b9250:	2300      	movs	r3, #0
   b9252:	a80d      	add	r0, sp, #52	; 0x34
   b9254:	f00a f9f1 	bl	c363a <_ZN7FatFile4openEPS_PKci>
  
  File configFile = SD.open(CF_NAME);

  if (!configFile) {
   b9258:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
   b925c:	2c00      	cmp	r4, #0
   b925e:	d035      	beq.n	b92cc <_Z10SD_findKeyPK19__FlashStringHelperPc+0xa0>
   b9260:	ab01      	add	r3, sp, #4
    return(0);
  }

  char key_string[KEY_MAX_LENGTH];
  char SD_buffer[KEY_MAX_LENGTH + VALUE_MAX_LENGTH + 1]; // 1 is = character
  int key_length = 0;
   b9262:	2500      	movs	r5, #0
   b9264:	4698      	mov	r8, r3
  // Flash string to string
  PGM_P keyPoiter;
  keyPoiter = reinterpret_cast<PGM_P>(key);
  byte ch;
  do {
    ch = pgm_read_byte(keyPoiter++);
   b9266:	5d7a      	ldrb	r2, [r7, r5]
    if (ch != 0)
   b9268:	2a00      	cmp	r2, #0
   b926a:	d13d      	bne.n	b92e8 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xbc>
    // WINDOWS uses CFLF = \r\n
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
    if (SD_buffer[buffer_length - 1] == '\r')
      buffer_length--; // trim the \r

    if (buffer_length > (key_length + 1)) { // 1 is = character
   b926c:	1c6f      	adds	r7, r5, #1
  while (configFile.available()) {
   b926e:	a809      	add	r0, sp, #36	; 0x24
   b9270:	f7fc fc4a 	bl	b5b08 <_ZN4File9availableEv>
   b9274:	4604      	mov	r4, r0
   b9276:	b328      	cbz	r0, b92c4 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x98>
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
   b9278:	233f      	movs	r3, #63	; 0x3f
   b927a:	aa16      	add	r2, sp, #88	; 0x58
   b927c:	210a      	movs	r1, #10
   b927e:	a809      	add	r0, sp, #36	; 0x24
   b9280:	f00d fdc5 	bl	c6e0e <_ZN6Stream14readBytesUntilEcPcj>
    if (SD_buffer[buffer_length - 1] == '\r')
   b9284:	aa26      	add	r2, sp, #152	; 0x98
   b9286:	1e43      	subs	r3, r0, #1
   b9288:	441a      	add	r2, r3
    int buffer_length = configFile.readBytesUntil('\n', SD_buffer, LINE_MAX_LENGTH);
   b928a:	4604      	mov	r4, r0
    if (SD_buffer[buffer_length - 1] == '\r')
   b928c:	f812 2c40 	ldrb.w	r2, [r2, #-64]
      buffer_length--; // trim the \r
   b9290:	2a0d      	cmp	r2, #13
   b9292:	bf08      	it	eq
   b9294:	461c      	moveq	r4, r3
    if (buffer_length > (key_length + 1)) { // 1 is = character
   b9296:	42a7      	cmp	r7, r4
   b9298:	dae9      	bge.n	b926e <_Z10SD_findKeyPK19__FlashStringHelperPc+0x42>
      if (memcmp(SD_buffer, key_string, key_length) == 0) { // equal
   b929a:	462a      	mov	r2, r5
   b929c:	4641      	mov	r1, r8
   b929e:	a816      	add	r0, sp, #88	; 0x58
   b92a0:	f010 ff72 	bl	ca188 <memcmp>
   b92a4:	2800      	cmp	r0, #0
   b92a6:	d1e2      	bne.n	b926e <_Z10SD_findKeyPK19__FlashStringHelperPc+0x42>
        if (SD_buffer[key_length] == '=') {
   b92a8:	ab26      	add	r3, sp, #152	; 0x98
   b92aa:	442b      	add	r3, r5
   b92ac:	f813 3c40 	ldrb.w	r3, [r3, #-64]
   b92b0:	2b3d      	cmp	r3, #61	; 0x3d
   b92b2:	d1dc      	bne.n	b926e <_Z10SD_findKeyPK19__FlashStringHelperPc+0x42>
          value_length = buffer_length - key_length - 1;
   b92b4:	1b64      	subs	r4, r4, r5
   b92b6:	3c01      	subs	r4, #1
          memcpy(value, SD_buffer + key_length + 1, value_length);
   b92b8:	ab16      	add	r3, sp, #88	; 0x58
   b92ba:	4622      	mov	r2, r4
   b92bc:	19d9      	adds	r1, r3, r7
   b92be:	4630      	mov	r0, r6
   b92c0:	f010 ff72 	bl	ca1a8 <memcpy>
        }
      }
    }
  }

  configFile.close();  // close the file
   b92c4:	a80d      	add	r0, sp, #52	; 0x34
   b92c6:	f00a f9b1 	bl	c362c <_ZN7FatFile5closeEv>
  return value_length;
   b92ca:	e009      	b.n	b92e0 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xb4>
    Serial.print(F("SD Card: error on opening file "));
   b92cc:	f00e f85c 	bl	c7388 <_Z16_fetch_usbserialv>
   b92d0:	4909      	ldr	r1, [pc, #36]	; (b92f8 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xcc>)
   b92d2:	f00d fc00 	bl	c6ad6 <_ZN5Print5printEPK19__FlashStringHelper>
    Serial.println(CF_NAME);
   b92d6:	f00e f857 	bl	c7388 <_Z16_fetch_usbserialv>
   b92da:	4905      	ldr	r1, [pc, #20]	; (b92f0 <_Z10SD_findKeyPK19__FlashStringHelperPc+0xc4>)
   b92dc:	f00d fc0b 	bl	c6af6 <_ZN5Print7printlnEPKc>
}
   b92e0:	4620      	mov	r0, r4
   b92e2:	b026      	add	sp, #152	; 0x98
   b92e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      key_string[key_length++] = ch;
   b92e8:	f803 2b01 	strb.w	r2, [r3], #1
   b92ec:	3501      	adds	r5, #1
  } while (ch != 0);
   b92ee:	e7ba      	b.n	b9266 <_Z10SD_findKeyPK19__FlashStringHelperPc+0x3a>
   b92f0:	000cafd5 	.word	0x000cafd5
   b92f4:	2002df0c 	.word	0x2002df0c
   b92f8:	000cafe0 	.word	0x000cafe0

000b92fc <_Z16HELPER_ascii2IntPci>:

int HELPER_ascii2Int(char *ascii, int length) {
  int sign = 1;
  int number = 0;

  for (int i = 0; i < length; i++) {
   b92fc:	2300      	movs	r3, #0
int HELPER_ascii2Int(char *ascii, int length) {
   b92fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  int number = 0;
   b9300:	461c      	mov	r4, r3
  int sign = 1;
   b9302:	2501      	movs	r5, #1
    char c = *(ascii + i);
    if (i == 0 && c == '-')
      sign = -1;
    else {
      if (c >= '0' && c <= '9')
        number = number * 10 + (c - '0');
   b9304:	260a      	movs	r6, #10
  for (int i = 0; i < length; i++) {
   b9306:	428b      	cmp	r3, r1
   b9308:	da0e      	bge.n	b9328 <_Z16HELPER_ascii2IntPci+0x2c>
    char c = *(ascii + i);
   b930a:	5cc2      	ldrb	r2, [r0, r3]
    if (i == 0 && c == '-')
   b930c:	b90b      	cbnz	r3, b9312 <_Z16HELPER_ascii2IntPci+0x16>
   b930e:	2a2d      	cmp	r2, #45	; 0x2d
   b9310:	d007      	beq.n	b9322 <_Z16HELPER_ascii2IntPci+0x26>
      if (c >= '0' && c <= '9')
   b9312:	3a30      	subs	r2, #48	; 0x30
   b9314:	b2d7      	uxtb	r7, r2
   b9316:	2f09      	cmp	r7, #9
   b9318:	d801      	bhi.n	b931e <_Z16HELPER_ascii2IntPci+0x22>
        number = number * 10 + (c - '0');
   b931a:	fb06 2404 	mla	r4, r6, r4, r2
  for (int i = 0; i < length; i++) {
   b931e:	3301      	adds	r3, #1
   b9320:	e7f1      	b.n	b9306 <_Z16HELPER_ascii2IntPci+0xa>
      sign = -1;
   b9322:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b9326:	e7fa      	b.n	b931e <_Z16HELPER_ascii2IntPci+0x22>
    }
  }

  return number * sign;
}
   b9328:	fb04 f005 	mul.w	r0, r4, r5
   b932c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b932e <_Z20HELPER_ascii2CharStrPci>:
    str += String(c);
  }
  return str;
}

char* HELPER_ascii2CharStr(char *ascii, int length) {
   b932e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9330:	4606      	mov	r6, r0
  char *str;
  str = (char *) malloc (length+1);
   b9332:	1c48      	adds	r0, r1, #1
char* HELPER_ascii2CharStr(char *ascii, int length) {
   b9334:	460c      	mov	r4, r1
  str = (char *) malloc (length+1);
   b9336:	f00c f99b 	bl	c5670 <malloc>
  str[0] = 0;
   b933a:	2100      	movs	r1, #0
  str = (char *) malloc (length+1);
   b933c:	4605      	mov	r5, r0
  for (int i = 0; i < length; i++) {
    char c = *(ascii + i);
    str[i] = c;
    str[i+1] = 0;
   b933e:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
  str[0] = 0;
   b9342:	f800 1b01 	strb.w	r1, [r0], #1
    str[i+1] = 0;
   b9346:	9201      	str	r2, [sp, #4]
   b9348:	f010 ff3c 	bl	ca1c4 <memset>
    str[i] = c;
   b934c:	9a01      	ldr	r2, [sp, #4]
   b934e:	4631      	mov	r1, r6
   b9350:	4628      	mov	r0, r5
   b9352:	f010 ff29 	bl	ca1a8 <memcpy>
  }
  return str;
}
   b9356:	4628      	mov	r0, r5
   b9358:	b002      	add	sp, #8
   b935a:	bd70      	pop	{r4, r5, r6, pc}

000b935c <_Z10SD_findIntPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return value_length > 0;
}

int SD_findInt(const __FlashStringHelper * key) {
   b935c:	b500      	push	{lr}
   b935e:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
   b9360:	4669      	mov	r1, sp
   b9362:	f7ff ff63 	bl	b922c <_Z10SD_findKeyPK19__FlashStringHelperPc>
   b9366:	4601      	mov	r1, r0
  return HELPER_ascii2Int(value_string, value_length);
   b9368:	4668      	mov	r0, sp
   b936a:	f7ff ffc7 	bl	b92fc <_Z16HELPER_ascii2IntPci>
}
   b936e:	b009      	add	sp, #36	; 0x24
   b9370:	f85d fb04 	ldr.w	pc, [sp], #4

000b9374 <_Z14SD_findCharStrPK19__FlashStringHelper>:
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
  return HELPER_ascii2String(value_string, value_length);
}

char* SD_findCharStr(const __FlashStringHelper * key) {
   b9374:	b500      	push	{lr}
   b9376:	b089      	sub	sp, #36	; 0x24
  char value_string[VALUE_MAX_LENGTH];
  int value_length = SD_findKey(key, value_string);
   b9378:	4669      	mov	r1, sp
   b937a:	f7ff ff57 	bl	b922c <_Z10SD_findKeyPK19__FlashStringHelperPc>
   b937e:	4601      	mov	r1, r0
  return HELPER_ascii2CharStr(value_string, value_length);
   b9380:	4668      	mov	r0, sp
   b9382:	f7ff ffd4 	bl	b932e <_Z20HELPER_ascii2CharStrPci>
}
   b9386:	b009      	add	sp, #36	; 0x24
   b9388:	f85d fb04 	ldr.w	pc, [sp], #4

000b938c <_Z17SD_ReadConfigFilev>:
/* 
 * =======================================================================================================================
 * SD_ReadConfigFile()
 * =======================================================================================================================
 */
void SD_ReadConfigFile() {
   b938c:	b510      	push	{r4, lr}
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
   b938e:	4822      	ldr	r0, [pc, #136]	; (b9418 <_Z17SD_ReadConfigFilev+0x8c>)
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
   b9390:	4c22      	ldr	r4, [pc, #136]	; (b941c <_Z17SD_ReadConfigFilev+0x90>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
   b9392:	f7ff ffef 	bl	b9374 <_Z14SD_findCharStrPK19__FlashStringHelper>
   b9396:	4b22      	ldr	r3, [pc, #136]	; (b9420 <_Z17SD_ReadConfigFilev+0x94>)
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
   b9398:	4922      	ldr	r1, [pc, #136]	; (b9424 <_Z17SD_ReadConfigFilev+0x98>)
  cf_aes_pkey     = SD_findCharStr(F("aes_pkey"));
   b939a:	6018      	str	r0, [r3, #0]
   b939c:	4602      	mov	r2, r0
  sprintf(msgbuf, "CF:aes_pkey=[%s]", cf_aes_pkey); Output (msgbuf);
   b939e:	4620      	mov	r0, r4
   b93a0:	f00c f97e 	bl	c56a0 <sprintf>
   b93a4:	4620      	mov	r0, r4
   b93a6:	f7fc fef1 	bl	b618c <_Z6OutputPKc>

  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
   b93aa:	481f      	ldr	r0, [pc, #124]	; (b9428 <_Z17SD_ReadConfigFilev+0x9c>)
   b93ac:	f7ff ffd6 	bl	b935c <_Z10SD_findIntPK19__FlashStringHelper>
   b93b0:	4b1e      	ldr	r3, [pc, #120]	; (b942c <_Z17SD_ReadConfigFilev+0xa0>)
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
   b93b2:	491f      	ldr	r1, [pc, #124]	; (b9430 <_Z17SD_ReadConfigFilev+0xa4>)
  cf_aes_myiv     = SD_findLong(F("aes_myiv"));
   b93b4:	6018      	str	r0, [r3, #0]
   b93b6:	4602      	mov	r2, r0
  sprintf(msgbuf, "CF:aes_myiv=[%lu]", cf_aes_myiv);   Output (msgbuf);
   b93b8:	4620      	mov	r0, r4
   b93ba:	f00c f971 	bl	c56a0 <sprintf>
   b93be:	4620      	mov	r0, r4
   b93c0:	f7fc fee4 	bl	b618c <_Z6OutputPKc>

  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
   b93c4:	481b      	ldr	r0, [pc, #108]	; (b9434 <_Z17SD_ReadConfigFilev+0xa8>)
   b93c6:	f7ff ffc9 	bl	b935c <_Z10SD_findIntPK19__FlashStringHelper>
   b93ca:	4b1b      	ldr	r3, [pc, #108]	; (b9438 <_Z17SD_ReadConfigFilev+0xac>)
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
   b93cc:	491b      	ldr	r1, [pc, #108]	; (b943c <_Z17SD_ReadConfigFilev+0xb0>)
  cf_lora_unitid  = SD_findInt(F("lora_unitid"));
   b93ce:	6018      	str	r0, [r3, #0]
   b93d0:	4602      	mov	r2, r0
  sprintf(msgbuf, "CF:lora_unitid=[%d]", cf_lora_unitid); Output (msgbuf);
   b93d2:	4620      	mov	r0, r4
   b93d4:	f00c f964 	bl	c56a0 <sprintf>
   b93d8:	4620      	mov	r0, r4
   b93da:	f7fc fed7 	bl	b618c <_Z6OutputPKc>

  cf_lora_txpower = SD_findInt(F("lora_txpower"));
   b93de:	4818      	ldr	r0, [pc, #96]	; (b9440 <_Z17SD_ReadConfigFilev+0xb4>)
   b93e0:	f7ff ffbc 	bl	b935c <_Z10SD_findIntPK19__FlashStringHelper>
   b93e4:	4b17      	ldr	r3, [pc, #92]	; (b9444 <_Z17SD_ReadConfigFilev+0xb8>)
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
   b93e6:	4918      	ldr	r1, [pc, #96]	; (b9448 <_Z17SD_ReadConfigFilev+0xbc>)
  cf_lora_txpower = SD_findInt(F("lora_txpower"));
   b93e8:	6018      	str	r0, [r3, #0]
   b93ea:	4602      	mov	r2, r0
  sprintf(msgbuf, "CF:lora_txpower=[%d]", cf_lora_txpower); Output (msgbuf);
   b93ec:	4620      	mov	r0, r4
   b93ee:	f00c f957 	bl	c56a0 <sprintf>
   b93f2:	4620      	mov	r0, r4
   b93f4:	f7fc feca 	bl	b618c <_Z6OutputPKc>

  cf_lora_freq   = SD_findInt(F("lora_freq"));
   b93f8:	4814      	ldr	r0, [pc, #80]	; (b944c <_Z17SD_ReadConfigFilev+0xc0>)
   b93fa:	f7ff ffaf 	bl	b935c <_Z10SD_findIntPK19__FlashStringHelper>
   b93fe:	4b14      	ldr	r3, [pc, #80]	; (b9450 <_Z17SD_ReadConfigFilev+0xc4>)
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
   b9400:	4914      	ldr	r1, [pc, #80]	; (b9454 <_Z17SD_ReadConfigFilev+0xc8>)
  cf_lora_freq   = SD_findInt(F("lora_freq"));
   b9402:	6018      	str	r0, [r3, #0]
   b9404:	4602      	mov	r2, r0
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
   b9406:	4620      	mov	r0, r4
   b9408:	f00c f94a 	bl	c56a0 <sprintf>
   b940c:	4620      	mov	r0, r4
   b940e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sprintf(msgbuf, "CF:lora_freq=[%d]", cf_lora_freq); Output (msgbuf);
   b9412:	f7fc bebb 	b.w	b618c <_Z6OutputPKc>
   b9416:	bf00      	nop
   b9418:	000cb000 	.word	0x000cb000
   b941c:	200328c0 	.word	0x200328c0
   b9420:	2002e414 	.word	0x2002e414
   b9424:	000cb009 	.word	0x000cb009
   b9428:	000cb01a 	.word	0x000cb01a
   b942c:	2002e410 	.word	0x2002e410
   b9430:	000cb023 	.word	0x000cb023
   b9434:	000cb035 	.word	0x000cb035
   b9438:	2002d928 	.word	0x2002d928
   b943c:	000cb041 	.word	0x000cb041
   b9440:	000cb055 	.word	0x000cb055
   b9444:	2002d924 	.word	0x2002d924
   b9448:	000cb062 	.word	0x000cb062
   b944c:	000cb077 	.word	0x000cb077
   b9450:	2002d920 	.word	0x2002d920
   b9454:	000cb081 	.word	0x000cb081

000b9458 <_Z9OBS_Cleari>:
 * ======================================================================================================================
 * OBS_Clear() - Set OBS to not in use
 * ======================================================================================================================
 */
void OBS_Clear(int i) {
  obs[i].inuse =false;
   b9458:	f640 2398 	movw	r3, #2712	; 0xa98
   b945c:	4a06      	ldr	r2, [pc, #24]	; (b9478 <_Z9OBS_Cleari+0x20>)
   b945e:	4358      	muls	r0, r3
   b9460:	2300      	movs	r3, #0
   b9462:	5413      	strb	r3, [r2, r0]
  for (int s=0; s<MAX_SENSORS; s++) {
   b9464:	4410      	add	r0, r2
    obs[i].sensor[s].inuse = false;
   b9466:	461a      	mov	r2, r3
  for (int s=0; s<MAX_SENSORS; s++) {
   b9468:	3301      	adds	r3, #1
   b946a:	2b60      	cmp	r3, #96	; 0x60
    obs[i].sensor[s].inuse = false;
   b946c:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  for (int s=0; s<MAX_SENSORS; s++) {
   b9470:	f100 001c 	add.w	r0, r0, #28
   b9474:	d1f8      	bne.n	b9468 <_Z9OBS_Cleari+0x10>
  }
}
   b9476:	4770      	bx	lr
   b9478:	20032cd0 	.word	0x20032cd0

000b947c <_Z11OBS_N2S_Addi>:
/*
 * ======================================================================================================================
 * OBS_N2S_Add() - Save OBS to N2S file
 * ======================================================================================================================
 */
void OBS_N2S_Add(int i) {
   b947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
   b9480:	f640 2598 	movw	r5, #2712	; 0xa98
   b9484:	f8df 9198 	ldr.w	r9, [pc, #408]	; b9620 <_Z11OBS_N2S_Addi+0x1a4>
   b9488:	4345      	muls	r5, r0
void OBS_N2S_Add(int i) {
   b948a:	b097      	sub	sp, #92	; 0x5c
  if (obs[i].inuse) {     // Sanity check
   b948c:	f819 3005 	ldrb.w	r3, [r9, r5]
void OBS_N2S_Add(int i) {
   b9490:	4607      	mov	r7, r0
  if (obs[i].inuse) {     // Sanity check
   b9492:	eb09 0405 	add.w	r4, r9, r5
   b9496:	2b00      	cmp	r3, #0
   b9498:	f000 809a 	beq.w	b95d0 <_Z11OBS_N2S_Addi+0x154>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
   b949c:	f8df 8170 	ldr.w	r8, [pc, #368]	; b9610 <_Z11OBS_N2S_Addi+0x194>
   b94a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b94a4:	2100      	movs	r1, #0
   b94a6:	4640      	mov	r0, r8
   b94a8:	f010 fe8c 	bl	ca1c4 <memset>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
   b94ac:	4b53      	ldr	r3, [pc, #332]	; (b95fc <_Z11OBS_N2S_Addi+0x180>)
   b94ae:	9309      	str	r3, [sp, #36]	; 0x24
        state_(BEGIN) {
   b94b0:	2600      	movs	r6, #0
        n_(0) {
   b94b2:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
   b94b6:	a809      	add	r0, sp, #36	; 0x24
   b94b8:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
        state_(BEGIN) {
   b94bc:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
        n_(0) {
   b94c0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   b94c4:	f00d f864 	bl	c6590 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
   b94c8:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b94cc:	f00d fe12 	bl	c70f4 <_ZN9TimeClass4yearEx>
   b94d0:	9007      	str	r0, [sp, #28]
   b94d2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b94d6:	f00d fe03 	bl	c70e0 <_ZN9TimeClass5monthEx>
   b94da:	9006      	str	r0, [sp, #24]
   b94dc:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b94e0:	f00d fdf6 	bl	c70d0 <_ZN9TimeClass3dayEx>
   b94e4:	9005      	str	r0, [sp, #20]
   b94e6:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b94ea:	f00d fdd9 	bl	c70a0 <_ZN9TimeClass4hourEx>
   b94ee:	4682      	mov	sl, r0
   b94f0:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b94f4:	f00d fddc 	bl	c70b0 <_ZN9TimeClass6minuteEx>
   b94f8:	4683      	mov	fp, r0
   b94fa:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   b94fe:	f00d fddf 	bl	c70c0 <_ZN9TimeClass6secondEx>
   b9502:	9b05      	ldr	r3, [sp, #20]
   b9504:	493e      	ldr	r1, [pc, #248]	; (b9600 <_Z11OBS_N2S_Addi+0x184>)
   b9506:	f8cd a004 	str.w	sl, [sp, #4]
   b950a:	e9cd b002 	strd	fp, r0, [sp, #8]
   b950e:	9300      	str	r3, [sp, #0]
   b9510:	a80e      	add	r0, sp, #56	; 0x38
   b9512:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b9516:	f00c f8c3 	bl	c56a0 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
   b951a:	493a      	ldr	r1, [pc, #232]	; (b9604 <_Z11OBS_N2S_Addi+0x188>)
   b951c:	a809      	add	r0, sp, #36	; 0x24
   b951e:	f7fc fbed 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b9522:	a90e      	add	r1, sp, #56	; 0x38
   b9524:	f7fc fb40 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
   b9528:	4937      	ldr	r1, [pc, #220]	; (b9608 <_Z11OBS_N2S_Addi+0x18c>)
   b952a:	a809      	add	r0, sp, #36	; 0x24
   b952c:	f7fc fbe6 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b9530:	4682      	mov	sl, r0
   b9532:	6920      	ldr	r0, [r4, #16]
   b9534:	f7fa fed8 	bl	b42e8 <__aeabi_f2d>
   b9538:	ec41 0b10 	vmov	d0, r0, r1
   b953c:	2104      	movs	r1, #4
   b953e:	4650      	mov	r0, sl
   b9540:	f00d f868 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>

    // Modify System Status and Set From Need to Send file bit
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
   b9544:	6963      	ldr	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
   b9546:	4931      	ldr	r1, [pc, #196]	; (b960c <_Z11OBS_N2S_Addi+0x190>)
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
   b9548:	f8df a0d8 	ldr.w	sl, [pc, #216]	; b9624 <_Z11OBS_N2S_Addi+0x1a8>
    obs[i].hth |= SSB_FROM_N2S; // Turn On Bit
   b954c:	f043 0320 	orr.w	r3, r3, #32
   b9550:	6163      	str	r3, [r4, #20]
    writer.name("hth").value((int) obs[i].hth);
   b9552:	a809      	add	r0, sp, #36	; 0x24
   b9554:	f7fc fbd2 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b9558:	6961      	ldr	r1, [r4, #20]
   b955a:	f00d f825 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
    for (int s=0; s<MAX_SENSORS; s++) {
   b955e:	3518      	adds	r5, #24
   b9560:	44a9      	add	r9, r5
      if (obs[i].sensor[s].inuse) {
   b9562:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   b9566:	b1a3      	cbz	r3, b9592 <_Z11OBS_N2S_Addi+0x116>
        switch (obs[i].sensor[s].type) {
   b9568:	6a23      	ldr	r3, [r4, #32]
   b956a:	2b01      	cmp	r3, #1
   b956c:	d033      	beq.n	b95d6 <_Z11OBS_N2S_Addi+0x15a>
   b956e:	2b02      	cmp	r3, #2
   b9570:	d039      	beq.n	b95e6 <_Z11OBS_N2S_Addi+0x16a>
   b9572:	2b00      	cmp	r3, #0
   b9574:	d13d      	bne.n	b95f2 <_Z11OBS_N2S_Addi+0x176>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
   b9576:	4649      	mov	r1, r9
   b9578:	a809      	add	r0, sp, #36	; 0x24
   b957a:	f7fc fbbf 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b957e:	4605      	mov	r5, r0
   b9580:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b9582:	f7fa feb1 	bl	b42e8 <__aeabi_f2d>
   b9586:	ec41 0b10 	vmov	d0, r0, r1
   b958a:	2101      	movs	r1, #1
   b958c:	4628      	mov	r0, r5
   b958e:	f00d f841 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
   b9592:	3601      	adds	r6, #1
   b9594:	2e60      	cmp	r6, #96	; 0x60
   b9596:	f104 041c 	add.w	r4, r4, #28
   b959a:	f109 091c 	add.w	r9, r9, #28
   b959e:	d1e0      	bne.n	b9562 <_Z11OBS_N2S_Addi+0xe6>
            break;
        }
      }
    }
    writer.endObject();
   b95a0:	a809      	add	r0, sp, #36	; 0x24
   b95a2:	f00c ffdf 	bl	c6564 <_ZN5spark10JSONWriter9endObjectEv>

    sprintf (msgbuf+strlen(msgbuf), ",FS");  // Add Particle Event Type after JSON structure
   b95a6:	481a      	ldr	r0, [pc, #104]	; (b9610 <_Z11OBS_N2S_Addi+0x194>)
   b95a8:	f7fb fd28 	bl	b4ffc <strlen>
   b95ac:	4919      	ldr	r1, [pc, #100]	; (b9614 <_Z11OBS_N2S_Addi+0x198>)
   b95ae:	4440      	add	r0, r8
   b95b0:	f010 fe7c 	bl	ca2ac <strcpy>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
   b95b4:	4816      	ldr	r0, [pc, #88]	; (b9610 <_Z11OBS_N2S_Addi+0x194>)
   b95b6:	f7ff fd29 	bl	b900c <_Z17SD_NeedToSend_AddPc>
    sprintf (Buffer32Bytes, "OBS->%d Add N2S", i);
   b95ba:	4917      	ldr	r1, [pc, #92]	; (b9618 <_Z11OBS_N2S_Addi+0x19c>)
   b95bc:	4817      	ldr	r0, [pc, #92]	; (b961c <_Z11OBS_N2S_Addi+0x1a0>)
   b95be:	463a      	mov	r2, r7
   b95c0:	f00c f86e 	bl	c56a0 <sprintf>
    Output(Buffer32Bytes);
   b95c4:	4815      	ldr	r0, [pc, #84]	; (b961c <_Z11OBS_N2S_Addi+0x1a0>)
   b95c6:	f7fc fde1 	bl	b618c <_Z6OutputPKc>
    Serial_write (msgbuf);
   b95ca:	4811      	ldr	r0, [pc, #68]	; (b9610 <_Z11OBS_N2S_Addi+0x194>)
   b95cc:	f7fc fdb4 	bl	b6138 <_Z12Serial_writePKc>
  }
}
   b95d0:	b017      	add	sp, #92	; 0x5c
   b95d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
   b95d6:	4649      	mov	r1, r9
   b95d8:	a809      	add	r0, sp, #36	; 0x24
   b95da:	f7fc fb8f 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b95de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
   b95e0:	f00c ffe2 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
            break;
   b95e4:	e7d5      	b.n	b9592 <_Z11OBS_N2S_Addi+0x116>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
   b95e6:	4649      	mov	r1, r9
   b95e8:	a809      	add	r0, sp, #36	; 0x24
   b95ea:	f7fc fb87 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b95ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   b95f0:	e7f6      	b.n	b95e0 <_Z11OBS_N2S_Addi+0x164>
            Output ("WhyAmIHere?");
   b95f2:	4650      	mov	r0, sl
   b95f4:	f7fc fdca 	bl	b618c <_Z6OutputPKc>
            break;
   b95f8:	e7cb      	b.n	b9592 <_Z11OBS_N2S_Addi+0x116>
   b95fa:	bf00      	nop
   b95fc:	000ccef0 	.word	0x000ccef0
   b9600:	000ca767 	.word	0x000ca767
   b9604:	000cb093 	.word	0x000cb093
   b9608:	000cb096 	.word	0x000cb096
   b960c:	000cb09a 	.word	0x000cb09a
   b9610:	200328c0 	.word	0x200328c0
   b9614:	000cb0aa 	.word	0x000cb0aa
   b9618:	000cb0ae 	.word	0x000cb0ae
   b961c:	2002da87 	.word	0x2002da87
   b9620:	20032cd0 	.word	0x20032cd0
   b9624:	000cb09e 	.word	0x000cb09e

000b9628 <_Z17OBS_FS_Build_JSONi>:
/*
 * ======================================================================================================================
 * OBS_FS_Build_JSON() - Create JSON observation in msgbuf
 * ======================================================================================================================
 */
bool OBS_FS_Build_JSON(int i) {
   b9628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (obs[i].inuse) {     // Sanity check
   b962c:	f640 2498 	movw	r4, #2712	; 0xa98
   b9630:	f8df 814c 	ldr.w	r8, [pc, #332]	; b9780 <_Z17OBS_FS_Build_JSONi+0x158>
   b9634:	4344      	muls	r4, r0
bool OBS_FS_Build_JSON(int i) {
   b9636:	b095      	sub	sp, #84	; 0x54
  if (obs[i].inuse) {     // Sanity check
   b9638:	f818 7004 	ldrb.w	r7, [r8, r4]
   b963c:	eb08 0504 	add.w	r5, r8, r4
   b9640:	2f00      	cmp	r7, #0
   b9642:	d07b      	beq.n	b973c <_Z17OBS_FS_Build_JSONi+0x114>
    char ts[32];
    
    memset(msgbuf, 0, sizeof(msgbuf));
   b9644:	4b48      	ldr	r3, [pc, #288]	; (b9768 <_Z17OBS_FS_Build_JSONi+0x140>)
   b9646:	2100      	movs	r1, #0
   b9648:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b964c:	4618      	mov	r0, r3
   b964e:	f010 fdb9 	bl	ca1c4 <memset>
        state_(BEGIN) {
   b9652:	2600      	movs	r6, #0
        n_(0) {
   b9654:	4a45      	ldr	r2, [pc, #276]	; (b976c <_Z17OBS_FS_Build_JSONi+0x144>)
   b9656:	9009      	str	r0, [sp, #36]	; 0x24
   b9658:	f240 33ff 	movw	r3, #1023	; 0x3ff

    JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
    writer.beginObject();
   b965c:	a807      	add	r0, sp, #28
   b965e:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
   b9662:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
   b9664:	f88d 6020 	strb.w	r6, [sp, #32]
   b9668:	f00c ff92 	bl	c6590 <_ZN5spark10JSONWriter11beginObjectEv>

    sprintf (ts, "%d-%02d-%02dT%02d:%02d:%02d",
   b966c:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   b9670:	f00d fd40 	bl	c70f4 <_ZN9TimeClass4yearEx>
   b9674:	9005      	str	r0, [sp, #20]
   b9676:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   b967a:	f00d fd31 	bl	c70e0 <_ZN9TimeClass5monthEx>
   b967e:	9004      	str	r0, [sp, #16]
   b9680:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   b9684:	f00d fd24 	bl	c70d0 <_ZN9TimeClass3dayEx>
   b9688:	4681      	mov	r9, r0
   b968a:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   b968e:	f00d fd07 	bl	c70a0 <_ZN9TimeClass4hourEx>
   b9692:	4682      	mov	sl, r0
   b9694:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   b9698:	f00d fd0a 	bl	c70b0 <_ZN9TimeClass6minuteEx>
   b969c:	4683      	mov	fp, r0
   b969e:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   b96a2:	f00d fd0d 	bl	c70c0 <_ZN9TimeClass6secondEx>
   b96a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b96aa:	e9cd b002 	strd	fp, r0, [sp, #8]
   b96ae:	e9cd 9a00 	strd	r9, sl, [sp]
   b96b2:	492f      	ldr	r1, [pc, #188]	; (b9770 <_Z17OBS_FS_Build_JSONi+0x148>)
   b96b4:	a80c      	add	r0, sp, #48	; 0x30
   b96b6:	f00b fff3 	bl	c56a0 <sprintf>
      Time.year(obs[i].ts), Time.month(obs[i].ts), Time.day(obs[i].ts),
      Time.hour(obs[i].ts), Time.minute(obs[i].ts), Time.second(obs[i].ts));

    writer.name("at").value(ts);
   b96ba:	492e      	ldr	r1, [pc, #184]	; (b9774 <_Z17OBS_FS_Build_JSONi+0x14c>)
   b96bc:	a807      	add	r0, sp, #28
   b96be:	f7fc fb1d 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b96c2:	a90c      	add	r1, sp, #48	; 0x30
   b96c4:	f7fc fa70 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
    writer.name("css").value(obs[i].css, 4);
   b96c8:	492b      	ldr	r1, [pc, #172]	; (b9778 <_Z17OBS_FS_Build_JSONi+0x150>)
   b96ca:	a807      	add	r0, sp, #28
   b96cc:	f7fc fb16 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b96d0:	4681      	mov	r9, r0
   b96d2:	6928      	ldr	r0, [r5, #16]
   b96d4:	f7fa fe08 	bl	b42e8 <__aeabi_f2d>
   b96d8:	ec41 0b10 	vmov	d0, r0, r1
   b96dc:	2104      	movs	r1, #4
   b96de:	4648      	mov	r0, r9
   b96e0:	f00c ff98 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>
    writer.name("hth").value((int) obs[i].hth);
   b96e4:	4925      	ldr	r1, [pc, #148]	; (b977c <_Z17OBS_FS_Build_JSONi+0x154>)
            break;
          case U_OBS :
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
            break;
          default : // Should never happen
            Output ("WhyAmIHere?");
   b96e6:	f8df 909c 	ldr.w	r9, [pc, #156]	; b9784 <_Z17OBS_FS_Build_JSONi+0x15c>
    writer.name("hth").value((int) obs[i].hth);
   b96ea:	a807      	add	r0, sp, #28
   b96ec:	f7fc fb06 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b96f0:	6969      	ldr	r1, [r5, #20]
   b96f2:	f00c ff59 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
    for (int s=0; s<MAX_SENSORS; s++) {
   b96f6:	3418      	adds	r4, #24
   b96f8:	4444      	add	r4, r8
      if (obs[i].sensor[s].inuse) {
   b96fa:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   b96fe:	b19b      	cbz	r3, b9728 <_Z17OBS_FS_Build_JSONi+0x100>
        switch (obs[i].sensor[s].type) {
   b9700:	6a2b      	ldr	r3, [r5, #32]
   b9702:	2b01      	cmp	r3, #1
   b9704:	d01e      	beq.n	b9744 <_Z17OBS_FS_Build_JSONi+0x11c>
   b9706:	2b02      	cmp	r3, #2
   b9708:	d024      	beq.n	b9754 <_Z17OBS_FS_Build_JSONi+0x12c>
   b970a:	bb4b      	cbnz	r3, b9760 <_Z17OBS_FS_Build_JSONi+0x138>
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].f_obs, 1);
   b970c:	4621      	mov	r1, r4
   b970e:	a807      	add	r0, sp, #28
   b9710:	f7fc faf4 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b9714:	4680      	mov	r8, r0
   b9716:	6a68      	ldr	r0, [r5, #36]	; 0x24
   b9718:	f7fa fde6 	bl	b42e8 <__aeabi_f2d>
   b971c:	ec41 0b10 	vmov	d0, r0, r1
   b9720:	2101      	movs	r1, #1
   b9722:	4640      	mov	r0, r8
   b9724:	f00c ff76 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>
    for (int s=0; s<MAX_SENSORS; s++) {
   b9728:	3601      	adds	r6, #1
   b972a:	2e60      	cmp	r6, #96	; 0x60
   b972c:	f105 051c 	add.w	r5, r5, #28
   b9730:	f104 041c 	add.w	r4, r4, #28
   b9734:	d1e1      	bne.n	b96fa <_Z17OBS_FS_Build_JSONi+0xd2>
            break;
        }
      }
    }
    writer.endObject();
   b9736:	a807      	add	r0, sp, #28
   b9738:	f00c ff14 	bl	c6564 <_ZN5spark10JSONWriter9endObjectEv>
    return (true);
  }
  else {
    return (false);
  }
}
   b973c:	4638      	mov	r0, r7
   b973e:	b015      	add	sp, #84	; 0x54
   b9740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            writer.name(obs[i].sensor[s].id).value(obs[i].sensor[s].i_obs);
   b9744:	4621      	mov	r1, r4
   b9746:	a807      	add	r0, sp, #28
   b9748:	f7fc fad8 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b974c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
   b974e:	f00c ff2b 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
            break;
   b9752:	e7e9      	b.n	b9728 <_Z17OBS_FS_Build_JSONi+0x100>
            writer.name(obs[i].sensor[s].id).value((int) obs[i].sensor[s].u_obs);
   b9754:	4621      	mov	r1, r4
   b9756:	a807      	add	r0, sp, #28
   b9758:	f7fc fad0 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   b975c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   b975e:	e7f6      	b.n	b974e <_Z17OBS_FS_Build_JSONi+0x126>
            Output ("WhyAmIHere?");
   b9760:	4648      	mov	r0, r9
   b9762:	f7fc fd13 	bl	b618c <_Z6OutputPKc>
            break;
   b9766:	e7df      	b.n	b9728 <_Z17OBS_FS_Build_JSONi+0x100>
   b9768:	200328c0 	.word	0x200328c0
   b976c:	000ccef0 	.word	0x000ccef0
   b9770:	000ca767 	.word	0x000ca767
   b9774:	000cb093 	.word	0x000cb093
   b9778:	000cb096 	.word	0x000cb096
   b977c:	000cb09a 	.word	0x000cb09a
   b9780:	20032cd0 	.word	0x20032cd0
   b9784:	000cb09e 	.word	0x000cb09e

000b9788 <_Z20OBS_Relay_Build_JSONv>:
 * ======================================================================================================================
 * OBS_Relay_Build_JSON() - Create JSON observation in msgbuf, remove from relay structure
 *                          Return the message relay type we are preparing
 * ======================================================================================================================
 */
int OBS_Relay_Build_JSON() {
   b9788:	b538      	push	{r3, r4, r5, lr}
  LORA_MSG_RELAY_STR *m;
  int relay_type = 0;

  memset(msgbuf, 0, sizeof(msgbuf));
   b978a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b978e:	2100      	movs	r1, #0
   b9790:	480c      	ldr	r0, [pc, #48]	; (b97c4 <_Z20OBS_Relay_Build_JSONv+0x3c>)
   b9792:	f010 fd17 	bl	ca1c4 <memset>
  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);

  // Locate message we need to log
  int i = lora_relay_need2log_idx();
   b9796:	f7fc ff05 	bl	b65a4 <_Z23lora_relay_need2log_idxv>
  if (i >= 0) {
   b979a:	2800      	cmp	r0, #0
   b979c:	db10      	blt.n	b97c0 <_Z20OBS_Relay_Build_JSONv+0x38>
    m = &lora_msg_relay[i];
   b979e:	f44f 7484 	mov.w	r4, #264	; 0x108
   b97a2:	4344      	muls	r4, r0
    strncpy (msgbuf, m->message, LORA_RELAY_MSG_LENGTH-1); // minus 1 so last byte in array will always be null
   b97a4:	4d08      	ldr	r5, [pc, #32]	; (b97c8 <_Z20OBS_Relay_Build_JSONv+0x40>)
   b97a6:	4807      	ldr	r0, [pc, #28]	; (b97c4 <_Z20OBS_Relay_Build_JSONv+0x3c>)
   b97a8:	f104 0108 	add.w	r1, r4, #8
   b97ac:	22ff      	movs	r2, #255	; 0xff
   b97ae:	4429      	add	r1, r5
   b97b0:	f010 fda1 	bl	ca2f6 <strncpy>
    relay_type = m->message_type;
   b97b4:	1928      	adds	r0, r5, r4
   b97b6:	6844      	ldr	r4, [r0, #4]
    lora_relay_msg_free(m);
   b97b8:	f7fc fece 	bl	b6558 <_Z19lora_relay_msg_freeP18LORA_MSG_RELAY_STR>
  }
  return (relay_type);
}
   b97bc:	4620      	mov	r0, r4
   b97be:	bd38      	pop	{r3, r4, r5, pc}
  int relay_type = 0;
   b97c0:	2400      	movs	r4, #0
  return (relay_type);
   b97c2:	e7fb      	b.n	b97bc <_Z20OBS_Relay_Build_JSONv+0x34>
   b97c4:	200328c0 	.word	0x200328c0
   b97c8:	2002e658 	.word	0x2002e658

000b97cc <_Z7OBS_Logi>:
/*
 * ======================================================================================================================
 * OBS_Log() - Save OBS to Log file
 * ======================================================================================================================
 */
void OBS_Log(int i) {
   b97cc:	b507      	push	{r0, r1, r2, lr}
   b97ce:	9001      	str	r0, [sp, #4]
  if (OBS_FS_Build_JSON(i)) {
   b97d0:	f7ff ff2a 	bl	b9628 <_Z17OBS_FS_Build_JSONi>
   b97d4:	9a01      	ldr	r2, [sp, #4]
   b97d6:	b178      	cbz	r0, b97f8 <_Z7OBS_Logi+0x2c>
    sprintf (Buffer32Bytes, "OBS[%d]->SD", i);
   b97d8:	4909      	ldr	r1, [pc, #36]	; (b9800 <_Z7OBS_Logi+0x34>)
   b97da:	480a      	ldr	r0, [pc, #40]	; (b9804 <_Z7OBS_Logi+0x38>)
   b97dc:	f00b ff60 	bl	c56a0 <sprintf>
    Output(Buffer32Bytes);
   b97e0:	4808      	ldr	r0, [pc, #32]	; (b9804 <_Z7OBS_Logi+0x38>)
   b97e2:	f7fc fcd3 	bl	b618c <_Z6OutputPKc>
    Serial_write (msgbuf);
   b97e6:	4808      	ldr	r0, [pc, #32]	; (b9808 <_Z7OBS_Logi+0x3c>)
   b97e8:	f7fc fca6 	bl	b6138 <_Z12Serial_writePKc>

    SD_LogObservation(msgbuf);
   b97ec:	4806      	ldr	r0, [pc, #24]	; (b9808 <_Z7OBS_Logi+0x3c>)
  }
}
   b97ee:	b003      	add	sp, #12
   b97f0:	f85d eb04 	ldr.w	lr, [sp], #4
    SD_LogObservation(msgbuf);
   b97f4:	f7ff bb6e 	b.w	b8ed4 <_Z17SD_LogObservationPc>
}
   b97f8:	b003      	add	sp, #12
   b97fa:	f85d fb04 	ldr.w	pc, [sp], #4
   b97fe:	bf00      	nop
   b9800:	000cb0be 	.word	0x000cb0be
   b9804:	2002da87 	.word	0x2002da87
   b9808:	200328c0 	.word	0x200328c0

000b980c <_Z15OBS_N2S_SaveAllv>:
/*
 * ======================================================================================================================
 * OBS_N2S_SaveAll() - Save All N Observations to Need2Send File
 * ======================================================================================================================
 */
void OBS_N2S_SaveAll() {
   b980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int relay_type;

  // Save All Station Observations to N2S file
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
   b980e:	2400      	movs	r4, #0
    OBS_N2S_Add (i);
   b9810:	4620      	mov	r0, r4
   b9812:	f7ff fe33 	bl	b947c <_Z11OBS_N2S_Addi>
    OBS_Clear(i);
   b9816:	4620      	mov	r0, r4
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
   b9818:	3401      	adds	r4, #1
    OBS_Clear(i);
   b981a:	f7ff fe1d 	bl	b9458 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
   b981e:	2c11      	cmp	r4, #17
   b9820:	d1f6      	bne.n	b9810 <_Z15OBS_N2S_SaveAllv+0x4>
  }

  // Save All Rain and Soil LoRa Observations to N2S file
  while (lora_relay_need2log()) {
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
   b9822:	4d0e      	ldr	r5, [pc, #56]	; (b985c <_Z15OBS_N2S_SaveAllv+0x50>)
   b9824:	4f0e      	ldr	r7, [pc, #56]	; (b9860 <_Z15OBS_N2S_SaveAllv+0x54>)
   b9826:	4e0f      	ldr	r6, [pc, #60]	; (b9864 <_Z15OBS_N2S_SaveAllv+0x58>)
  while (lora_relay_need2log()) {
   b9828:	f7fc fe9e 	bl	b6568 <_Z19lora_relay_need2logv>
   b982c:	b1a8      	cbz	r0, b985a <_Z15OBS_N2S_SaveAllv+0x4e>
   relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
   b982e:	f7ff ffab 	bl	b9788 <_Z20OBS_Relay_Build_JSONv>
   b9832:	4604      	mov	r4, r0
    sprintf (msgbuf+strlen(msgbuf), ", %s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
   b9834:	4809      	ldr	r0, [pc, #36]	; (b985c <_Z15OBS_N2S_SaveAllv+0x50>)
   b9836:	f7fb fbe1 	bl	b4ffc <strlen>
   b983a:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   b983e:	4631      	mov	r1, r6
   b9840:	4428      	add	r0, r5
   b9842:	f00b ff2d 	bl	c56a0 <sprintf>
    SD_NeedToSend_Add(msgbuf); // Save to N2F File
   b9846:	4805      	ldr	r0, [pc, #20]	; (b985c <_Z15OBS_N2S_SaveAllv+0x50>)
   b9848:	f7ff fbe0 	bl	b900c <_Z17SD_NeedToSend_AddPc>
    Output("LR->N2S");
   b984c:	4806      	ldr	r0, [pc, #24]	; (b9868 <_Z15OBS_N2S_SaveAllv+0x5c>)
   b984e:	f7fc fc9d 	bl	b618c <_Z6OutputPKc>
    Serial_write (msgbuf); 
   b9852:	4802      	ldr	r0, [pc, #8]	; (b985c <_Z15OBS_N2S_SaveAllv+0x50>)
   b9854:	f7fc fc70 	bl	b6138 <_Z12Serial_writePKc>
  while (lora_relay_need2log()) {
   b9858:	e7e6      	b.n	b9828 <_Z15OBS_N2S_SaveAllv+0x1c>
  }
}
   b985a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b985c:	200328c0 	.word	0x200328c0
   b9860:	2002d9c4 	.word	0x2002d9c4
   b9864:	000cb0ca 	.word	0x000cb0ca
   b9868:	000cb0cf 	.word	0x000cb0cf

000b986c <_Z8OBS_Lastv>:
 * ======================================================================================================================
 */
int OBS_Last() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
    if (obs[i].inuse == false) {
   b986c:	4a07      	ldr	r2, [pc, #28]	; (b988c <_Z8OBS_Lastv+0x20>)
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
   b986e:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
   b9870:	f640 2398 	movw	r3, #2712	; 0xa98
   b9874:	fb03 f100 	mul.w	r1, r3, r0
   b9878:	5c89      	ldrb	r1, [r1, r2]
   b987a:	b909      	cbnz	r1, b9880 <_Z8OBS_Lastv+0x14>
      if (i == 0) {
        return (-1);
      }
      else {
        return (i-1);
   b987c:	3801      	subs	r0, #1
   b987e:	4770      	bx	lr
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
   b9880:	3001      	adds	r0, #1
   b9882:	2811      	cmp	r0, #17
   b9884:	d1f6      	bne.n	b9874 <_Z8OBS_Lastv+0x8>
      }
    }
  }
  // Arrary full, Never found an empty, return last in Array
  return (MAX_ONE_MINUTE_OBS-1);
   b9886:	2010      	movs	r0, #16
}
   b9888:	4770      	bx	lr
   b988a:	bf00      	nop
   b988c:	20032cd0 	.word	0x20032cd0

000b9890 <_Z8OBS_Fullv>:
 * ======================================================================================================================
 */
bool OBS_Full() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
    if (obs[i].inuse == false) {
   b9890:	4905      	ldr	r1, [pc, #20]	; (b98a8 <_Z8OBS_Fullv+0x18>)
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
   b9892:	2300      	movs	r3, #0
    if (obs[i].inuse == false) {
   b9894:	f640 2298 	movw	r2, #2712	; 0xa98
   b9898:	fb02 f003 	mul.w	r0, r2, r3
   b989c:	5c40      	ldrb	r0, [r0, r1]
   b989e:	b110      	cbz	r0, b98a6 <_Z8OBS_Fullv+0x16>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
   b98a0:	3301      	adds	r3, #1
   b98a2:	2b11      	cmp	r3, #17
   b98a4:	d1f8      	bne.n	b9898 <_Z8OBS_Fullv+0x8>
      return (false);
    }
  }
  return (true);
}
   b98a6:	4770      	bx	lr
   b98a8:	20032cd0 	.word	0x20032cd0

000b98ac <_Z8OBS_Openv>:
 * ======================================================================================================================
 */
int OBS_Open() {
  // Scan OBS for free spot
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
    if (obs[i].inuse == false) {
   b98ac:	4a09      	ldr	r2, [pc, #36]	; (b98d4 <_Z8OBS_Openv+0x28>)
int OBS_Open() {
   b98ae:	b508      	push	{r3, lr}
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
   b98b0:	2000      	movs	r0, #0
    if (obs[i].inuse == false) {
   b98b2:	f640 2398 	movw	r3, #2712	; 0xa98
   b98b6:	fb03 f100 	mul.w	r1, r3, r0
   b98ba:	5c89      	ldrb	r1, [r1, r2]
   b98bc:	b141      	cbz	r1, b98d0 <_Z8OBS_Openv+0x24>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++){
   b98be:	3001      	adds	r0, #1
   b98c0:	2811      	cmp	r0, #17
   b98c2:	d1f8      	bne.n	b98b6 <_Z8OBS_Openv+0xa>
      return (i);
    }
  }

  // All Observations are inuse
  Output ("OBS[ALL]->N2S");
   b98c4:	4804      	ldr	r0, [pc, #16]	; (b98d8 <_Z8OBS_Openv+0x2c>)
   b98c6:	f7fc fc61 	bl	b618c <_Z6OutputPKc>

  // Save All N Observations to Need2Send File
  OBS_N2S_SaveAll();
   b98ca:	f7ff ff9f 	bl	b980c <_Z15OBS_N2S_SaveAllv>
   b98ce:	2000      	movs	r0, #0

  // All OBS are Clear so return the first OBS 
  return (0);
}
   b98d0:	bd08      	pop	{r3, pc}
   b98d2:	bf00      	nop
   b98d4:	20032cd0 	.word	0x20032cd0
   b98d8:	000cb0d7 	.word	0x000cb0d7

000b98dc <_Z11DeviceResetv>:
void DeviceReset() {
   b98dc:	b508      	push	{r3, lr}
  digitalWrite(REBOOT_PIN, HIGH);
   b98de:	2101      	movs	r1, #1
   b98e0:	2013      	movs	r0, #19
   b98e2:	f00d fe7a 	bl	c75da <digitalWrite>
  delay(5000);
   b98e6:	f241 3088 	movw	r0, #5000	; 0x1388
   b98ea:	f00b ff21 	bl	c5730 <delay>
  digitalWrite(REBOOT_PIN, LOW);
   b98ee:	2100      	movs	r1, #0
   b98f0:	2013      	movs	r0, #19
   b98f2:	f00d fe72 	bl	c75da <digitalWrite>
  delay(2000); 
   b98f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b98fa:	f00b ff19 	bl	c5730 <delay>
}
   b98fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  System.reset();
   b9902:	f00d bb25 	b.w	c6f50 <_ZN11SystemClass5resetEv>
	...

000b9908 <_Z17Function_DoAction6String>:
int Function_DoAction(String s) {
   b9908:	b530      	push	{r4, r5, lr}
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
   b990a:	6805      	ldr	r5, [r0, #0]
  if (strcmp (s,"REBOOT") == 0) {  // Reboot
   b990c:	498f      	ldr	r1, [pc, #572]	; (b9b4c <_Z17Function_DoAction6String+0x244>)
int Function_DoAction(String s) {
   b990e:	b08f      	sub	sp, #60	; 0x3c
  if (strcmp (s,"REBOOT") == 0) {  // Reboot
   b9910:	4628      	mov	r0, r5
   b9912:	f7fb fb69 	bl	b4fe8 <strcmp>
   b9916:	4604      	mov	r4, r0
   b9918:	b968      	cbnz	r0, b9936 <_Z17Function_DoAction6String+0x2e>
    Output("DoAction:REBOOT");
   b991a:	488d      	ldr	r0, [pc, #564]	; (b9b50 <_Z17Function_DoAction6String+0x248>)
   b991c:	f7fc fc36 	bl	b618c <_Z6OutputPKc>
    EEPROM_SaveUnreportedRain();
   b9920:	f7ff f8b2 	bl	b8a88 <_Z25EEPROM_SaveUnreportedRainv>
    delay(1000);
   b9924:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b9928:	f00b ff02 	bl	c5730 <delay>
    DeviceReset();
   b992c:	f7ff ffd6 	bl	b98dc <_Z11DeviceResetv>
}
   b9930:	4620      	mov	r0, r4
   b9932:	b00f      	add	sp, #60	; 0x3c
   b9934:	bd30      	pop	{r4, r5, pc}
  else if (strcmp (s,"INFO") == 0) {  // Send System Information
   b9936:	4987      	ldr	r1, [pc, #540]	; (b9b54 <_Z17Function_DoAction6String+0x24c>)
   b9938:	4628      	mov	r0, r5
   b993a:	f7fb fb55 	bl	b4fe8 <strcmp>
   b993e:	4604      	mov	r4, r0
   b9940:	b930      	cbnz	r0, b9950 <_Z17Function_DoAction6String+0x48>
    Output("DoAction:INFO");
   b9942:	4885      	ldr	r0, [pc, #532]	; (b9b58 <_Z17Function_DoAction6String+0x250>)
   b9944:	f7fc fc22 	bl	b618c <_Z6OutputPKc>
    SendSystemInformation=true;
   b9948:	4b84      	ldr	r3, [pc, #528]	; (b9b5c <_Z17Function_DoAction6String+0x254>)
   b994a:	2201      	movs	r2, #1
   b994c:	701a      	strb	r2, [r3, #0]
    return(0);  
   b994e:	e7ef      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"SEND") == 0) {  // Send OBS Now
   b9950:	4983      	ldr	r1, [pc, #524]	; (b9b60 <_Z17Function_DoAction6String+0x258>)
   b9952:	4628      	mov	r0, r5
   b9954:	f7fb fb48 	bl	b4fe8 <strcmp>
   b9958:	4604      	mov	r4, r0
   b995a:	b940      	cbnz	r0, b996e <_Z17Function_DoAction6String+0x66>
    Output("DoAction:SEND");
   b995c:	4881      	ldr	r0, [pc, #516]	; (b9b64 <_Z17Function_DoAction6String+0x25c>)
   b995e:	f7fc fc15 	bl	b618c <_Z6OutputPKc>
    LastTransmitTime=0;
   b9962:	4b81      	ldr	r3, [pc, #516]	; (b9b68 <_Z17Function_DoAction6String+0x260>)
   b9964:	2000      	movs	r0, #0
   b9966:	2100      	movs	r1, #0
   b9968:	e9c3 0100 	strd	r0, r1, [r3]
    return(0);  
   b996c:	e7e0      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"CRT") == 0) { // Clear Rain Totals
   b996e:	497f      	ldr	r1, [pc, #508]	; (b9b6c <_Z17Function_DoAction6String+0x264>)
   b9970:	4628      	mov	r0, r5
   b9972:	f7fb fb39 	bl	b4fe8 <strcmp>
   b9976:	4604      	mov	r4, r0
   b9978:	b948      	cbnz	r0, b998e <_Z17Function_DoAction6String+0x86>
    time32_t current_time = Time.now();
   b997a:	f00d fbf3 	bl	c7164 <_ZN9TimeClass3nowEv>
   b997e:	4605      	mov	r5, r0
    Output("DoAction:CRT");
   b9980:	487b      	ldr	r0, [pc, #492]	; (b9b70 <_Z17Function_DoAction6String+0x268>)
   b9982:	f7fc fc03 	bl	b618c <_Z6OutputPKc>
    EEPROM_ClearRainTotals(current_time);
   b9986:	4628      	mov	r0, r5
   b9988:	f7fe ff62 	bl	b8850 <_Z22EEPROM_ClearRainTotalsl>
    return(0);
   b998c:	e7d0      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4DIST") == 0) { // Set A4 State File to Distance
   b998e:	4979      	ldr	r1, [pc, #484]	; (b9b74 <_Z17Function_DoAction6String+0x26c>)
   b9990:	4628      	mov	r0, r5
   b9992:	f7fb fb29 	bl	b4fe8 <strcmp>
   b9996:	4604      	mov	r4, r0
   b9998:	2800      	cmp	r0, #0
   b999a:	d15a      	bne.n	b9a52 <_Z17Function_DoAction6String+0x14a>
    Output("DoAction:A4DIST");
   b999c:	4876      	ldr	r0, [pc, #472]	; (b9b78 <_Z17Function_DoAction6String+0x270>)
   b999e:	f7fc fbf5 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b99a2:	4b76      	ldr	r3, [pc, #472]	; (b9b7c <_Z17Function_DoAction6String+0x274>)
   b99a4:	781b      	ldrb	r3, [r3, #0]
   b99a6:	2b00      	cmp	r3, #0
   b99a8:	d04d      	beq.n	b9a46 <_Z17Function_DoAction6String+0x13e>
    return vwd()->exists(path);
   b99aa:	4975      	ldr	r1, [pc, #468]	; (b9b80 <_Z17Function_DoAction6String+0x278>)
   b99ac:	4875      	ldr	r0, [pc, #468]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b99ae:	f7fc f9b3 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
   b99b2:	b148      	cbz	r0, b99c8 <_Z17Function_DoAction6String+0xc0>
        EEPROM_ClearRain2Totals();
   b99b4:	f7fe ff5e 	bl	b8874 <_Z23EEPROM_ClearRain2Totalsv>
    return FatFile::remove(vwd(), path);
   b99b8:	4971      	ldr	r1, [pc, #452]	; (b9b80 <_Z17Function_DoAction6String+0x278>)
   b99ba:	4872      	ldr	r0, [pc, #456]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b99bc:	f009 fe89 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAIN_FILE)) {
   b99c0:	b1d8      	cbz	r0, b99fa <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
   b99c2:	4871      	ldr	r0, [pc, #452]	; (b9b88 <_Z17Function_DoAction6String+0x280>)
   b99c4:	f7fc fbe2 	bl	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   b99c8:	4970      	ldr	r1, [pc, #448]	; (b9b8c <_Z17Function_DoAction6String+0x284>)
   b99ca:	486e      	ldr	r0, [pc, #440]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b99cc:	f7fc f9a4 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
   b99d0:	b1c8      	cbz	r0, b9a06 <_Z17Function_DoAction6String+0xfe>
        Output ("A4=DIST, ALREADY EXISTS");    
   b99d2:	486f      	ldr	r0, [pc, #444]	; (b9b90 <_Z17Function_DoAction6String+0x288>)
          Output ("A4=DIST, SET");
   b99d4:	f7fc fbda 	bl	b618c <_Z6OutputPKc>
      dg_adjustment = 2.5;
   b99d8:	4b6e      	ldr	r3, [pc, #440]	; (b9b94 <_Z17Function_DoAction6String+0x28c>)
   b99da:	4a6f      	ldr	r2, [pc, #444]	; (b9b98 <_Z17Function_DoAction6String+0x290>)
   b99dc:	496f      	ldr	r1, [pc, #444]	; (b9b9c <_Z17Function_DoAction6String+0x294>)
   b99de:	4869      	ldr	r0, [pc, #420]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b99e0:	601a      	str	r2, [r3, #0]
   b99e2:	f7fc f999 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
   b99e6:	b360      	cbz	r0, b9a42 <_Z17Function_DoAction6String+0x13a>
    return FatFile::remove(vwd(), path);
   b99e8:	496c      	ldr	r1, [pc, #432]	; (b9b9c <_Z17Function_DoAction6String+0x294>)
   b99ea:	4866      	ldr	r0, [pc, #408]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b99ec:	f009 fe71 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
   b99f0:	b308      	cbz	r0, b9a36 <_Z17Function_DoAction6String+0x12e>
          Output ("A4=DIST, DEL 5M:OK, 10M SET");
   b99f2:	486b      	ldr	r0, [pc, #428]	; (b9ba0 <_Z17Function_DoAction6String+0x298>)
        Output ("TXI15M SET"); 
   b99f4:	f7fc fbca 	bl	b618c <_Z6OutputPKc>
   b99f8:	e79a      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL RAIN:ERR");
   b99fa:	486a      	ldr	r0, [pc, #424]	; (b9ba4 <_Z17Function_DoAction6String+0x29c>)
          Output ("A4=RAIN, DEL DIST:ERR");
   b99fc:	f7fc fbc6 	bl	b618c <_Z6OutputPKc>
          return(-2);
   b9a00:	f06f 0401 	mvn.w	r4, #1
   b9a04:	e794      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
    File tmpFile;
   b9a06:	a801      	add	r0, sp, #4
   b9a08:	f7fc f9a6 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9a0c:	f244 2302 	movw	r3, #16898	; 0x4202
   b9a10:	4a5e      	ldr	r2, [pc, #376]	; (b9b8c <_Z17Function_DoAction6String+0x284>)
   b9a12:	495c      	ldr	r1, [pc, #368]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9a14:	a805      	add	r0, sp, #20
   b9a16:	f009 fe10 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9a1a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9a1e:	b123      	cbz	r3, b9a2a <_Z17Function_DoAction6String+0x122>
          fp.close();
   b9a20:	a805      	add	r0, sp, #20
   b9a22:	f009 fe03 	bl	c362c <_ZN7FatFile5closeEv>
          Output ("A4=DIST, SET");
   b9a26:	4860      	ldr	r0, [pc, #384]	; (b9ba8 <_Z17Function_DoAction6String+0x2a0>)
   b9a28:	e7d4      	b.n	b99d4 <_Z17Function_DoAction6String+0xcc>
          Output ("A4=DIST, OPEN ERR");
   b9a2a:	4860      	ldr	r0, [pc, #384]	; (b9bac <_Z17Function_DoAction6String+0x2a4>)
          Output ("A4=RAIN, OPEN ERR");
   b9a2c:	f7fc fbae 	bl	b618c <_Z6OutputPKc>
          return(-3);
   b9a30:	f06f 0402 	mvn.w	r4, #2
   b9a34:	e77c      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
          Output ("A4=DIST, DEL 5M:ERR");
   b9a36:	485e      	ldr	r0, [pc, #376]	; (b9bb0 <_Z17Function_DoAction6String+0x2a8>)
          Output ("A4=RAIN, DEL 5M:ERR");
   b9a38:	f7fc fba8 	bl	b618c <_Z6OutputPKc>
          return(-4);
   b9a3c:	f06f 0403 	mvn.w	r4, #3
   b9a40:	e776      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
        Output ("A4=DIST, 10M");
   b9a42:	485c      	ldr	r0, [pc, #368]	; (b9bb4 <_Z17Function_DoAction6String+0x2ac>)
   b9a44:	e7d6      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
      Output("A4=DIST, SD NF"); 
   b9a46:	485c      	ldr	r0, [pc, #368]	; (b9bb8 <_Z17Function_DoAction6String+0x2b0>)
    Output("DoAction:UKN"); 
   b9a48:	f7fc fba0 	bl	b618c <_Z6OutputPKc>
    return(-1);
   b9a4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9a50:	e76e      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
  else if (strcmp (s,"A4RAIN") == 0) { // Set A4 State File to Rain
   b9a52:	495a      	ldr	r1, [pc, #360]	; (b9bbc <_Z17Function_DoAction6String+0x2b4>)
   b9a54:	4628      	mov	r0, r5
   b9a56:	f7fb fac7 	bl	b4fe8 <strcmp>
   b9a5a:	4604      	mov	r4, r0
   b9a5c:	2800      	cmp	r0, #0
   b9a5e:	d143      	bne.n	b9ae8 <_Z17Function_DoAction6String+0x1e0>
    Output("DoAction:A4RAIN");
   b9a60:	4857      	ldr	r0, [pc, #348]	; (b9bc0 <_Z17Function_DoAction6String+0x2b8>)
   b9a62:	f7fc fb93 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9a66:	4b45      	ldr	r3, [pc, #276]	; (b9b7c <_Z17Function_DoAction6String+0x274>)
   b9a68:	781b      	ldrb	r3, [r3, #0]
   b9a6a:	2b00      	cmp	r3, #0
   b9a6c:	d03a      	beq.n	b9ae4 <_Z17Function_DoAction6String+0x1dc>
    return vwd()->exists(path);
   b9a6e:	4947      	ldr	r1, [pc, #284]	; (b9b8c <_Z17Function_DoAction6String+0x284>)
   b9a70:	4844      	ldr	r0, [pc, #272]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9a72:	f7fc f951 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
   b9a76:	b138      	cbz	r0, b9a88 <_Z17Function_DoAction6String+0x180>
    return FatFile::remove(vwd(), path);
   b9a78:	4944      	ldr	r1, [pc, #272]	; (b9b8c <_Z17Function_DoAction6String+0x284>)
   b9a7a:	4842      	ldr	r0, [pc, #264]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9a7c:	f009 fe29 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_DIST_FILE)) {
   b9a80:	b1b0      	cbz	r0, b9ab0 <_Z17Function_DoAction6String+0x1a8>
          Output ("A4=RAIN, DEL DIST:OK");
   b9a82:	4850      	ldr	r0, [pc, #320]	; (b9bc4 <_Z17Function_DoAction6String+0x2bc>)
   b9a84:	f7fc fb82 	bl	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   b9a88:	4944      	ldr	r1, [pc, #272]	; (b9b9c <_Z17Function_DoAction6String+0x294>)
   b9a8a:	483e      	ldr	r0, [pc, #248]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9a8c:	f7fc f944 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
   b9a90:	b138      	cbz	r0, b9aa2 <_Z17Function_DoAction6String+0x19a>
    return FatFile::remove(vwd(), path);
   b9a92:	4942      	ldr	r1, [pc, #264]	; (b9b9c <_Z17Function_DoAction6String+0x294>)
   b9a94:	483b      	ldr	r0, [pc, #236]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9a96:	f009 fe1c 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
   b9a9a:	b158      	cbz	r0, b9ab4 <_Z17Function_DoAction6String+0x1ac>
          Output ("A4=RAIN, DEL 5M:OK");
   b9a9c:	484a      	ldr	r0, [pc, #296]	; (b9bc8 <_Z17Function_DoAction6String+0x2c0>)
   b9a9e:	f7fc fb75 	bl	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   b9aa2:	4937      	ldr	r1, [pc, #220]	; (b9b80 <_Z17Function_DoAction6String+0x278>)
   b9aa4:	4837      	ldr	r0, [pc, #220]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9aa6:	f7fc f937 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
   b9aaa:	b128      	cbz	r0, b9ab8 <_Z17Function_DoAction6String+0x1b0>
        Output ("A4=RAIN, ALREADY EXISTS");      
   b9aac:	4847      	ldr	r0, [pc, #284]	; (b9bcc <_Z17Function_DoAction6String+0x2c4>)
   b9aae:	e7a1      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, DEL DIST:ERR");
   b9ab0:	4847      	ldr	r0, [pc, #284]	; (b9bd0 <_Z17Function_DoAction6String+0x2c8>)
   b9ab2:	e7a3      	b.n	b99fc <_Z17Function_DoAction6String+0xf4>
          Output ("A4=RAIN, DEL 5M:ERR");
   b9ab4:	4847      	ldr	r0, [pc, #284]	; (b9bd4 <_Z17Function_DoAction6String+0x2cc>)
   b9ab6:	e7bf      	b.n	b9a38 <_Z17Function_DoAction6String+0x130>
        EEPROM_ClearRain2Totals(); // Just a good thing to do.
   b9ab8:	f7fe fedc 	bl	b8874 <_Z23EEPROM_ClearRain2Totalsv>
    File tmpFile;
   b9abc:	a801      	add	r0, sp, #4
   b9abe:	f7fc f94b 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9ac2:	f244 2302 	movw	r3, #16898	; 0x4202
   b9ac6:	4a2e      	ldr	r2, [pc, #184]	; (b9b80 <_Z17Function_DoAction6String+0x278>)
   b9ac8:	492e      	ldr	r1, [pc, #184]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9aca:	a805      	add	r0, sp, #20
   b9acc:	f009 fdb5 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9ad0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9ad4:	b123      	cbz	r3, b9ae0 <_Z17Function_DoAction6String+0x1d8>
          fp.close();
   b9ad6:	a805      	add	r0, sp, #20
   b9ad8:	f009 fda8 	bl	c362c <_ZN7FatFile5closeEv>
          Output ("A4=RAIN, SET");
   b9adc:	483e      	ldr	r0, [pc, #248]	; (b9bd8 <_Z17Function_DoAction6String+0x2d0>)
   b9ade:	e789      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAIN, OPEN ERR");
   b9ae0:	483e      	ldr	r0, [pc, #248]	; (b9bdc <_Z17Function_DoAction6String+0x2d4>)
   b9ae2:	e7a3      	b.n	b9a2c <_Z17Function_DoAction6String+0x124>
      Output("A4=RAIN, SD NF"); 
   b9ae4:	483e      	ldr	r0, [pc, #248]	; (b9be0 <_Z17Function_DoAction6String+0x2d8>)
   b9ae6:	e7af      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"5MDIST") == 0) { // Set 5M Distance Sensor State File
   b9ae8:	493e      	ldr	r1, [pc, #248]	; (b9be4 <_Z17Function_DoAction6String+0x2dc>)
   b9aea:	4628      	mov	r0, r5
   b9aec:	f7fb fa7c 	bl	b4fe8 <strcmp>
   b9af0:	4604      	mov	r4, r0
   b9af2:	2800      	cmp	r0, #0
   b9af4:	f040 8084 	bne.w	b9c00 <_Z17Function_DoAction6String+0x2f8>
    Output("DoAction:5MDIST");
   b9af8:	483b      	ldr	r0, [pc, #236]	; (b9be8 <_Z17Function_DoAction6String+0x2e0>)
   b9afa:	f7fc fb47 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9afe:	4b1f      	ldr	r3, [pc, #124]	; (b9b7c <_Z17Function_DoAction6String+0x274>)
   b9b00:	781b      	ldrb	r3, [r3, #0]
   b9b02:	b30b      	cbz	r3, b9b48 <_Z17Function_DoAction6String+0x240>
    return vwd()->exists(path);
   b9b04:	4925      	ldr	r1, [pc, #148]	; (b9b9c <_Z17Function_DoAction6String+0x294>)
   b9b06:	481f      	ldr	r0, [pc, #124]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9b08:	f7fc f906 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
   b9b0c:	b108      	cbz	r0, b9b12 <_Z17Function_DoAction6String+0x20a>
        Output ("5MDIST, ALREADY EXISTS");      
   b9b0e:	4837      	ldr	r0, [pc, #220]	; (b9bec <_Z17Function_DoAction6String+0x2e4>)
   b9b10:	e770      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
    File tmpFile;
   b9b12:	a801      	add	r0, sp, #4
   b9b14:	f7fc f920 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9b18:	f244 2302 	movw	r3, #16898	; 0x4202
   b9b1c:	4a1f      	ldr	r2, [pc, #124]	; (b9b9c <_Z17Function_DoAction6String+0x294>)
   b9b1e:	4919      	ldr	r1, [pc, #100]	; (b9b84 <_Z17Function_DoAction6String+0x27c>)
   b9b20:	a805      	add	r0, sp, #20
   b9b22:	f009 fd8a 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9b26:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9b2a:	b13b      	cbz	r3, b9b3c <_Z17Function_DoAction6String+0x234>
          fp.close();
   b9b2c:	a805      	add	r0, sp, #20
   b9b2e:	f009 fd7d 	bl	c362c <_ZN7FatFile5closeEv>
          dg_adjustment = 1.25;
   b9b32:	4b18      	ldr	r3, [pc, #96]	; (b9b94 <_Z17Function_DoAction6String+0x28c>)
   b9b34:	4a2e      	ldr	r2, [pc, #184]	; (b9bf0 <_Z17Function_DoAction6String+0x2e8>)
          Output ("5MDIST SET");
   b9b36:	482f      	ldr	r0, [pc, #188]	; (b9bf4 <_Z17Function_DoAction6String+0x2ec>)
          dg_adjustment = 1.25;
   b9b38:	601a      	str	r2, [r3, #0]
          Output ("5MDIST SET");
   b9b3a:	e75b      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("5MDIST OPEN ERR");
   b9b3c:	482e      	ldr	r0, [pc, #184]	; (b9bf8 <_Z17Function_DoAction6String+0x2f0>)
          Output ("A4=RAW, OPEN ERR");
   b9b3e:	f7fc fb25 	bl	b618c <_Z6OutputPKc>
          return(-5);
   b9b42:	f06f 0404 	mvn.w	r4, #4
   b9b46:	e6f3      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
      Output("5MDIST, SD NF"); 
   b9b48:	482c      	ldr	r0, [pc, #176]	; (b9bfc <_Z17Function_DoAction6String+0x2f4>)
   b9b4a:	e77d      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
   b9b4c:	000cb0ee 	.word	0x000cb0ee
   b9b50:	000cb0e5 	.word	0x000cb0e5
   b9b54:	000cb0fe 	.word	0x000cb0fe
   b9b58:	000cb0f5 	.word	0x000cb0f5
   b9b5c:	2002d904 	.word	0x2002d904
   b9b60:	000cb10c 	.word	0x000cb10c
   b9b64:	000cb103 	.word	0x000cb103
   b9b68:	2002dac0 	.word	0x2002dac0
   b9b6c:	000cb11a 	.word	0x000cb11a
   b9b70:	000cb111 	.word	0x000cb111
   b9b74:	000cb127 	.word	0x000cb127
   b9b78:	000cb11e 	.word	0x000cb11e
   b9b7c:	2002df54 	.word	0x2002df54
   b9b80:	2002d89e 	.word	0x2002d89e
   b9b84:	2002df0c 	.word	0x2002df0c
   b9b88:	000cb12e 	.word	0x000cb12e
   b9b8c:	2002d893 	.word	0x2002d893
   b9b90:	000cb159 	.word	0x000cb159
   b9b94:	2002d930 	.word	0x2002d930
   b9b98:	40200000 	.word	0x40200000
   b9b9c:	2002d888 	.word	0x2002d888
   b9ba0:	000cb190 	.word	0x000cb190
   b9ba4:	000cb143 	.word	0x000cb143
   b9ba8:	000cb171 	.word	0x000cb171
   b9bac:	000cb17e 	.word	0x000cb17e
   b9bb0:	000cb1ac 	.word	0x000cb1ac
   b9bb4:	000cb1c0 	.word	0x000cb1c0
   b9bb8:	000cb1cd 	.word	0x000cb1cd
   b9bbc:	000cb1e5 	.word	0x000cb1e5
   b9bc0:	000cb1dc 	.word	0x000cb1dc
   b9bc4:	000cb1ec 	.word	0x000cb1ec
   b9bc8:	000cb217 	.word	0x000cb217
   b9bcc:	000cb23e 	.word	0x000cb23e
   b9bd0:	000cb201 	.word	0x000cb201
   b9bd4:	000cb22a 	.word	0x000cb22a
   b9bd8:	000cb256 	.word	0x000cb256
   b9bdc:	000cb263 	.word	0x000cb263
   b9be0:	000cb275 	.word	0x000cb275
   b9be4:	000cb28d 	.word	0x000cb28d
   b9be8:	000cb284 	.word	0x000cb284
   b9bec:	000cb294 	.word	0x000cb294
   b9bf0:	3fa00000 	.word	0x3fa00000
   b9bf4:	000cb2ab 	.word	0x000cb2ab
   b9bf8:	000cb2b6 	.word	0x000cb2b6
   b9bfc:	000cb2c6 	.word	0x000cb2c6
  else if (strcmp (s,"A4RAW") == 0) { // Set A4 State File to Raw
   b9c00:	498b      	ldr	r1, [pc, #556]	; (b9e30 <_Z17Function_DoAction6String+0x528>)
   b9c02:	4628      	mov	r0, r5
   b9c04:	f7fb f9f0 	bl	b4fe8 <strcmp>
   b9c08:	4604      	mov	r4, r0
   b9c0a:	2800      	cmp	r0, #0
   b9c0c:	d155      	bne.n	b9cba <_Z17Function_DoAction6String+0x3b2>
    Output("DoAction:A4RAW");
   b9c0e:	4889      	ldr	r0, [pc, #548]	; (b9e34 <_Z17Function_DoAction6String+0x52c>)
   b9c10:	f7fc fabc 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9c14:	4b88      	ldr	r3, [pc, #544]	; (b9e38 <_Z17Function_DoAction6String+0x530>)
   b9c16:	781b      	ldrb	r3, [r3, #0]
   b9c18:	2b00      	cmp	r3, #0
   b9c1a:	d04c      	beq.n	b9cb6 <_Z17Function_DoAction6String+0x3ae>
    return vwd()->exists(path);
   b9c1c:	4987      	ldr	r1, [pc, #540]	; (b9e3c <_Z17Function_DoAction6String+0x534>)
   b9c1e:	4888      	ldr	r0, [pc, #544]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c20:	f7fc f87a 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
   b9c24:	b158      	cbz	r0, b9c3e <_Z17Function_DoAction6String+0x336>
        EEPROM_ClearRain2Totals();
   b9c26:	f7fe fe25 	bl	b8874 <_Z23EEPROM_ClearRain2Totalsv>
    return FatFile::remove(vwd(), path);
   b9c2a:	4984      	ldr	r1, [pc, #528]	; (b9e3c <_Z17Function_DoAction6String+0x534>)
   b9c2c:	4884      	ldr	r0, [pc, #528]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c2e:	f009 fd50 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAIN_FILE)) {
   b9c32:	2800      	cmp	r0, #0
   b9c34:	f43f aee1 	beq.w	b99fa <_Z17Function_DoAction6String+0xf2>
          Output ("A4=DIST, DEL RAIN:OK");
   b9c38:	4882      	ldr	r0, [pc, #520]	; (b9e44 <_Z17Function_DoAction6String+0x53c>)
   b9c3a:	f7fc faa7 	bl	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   b9c3e:	4982      	ldr	r1, [pc, #520]	; (b9e48 <_Z17Function_DoAction6String+0x540>)
   b9c40:	487f      	ldr	r0, [pc, #508]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c42:	f7fc f869 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
   b9c46:	b138      	cbz	r0, b9c58 <_Z17Function_DoAction6String+0x350>
    return FatFile::remove(vwd(), path);
   b9c48:	497f      	ldr	r1, [pc, #508]	; (b9e48 <_Z17Function_DoAction6String+0x540>)
   b9c4a:	487d      	ldr	r0, [pc, #500]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c4c:	f009 fd41 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_DIST_FILE)) {
   b9c50:	b1d8      	cbz	r0, b9c8a <_Z17Function_DoAction6String+0x382>
          Output ("A4=DIST, DEL DIST:OK");
   b9c52:	487e      	ldr	r0, [pc, #504]	; (b9e4c <_Z17Function_DoAction6String+0x544>)
   b9c54:	f7fc fa9a 	bl	b618c <_Z6OutputPKc>
      dg_adjustment = 2.5;
   b9c58:	4b7d      	ldr	r3, [pc, #500]	; (b9e50 <_Z17Function_DoAction6String+0x548>)
   b9c5a:	4a7e      	ldr	r2, [pc, #504]	; (b9e54 <_Z17Function_DoAction6String+0x54c>)
    return vwd()->exists(path);
   b9c5c:	497e      	ldr	r1, [pc, #504]	; (b9e58 <_Z17Function_DoAction6String+0x550>)
   b9c5e:	4878      	ldr	r0, [pc, #480]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c60:	601a      	str	r2, [r3, #0]
   b9c62:	f7fc f859 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
   b9c66:	b148      	cbz	r0, b9c7c <_Z17Function_DoAction6String+0x374>
    return FatFile::remove(vwd(), path);
   b9c68:	497b      	ldr	r1, [pc, #492]	; (b9e58 <_Z17Function_DoAction6String+0x550>)
   b9c6a:	4875      	ldr	r0, [pc, #468]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c6c:	f009 fd31 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
   b9c70:	2800      	cmp	r0, #0
   b9c72:	f43f aee0 	beq.w	b9a36 <_Z17Function_DoAction6String+0x12e>
          Output ("A4=DIST, DEL 5M:OK");
   b9c76:	4879      	ldr	r0, [pc, #484]	; (b9e5c <_Z17Function_DoAction6String+0x554>)
   b9c78:	f7fc fa88 	bl	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   b9c7c:	4978      	ldr	r1, [pc, #480]	; (b9e60 <_Z17Function_DoAction6String+0x558>)
   b9c7e:	4870      	ldr	r0, [pc, #448]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c80:	f7fc f84a 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
   b9c84:	b118      	cbz	r0, b9c8e <_Z17Function_DoAction6String+0x386>
        Output ("A4=RAW, ALREADY EXISTS");    
   b9c86:	4877      	ldr	r0, [pc, #476]	; (b9e64 <_Z17Function_DoAction6String+0x55c>)
   b9c88:	e6b4      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("A4=DIST, DEL DIST:ERR");
   b9c8a:	4877      	ldr	r0, [pc, #476]	; (b9e68 <_Z17Function_DoAction6String+0x560>)
   b9c8c:	e6ce      	b.n	b9a2c <_Z17Function_DoAction6String+0x124>
    File tmpFile;
   b9c8e:	a801      	add	r0, sp, #4
   b9c90:	f7fc f862 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9c94:	f244 2302 	movw	r3, #16898	; 0x4202
   b9c98:	4a71      	ldr	r2, [pc, #452]	; (b9e60 <_Z17Function_DoAction6String+0x558>)
   b9c9a:	4969      	ldr	r1, [pc, #420]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9c9c:	a805      	add	r0, sp, #20
   b9c9e:	f009 fccc 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9ca2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9ca6:	b123      	cbz	r3, b9cb2 <_Z17Function_DoAction6String+0x3aa>
          fp.close();
   b9ca8:	a805      	add	r0, sp, #20
   b9caa:	f009 fcbf 	bl	c362c <_ZN7FatFile5closeEv>
          Output ("A4=RAW, SET");
   b9cae:	486f      	ldr	r0, [pc, #444]	; (b9e6c <_Z17Function_DoAction6String+0x564>)
   b9cb0:	e6a0      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("A4=RAW, OPEN ERR");
   b9cb2:	486f      	ldr	r0, [pc, #444]	; (b9e70 <_Z17Function_DoAction6String+0x568>)
   b9cb4:	e743      	b.n	b9b3e <_Z17Function_DoAction6String+0x236>
      Output("A4=RAW, SD NF"); 
   b9cb6:	486f      	ldr	r0, [pc, #444]	; (b9e74 <_Z17Function_DoAction6String+0x56c>)
   b9cb8:	e6c6      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"A4CLR") == 0) { // Clear A4 State Files
   b9cba:	496f      	ldr	r1, [pc, #444]	; (b9e78 <_Z17Function_DoAction6String+0x570>)
   b9cbc:	4628      	mov	r0, r5
   b9cbe:	f7fb f993 	bl	b4fe8 <strcmp>
   b9cc2:	4604      	mov	r4, r0
   b9cc4:	2800      	cmp	r0, #0
   b9cc6:	d166      	bne.n	b9d96 <_Z17Function_DoAction6String+0x48e>
    Output("DoAction:A4CLR");
   b9cc8:	486c      	ldr	r0, [pc, #432]	; (b9e7c <_Z17Function_DoAction6String+0x574>)
   b9cca:	f7fc fa5f 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9cce:	4b5a      	ldr	r3, [pc, #360]	; (b9e38 <_Z17Function_DoAction6String+0x530>)
   b9cd0:	781b      	ldrb	r3, [r3, #0]
   b9cd2:	2b00      	cmp	r3, #0
   b9cd4:	d05d      	beq.n	b9d92 <_Z17Function_DoAction6String+0x48a>
    return vwd()->exists(path);
   b9cd6:	495c      	ldr	r1, [pc, #368]	; (b9e48 <_Z17Function_DoAction6String+0x540>)
   b9cd8:	4859      	ldr	r0, [pc, #356]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9cda:	f7fc f81d 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_DIST_FILE)) {
   b9cde:	b308      	cbz	r0, b9d24 <_Z17Function_DoAction6String+0x41c>
    return FatFile::remove(vwd(), path);
   b9ce0:	4959      	ldr	r1, [pc, #356]	; (b9e48 <_Z17Function_DoAction6String+0x540>)
   b9ce2:	4857      	ldr	r0, [pc, #348]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9ce4:	f009 fcf5 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_DIST_FILE)) {
   b9ce8:	b130      	cbz	r0, b9cf8 <_Z17Function_DoAction6String+0x3f0>
          A4_State = A4_STATE_NULL;
   b9cea:	4b65      	ldr	r3, [pc, #404]	; (b9e80 <_Z17Function_DoAction6String+0x578>)
          Output ("A4=CLR, DEL DIST:OK");
   b9cec:	4865      	ldr	r0, [pc, #404]	; (b9e84 <_Z17Function_DoAction6String+0x57c>)
          A4_State = A4_STATE_NULL;
   b9cee:	2200      	movs	r2, #0
   b9cf0:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
   b9cf2:	f7fc fa4b 	bl	b618c <_Z6OutputPKc>
   b9cf6:	e004      	b.n	b9d02 <_Z17Function_DoAction6String+0x3fa>
          Output ("A4=CLR, DEL DIST:ERR");
   b9cf8:	4863      	ldr	r0, [pc, #396]	; (b9e88 <_Z17Function_DoAction6String+0x580>)
   b9cfa:	f7fc fa47 	bl	b618c <_Z6OutputPKc>
          state=-2;
   b9cfe:	f06f 0401 	mvn.w	r4, #1
    return vwd()->exists(path);
   b9d02:	494e      	ldr	r1, [pc, #312]	; (b9e3c <_Z17Function_DoAction6String+0x534>)
   b9d04:	484e      	ldr	r0, [pc, #312]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9d06:	f7fc f807 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAIN_FILE)) {
   b9d0a:	b310      	cbz	r0, b9d52 <_Z17Function_DoAction6String+0x44a>
    return FatFile::remove(vwd(), path);
   b9d0c:	494b      	ldr	r1, [pc, #300]	; (b9e3c <_Z17Function_DoAction6String+0x534>)
   b9d0e:	484c      	ldr	r0, [pc, #304]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9d10:	f009 fcdf 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAIN_FILE)) {
   b9d14:	b140      	cbz	r0, b9d28 <_Z17Function_DoAction6String+0x420>
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
   b9d16:	4b5a      	ldr	r3, [pc, #360]	; (b9e80 <_Z17Function_DoAction6String+0x578>)
          Output ("A4=CLR, DEL RAIN:OK");
   b9d18:	485c      	ldr	r0, [pc, #368]	; (b9e8c <_Z17Function_DoAction6String+0x584>)
          A4_State = A4_STATE_NULL;      // We still need a reboot to get rid of ISR
   b9d1a:	2200      	movs	r2, #0
   b9d1c:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
   b9d1e:	f7fc fa35 	bl	b618c <_Z6OutputPKc>
   b9d22:	e005      	b.n	b9d30 <_Z17Function_DoAction6String+0x428>
        Output ("A4=CLR, DEL RAIN:NF");
   b9d24:	485a      	ldr	r0, [pc, #360]	; (b9e90 <_Z17Function_DoAction6String+0x588>)
   b9d26:	e7e4      	b.n	b9cf2 <_Z17Function_DoAction6String+0x3ea>
          Output ("A4=CLR, DEL RAIN:ERR");
   b9d28:	485a      	ldr	r0, [pc, #360]	; (b9e94 <_Z17Function_DoAction6String+0x58c>)
   b9d2a:	f7fc fa2f 	bl	b618c <_Z6OutputPKc>
          state+=-3; // returns a -3 if also failed removing DIST file
   b9d2e:	3c03      	subs	r4, #3
    return vwd()->exists(path);
   b9d30:	494b      	ldr	r1, [pc, #300]	; (b9e60 <_Z17Function_DoAction6String+0x558>)
   b9d32:	4843      	ldr	r0, [pc, #268]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9d34:	f7fb fff0 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A4_RAW_FILE)) {
   b9d38:	b320      	cbz	r0, b9d84 <_Z17Function_DoAction6String+0x47c>
    return FatFile::remove(vwd(), path);
   b9d3a:	4949      	ldr	r1, [pc, #292]	; (b9e60 <_Z17Function_DoAction6String+0x558>)
   b9d3c:	4840      	ldr	r0, [pc, #256]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9d3e:	f009 fcc8 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAW_FILE)) {
   b9d42:	b140      	cbz	r0, b9d56 <_Z17Function_DoAction6String+0x44e>
          A4_State = A4_STATE_NULL;
   b9d44:	4b4e      	ldr	r3, [pc, #312]	; (b9e80 <_Z17Function_DoAction6String+0x578>)
          Output ("A4=CLR, DEL RAW:OK");
   b9d46:	4854      	ldr	r0, [pc, #336]	; (b9e98 <_Z17Function_DoAction6String+0x590>)
          A4_State = A4_STATE_NULL;
   b9d48:	2200      	movs	r2, #0
   b9d4a:	601a      	str	r2, [r3, #0]
        Output ("A4=CLR, DEL RAIN:NF");
   b9d4c:	f7fc fa1e 	bl	b618c <_Z6OutputPKc>
   b9d50:	e005      	b.n	b9d5e <_Z17Function_DoAction6String+0x456>
        Output ("A4=CLR, DEL RAIN:NF");
   b9d52:	484f      	ldr	r0, [pc, #316]	; (b9e90 <_Z17Function_DoAction6String+0x588>)
   b9d54:	e7e3      	b.n	b9d1e <_Z17Function_DoAction6String+0x416>
          Output ("A4=CLR, DEL RAW:ERR");
   b9d56:	4851      	ldr	r0, [pc, #324]	; (b9e9c <_Z17Function_DoAction6String+0x594>)
   b9d58:	f7fc fa18 	bl	b618c <_Z6OutputPKc>
          state+=-4; // returns a -4 if also failed removing RAW file
   b9d5c:	3c04      	subs	r4, #4
    return vwd()->exists(path);
   b9d5e:	493e      	ldr	r1, [pc, #248]	; (b9e58 <_Z17Function_DoAction6String+0x550>)
   b9d60:	4837      	ldr	r0, [pc, #220]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9d62:	f7fb ffd9 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_5M_DIST_FILE)) {
   b9d66:	2800      	cmp	r0, #0
   b9d68:	f43f ade2 	beq.w	b9930 <_Z17Function_DoAction6String+0x28>
    return FatFile::remove(vwd(), path);
   b9d6c:	493a      	ldr	r1, [pc, #232]	; (b9e58 <_Z17Function_DoAction6String+0x550>)
   b9d6e:	4834      	ldr	r0, [pc, #208]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9d70:	f009 fcaf 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_5M_DIST_FILE)) {
   b9d74:	b140      	cbz	r0, b9d88 <_Z17Function_DoAction6String+0x480>
          Output ("A4=CLR, DEL 5M:OK");
   b9d76:	484a      	ldr	r0, [pc, #296]	; (b9ea0 <_Z17Function_DoAction6String+0x598>)
   b9d78:	f7fc fa08 	bl	b618c <_Z6OutputPKc>
          dg_adjustment = 2.5;
   b9d7c:	4b34      	ldr	r3, [pc, #208]	; (b9e50 <_Z17Function_DoAction6String+0x548>)
   b9d7e:	4a35      	ldr	r2, [pc, #212]	; (b9e54 <_Z17Function_DoAction6String+0x54c>)
   b9d80:	601a      	str	r2, [r3, #0]
   b9d82:	e5d5      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
        Output ("A4=CLR, DEL RAIN:NF");
   b9d84:	4842      	ldr	r0, [pc, #264]	; (b9e90 <_Z17Function_DoAction6String+0x588>)
   b9d86:	e7e1      	b.n	b9d4c <_Z17Function_DoAction6String+0x444>
          Output ("A4=CLR, DEL 5M:ERR");
   b9d88:	4846      	ldr	r0, [pc, #280]	; (b9ea4 <_Z17Function_DoAction6String+0x59c>)
   b9d8a:	f7fc f9ff 	bl	b618c <_Z6OutputPKc>
          state+=-5;
   b9d8e:	3c05      	subs	r4, #5
   b9d90:	e5ce      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
      Output("A4=CLR, SD NF"); 
   b9d92:	4845      	ldr	r0, [pc, #276]	; (b9ea8 <_Z17Function_DoAction6String+0x5a0>)
   b9d94:	e658      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"A5RAW") == 0) { // Set A5 State File to Raw
   b9d96:	4945      	ldr	r1, [pc, #276]	; (b9eac <_Z17Function_DoAction6String+0x5a4>)
   b9d98:	4628      	mov	r0, r5
   b9d9a:	f7fb f925 	bl	b4fe8 <strcmp>
   b9d9e:	4604      	mov	r4, r0
   b9da0:	bb28      	cbnz	r0, b9dee <_Z17Function_DoAction6String+0x4e6>
    Output("DoAction:A5RAW");
   b9da2:	4843      	ldr	r0, [pc, #268]	; (b9eb0 <_Z17Function_DoAction6String+0x5a8>)
   b9da4:	f7fc f9f2 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9da8:	4b23      	ldr	r3, [pc, #140]	; (b9e38 <_Z17Function_DoAction6String+0x530>)
   b9daa:	781b      	ldrb	r3, [r3, #0]
   b9dac:	b1eb      	cbz	r3, b9dea <_Z17Function_DoAction6String+0x4e2>
    return vwd()->exists(path);
   b9dae:	4941      	ldr	r1, [pc, #260]	; (b9eb4 <_Z17Function_DoAction6String+0x5ac>)
   b9db0:	4823      	ldr	r0, [pc, #140]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9db2:	f7fb ffb1 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A5_RAW_FILE)) {
   b9db6:	b108      	cbz	r0, b9dbc <_Z17Function_DoAction6String+0x4b4>
        Output ("A5=RAW, ALREADY EXISTS");    
   b9db8:	483f      	ldr	r0, [pc, #252]	; (b9eb8 <_Z17Function_DoAction6String+0x5b0>)
   b9dba:	e61b      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
    File tmpFile;
   b9dbc:	a801      	add	r0, sp, #4
   b9dbe:	f7fb ffcb 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9dc2:	f244 2302 	movw	r3, #16898	; 0x4202
   b9dc6:	4a3b      	ldr	r2, [pc, #236]	; (b9eb4 <_Z17Function_DoAction6String+0x5ac>)
   b9dc8:	491d      	ldr	r1, [pc, #116]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9dca:	a805      	add	r0, sp, #20
   b9dcc:	f009 fc35 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9dd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9dd4:	b13b      	cbz	r3, b9de6 <_Z17Function_DoAction6String+0x4de>
          fp.close();
   b9dd6:	a805      	add	r0, sp, #20
   b9dd8:	f009 fc28 	bl	c362c <_ZN7FatFile5closeEv>
          A5_State = A5_STATE_RAW;
   b9ddc:	4b37      	ldr	r3, [pc, #220]	; (b9ebc <_Z17Function_DoAction6String+0x5b4>)
          Output ("A5=RAW, SET");
   b9dde:	4838      	ldr	r0, [pc, #224]	; (b9ec0 <_Z17Function_DoAction6String+0x5b8>)
          A5_State = A5_STATE_RAW;
   b9de0:	2201      	movs	r2, #1
   b9de2:	601a      	str	r2, [r3, #0]
          Output ("A5=RAW, SET");
   b9de4:	e606      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("A5=RAW, OPEN ERR");
   b9de6:	4837      	ldr	r0, [pc, #220]	; (b9ec4 <_Z17Function_DoAction6String+0x5bc>)
   b9de8:	e608      	b.n	b99fc <_Z17Function_DoAction6String+0xf4>
      Output("A5=RAW, SD NF"); 
   b9dea:	4837      	ldr	r0, [pc, #220]	; (b9ec8 <_Z17Function_DoAction6String+0x5c0>)
   b9dec:	e62c      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"A5CLR") == 0) { // Clear A5 State Files
   b9dee:	4937      	ldr	r1, [pc, #220]	; (b9ecc <_Z17Function_DoAction6String+0x5c4>)
   b9df0:	4628      	mov	r0, r5
   b9df2:	f7fb f8f9 	bl	b4fe8 <strcmp>
   b9df6:	4604      	mov	r4, r0
   b9df8:	2800      	cmp	r0, #0
   b9dfa:	d173      	bne.n	b9ee4 <_Z17Function_DoAction6String+0x5dc>
    Output("DoAction:A5CLR");
   b9dfc:	4834      	ldr	r0, [pc, #208]	; (b9ed0 <_Z17Function_DoAction6String+0x5c8>)
   b9dfe:	f7fc f9c5 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9e02:	4b0d      	ldr	r3, [pc, #52]	; (b9e38 <_Z17Function_DoAction6String+0x530>)
   b9e04:	781b      	ldrb	r3, [r3, #0]
   b9e06:	b18b      	cbz	r3, b9e2c <_Z17Function_DoAction6String+0x524>
    return vwd()->exists(path);
   b9e08:	492a      	ldr	r1, [pc, #168]	; (b9eb4 <_Z17Function_DoAction6String+0x5ac>)
   b9e0a:	480d      	ldr	r0, [pc, #52]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9e0c:	f7fb ff84 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_A5_RAW_FILE)) {
   b9e10:	b150      	cbz	r0, b9e28 <_Z17Function_DoAction6String+0x520>
    return FatFile::remove(vwd(), path);
   b9e12:	4913      	ldr	r1, [pc, #76]	; (b9e60 <_Z17Function_DoAction6String+0x558>)
   b9e14:	480a      	ldr	r0, [pc, #40]	; (b9e40 <_Z17Function_DoAction6String+0x538>)
   b9e16:	f009 fc5c 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_A4_RAW_FILE)) {
   b9e1a:	b118      	cbz	r0, b9e24 <_Z17Function_DoAction6String+0x51c>
          A5_State = A5_STATE_NULL;
   b9e1c:	4b27      	ldr	r3, [pc, #156]	; (b9ebc <_Z17Function_DoAction6String+0x5b4>)
          Output ("A5=CLR, DEL RAW:OK");
   b9e1e:	482d      	ldr	r0, [pc, #180]	; (b9ed4 <_Z17Function_DoAction6String+0x5cc>)
          A5_State = A5_STATE_NULL;
   b9e20:	601c      	str	r4, [r3, #0]
          Output ("A5=CLR, DEL RAW:OK");
   b9e22:	e5e7      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
          Output ("A5=CLR, DEL RAW:ERR");
   b9e24:	482c      	ldr	r0, [pc, #176]	; (b9ed8 <_Z17Function_DoAction6String+0x5d0>)
   b9e26:	e5e9      	b.n	b99fc <_Z17Function_DoAction6String+0xf4>
        Output ("A5=CLR, DEL A5RAW:NF");
   b9e28:	482c      	ldr	r0, [pc, #176]	; (b9edc <_Z17Function_DoAction6String+0x5d4>)
   b9e2a:	e5e3      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
      Output("A5=CLR, SD NF"); 
   b9e2c:	482c      	ldr	r0, [pc, #176]	; (b9ee0 <_Z17Function_DoAction6String+0x5d8>)
   b9e2e:	e60b      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
   b9e30:	000cb2dd 	.word	0x000cb2dd
   b9e34:	000cb2d4 	.word	0x000cb2d4
   b9e38:	2002df54 	.word	0x2002df54
   b9e3c:	2002d89e 	.word	0x2002d89e
   b9e40:	2002df0c 	.word	0x2002df0c
   b9e44:	000cb12e 	.word	0x000cb12e
   b9e48:	2002d893 	.word	0x2002d893
   b9e4c:	000cb2e3 	.word	0x000cb2e3
   b9e50:	2002d930 	.word	0x2002d930
   b9e54:	40200000 	.word	0x40200000
   b9e58:	2002d888 	.word	0x2002d888
   b9e5c:	000cb30e 	.word	0x000cb30e
   b9e60:	2002d8a9 	.word	0x2002d8a9
   b9e64:	000cb321 	.word	0x000cb321
   b9e68:	000cb2f8 	.word	0x000cb2f8
   b9e6c:	000cb338 	.word	0x000cb338
   b9e70:	000cb344 	.word	0x000cb344
   b9e74:	000cb355 	.word	0x000cb355
   b9e78:	000cb36c 	.word	0x000cb36c
   b9e7c:	000cb363 	.word	0x000cb363
   b9e80:	2002da5c 	.word	0x2002da5c
   b9e84:	000cb372 	.word	0x000cb372
   b9e88:	000cb386 	.word	0x000cb386
   b9e8c:	000cb3af 	.word	0x000cb3af
   b9e90:	000cb39b 	.word	0x000cb39b
   b9e94:	000cb3c3 	.word	0x000cb3c3
   b9e98:	000cb3d8 	.word	0x000cb3d8
   b9e9c:	000cb3eb 	.word	0x000cb3eb
   b9ea0:	000cb3ff 	.word	0x000cb3ff
   b9ea4:	000cb411 	.word	0x000cb411
   b9ea8:	000cb424 	.word	0x000cb424
   b9eac:	000cb43b 	.word	0x000cb43b
   b9eb0:	000cb432 	.word	0x000cb432
   b9eb4:	2002d8b3 	.word	0x2002d8b3
   b9eb8:	000cb441 	.word	0x000cb441
   b9ebc:	2002da60 	.word	0x2002da60
   b9ec0:	000cb458 	.word	0x000cb458
   b9ec4:	000cb464 	.word	0x000cb464
   b9ec8:	000cb475 	.word	0x000cb475
   b9ecc:	000cb48c 	.word	0x000cb48c
   b9ed0:	000cb483 	.word	0x000cb483
   b9ed4:	000cb492 	.word	0x000cb492
   b9ed8:	000cb4a5 	.word	0x000cb4a5
   b9edc:	000cb4b9 	.word	0x000cb4b9
   b9ee0:	000cb4ce 	.word	0x000cb4ce
  else if (strcmp (s,"TXI5M") == 0) { // SetTransmit Interval to 5 Minutes
   b9ee4:	4968      	ldr	r1, [pc, #416]	; (ba088 <_Z17Function_DoAction6String+0x780>)
   b9ee6:	4628      	mov	r0, r5
   b9ee8:	f7fb f87e 	bl	b4fe8 <strcmp>
   b9eec:	4604      	mov	r4, r0
   b9eee:	2800      	cmp	r0, #0
   b9ef0:	d13f      	bne.n	b9f72 <_Z17Function_DoAction6String+0x66a>
    Output("DoAction:TXI5M");
   b9ef2:	4866      	ldr	r0, [pc, #408]	; (ba08c <_Z17Function_DoAction6String+0x784>)
   b9ef4:	f7fc f94a 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9ef8:	4b65      	ldr	r3, [pc, #404]	; (ba090 <_Z17Function_DoAction6String+0x788>)
   b9efa:	781b      	ldrb	r3, [r3, #0]
   b9efc:	2b00      	cmp	r3, #0
   b9efe:	d036      	beq.n	b9f6e <_Z17Function_DoAction6String+0x666>
    return vwd()->exists(path);
   b9f00:	4964      	ldr	r1, [pc, #400]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   b9f02:	4865      	ldr	r0, [pc, #404]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9f04:	f7fb ff08 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX5M_FILE)) {
   b9f08:	b170      	cbz	r0, b9f28 <_Z17Function_DoAction6String+0x620>
        Output ("TXI5M, ALREADY SET"); 
   b9f0a:	4864      	ldr	r0, [pc, #400]	; (ba09c <_Z17Function_DoAction6String+0x794>)
   b9f0c:	f7fc f93e 	bl	b618c <_Z6OutputPKc>
        obs_tx_interval = 5;     
   b9f10:	4b63      	ldr	r3, [pc, #396]	; (ba0a0 <_Z17Function_DoAction6String+0x798>)
   b9f12:	2005      	movs	r0, #5
   b9f14:	2100      	movs	r1, #0
   b9f16:	e9c3 0100 	strd	r0, r1, [r3]
   b9f1a:	4962      	ldr	r1, [pc, #392]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   b9f1c:	485e      	ldr	r0, [pc, #376]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9f1e:	f7fb fefb 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX10M_FILE)) {
   b9f22:	b9e0      	cbnz	r0, b9f5e <_Z17Function_DoAction6String+0x656>
    return(0);
   b9f24:	2400      	movs	r4, #0
   b9f26:	e503      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
    File tmpFile;
   b9f28:	a801      	add	r0, sp, #4
   b9f2a:	f7fb ff15 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9f2e:	f244 2302 	movw	r3, #16898	; 0x4202
   b9f32:	4a58      	ldr	r2, [pc, #352]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   b9f34:	4958      	ldr	r1, [pc, #352]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9f36:	a805      	add	r0, sp, #20
   b9f38:	f009 fb7f 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9f3c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9f40:	b15b      	cbz	r3, b9f5a <_Z17Function_DoAction6String+0x652>
          fp.close();
   b9f42:	a805      	add	r0, sp, #20
   b9f44:	f009 fb72 	bl	c362c <_ZN7FatFile5closeEv>
          obs_tx_interval = 5;
   b9f48:	4b55      	ldr	r3, [pc, #340]	; (ba0a0 <_Z17Function_DoAction6String+0x798>)
   b9f4a:	2005      	movs	r0, #5
   b9f4c:	2100      	movs	r1, #0
   b9f4e:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI5M SET");
   b9f52:	4855      	ldr	r0, [pc, #340]	; (ba0a8 <_Z17Function_DoAction6String+0x7a0>)
   b9f54:	f7fc f91a 	bl	b618c <_Z6OutputPKc>
    virtual ~Print() {}
   b9f58:	e7df      	b.n	b9f1a <_Z17Function_DoAction6String+0x612>
          Output ("TXI5M OPEN ERR");
   b9f5a:	4854      	ldr	r0, [pc, #336]	; (ba0ac <_Z17Function_DoAction6String+0x7a4>)
   b9f5c:	e54e      	b.n	b99fc <_Z17Function_DoAction6String+0xf4>
    return FatFile::remove(vwd(), path);
   b9f5e:	4951      	ldr	r1, [pc, #324]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   b9f60:	484d      	ldr	r0, [pc, #308]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9f62:	f009 fbb6 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX10M_FILE)) {
   b9f66:	2800      	cmp	r0, #0
   b9f68:	d0dc      	beq.n	b9f24 <_Z17Function_DoAction6String+0x61c>
          Output ("TXI5M: Removed TX10M File");
   b9f6a:	4851      	ldr	r0, [pc, #324]	; (ba0b0 <_Z17Function_DoAction6String+0x7a8>)
   b9f6c:	e542      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
      Output("TXI5M, SD NF"); 
   b9f6e:	4851      	ldr	r0, [pc, #324]	; (ba0b4 <_Z17Function_DoAction6String+0x7ac>)
   b9f70:	e56a      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"TXI10M") == 0) { // SetTransmit Interval to 10 Minutes
   b9f72:	4951      	ldr	r1, [pc, #324]	; (ba0b8 <_Z17Function_DoAction6String+0x7b0>)
   b9f74:	4628      	mov	r0, r5
   b9f76:	f7fb f837 	bl	b4fe8 <strcmp>
   b9f7a:	4604      	mov	r4, r0
   b9f7c:	2800      	cmp	r0, #0
   b9f7e:	d13e      	bne.n	b9ffe <_Z17Function_DoAction6String+0x6f6>
    Output("DoAction:TXI10M");
   b9f80:	484e      	ldr	r0, [pc, #312]	; (ba0bc <_Z17Function_DoAction6String+0x7b4>)
   b9f82:	f7fc f903 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   b9f86:	4b42      	ldr	r3, [pc, #264]	; (ba090 <_Z17Function_DoAction6String+0x788>)
   b9f88:	781b      	ldrb	r3, [r3, #0]
   b9f8a:	2b00      	cmp	r3, #0
   b9f8c:	d035      	beq.n	b9ffa <_Z17Function_DoAction6String+0x6f2>
    return vwd()->exists(path);
   b9f8e:	4945      	ldr	r1, [pc, #276]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   b9f90:	4841      	ldr	r0, [pc, #260]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9f92:	f7fb fec1 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX10M_FILE)) {
   b9f96:	b1a8      	cbz	r0, b9fc4 <_Z17Function_DoAction6String+0x6bc>
        Output ("TXI10M, ALREADY SET"); 
   b9f98:	4849      	ldr	r0, [pc, #292]	; (ba0c0 <_Z17Function_DoAction6String+0x7b8>)
   b9f9a:	f7fc f8f7 	bl	b618c <_Z6OutputPKc>
        obs_tx_interval = 10;     
   b9f9e:	4b40      	ldr	r3, [pc, #256]	; (ba0a0 <_Z17Function_DoAction6String+0x798>)
   b9fa0:	200a      	movs	r0, #10
   b9fa2:	2100      	movs	r1, #0
   b9fa4:	e9c3 0100 	strd	r0, r1, [r3]
   b9fa8:	493a      	ldr	r1, [pc, #232]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   b9faa:	483b      	ldr	r0, [pc, #236]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9fac:	f7fb feb4 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX5M_FILE)) {
   b9fb0:	2800      	cmp	r0, #0
   b9fb2:	d0b7      	beq.n	b9f24 <_Z17Function_DoAction6String+0x61c>
    return FatFile::remove(vwd(), path);
   b9fb4:	4937      	ldr	r1, [pc, #220]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   b9fb6:	4838      	ldr	r0, [pc, #224]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9fb8:	f009 fb8b 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX5M_FILE)) {
   b9fbc:	2800      	cmp	r0, #0
   b9fbe:	d0b1      	beq.n	b9f24 <_Z17Function_DoAction6String+0x61c>
          Output ("TXI5M: Removed TX5M File");
   b9fc0:	4840      	ldr	r0, [pc, #256]	; (ba0c4 <_Z17Function_DoAction6String+0x7bc>)
   b9fc2:	e517      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
    File tmpFile;
   b9fc4:	a801      	add	r0, sp, #4
   b9fc6:	f7fb fec7 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   b9fca:	f244 2302 	movw	r3, #16898	; 0x4202
   b9fce:	4a35      	ldr	r2, [pc, #212]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   b9fd0:	4931      	ldr	r1, [pc, #196]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   b9fd2:	a805      	add	r0, sp, #20
   b9fd4:	f009 fb31 	bl	c363a <_ZN7FatFile4openEPS_PKci>
        if (fp) {
   b9fd8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b9fdc:	b15b      	cbz	r3, b9ff6 <_Z17Function_DoAction6String+0x6ee>
          fp.close();
   b9fde:	a805      	add	r0, sp, #20
   b9fe0:	f009 fb24 	bl	c362c <_ZN7FatFile5closeEv>
          obs_tx_interval = 10;
   b9fe4:	4b2e      	ldr	r3, [pc, #184]	; (ba0a0 <_Z17Function_DoAction6String+0x798>)
   b9fe6:	200a      	movs	r0, #10
   b9fe8:	2100      	movs	r1, #0
   b9fea:	e9c3 0100 	strd	r0, r1, [r3]
          Output ("TXI10M SET");
   b9fee:	4836      	ldr	r0, [pc, #216]	; (ba0c8 <_Z17Function_DoAction6String+0x7c0>)
   b9ff0:	f7fc f8cc 	bl	b618c <_Z6OutputPKc>
   b9ff4:	e7d8      	b.n	b9fa8 <_Z17Function_DoAction6String+0x6a0>
          Output ("TXI10M OPEN ERR");
   b9ff6:	4835      	ldr	r0, [pc, #212]	; (ba0cc <_Z17Function_DoAction6String+0x7c4>)
   b9ff8:	e500      	b.n	b99fc <_Z17Function_DoAction6String+0xf4>
      Output("TXI10M, SD NF"); 
   b9ffa:	4835      	ldr	r0, [pc, #212]	; (ba0d0 <_Z17Function_DoAction6String+0x7c8>)
   b9ffc:	e524      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
  else if (strcmp (s,"TXI15M") == 0) { // SetTransmit Interval to 15 Minutes
   b9ffe:	4935      	ldr	r1, [pc, #212]	; (ba0d4 <_Z17Function_DoAction6String+0x7cc>)
   ba000:	4628      	mov	r0, r5
   ba002:	f7fa fff1 	bl	b4fe8 <strcmp>
   ba006:	4604      	mov	r4, r0
   ba008:	2800      	cmp	r0, #0
   ba00a:	d13b      	bne.n	ba084 <_Z17Function_DoAction6String+0x77c>
    Output("DoAction:TXI15M");
   ba00c:	4832      	ldr	r0, [pc, #200]	; (ba0d8 <_Z17Function_DoAction6String+0x7d0>)
   ba00e:	f7fc f8bd 	bl	b618c <_Z6OutputPKc>
    if (SD_exists) {
   ba012:	4b1f      	ldr	r3, [pc, #124]	; (ba090 <_Z17Function_DoAction6String+0x788>)
   ba014:	781b      	ldrb	r3, [r3, #0]
   ba016:	2b00      	cmp	r3, #0
   ba018:	d032      	beq.n	ba080 <_Z17Function_DoAction6String+0x778>
    return vwd()->exists(path);
   ba01a:	491e      	ldr	r1, [pc, #120]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   ba01c:	481e      	ldr	r0, [pc, #120]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   ba01e:	4d20      	ldr	r5, [pc, #128]	; (ba0a0 <_Z17Function_DoAction6String+0x798>)
   ba020:	f7fb fe7a 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (!SD.exists(SD_TX5M_FILE) && !SD.exists(SD_TX10M_FILE)) {
   ba024:	b960      	cbnz	r0, ba040 <_Z17Function_DoAction6String+0x738>
   ba026:	491f      	ldr	r1, [pc, #124]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   ba028:	481b      	ldr	r0, [pc, #108]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   ba02a:	f7fb fe75 	bl	b5d18 <_ZN7FatFile6existsEPKc>
   ba02e:	b938      	cbnz	r0, ba040 <_Z17Function_DoAction6String+0x738>
        Output ("TXI15M, ALREADY SET"); 
   ba030:	482a      	ldr	r0, [pc, #168]	; (ba0dc <_Z17Function_DoAction6String+0x7d4>)
   ba032:	f7fc f8ab 	bl	b618c <_Z6OutputPKc>
        obs_tx_interval = 15;     
   ba036:	220f      	movs	r2, #15
   ba038:	2300      	movs	r3, #0
   ba03a:	e9c5 2300 	strd	r2, r3, [r5]
   ba03e:	e477      	b.n	b9930 <_Z17Function_DoAction6String+0x28>
   ba040:	4914      	ldr	r1, [pc, #80]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   ba042:	4815      	ldr	r0, [pc, #84]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   ba044:	f7fb fe68 	bl	b5d18 <_ZN7FatFile6existsEPKc>
        if (SD.exists(SD_TX5M_FILE)) {
   ba048:	b138      	cbz	r0, ba05a <_Z17Function_DoAction6String+0x752>
    return FatFile::remove(vwd(), path);
   ba04a:	4912      	ldr	r1, [pc, #72]	; (ba094 <_Z17Function_DoAction6String+0x78c>)
   ba04c:	4812      	ldr	r0, [pc, #72]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   ba04e:	f009 fb40 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_TX5M_FILE)) {
   ba052:	b110      	cbz	r0, ba05a <_Z17Function_DoAction6String+0x752>
            Output ("TXI15M: Removed TX5M File");
   ba054:	4822      	ldr	r0, [pc, #136]	; (ba0e0 <_Z17Function_DoAction6String+0x7d8>)
   ba056:	f7fc f899 	bl	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   ba05a:	4912      	ldr	r1, [pc, #72]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   ba05c:	480e      	ldr	r0, [pc, #56]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   ba05e:	f7fb fe5b 	bl	b5d18 <_ZN7FatFile6existsEPKc>
        if (SD.exists(SD_TX10M_FILE)) {
   ba062:	b138      	cbz	r0, ba074 <_Z17Function_DoAction6String+0x76c>
    return FatFile::remove(vwd(), path);
   ba064:	490f      	ldr	r1, [pc, #60]	; (ba0a4 <_Z17Function_DoAction6String+0x79c>)
   ba066:	480c      	ldr	r0, [pc, #48]	; (ba098 <_Z17Function_DoAction6String+0x790>)
   ba068:	f009 fb33 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_TX10M_FILE)) {
   ba06c:	b110      	cbz	r0, ba074 <_Z17Function_DoAction6String+0x76c>
            Output ("TXI15M: Removed TX10M File");
   ba06e:	481d      	ldr	r0, [pc, #116]	; (ba0e4 <_Z17Function_DoAction6String+0x7dc>)
   ba070:	f7fc f88c 	bl	b618c <_Z6OutputPKc>
        obs_tx_interval = 15;
   ba074:	220f      	movs	r2, #15
   ba076:	2300      	movs	r3, #0
   ba078:	e9c5 2300 	strd	r2, r3, [r5]
        Output ("TXI15M SET"); 
   ba07c:	481a      	ldr	r0, [pc, #104]	; (ba0e8 <_Z17Function_DoAction6String+0x7e0>)
   ba07e:	e4b9      	b.n	b99f4 <_Z17Function_DoAction6String+0xec>
      Output("TXI15M, SD NF"); 
   ba080:	481a      	ldr	r0, [pc, #104]	; (ba0ec <_Z17Function_DoAction6String+0x7e4>)
   ba082:	e4e1      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
    Output("DoAction:UKN"); 
   ba084:	481a      	ldr	r0, [pc, #104]	; (ba0f0 <_Z17Function_DoAction6String+0x7e8>)
   ba086:	e4df      	b.n	b9a48 <_Z17Function_DoAction6String+0x140>
   ba088:	000cb4e5 	.word	0x000cb4e5
   ba08c:	000cb4dc 	.word	0x000cb4dc
   ba090:	2002df54 	.word	0x2002df54
   ba094:	2002d8d1 	.word	0x2002d8d1
   ba098:	2002df0c 	.word	0x2002df0c
   ba09c:	000cb4eb 	.word	0x000cb4eb
   ba0a0:	2002d938 	.word	0x2002d938
   ba0a4:	2002d8c6 	.word	0x2002d8c6
   ba0a8:	000cb4fe 	.word	0x000cb4fe
   ba0ac:	000cb508 	.word	0x000cb508
   ba0b0:	000cb517 	.word	0x000cb517
   ba0b4:	000cb531 	.word	0x000cb531
   ba0b8:	000cb547 	.word	0x000cb547
   ba0bc:	000cb53e 	.word	0x000cb53e
   ba0c0:	000cb54e 	.word	0x000cb54e
   ba0c4:	000cb57d 	.word	0x000cb57d
   ba0c8:	000cb562 	.word	0x000cb562
   ba0cc:	000cb56d 	.word	0x000cb56d
   ba0d0:	000cb596 	.word	0x000cb596
   ba0d4:	000cb5ad 	.word	0x000cb5ad
   ba0d8:	000cb5a4 	.word	0x000cb5a4
   ba0dc:	000cb5b4 	.word	0x000cb5b4
   ba0e0:	000cb5c8 	.word	0x000cb5c8
   ba0e4:	000cb5e2 	.word	0x000cb5e2
   ba0e8:	000cb5fd 	.word	0x000cb5fd
   ba0ec:	000cb608 	.word	0x000cb608
   ba0f0:	000cb616 	.word	0x000cb616

000ba0f4 <_Z14SimChangeCheckv>:
void SimChangeCheck() {
   ba0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba0f8:	b0ae      	sub	sp, #184	; 0xb8
    int setActiveSim(SimType sim) {
        return cellular_set_active_sim(sim, nullptr);
    }

    SimType getActiveSim() const {
        int sim = 0;
   ba0fa:	2400      	movs	r4, #0
  File fp;
   ba0fc:	a801      	add	r0, sp, #4
        const int r = cellular_get_active_sim(&sim, nullptr);
   ba0fe:	af0e      	add	r7, sp, #56	; 0x38
   ba100:	f7fb fe2a 	bl	b5d58 <_ZN4FileC1Ev>
   ba104:	4621      	mov	r1, r4
   ba106:	4638      	mov	r0, r7
        int sim = 0;
   ba108:	940e      	str	r4, [sp, #56]	; 0x38
        const int r = cellular_get_active_sim(&sim, nullptr);
   ba10a:	f00a ff45 	bl	c4f98 <cellular_get_active_sim>
        if (r < 0) {
   ba10e:	42a0      	cmp	r0, r4
   ba110:	da06      	bge.n	ba120 <_Z14SimChangeCheckv+0x2c>
            return INVALID_SIM;
   ba112:	4622      	mov	r2, r4
    sprintf (msgbuf, "SIM:Unknown[%d]", simType);
   ba114:	498c      	ldr	r1, [pc, #560]	; (ba348 <_Z14SimChangeCheckv+0x254>)
   ba116:	488d      	ldr	r0, [pc, #564]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba118:	f00b fac2 	bl	c56a0 <sprintf>
    Output (msgbuf);
   ba11c:	488b      	ldr	r0, [pc, #556]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba11e:	e004      	b.n	ba12a <_Z14SimChangeCheckv+0x36>
        }
        return (SimType)sim;
   ba120:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
  if (simType == 1) {
   ba124:	2a01      	cmp	r2, #1
   ba126:	d144      	bne.n	ba1b2 <_Z14SimChangeCheckv+0xbe>
    Output ("SIM:Internal");
   ba128:	4889      	ldr	r0, [pc, #548]	; (ba350 <_Z14SimChangeCheckv+0x25c>)
    Output (msgbuf);
   ba12a:	f7fc f82f 	bl	b618c <_Z6OutputPKc>
  if (SerialConsoleEnabled && SD_exists) {
   ba12e:	4b89      	ldr	r3, [pc, #548]	; (ba354 <_Z14SimChangeCheckv+0x260>)
   ba130:	781b      	ldrb	r3, [r3, #0]
   ba132:	2b00      	cmp	r3, #0
   ba134:	f000 81a3 	beq.w	ba47e <_Z14SimChangeCheckv+0x38a>
   ba138:	4b87      	ldr	r3, [pc, #540]	; (ba358 <_Z14SimChangeCheckv+0x264>)
   ba13a:	781b      	ldrb	r3, [r3, #0]
   ba13c:	2b00      	cmp	r3, #0
   ba13e:	f000 819e 	beq.w	ba47e <_Z14SimChangeCheckv+0x38a>
    return vwd()->exists(path);
   ba142:	4986      	ldr	r1, [pc, #536]	; (ba35c <_Z14SimChangeCheckv+0x268>)
   ba144:	4886      	ldr	r0, [pc, #536]	; (ba360 <_Z14SimChangeCheckv+0x26c>)
   ba146:	f7fb fde7 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_sim_file)) {
   ba14a:	4605      	mov	r5, r0
   ba14c:	2800      	cmp	r0, #0
   ba14e:	f000 8199 	beq.w	ba484 <_Z14SimChangeCheckv+0x390>
    File tmpFile;
   ba152:	4638      	mov	r0, r7
   ba154:	f7fb fe00 	bl	b5d58 <_ZN4FileC1Ev>
   ba158:	ac12      	add	r4, sp, #72	; 0x48
    tmpFile.open(vwd(), path, oflag);
   ba15a:	4a80      	ldr	r2, [pc, #512]	; (ba35c <_Z14SimChangeCheckv+0x268>)
   ba15c:	4980      	ldr	r1, [pc, #512]	; (ba360 <_Z14SimChangeCheckv+0x26c>)
   ba15e:	2300      	movs	r3, #0
   ba160:	a812      	add	r0, sp, #72	; 0x48
   ba162:	f009 fa6a 	bl	c363a <_ZN7FatFile4openEPS_PKci>
   ba166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba168:	ae05      	add	r6, sp, #20
   ba16a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   ba16c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba16e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   ba170:	6823      	ldr	r3, [r4, #0]
   ba172:	6033      	str	r3, [r6, #0]
class Print
   ba174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   ba176:	9302      	str	r3, [sp, #8]
   ba178:	9b10      	ldr	r3, [sp, #64]	; 0x40
   ba17a:	9303      	str	r3, [sp, #12]
   ba17c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   ba17e:	9304      	str	r3, [sp, #16]
      if (fp) {
   ba180:	f89d 3014 	ldrb.w	r3, [sp, #20]
   ba184:	2b00      	cmp	r3, #0
   ba186:	f000 8177 	beq.w	ba478 <_Z14SimChangeCheckv+0x384>
        if (fp.size()<=7 || fp.size()>127) {
   ba18a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba18c:	3b08      	subs	r3, #8
   ba18e:	2b77      	cmp	r3, #119	; 0x77
   ba190:	d913      	bls.n	ba1ba <_Z14SimChangeCheckv+0xc6>
          fp.close();
   ba192:	a805      	add	r0, sp, #20
   ba194:	f009 fa4a 	bl	c362c <_ZN7FatFile5closeEv>
          Output ("SIMF:Invalid SZ");
   ba198:	4872      	ldr	r0, [pc, #456]	; (ba364 <_Z14SimChangeCheckv+0x270>)
   ba19a:	f7fb fff7 	bl	b618c <_Z6OutputPKc>
    return FatFile::remove(vwd(), path);
   ba19e:	496f      	ldr	r1, [pc, #444]	; (ba35c <_Z14SimChangeCheckv+0x268>)
   ba1a0:	486f      	ldr	r0, [pc, #444]	; (ba360 <_Z14SimChangeCheckv+0x26c>)
   ba1a2:	f009 fa96 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_sim_file)) {
   ba1a6:	4605      	mov	r5, r0
   ba1a8:	b9f0      	cbnz	r0, ba1e8 <_Z14SimChangeCheckv+0xf4>
            Output ("SIMF->Del:Err");
   ba1aa:	486f      	ldr	r0, [pc, #444]	; (ba368 <_Z14SimChangeCheckv+0x274>)
              Output(msgbuf);
   ba1ac:	f7fb ffee 	bl	b618c <_Z6OutputPKc>
              changed = true;
   ba1b0:	e042      	b.n	ba238 <_Z14SimChangeCheckv+0x144>
  } else if (simType == 2) {
   ba1b2:	2a02      	cmp	r2, #2
   ba1b4:	d1ae      	bne.n	ba114 <_Z14SimChangeCheckv+0x20>
    Output ("SIM:External");
   ba1b6:	486d      	ldr	r0, [pc, #436]	; (ba36c <_Z14SimChangeCheckv+0x278>)
   ba1b8:	e7b7      	b.n	ba12a <_Z14SimChangeCheckv+0x36>
          Output ("SIMF:Open");
   ba1ba:	486d      	ldr	r0, [pc, #436]	; (ba370 <_Z14SimChangeCheckv+0x27c>)
   ba1bc:	f7fb ffe6 	bl	b618c <_Z6OutputPKc>
   ba1c0:	463e      	mov	r6, r7
  int i=0;
   ba1c2:	2400      	movs	r4, #0
          while (fp.available() && (i < 127 )) {
   ba1c4:	a801      	add	r0, sp, #4
   ba1c6:	f7fb fc9f 	bl	b5b08 <_ZN4File9availableEv>
   ba1ca:	b190      	cbz	r0, ba1f2 <_Z14SimChangeCheckv+0xfe>
   ba1cc:	2c7f      	cmp	r4, #127	; 0x7f
   ba1ce:	d010      	beq.n	ba1f2 <_Z14SimChangeCheckv+0xfe>
    return FatFile::read();
   ba1d0:	a805      	add	r0, sp, #20
   ba1d2:	f7fb fdad 	bl	b5d30 <_ZN7FatFile4readEv>
            ch = fp.read();
   ba1d6:	b2c0      	uxtb	r0, r0
            if ((ch == 0x0A) || (ch == 0x0D) ) {  // newline or linefeed
   ba1d8:	280a      	cmp	r0, #10
   ba1da:	d00a      	beq.n	ba1f2 <_Z14SimChangeCheckv+0xfe>
   ba1dc:	280d      	cmp	r0, #13
   ba1de:	d008      	beq.n	ba1f2 <_Z14SimChangeCheckv+0xfe>
              buf[i++] = ch;
   ba1e0:	f806 0b01 	strb.w	r0, [r6], #1
   ba1e4:	3401      	adds	r4, #1
          while (fp.available() && (i < 127 )) {
   ba1e6:	e7ed      	b.n	ba1c4 <_Z14SimChangeCheckv+0xd0>
            Output ("SIMF->Del:OK");
   ba1e8:	4862      	ldr	r0, [pc, #392]	; (ba374 <_Z14SimChangeCheckv+0x280>)
            Output(msgbuf);
   ba1ea:	f7fb ffcf 	bl	b618c <_Z6OutputPKc>
  bool changed = false;
   ba1ee:	2500      	movs	r5, #0
   ba1f0:	e022      	b.n	ba238 <_Z14SimChangeCheckv+0x144>
          buf[i] = (char) NULL;
   ba1f2:	ab2e      	add	r3, sp, #184	; 0xb8
   ba1f4:	441c      	add	r4, r3
   ba1f6:	2300      	movs	r3, #0
   ba1f8:	f804 3c80 	strb.w	r3, [r4, #-128]
          id = strtok_r(p, " ", &p);
   ba1fc:	495e      	ldr	r1, [pc, #376]	; (ba378 <_Z14SimChangeCheckv+0x284>)
          p = &buf[0];
   ba1fe:	9700      	str	r7, [sp, #0]
          id = strtok_r(p, " ", &p);
   ba200:	466a      	mov	r2, sp
   ba202:	4638      	mov	r0, r7
   ba204:	f010 f8b2 	bl	ca36c <strtok_r>
          if (id != NULL) {
   ba208:	4604      	mov	r4, r0
   ba20a:	b138      	cbz	r0, ba21c <_Z14SimChangeCheckv+0x128>
            sprintf (msgbuf, "SIMF:ID[%s]", id);
   ba20c:	4602      	mov	r2, r0
   ba20e:	495b      	ldr	r1, [pc, #364]	; (ba37c <_Z14SimChangeCheckv+0x288>)
   ba210:	484e      	ldr	r0, [pc, #312]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba212:	f00b fa45 	bl	c56a0 <sprintf>
            Output(msgbuf);
   ba216:	484d      	ldr	r0, [pc, #308]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba218:	f7fb ffb8 	bl	b618c <_Z6OutputPKc>
          if (strcmp (id,"INTERNAL") == 0) {
   ba21c:	4958      	ldr	r1, [pc, #352]	; (ba380 <_Z14SimChangeCheckv+0x28c>)
   ba21e:	4620      	mov	r0, r4
   ba220:	f7fa fee2 	bl	b4fe8 <strcmp>
   ba224:	4606      	mov	r6, r0
   ba226:	2800      	cmp	r0, #0
   ba228:	d134      	bne.n	ba294 <_Z14SimChangeCheckv+0x1a0>
        return cellular_set_active_sim(sim, nullptr);
   ba22a:	4601      	mov	r1, r0
   ba22c:	2001      	movs	r0, #1
   ba22e:	f00a fea9 	bl	c4f84 <cellular_set_active_sim>
        cellular_credentials_clear(nullptr);
   ba232:	4630      	mov	r0, r6
   ba234:	f00a feba 	bl	c4fac <cellular_credentials_clear>
    return vwd()->exists(path);
   ba238:	4952      	ldr	r1, [pc, #328]	; (ba384 <_Z14SimChangeCheckv+0x290>)
   ba23a:	4849      	ldr	r0, [pc, #292]	; (ba360 <_Z14SimChangeCheckv+0x26c>)
   ba23c:	f7fb fd6c 	bl	b5d18 <_ZN7FatFile6existsEPKc>
        if (SD.exists(SD_simold_file)) {
   ba240:	b138      	cbz	r0, ba252 <_Z14SimChangeCheckv+0x15e>
    return FatFile::remove(vwd(), path);
   ba242:	4950      	ldr	r1, [pc, #320]	; (ba384 <_Z14SimChangeCheckv+0x290>)
   ba244:	4846      	ldr	r0, [pc, #280]	; (ba360 <_Z14SimChangeCheckv+0x26c>)
   ba246:	f009 fa44 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
          if (SD.remove (SD_simold_file)) {
   ba24a:	b110      	cbz	r0, ba252 <_Z14SimChangeCheckv+0x15e>
            Output ("SIMF:DEL SIMOLD");
   ba24c:	484e      	ldr	r0, [pc, #312]	; (ba388 <_Z14SimChangeCheckv+0x294>)
   ba24e:	f7fb ff9d 	bl	b618c <_Z6OutputPKc>
    return rename(cwd(), newPath);
   ba252:	4b4e      	ldr	r3, [pc, #312]	; (ba38c <_Z14SimChangeCheckv+0x298>)
   ba254:	4a4b      	ldr	r2, [pc, #300]	; (ba384 <_Z14SimChangeCheckv+0x290>)
   ba256:	6819      	ldr	r1, [r3, #0]
   ba258:	a805      	add	r0, sp, #20
   ba25a:	f009 fb11 	bl	c3880 <_ZN7FatFile6renameEPS_PKc>
        if (!fp.rename(SD_simold_file)) {
   ba25e:	2800      	cmp	r0, #0
   ba260:	f040 8100 	bne.w	ba464 <_Z14SimChangeCheckv+0x370>
          Output ("SIMF:RENAME ERROR");
   ba264:	484a      	ldr	r0, [pc, #296]	; (ba390 <_Z14SimChangeCheckv+0x29c>)
          Output ("SIMF:RENAME OK");
   ba266:	f7fb ff91 	bl	b618c <_Z6OutputPKc>
        fp.close();
   ba26a:	a805      	add	r0, sp, #20
   ba26c:	f009 f9de 	bl	c362c <_ZN7FatFile5closeEv>
        if (changed) {
   ba270:	2d00      	cmp	r5, #0
   ba272:	f000 80f9 	beq.w	ba468 <_Z14SimChangeCheckv+0x374>
          Output ("==============");
   ba276:	4847      	ldr	r0, [pc, #284]	; (ba394 <_Z14SimChangeCheckv+0x2a0>)
   ba278:	f7fb ff88 	bl	b618c <_Z6OutputPKc>
          Output ("!!! REBOOT !!!");
   ba27c:	4846      	ldr	r0, [pc, #280]	; (ba398 <_Z14SimChangeCheckv+0x2a4>)
   ba27e:	f7fb ff85 	bl	b618c <_Z6OutputPKc>
          Output ("==============");
   ba282:	4844      	ldr	r0, [pc, #272]	; (ba394 <_Z14SimChangeCheckv+0x2a0>)
          Output ("=====================");
   ba284:	f7fb ff82 	bl	b618c <_Z6OutputPKc>
          Blink(1, 750);
   ba288:	f240 21ee 	movw	r1, #750	; 0x2ee
   ba28c:	2001      	movs	r0, #1
   ba28e:	f7fb fd85 	bl	b5d9c <_Z5Blinkii>
        while(true) { // wait for Host to open serial port
   ba292:	e7f9      	b.n	ba288 <_Z14SimChangeCheckv+0x194>
          else if (strcmp (id,"APN") == 0) {
   ba294:	4941      	ldr	r1, [pc, #260]	; (ba39c <_Z14SimChangeCheckv+0x2a8>)
   ba296:	4620      	mov	r0, r4
   ba298:	f7fa fea6 	bl	b4fe8 <strcmp>
   ba29c:	4606      	mov	r6, r0
   ba29e:	b9f8      	cbnz	r0, ba2e0 <_Z14SimChangeCheckv+0x1ec>
            apn = strtok_r(p, " ", &p);
   ba2a0:	4935      	ldr	r1, [pc, #212]	; (ba378 <_Z14SimChangeCheckv+0x284>)
   ba2a2:	9800      	ldr	r0, [sp, #0]
   ba2a4:	466a      	mov	r2, sp
   ba2a6:	f010 f861 	bl	ca36c <strtok_r>
            if (apn == NULL) {
   ba2aa:	4604      	mov	r4, r0
   ba2ac:	b908      	cbnz	r0, ba2b2 <_Z14SimChangeCheckv+0x1be>
              Output("SIMF:APN=Null Err");
   ba2ae:	483c      	ldr	r0, [pc, #240]	; (ba3a0 <_Z14SimChangeCheckv+0x2ac>)
   ba2b0:	e79b      	b.n	ba1ea <_Z14SimChangeCheckv+0xf6>
        return cellular_set_active_sim(sim, nullptr);
   ba2b2:	4631      	mov	r1, r6
   ba2b4:	2002      	movs	r0, #2
   ba2b6:	f00a fe65 	bl	c4f84 <cellular_set_active_sim>
              Output("SIM:Set External-APN");
   ba2ba:	483a      	ldr	r0, [pc, #232]	; (ba3a4 <_Z14SimChangeCheckv+0x2b0>)
   ba2bc:	f7fb ff66 	bl	b618c <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
   ba2c0:	4a39      	ldr	r2, [pc, #228]	; (ba3a8 <_Z14SimChangeCheckv+0x2b4>)
   ba2c2:	4633      	mov	r3, r6
   ba2c4:	4611      	mov	r1, r2
   ba2c6:	4620      	mov	r0, r4
   ba2c8:	f00a fe44 	bl	c4f54 <cellular_credentials_set>
              Output("SIM:Set Credentials");
   ba2cc:	4837      	ldr	r0, [pc, #220]	; (ba3ac <_Z14SimChangeCheckv+0x2b8>)
   ba2ce:	f7fb ff5d 	bl	b618c <_Z6OutputPKc>
              sprintf (msgbuf, " APN[%s]", apn);
   ba2d2:	4937      	ldr	r1, [pc, #220]	; (ba3b0 <_Z14SimChangeCheckv+0x2bc>)
   ba2d4:	4622      	mov	r2, r4
              sprintf (msgbuf, "  PW[%s]", pw);
   ba2d6:	481d      	ldr	r0, [pc, #116]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba2d8:	f00b f9e2 	bl	c56a0 <sprintf>
              Output(msgbuf);
   ba2dc:	481b      	ldr	r0, [pc, #108]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba2de:	e765      	b.n	ba1ac <_Z14SimChangeCheckv+0xb8>
          else if (strcmp (id," UP") == 0) {
   ba2e0:	4934      	ldr	r1, [pc, #208]	; (ba3b4 <_Z14SimChangeCheckv+0x2c0>)
   ba2e2:	4620      	mov	r0, r4
   ba2e4:	f7fa fe80 	bl	b4fe8 <strcmp>
   ba2e8:	4607      	mov	r7, r0
   ba2ea:	2800      	cmp	r0, #0
   ba2ec:	d16e      	bne.n	ba3cc <_Z14SimChangeCheckv+0x2d8>
            un  = strtok_r(p, " ", &p);
   ba2ee:	4922      	ldr	r1, [pc, #136]	; (ba378 <_Z14SimChangeCheckv+0x284>)
   ba2f0:	9800      	ldr	r0, [sp, #0]
   ba2f2:	466a      	mov	r2, sp
   ba2f4:	f010 f83a 	bl	ca36c <strtok_r>
            pw  = strtok_r(p, " ", &p);
   ba2f8:	491f      	ldr	r1, [pc, #124]	; (ba378 <_Z14SimChangeCheckv+0x284>)
            un  = strtok_r(p, " ", &p);
   ba2fa:	4606      	mov	r6, r0
            pw  = strtok_r(p, " ", &p);
   ba2fc:	466a      	mov	r2, sp
   ba2fe:	9800      	ldr	r0, [sp, #0]
   ba300:	f010 f834 	bl	ca36c <strtok_r>
   ba304:	4604      	mov	r4, r0
            if (un == NULL) {
   ba306:	b90e      	cbnz	r6, ba30c <_Z14SimChangeCheckv+0x218>
              Output("SIMF:Username=Null Err");
   ba308:	482b      	ldr	r0, [pc, #172]	; (ba3b8 <_Z14SimChangeCheckv+0x2c4>)
   ba30a:	e76e      	b.n	ba1ea <_Z14SimChangeCheckv+0xf6>
            else if (pw == NULL) {
   ba30c:	b908      	cbnz	r0, ba312 <_Z14SimChangeCheckv+0x21e>
              Output("SIMF:Passwd=Null Err");
   ba30e:	482b      	ldr	r0, [pc, #172]	; (ba3bc <_Z14SimChangeCheckv+0x2c8>)
   ba310:	e76b      	b.n	ba1ea <_Z14SimChangeCheckv+0xf6>
        return cellular_set_active_sim(sim, nullptr);
   ba312:	4639      	mov	r1, r7
   ba314:	2002      	movs	r0, #2
   ba316:	f00a fe35 	bl	c4f84 <cellular_set_active_sim>
              Output("SIM:Set External-UP");
   ba31a:	4829      	ldr	r0, [pc, #164]	; (ba3c0 <_Z14SimChangeCheckv+0x2cc>)
   ba31c:	f7fb ff36 	bl	b618c <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
   ba320:	463b      	mov	r3, r7
   ba322:	4622      	mov	r2, r4
   ba324:	4631      	mov	r1, r6
   ba326:	4820      	ldr	r0, [pc, #128]	; (ba3a8 <_Z14SimChangeCheckv+0x2b4>)
   ba328:	f00a fe14 	bl	c4f54 <cellular_credentials_set>
              Output("SIM:Set Credentials");
   ba32c:	481f      	ldr	r0, [pc, #124]	; (ba3ac <_Z14SimChangeCheckv+0x2b8>)
   ba32e:	f7fb ff2d 	bl	b618c <_Z6OutputPKc>
              sprintf (msgbuf, " UN[%s]", un);
   ba332:	4924      	ldr	r1, [pc, #144]	; (ba3c4 <_Z14SimChangeCheckv+0x2d0>)
   ba334:	4805      	ldr	r0, [pc, #20]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba336:	4632      	mov	r2, r6
   ba338:	f00b f9b2 	bl	c56a0 <sprintf>
              Output(msgbuf);
   ba33c:	4803      	ldr	r0, [pc, #12]	; (ba34c <_Z14SimChangeCheckv+0x258>)
   ba33e:	f7fb ff25 	bl	b618c <_Z6OutputPKc>
              sprintf (msgbuf, " PW[%s]", pw);
   ba342:	4921      	ldr	r1, [pc, #132]	; (ba3c8 <_Z14SimChangeCheckv+0x2d4>)
   ba344:	4622      	mov	r2, r4
   ba346:	e7c6      	b.n	ba2d6 <_Z14SimChangeCheckv+0x1e2>
   ba348:	000cb63d 	.word	0x000cb63d
   ba34c:	200328c0 	.word	0x200328c0
   ba350:	000cb623 	.word	0x000cb623
   ba354:	2002df8f 	.word	0x2002df8f
   ba358:	2002df54 	.word	0x2002df54
   ba35c:	2002d8f1 	.word	0x2002d8f1
   ba360:	2002df0c 	.word	0x2002df0c
   ba364:	000cb64d 	.word	0x000cb64d
   ba368:	000cb674 	.word	0x000cb674
   ba36c:	000cb630 	.word	0x000cb630
   ba370:	000cb65d 	.word	0x000cb65d
   ba374:	000cb667 	.word	0x000cb667
   ba378:	000caffe 	.word	0x000caffe
   ba37c:	000cb682 	.word	0x000cb682
   ba380:	000cb68e 	.word	0x000cb68e
   ba384:	2002d8f9 	.word	0x2002d8f9
   ba388:	000cb756 	.word	0x000cb756
   ba38c:	2003e620 	.word	0x2003e620
   ba390:	000cb766 	.word	0x000cb766
   ba394:	000cb79d 	.word	0x000cb79d
   ba398:	000cb787 	.word	0x000cb787
   ba39c:	000cb6ba 	.word	0x000cb6ba
   ba3a0:	000cb697 	.word	0x000cb697
   ba3a4:	000cb6a9 	.word	0x000cb6a9
   ba3a8:	000cbdf3 	.word	0x000cbdf3
   ba3ac:	000cb6be 	.word	0x000cb6be
   ba3b0:	000cb6d2 	.word	0x000cb6d2
   ba3b4:	000cb6db 	.word	0x000cb6db
   ba3b8:	000cb6df 	.word	0x000cb6df
   ba3bc:	000cb6f6 	.word	0x000cb6f6
   ba3c0:	000cb70b 	.word	0x000cb70b
   ba3c4:	000cb735 	.word	0x000cb735
   ba3c8:	000cb73e 	.word	0x000cb73e
          else if (strcmp (id,"AUP") == 0) {
   ba3cc:	492e      	ldr	r1, [pc, #184]	; (ba488 <_Z14SimChangeCheckv+0x394>)
   ba3ce:	4620      	mov	r0, r4
   ba3d0:	f7fa fe0a 	bl	b4fe8 <strcmp>
   ba3d4:	4680      	mov	r8, r0
   ba3d6:	2800      	cmp	r0, #0
   ba3d8:	d13d      	bne.n	ba456 <_Z14SimChangeCheckv+0x362>
            apn = strtok_r(p, " ", &p);
   ba3da:	492c      	ldr	r1, [pc, #176]	; (ba48c <_Z14SimChangeCheckv+0x398>)
   ba3dc:	9800      	ldr	r0, [sp, #0]
   ba3de:	466a      	mov	r2, sp
   ba3e0:	f00f ffc4 	bl	ca36c <strtok_r>
            un  = strtok_r(p, " ", &p);
   ba3e4:	4929      	ldr	r1, [pc, #164]	; (ba48c <_Z14SimChangeCheckv+0x398>)
   ba3e6:	466a      	mov	r2, sp
            apn = strtok_r(p, " ", &p);
   ba3e8:	4607      	mov	r7, r0
            un  = strtok_r(p, " ", &p);
   ba3ea:	9800      	ldr	r0, [sp, #0]
   ba3ec:	f00f ffbe 	bl	ca36c <strtok_r>
            pw  = strtok_r(p, " ", &p);
   ba3f0:	4926      	ldr	r1, [pc, #152]	; (ba48c <_Z14SimChangeCheckv+0x398>)
            un  = strtok_r(p, " ", &p);
   ba3f2:	4606      	mov	r6, r0
            pw  = strtok_r(p, " ", &p);
   ba3f4:	466a      	mov	r2, sp
   ba3f6:	9800      	ldr	r0, [sp, #0]
   ba3f8:	f00f ffb8 	bl	ca36c <strtok_r>
   ba3fc:	4604      	mov	r4, r0
            if (apn == NULL) {
   ba3fe:	2f00      	cmp	r7, #0
   ba400:	f43f af55 	beq.w	ba2ae <_Z14SimChangeCheckv+0x1ba>
            else if (un == NULL) {
   ba404:	2e00      	cmp	r6, #0
   ba406:	f43f af7f 	beq.w	ba308 <_Z14SimChangeCheckv+0x214>
            else if (pw == NULL) {
   ba40a:	2800      	cmp	r0, #0
   ba40c:	f43f af7f 	beq.w	ba30e <_Z14SimChangeCheckv+0x21a>
        return cellular_set_active_sim(sim, nullptr);
   ba410:	4641      	mov	r1, r8
   ba412:	2002      	movs	r0, #2
   ba414:	f00a fdb6 	bl	c4f84 <cellular_set_active_sim>
              Output("SIM:Set External-AUP");
   ba418:	481d      	ldr	r0, [pc, #116]	; (ba490 <_Z14SimChangeCheckv+0x39c>)
   ba41a:	f7fb feb7 	bl	b618c <_Z6OutputPKc>
        cellular_credentials_set(apn, username, password, nullptr);
   ba41e:	4643      	mov	r3, r8
   ba420:	4622      	mov	r2, r4
   ba422:	4631      	mov	r1, r6
   ba424:	4638      	mov	r0, r7
   ba426:	f00a fd95 	bl	c4f54 <cellular_credentials_set>
              Output("SIM:Set Credentials");
   ba42a:	481a      	ldr	r0, [pc, #104]	; (ba494 <_Z14SimChangeCheckv+0x3a0>)
   ba42c:	f7fb feae 	bl	b618c <_Z6OutputPKc>
              sprintf (msgbuf, " APN[%s]", apn);
   ba430:	4919      	ldr	r1, [pc, #100]	; (ba498 <_Z14SimChangeCheckv+0x3a4>)
   ba432:	481a      	ldr	r0, [pc, #104]	; (ba49c <_Z14SimChangeCheckv+0x3a8>)
   ba434:	463a      	mov	r2, r7
   ba436:	f00b f933 	bl	c56a0 <sprintf>
              Output(msgbuf);
   ba43a:	4818      	ldr	r0, [pc, #96]	; (ba49c <_Z14SimChangeCheckv+0x3a8>)
   ba43c:	f7fb fea6 	bl	b618c <_Z6OutputPKc>
              sprintf (msgbuf, "  UN[%s]", un);
   ba440:	4917      	ldr	r1, [pc, #92]	; (ba4a0 <_Z14SimChangeCheckv+0x3ac>)
   ba442:	4816      	ldr	r0, [pc, #88]	; (ba49c <_Z14SimChangeCheckv+0x3a8>)
   ba444:	4632      	mov	r2, r6
   ba446:	f00b f92b 	bl	c56a0 <sprintf>
              Output(msgbuf);
   ba44a:	4814      	ldr	r0, [pc, #80]	; (ba49c <_Z14SimChangeCheckv+0x3a8>)
   ba44c:	f7fb fe9e 	bl	b618c <_Z6OutputPKc>
              sprintf (msgbuf, "  PW[%s]", pw);
   ba450:	4914      	ldr	r1, [pc, #80]	; (ba4a4 <_Z14SimChangeCheckv+0x3b0>)
   ba452:	4622      	mov	r2, r4
   ba454:	e73f      	b.n	ba2d6 <_Z14SimChangeCheckv+0x1e2>
            sprintf (msgbuf, "SIMF:ID[%s] Err", id);
   ba456:	4914      	ldr	r1, [pc, #80]	; (ba4a8 <_Z14SimChangeCheckv+0x3b4>)
   ba458:	4810      	ldr	r0, [pc, #64]	; (ba49c <_Z14SimChangeCheckv+0x3a8>)
   ba45a:	4622      	mov	r2, r4
   ba45c:	f00b f920 	bl	c56a0 <sprintf>
            Output(msgbuf);
   ba460:	480e      	ldr	r0, [pc, #56]	; (ba49c <_Z14SimChangeCheckv+0x3a8>)
   ba462:	e6c2      	b.n	ba1ea <_Z14SimChangeCheckv+0xf6>
          Output ("SIMF:RENAME OK");
   ba464:	4811      	ldr	r0, [pc, #68]	; (ba4ac <_Z14SimChangeCheckv+0x3b8>)
   ba466:	e6fe      	b.n	ba266 <_Z14SimChangeCheckv+0x172>
          Output ("=====================");
   ba468:	4811      	ldr	r0, [pc, #68]	; (ba4b0 <_Z14SimChangeCheckv+0x3bc>)
   ba46a:	f7fb fe8f 	bl	b618c <_Z6OutputPKc>
          Output ("!!! SET SIM ERROR !!!");
   ba46e:	4811      	ldr	r0, [pc, #68]	; (ba4b4 <_Z14SimChangeCheckv+0x3c0>)
   ba470:	f7fb fe8c 	bl	b618c <_Z6OutputPKc>
          Output ("=====================");
   ba474:	480e      	ldr	r0, [pc, #56]	; (ba4b0 <_Z14SimChangeCheckv+0x3bc>)
   ba476:	e705      	b.n	ba284 <_Z14SimChangeCheckv+0x190>
        Output ("SIMF:OPEN ERROR");
   ba478:	480f      	ldr	r0, [pc, #60]	; (ba4b8 <_Z14SimChangeCheckv+0x3c4>)
      Output ("SIM:NO UPDATE FILE");
   ba47a:	f7fb fe87 	bl	b618c <_Z6OutputPKc>
}
   ba47e:	b02e      	add	sp, #184	; 0xb8
   ba480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Output ("SIM:NO UPDATE FILE");
   ba484:	480d      	ldr	r0, [pc, #52]	; (ba4bc <_Z14SimChangeCheckv+0x3c8>)
   ba486:	e7f8      	b.n	ba47a <_Z14SimChangeCheckv+0x386>
   ba488:	000cb730 	.word	0x000cb730
   ba48c:	000caffe 	.word	0x000caffe
   ba490:	000cb71f 	.word	0x000cb71f
   ba494:	000cb6be 	.word	0x000cb6be
   ba498:	000cb6d2 	.word	0x000cb6d2
   ba49c:	200328c0 	.word	0x200328c0
   ba4a0:	000cb734 	.word	0x000cb734
   ba4a4:	000cb73d 	.word	0x000cb73d
   ba4a8:	000cb746 	.word	0x000cb746
   ba4ac:	000cb778 	.word	0x000cb778
   ba4b0:	000cb796 	.word	0x000cb796
   ba4b4:	000cb7ac 	.word	0x000cb7ac
   ba4b8:	000cb7c2 	.word	0x000cb7c2
   ba4bc:	000cb7d2 	.word	0x000cb7d2

000ba4c0 <_Z14TXI_Initializev>:
/* 
 *=======================================================================================================================
 * TXI_Initialize() - Transmit Interval 5, 10 or 15 minutes
 *=======================================================================================================================
 */
void TXI_Initialize() {
   ba4c0:	b510      	push	{r4, lr}
  Output ("TXI:INIT");
   ba4c2:	4822      	ldr	r0, [pc, #136]	; (ba54c <_Z14TXI_Initializev+0x8c>)
   ba4c4:	4c22      	ldr	r4, [pc, #136]	; (ba550 <_Z14TXI_Initializev+0x90>)
   ba4c6:	f7fb fe61 	bl	b618c <_Z6OutputPKc>
  if (SD_exists) {
   ba4ca:	4b22      	ldr	r3, [pc, #136]	; (ba554 <_Z14TXI_Initializev+0x94>)
   ba4cc:	781b      	ldrb	r3, [r3, #0]
   ba4ce:	b1c3      	cbz	r3, ba502 <_Z14TXI_Initializev+0x42>
    return vwd()->exists(path);
   ba4d0:	4921      	ldr	r1, [pc, #132]	; (ba558 <_Z14TXI_Initializev+0x98>)
   ba4d2:	4822      	ldr	r0, [pc, #136]	; (ba55c <_Z14TXI_Initializev+0x9c>)
   ba4d4:	f7fb fc20 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    if (SD.exists(SD_TX5M_FILE)) {
   ba4d8:	b1e8      	cbz	r0, ba516 <_Z14TXI_Initializev+0x56>
      Output ("TXI5M Found");
   ba4da:	4821      	ldr	r0, [pc, #132]	; (ba560 <_Z14TXI_Initializev+0xa0>)
   ba4dc:	f7fb fe56 	bl	b618c <_Z6OutputPKc>
      obs_tx_interval = 5;
   ba4e0:	2205      	movs	r2, #5
   ba4e2:	2300      	movs	r3, #0
   ba4e4:	491f      	ldr	r1, [pc, #124]	; (ba564 <_Z14TXI_Initializev+0xa4>)
   ba4e6:	481d      	ldr	r0, [pc, #116]	; (ba55c <_Z14TXI_Initializev+0x9c>)
   ba4e8:	e9c4 2300 	strd	r2, r3, [r4]
   ba4ec:	f7fb fc14 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX10M_FILE)) {
   ba4f0:	b138      	cbz	r0, ba502 <_Z14TXI_Initializev+0x42>
    return FatFile::remove(vwd(), path);
   ba4f2:	491c      	ldr	r1, [pc, #112]	; (ba564 <_Z14TXI_Initializev+0xa4>)
   ba4f4:	4819      	ldr	r0, [pc, #100]	; (ba55c <_Z14TXI_Initializev+0x9c>)
   ba4f6:	f009 f8ec 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX10M_FILE)) {
   ba4fa:	b110      	cbz	r0, ba502 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 10M");
   ba4fc:	481a      	ldr	r0, [pc, #104]	; (ba568 <_Z14TXI_Initializev+0xa8>)
    else if (SD.exists(SD_TX10M_FILE)) {
      Output ("TXI10M Found");
      obs_tx_interval = 10;
      if (SD.exists(SD_TX5M_FILE)) {
        if (SD.remove (SD_TX5M_FILE)) {
          Output ("TXI:RM 5M");
   ba4fe:	f7fb fe45 	bl	b618c <_Z6OutputPKc>
        }
      }
    }
  }
  sprintf (msgbuf, "TXI=%dM", (int) obs_tx_interval);
   ba502:	6822      	ldr	r2, [r4, #0]
   ba504:	4919      	ldr	r1, [pc, #100]	; (ba56c <_Z14TXI_Initializev+0xac>)
   ba506:	481a      	ldr	r0, [pc, #104]	; (ba570 <_Z14TXI_Initializev+0xb0>)
   ba508:	f00b f8ca 	bl	c56a0 <sprintf>
  Output(msgbuf);  
   ba50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Output(msgbuf);  
   ba510:	4817      	ldr	r0, [pc, #92]	; (ba570 <_Z14TXI_Initializev+0xb0>)
   ba512:	f7fb be3b 	b.w	b618c <_Z6OutputPKc>
    return vwd()->exists(path);
   ba516:	4913      	ldr	r1, [pc, #76]	; (ba564 <_Z14TXI_Initializev+0xa4>)
   ba518:	4810      	ldr	r0, [pc, #64]	; (ba55c <_Z14TXI_Initializev+0x9c>)
   ba51a:	f7fb fbfd 	bl	b5d18 <_ZN7FatFile6existsEPKc>
    else if (SD.exists(SD_TX10M_FILE)) {
   ba51e:	2800      	cmp	r0, #0
   ba520:	d0ef      	beq.n	ba502 <_Z14TXI_Initializev+0x42>
      Output ("TXI10M Found");
   ba522:	4814      	ldr	r0, [pc, #80]	; (ba574 <_Z14TXI_Initializev+0xb4>)
   ba524:	f7fb fe32 	bl	b618c <_Z6OutputPKc>
      obs_tx_interval = 10;
   ba528:	220a      	movs	r2, #10
   ba52a:	2300      	movs	r3, #0
   ba52c:	490a      	ldr	r1, [pc, #40]	; (ba558 <_Z14TXI_Initializev+0x98>)
   ba52e:	480b      	ldr	r0, [pc, #44]	; (ba55c <_Z14TXI_Initializev+0x9c>)
   ba530:	e9c4 2300 	strd	r2, r3, [r4]
   ba534:	f7fb fbf0 	bl	b5d18 <_ZN7FatFile6existsEPKc>
      if (SD.exists(SD_TX5M_FILE)) {
   ba538:	2800      	cmp	r0, #0
   ba53a:	d0e2      	beq.n	ba502 <_Z14TXI_Initializev+0x42>
    return FatFile::remove(vwd(), path);
   ba53c:	4906      	ldr	r1, [pc, #24]	; (ba558 <_Z14TXI_Initializev+0x98>)
   ba53e:	4807      	ldr	r0, [pc, #28]	; (ba55c <_Z14TXI_Initializev+0x9c>)
   ba540:	f009 f8c7 	bl	c36d2 <_ZN7FatFile6removeEPS_PKc>
        if (SD.remove (SD_TX5M_FILE)) {
   ba544:	2800      	cmp	r0, #0
   ba546:	d0dc      	beq.n	ba502 <_Z14TXI_Initializev+0x42>
          Output ("TXI:RM 5M");
   ba548:	480b      	ldr	r0, [pc, #44]	; (ba578 <_Z14TXI_Initializev+0xb8>)
   ba54a:	e7d8      	b.n	ba4fe <_Z14TXI_Initializev+0x3e>
   ba54c:	000cb7e5 	.word	0x000cb7e5
   ba550:	2002d938 	.word	0x2002d938
   ba554:	2002df54 	.word	0x2002df54
   ba558:	2002d8d1 	.word	0x2002d8d1
   ba55c:	2002df0c 	.word	0x2002df0c
   ba560:	000cb7ee 	.word	0x000cb7ee
   ba564:	2002d8c6 	.word	0x2002d8c6
   ba568:	000cb7fa 	.word	0x000cb7fa
   ba56c:	000cb81c 	.word	0x000cb81c
   ba570:	200328c0 	.word	0x200328c0
   ba574:	000cb805 	.word	0x000cb805
   ba578:	000cb812 	.word	0x000cb812

000ba57c <_Z9HeartBeatv>:
/*
 * ======================================================================================================================
 * HeartBeat() - Burns 250 ms 
 * ======================================================================================================================
 */
void HeartBeat() {
   ba57c:	b508      	push	{r3, lr}
  digitalWrite(HEARTBEAT_PIN, HIGH);
   ba57e:	2101      	movs	r1, #1
   ba580:	2012      	movs	r0, #18
   ba582:	f00d f82a 	bl	c75da <digitalWrite>
  delay(250);
   ba586:	20fa      	movs	r0, #250	; 0xfa
   ba588:	f00b f8d2 	bl	c5730 <delay>
  digitalWrite(HEARTBEAT_PIN, LOW);
}
   ba58c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(HEARTBEAT_PIN, LOW);
   ba590:	2100      	movs	r1, #0
   ba592:	2012      	movs	r0, #18
   ba594:	f00d b821 	b.w	c75da <digitalWrite>

000ba598 <_Z17Serial_Initializev>:
/*
 * ======================================================================================================================
 * Serial_Initialize() -
 * ======================================================================================================================
 */
void Serial_Initialize() {
   ba598:	b510      	push	{r4, lr}
  // serial console enable pin
  pinMode(SCE_PIN, INPUT_PULLUP);   // Internal pullup resistor biases the pin to supply voltage.
   ba59a:	4c20      	ldr	r4, [pc, #128]	; (ba61c <_Z17Serial_Initializev+0x84>)
   ba59c:	2102      	movs	r1, #2
   ba59e:	8820      	ldrh	r0, [r4, #0]
   ba5a0:	f00d f80a 	bl	c75b8 <pinMode>
                                    // If jumper set to ground, we enable serial console (low = enable)
  if (digitalRead(SCE_PIN) == LOW) {
   ba5a4:	8820      	ldrh	r0, [r4, #0]
   ba5a6:	4c1e      	ldr	r4, [pc, #120]	; (ba620 <_Z17Serial_Initializev+0x88>)
   ba5a8:	f00d f830 	bl	c760c <digitalRead>
   ba5ac:	b908      	cbnz	r0, ba5b2 <_Z17Serial_Initializev+0x1a>
    SerialConsoleEnabled = true;
   ba5ae:	2301      	movs	r3, #1
   ba5b0:	7023      	strb	r3, [r4, #0]
  }

  // There are libraries that print to Serial Console so we need to initialize no mater what the jumper is set to.
  Serial.begin(9600);
   ba5b2:	f00c fee9 	bl	c7388 <_Z16_fetch_usbserialv>
   ba5b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   ba5ba:	f00c fed5 	bl	c7368 <_ZN9USBSerial5beginEl>
  delay(1000); // prevents usb driver crash on startup, do not omit this
   ba5be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   ba5c2:	f00b f8b5 	bl	c5730 <delay>

  if (SerialConsoleEnabled) {
   ba5c6:	7823      	ldrb	r3, [r4, #0]
   ba5c8:	b33b      	cbz	r3, ba61a <_Z17Serial_Initializev+0x82>
    // Wait for serial port to be available
    if (!Serial.isConnected()) {
   ba5ca:	f00c fedd 	bl	c7388 <_Z16_fetch_usbserialv>
   ba5ce:	f00c fecf 	bl	c7370 <_ZN9USBSerial11isConnectedEv>
   ba5d2:	b910      	cbnz	r0, ba5da <_Z17Serial_Initializev+0x42>
      OLED_write("Wait4 Serial Console");
   ba5d4:	4813      	ldr	r0, [pc, #76]	; (ba624 <_Z17Serial_Initializev+0x8c>)
   ba5d6:	f7fb fd35 	bl	b6044 <_Z10OLED_writePKc>
void Serial_Initialize() {
   ba5da:	243d      	movs	r4, #61	; 0x3d
    }
    int countdown=60; // Wait N seconds for serial connection, then move on.
    while (!Serial.isConnected() && countdown) {
   ba5dc:	f00c fed4 	bl	c7388 <_Z16_fetch_usbserialv>
   ba5e0:	f00c fec6 	bl	c7370 <_ZN9USBSerial11isConnectedEv>
   ba5e4:	b948      	cbnz	r0, ba5fa <_Z17Serial_Initializev+0x62>
   ba5e6:	3c01      	subs	r4, #1
   ba5e8:	d007      	beq.n	ba5fa <_Z17Serial_Initializev+0x62>
      HeartBeat(); // Provices 250ms delay
   ba5ea:	f7ff ffc7 	bl	ba57c <_Z9HeartBeatv>
      Blink(1, 750);
   ba5ee:	f240 21ee 	movw	r1, #750	; 0x2ee
   ba5f2:	2001      	movs	r0, #1
   ba5f4:	f7fb fbd2 	bl	b5d9c <_Z5Blinkii>
    while (!Serial.isConnected() && countdown) {
   ba5f8:	e7f0      	b.n	ba5dc <_Z17Serial_Initializev+0x44>
      countdown--;
    }

    Serial_writeln(""); // Send carriage return and linefeed
   ba5fa:	480b      	ldr	r0, [pc, #44]	; (ba628 <_Z17Serial_Initializev+0x90>)
   ba5fc:	f7fb fdae 	bl	b615c <_Z14Serial_writelnPKc>
    
    if (DisplayEnabled) {
   ba600:	4b0a      	ldr	r3, [pc, #40]	; (ba62c <_Z17Serial_Initializev+0x94>)
   ba602:	781b      	ldrb	r3, [r3, #0]
   ba604:	b13b      	cbz	r3, ba616 <_Z17Serial_Initializev+0x7e>
      Serial_writeln ("OLED:Enabled");
   ba606:	480a      	ldr	r0, [pc, #40]	; (ba630 <_Z17Serial_Initializev+0x98>)
    }
    else {
      Serial_writeln ("OLED:Disabled");
   ba608:	f7fb fda8 	bl	b615c <_Z14Serial_writelnPKc>
    }
    Output ("SC:Enabled");
  }
}
   ba60c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Output ("SC:Enabled");
   ba610:	4808      	ldr	r0, [pc, #32]	; (ba634 <_Z17Serial_Initializev+0x9c>)
   ba612:	f7fb bdbb 	b.w	b618c <_Z6OutputPKc>
      Serial_writeln ("OLED:Disabled");
   ba616:	4808      	ldr	r0, [pc, #32]	; (ba638 <_Z17Serial_Initializev+0xa0>)
   ba618:	e7f6      	b.n	ba608 <_Z17Serial_Initializev+0x70>
}
   ba61a:	bd10      	pop	{r4, pc}
   ba61c:	2002d884 	.word	0x2002d884
   ba620:	2002df8f 	.word	0x2002df8f
   ba624:	000cb824 	.word	0x000cb824
   ba628:	000cbdf3 	.word	0x000cbdf3
   ba62c:	2002d87d 	.word	0x2002d87d
   ba630:	000cb839 	.word	0x000cb839
   ba634:	000cb854 	.word	0x000cb854
   ba638:	000cb846 	.word	0x000cb846

000ba63c <_Z17Output_Initializev>:
/*
 * ======================================================================================================================
 * Output_Initialize() -
 * ======================================================================================================================
 */
void Output_Initialize() {
   ba63c:	b508      	push	{r3, lr}
  OLED_initialize();
   ba63e:	f7fb fdaf 	bl	b61a0 <_Z15OLED_initializev>
  Output("SER:Init");
   ba642:	4805      	ldr	r0, [pc, #20]	; (ba658 <_Z17Output_Initializev+0x1c>)
   ba644:	f7fb fda2 	bl	b618c <_Z6OutputPKc>
  Serial_Initialize();
   ba648:	f7ff ffa6 	bl	ba598 <_Z17Serial_Initializev>
  Output("SER:OK");
   ba64c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Output("SER:OK");
   ba650:	4802      	ldr	r0, [pc, #8]	; (ba65c <_Z17Output_Initializev+0x20>)
   ba652:	f7fb bd9b 	b.w	b618c <_Z6OutputPKc>
   ba656:	bf00      	nop
   ba658:	000cb85f 	.word	0x000cb85f
   ba65c:	000cb868 	.word	0x000cb868

000ba660 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   ba660:	b530      	push	{r4, r5, lr}
   ba662:	b085      	sub	sp, #20
   ba664:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   ba666:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   ba668:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   ba66a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   ba66c:	f00a fec8 	bl	c5400 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   ba670:	b990      	cbnz	r0, ba698 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   ba672:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   ba674:	b10c      	cbz	r4, ba67a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   ba676:	6923      	ldr	r3, [r4, #16]
   ba678:	b923      	cbnz	r3, ba684 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   ba67a:	4a08      	ldr	r2, [pc, #32]	; (ba69c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   ba67c:	4908      	ldr	r1, [pc, #32]	; (ba6a0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   ba67e:	200a      	movs	r0, #10
   ba680:	f00a feb6 	bl	c53f0 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   ba684:	230c      	movs	r3, #12
   ba686:	e9cd 3501 	strd	r3, r5, [sp, #4]
   ba68a:	2304      	movs	r3, #4
   ba68c:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   ba68e:	aa01      	add	r2, sp, #4
   ba690:	6923      	ldr	r3, [r4, #16]
   ba692:	2101      	movs	r1, #1
   ba694:	4620      	mov	r0, r4
   ba696:	4798      	blx	r3
}
   ba698:	b005      	add	sp, #20
   ba69a:	bd30      	pop	{r4, r5, pc}
   ba69c:	000c4ff1 	.word	0x000c4ff1
   ba6a0:	000cb86f 	.word	0x000cb86f

000ba6a4 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
            return r;
        }
        return val;
    }

    float batteryCharge() const {
   ba6a4:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   ba6a6:	2003      	movs	r0, #3
   ba6a8:	a901      	add	r1, sp, #4
   ba6aa:	f7ff ffd9 	bl	ba660 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   ba6ae:	b940      	cbnz	r0, ba6c2 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   ba6b0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   ba6b4:	ee00 3a10 	vmov	s0, r3
   ba6b8:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   ba6bc:	b003      	add	sp, #12
   ba6be:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   ba6c2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   ba6c6:	e7f9      	b.n	ba6bc <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000ba6c8 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
   ba6c8:	b507      	push	{r0, r1, r2, lr}
   ba6ca:	2007      	movs	r0, #7
   ba6cc:	a901      	add	r1, sp, #4
   ba6ce:	f7ff ffc7 	bl	ba660 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   ba6d2:	2800      	cmp	r0, #0
        return val;
   ba6d4:	bfa8      	it	ge
   ba6d6:	9801      	ldrge	r0, [sp, #4]
    }
   ba6d8:	b003      	add	sp, #12
   ba6da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba6e0 <_Z6OBS_Dov>:
/*
 * ======================================================================================================================
 * OBS_Do() - Get Observations - Should be called once a minute
 * ======================================================================================================================
 */
void OBS_Do() {
   ba6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba6e4:	ed2d 8b06 	vpush	{d8-d10}
   ba6e8:	b099      	sub	sp, #100	; 0x64

// Output("DB:OBS_Start");


  // Safty Check for Vaild Time
  if (!Time.isValid()) {
   ba6ea:	f00c fd1e 	bl	c712a <_ZN9TimeClass7isValidEv>
   ba6ee:	b948      	cbnz	r0, ba704 <_Z6OBS_Dov+0x24>
    Output ("OBS_Do: Time NV");
   ba6f0:	4803      	ldr	r0, [pc, #12]	; (ba700 <_Z6OBS_Dov+0x20>)
  // Save Observation to SD Card
  OBS_Log(oidx);

  lastOBS = System.millis();
// Output("DB:OBS_Exit");
}
   ba6f2:	b019      	add	sp, #100	; 0x64
   ba6f4:	ecbd 8b06 	vpop	{d8-d10}
   ba6f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Output ("OBS_Do: Time NV");
   ba6fc:	f7fb bd46 	b.w	b618c <_Z6OutputPKc>
   ba700:	000cb895 	.word	0x000cb895
  Wind_GustUpdate(); // Update Gust and Gust Direction readings
   ba704:	f7fd fd8c 	bl	b8220 <_Z15Wind_GustUpdatev>
  int BatteryState = System.batteryState();
   ba708:	f7ff ffde 	bl	ba6c8 <_ZNK11SystemClass12batteryStateEv.isra.0>
  CellularSignal sig = Cellular.RSSI();
   ba70c:	49de      	ldr	r1, [pc, #888]	; (baa88 <_Z6OBS_Dov+0x3a8>)
  int BatteryState = System.batteryState();
   ba70e:	4681      	mov	r9, r0
  CellularSignal sig = Cellular.RSSI();
   ba710:	a804      	add	r0, sp, #16
   ba712:	f00b f885 	bl	c5820 <_ZN5spark13CellularClass4RSSIEv>
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
   ba716:	48dd      	ldr	r0, [pc, #884]	; (baa8c <_Z6OBS_Dov+0x3ac>)
   ba718:	f00c f967 	bl	c69ea <_ZN4PMIC8getFaultEv>
  if (BatteryState>0 && BatteryState<6) {
   ba71c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   ba720:	2b04      	cmp	r3, #4
  byte cfr = pmic.getFault(); // Get Battery Charger Failt Register
   ba722:	4682      	mov	sl, r0
  if (BatteryState>0 && BatteryState<6) {
   ba724:	f200 81fa 	bhi.w	bab1c <_Z6OBS_Dov+0x43c>
    BatteryPoC = System.batteryCharge();
   ba728:	f7ff ffbc 	bl	ba6a4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   ba72c:	eeb0 8a40 	vmov.f32	s16, s0
  oidx = OBS_Open();    // Get a free observation spot
   ba730:	f7ff f8bc 	bl	b98ac <_Z8OBS_Openv>
  obs[oidx].inuse = true;
   ba734:	f640 2698 	movw	r6, #2712	; 0xa98
   ba738:	4346      	muls	r6, r0
   ba73a:	4cd5      	ldr	r4, [pc, #852]	; (baa90 <_Z6OBS_Dov+0x3b0>)
  oidx = OBS_Open();    // Get a free observation spot
   ba73c:	9000      	str	r0, [sp, #0]
  obs[oidx].inuse = true;
   ba73e:	f04f 0801 	mov.w	r8, #1
   ba742:	f804 8006 	strb.w	r8, [r4, r6]
  obs[oidx].ts = Time.now();
   ba746:	f00c fd0d 	bl	c7164 <_ZN9TimeClass3nowEv>
  obs[oidx].inuse = true;
   ba74a:	19a7      	adds	r7, r4, r6
  obs[oidx].ts = Time.now();
   ba74c:	17c3      	asrs	r3, r0, #31
   ba74e:	e9c7 0302 	strd	r0, r3, [r7, #8]
  obs[oidx].css = sig.getStrength();
   ba752:	a804      	add	r0, sp, #16
   ba754:	f00b f8c2 	bl	c58dc <_ZNK14CellularSignal11getStrengthEv>
   ba758:	f106 0518 	add.w	r5, r6, #24
   ba75c:	ed87 0a04 	vstr	s0, [r7, #16]
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
   ba760:	49cc      	ldr	r1, [pc, #816]	; (baa94 <_Z6OBS_Dov+0x3b4>)
  rain = raingauge1_interrupt_count * 0.2;
   ba762:	f8df b388 	ldr.w	fp, [pc, #904]	; baaec <_Z6OBS_Dov+0x40c>
  strcpy (obs[oidx].sensor[sidx].id, "bcs");
   ba766:	1960      	adds	r0, r4, r5
   ba768:	f00f fda0 	bl	ca2ac <strcpy>
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
   ba76c:	f106 0034 	add.w	r0, r6, #52	; 0x34
   ba770:	49c9      	ldr	r1, [pc, #804]	; (baa98 <_Z6OBS_Dov+0x3b8>)
  obs[oidx].sensor[sidx].type = I_OBS;
   ba772:	f8c7 8020 	str.w	r8, [r7, #32]
  obs[oidx].sensor[sidx].i_obs = BatteryState;
   ba776:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
  obs[oidx].sensor[sidx++].inuse = true;
   ba77a:	f887 8030 	strb.w	r8, [r7, #48]	; 0x30
  strcpy (obs[oidx].sensor[sidx].id, "bpc");
   ba77e:	4420      	add	r0, r4
   ba780:	f00f fd94 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
   ba784:	2300      	movs	r3, #0
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
   ba786:	f106 0050 	add.w	r0, r6, #80	; 0x50
  obs[oidx].sensor[sidx].type = F_OBS;
   ba78a:	63fb      	str	r3, [r7, #60]	; 0x3c
  obs[oidx].sensor[sidx].f_obs = BatteryPoC;
   ba78c:	ed87 8a10 	vstr	s16, [r7, #64]	; 0x40
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
   ba790:	49c2      	ldr	r1, [pc, #776]	; (baa9c <_Z6OBS_Dov+0x3bc>)
  obs[oidx].sensor[sidx++].inuse = true;
   ba792:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
  strcpy (obs[oidx].sensor[sidx].id, "cfr");
   ba796:	4420      	add	r0, r4
   ba798:	f00f fd88 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].i_obs = cfr;
   ba79c:	f8c7 a060 	str.w	sl, [r7, #96]	; 0x60
  obs[oidx].sensor[sidx].type = I_OBS;
   ba7a0:	f8c7 8058 	str.w	r8, [r7, #88]	; 0x58
  obs[oidx].sensor[sidx++].inuse = true;
   ba7a4:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
  rgds = (System.millis()-raingauge1_interrupt_stime)/1000;
   ba7a8:	f7fb fa54 	bl	b5c54 <_ZN11SystemClass6millisEv>
   ba7ac:	4fbc      	ldr	r7, [pc, #752]	; (baaa0 <_Z6OBS_Dov+0x3c0>)
   ba7ae:	683b      	ldr	r3, [r7, #0]
   ba7b0:	468c      	mov	ip, r1
   ba7b2:	6879      	ldr	r1, [r7, #4]
   ba7b4:	1ac0      	subs	r0, r0, r3
   ba7b6:	eb6c 0101 	sbc.w	r1, ip, r1
   ba7ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba7be:	2300      	movs	r3, #0
   ba7c0:	f7fa fa90 	bl	b4ce4 <__aeabi_uldivmod>
   ba7c4:	4682      	mov	sl, r0
  rain = raingauge1_interrupt_count * 0.2;
   ba7c6:	f8db 0000 	ldr.w	r0, [fp]
   ba7ca:	f7f9 fd6b 	bl	b42a4 <__aeabi_ui2d>
   ba7ce:	a3ac      	add	r3, pc, #688	; (adr r3, baa80 <_Z6OBS_Dov+0x3a0>)
   ba7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba7d4:	f7f9 fde0 	bl	b4398 <__aeabi_dmul>
   ba7d8:	f7fa f8d6 	bl	b4988 <__aeabi_d2f>
   ba7dc:	ee08 0a10 	vmov	s16, r0
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
   ba7e0:	eeb4 8a48 	vcmp.f32	s16, s16
   ba7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba7e8:	f180 819b 	bvs.w	bab22 <_Z6OBS_Dov+0x442>
   ba7ec:	f7f9 fd7c 	bl	b42e8 <__aeabi_f2d>
   ba7f0:	4680      	mov	r8, r0
   ba7f2:	203c      	movs	r0, #60	; 0x3c
   ba7f4:	fbba f0f0 	udiv	r0, sl, r0
   ba7f8:	4689      	mov	r9, r1
   ba7fa:	f7f9 fd53 	bl	b42a4 <__aeabi_ui2d>
   ba7fe:	4ba9      	ldr	r3, [pc, #676]	; (baaa4 <_Z6OBS_Dov+0x3c4>)
   ba800:	2200      	movs	r2, #0
   ba802:	f7f9 fdc9 	bl	b4398 <__aeabi_dmul>
   ba806:	4602      	mov	r2, r0
   ba808:	460b      	mov	r3, r1
   ba80a:	4640      	mov	r0, r8
   ba80c:	4649      	mov	r1, r9
   ba80e:	f7fa f853 	bl	b48b8 <__aeabi_dcmpgt>
   ba812:	eddf 7aa5 	vldr	s15, [pc, #660]	; baaa8 <_Z6OBS_Dov+0x3c8>
   ba816:	2800      	cmp	r0, #0
   ba818:	bf18      	it	ne
   ba81a:	eeb0 8a67 	vmovne.f32	s16, s15
  raingauge1_interrupt_count = 0;
   ba81e:	2300      	movs	r3, #0
   ba820:	f8cb 3000 	str.w	r3, [fp]
  raingauge1_interrupt_stime = System.millis();
   ba824:	f7fb fa16 	bl	b5c54 <_ZN11SystemClass6millisEv>
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
   ba828:	4ba0      	ldr	r3, [pc, #640]	; (baaac <_Z6OBS_Dov+0x3cc>)
  raingauge1_interrupt_stime = System.millis();
   ba82a:	e9c7 0100 	strd	r0, r1, [r7]
  raingauge1_interrupt_ltime = 0; // used to debounce the tip
   ba82e:	2000      	movs	r0, #0
   ba830:	2100      	movs	r1, #0
   ba832:	e9c3 0100 	strd	r0, r1, [r3]
  if (A4_State == A4_STATE_RAIN) {
   ba836:	4b9e      	ldr	r3, [pc, #632]	; (baab0 <_Z6OBS_Dov+0x3d0>)
   ba838:	681b      	ldr	r3, [r3, #0]
   ba83a:	2b02      	cmp	r3, #2
   ba83c:	f040 8177 	bne.w	bab2e <_Z6OBS_Dov+0x44e>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
   ba840:	f7fb fa08 	bl	b5c54 <_ZN11SystemClass6millisEv>
   ba844:	4f9b      	ldr	r7, [pc, #620]	; (baab4 <_Z6OBS_Dov+0x3d4>)
    rain2 = raingauge2_interrupt_count * 0.2;
   ba846:	f8df 92a8 	ldr.w	r9, [pc, #680]	; baaf0 <_Z6OBS_Dov+0x410>
    rg2ds = (System.millis()-raingauge2_interrupt_stime)/1000;
   ba84a:	683b      	ldr	r3, [r7, #0]
   ba84c:	468c      	mov	ip, r1
   ba84e:	6879      	ldr	r1, [r7, #4]
   ba850:	1ac0      	subs	r0, r0, r3
   ba852:	eb6c 0101 	sbc.w	r1, ip, r1
   ba856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   ba85a:	2300      	movs	r3, #0
   ba85c:	f7fa fa42 	bl	b4ce4 <__aeabi_uldivmod>
   ba860:	4680      	mov	r8, r0
    rain2 = raingauge2_interrupt_count * 0.2;
   ba862:	f8d9 0000 	ldr.w	r0, [r9]
   ba866:	f7f9 fd1d 	bl	b42a4 <__aeabi_ui2d>
   ba86a:	a385      	add	r3, pc, #532	; (adr r3, baa80 <_Z6OBS_Dov+0x3a0>)
   ba86c:	e9d3 2300 	ldrd	r2, r3, [r3]
   ba870:	f7f9 fd92 	bl	b4398 <__aeabi_dmul>
   ba874:	f7fa f888 	bl	b4988 <__aeabi_d2f>
   ba878:	ee09 0a10 	vmov	s18, r0
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
   ba87c:	eeb4 9a49 	vcmp.f32	s18, s18
   ba880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba884:	f180 8150 	bvs.w	bab28 <_Z6OBS_Dov+0x448>
   ba888:	f7f9 fd2e 	bl	b42e8 <__aeabi_f2d>
   ba88c:	4682      	mov	sl, r0
   ba88e:	203c      	movs	r0, #60	; 0x3c
   ba890:	fbb8 f0f0 	udiv	r0, r8, r0
   ba894:	468b      	mov	fp, r1
   ba896:	f7f9 fd05 	bl	b42a4 <__aeabi_ui2d>
   ba89a:	4b82      	ldr	r3, [pc, #520]	; (baaa4 <_Z6OBS_Dov+0x3c4>)
   ba89c:	2200      	movs	r2, #0
   ba89e:	f7f9 fd7b 	bl	b4398 <__aeabi_dmul>
   ba8a2:	4602      	mov	r2, r0
   ba8a4:	460b      	mov	r3, r1
   ba8a6:	4650      	mov	r0, sl
   ba8a8:	4659      	mov	r1, fp
   ba8aa:	f7fa f805 	bl	b48b8 <__aeabi_dcmpgt>
   ba8ae:	eddf 7a7e 	vldr	s15, [pc, #504]	; baaa8 <_Z6OBS_Dov+0x3c8>
   ba8b2:	2800      	cmp	r0, #0
   ba8b4:	bf18      	it	ne
   ba8b6:	eeb0 9a67 	vmovne.f32	s18, s15
    raingauge2_interrupt_count = 0;
   ba8ba:	2300      	movs	r3, #0
   ba8bc:	f8c9 3000 	str.w	r3, [r9]
    raingauge2_interrupt_stime = System.millis();
   ba8c0:	f7fb f9c8 	bl	b5c54 <_ZN11SystemClass6millisEv>
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
   ba8c4:	4b7c      	ldr	r3, [pc, #496]	; (baab8 <_Z6OBS_Dov+0x3d8>)
    raingauge2_interrupt_stime = System.millis();
   ba8c6:	e9c7 0100 	strd	r0, r1, [r7]
    raingauge2_interrupt_ltime = 0; // used to debounce the tip
   ba8ca:	2000      	movs	r0, #0
   ba8cc:	2100      	movs	r1, #0
   ba8ce:	e9c3 0100 	strd	r0, r1, [r3]
  EEPROM_UpdateRainTotals(rain, rain2);
   ba8d2:	eeb0 0a48 	vmov.f32	s0, s16
   ba8d6:	eef0 0a49 	vmov.f32	s1, s18
   ba8da:	f7fe f863 	bl	b89a4 <_Z23EEPROM_UpdateRainTotalsff>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
   ba8de:	f106 006c 	add.w	r0, r6, #108	; 0x6c
   ba8e2:	4976      	ldr	r1, [pc, #472]	; (baabc <_Z6OBS_Dov+0x3dc>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
   ba8e4:	f8df a20c 	ldr.w	sl, [pc, #524]	; baaf4 <_Z6OBS_Dov+0x414>
  strcpy (obs[oidx].sensor[sidx].id, "rg");
   ba8e8:	4420      	add	r0, r4
   ba8ea:	f00f fcdf 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
   ba8ee:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
   ba8f0:	4973      	ldr	r1, [pc, #460]	; (baac0 <_Z6OBS_Dov+0x3e0>)
  obs[oidx].sensor[sidx].type = F_OBS;
   ba8f2:	f640 2798 	movw	r7, #2712	; 0xa98
   ba8f6:	fb07 4703 	mla	r7, r7, r3, r4
   ba8fa:	f04f 0800 	mov.w	r8, #0
  obs[oidx].sensor[sidx++].inuse = true;
   ba8fe:	f04f 0901 	mov.w	r9, #1
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
   ba902:	f106 0088 	add.w	r0, r6, #136	; 0x88
  obs[oidx].sensor[sidx].type = F_OBS;
   ba906:	f8c7 8074 	str.w	r8, [r7, #116]	; 0x74
  obs[oidx].sensor[sidx].f_obs = rain;
   ba90a:	ed87 8a1e 	vstr	s16, [r7, #120]	; 0x78
  obs[oidx].sensor[sidx++].inuse = true;
   ba90e:	f887 9084 	strb.w	r9, [r7, #132]	; 0x84
  strcpy (obs[oidx].sensor[sidx].id, "rgt");
   ba912:	4420      	add	r0, r4
   ba914:	f00f fcca 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
   ba918:	f8da 3000 	ldr.w	r3, [sl]
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
   ba91c:	4969      	ldr	r1, [pc, #420]	; (baac4 <_Z6OBS_Dov+0x3e4>)
  obs[oidx].sensor[sidx].f_obs = eeprom.rgt1;
   ba91e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
   ba922:	f106 00a4 	add.w	r0, r6, #164	; 0xa4
  obs[oidx].sensor[sidx].type = F_OBS;
   ba926:	f8c7 8090 	str.w	r8, [r7, #144]	; 0x90
  obs[oidx].sensor[sidx++].inuse = true;
   ba92a:	f887 90a0 	strb.w	r9, [r7, #160]	; 0xa0
  strcpy (obs[oidx].sensor[sidx].id, "rgp");
   ba92e:	4420      	add	r0, r4
   ba930:	f00f fcbc 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].f_obs = eeprom.rgp1;
   ba934:	f8da 3004 	ldr.w	r3, [sl, #4]
   ba938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  strcpy (obs[oidx].sensor[sidx].id, "ws");
   ba93c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   ba940:	4961      	ldr	r1, [pc, #388]	; (baac8 <_Z6OBS_Dov+0x3e8>)
  obs[oidx].sensor[sidx].type = F_OBS;
   ba942:	f8c7 80ac 	str.w	r8, [r7, #172]	; 0xac
  obs[oidx].sensor[sidx++].inuse = true;
   ba946:	f887 90bc 	strb.w	r9, [r7, #188]	; 0xbc
  strcpy (obs[oidx].sensor[sidx].id, "ws");
   ba94a:	4420      	add	r0, r4
   ba94c:	f00f fcae 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].type = F_OBS;
   ba950:	f8c7 80c8 	str.w	r8, [r7, #200]	; 0xc8
  ws = Wind_SpeedAverage();
   ba954:	f7fd fc4a 	bl	b81ec <_Z17Wind_SpeedAveragev>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
   ba958:	eeb4 0a40 	vcmp.f32	s0, s0
   ba95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba960:	f180 80e8 	bvs.w	bab34 <_Z6OBS_Dov+0x454>
   ba964:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   ba968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba96c:	f100 80e2 	bmi.w	bab34 <_Z6OBS_Dov+0x454>
   ba970:	eddf 7a56 	vldr	s15, [pc, #344]	; baacc <_Z6OBS_Dov+0x3ec>
   ba974:	eeb4 0a67 	vcmp.f32	s0, s15
   ba978:	eddf 7a4b 	vldr	s15, [pc, #300]	; baaa8 <_Z6OBS_Dov+0x3c8>
   ba97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba980:	bfc8      	it	gt
   ba982:	eeb0 0a67 	vmovgt.f32	s0, s15
  obs[oidx].sensor[sidx].f_obs = ws;
   ba986:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wd");
   ba988:	4951      	ldr	r1, [pc, #324]	; (baad0 <_Z6OBS_Dov+0x3f0>)
  obs[oidx].sensor[sidx].f_obs = ws;
   ba98a:	f640 2798 	movw	r7, #2712	; 0xa98
   ba98e:	fb07 4803 	mla	r8, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
   ba992:	f04f 0901 	mov.w	r9, #1
  strcpy (obs[oidx].sensor[sidx].id, "wd");
   ba996:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
  obs[oidx].sensor[sidx].f_obs = ws;
   ba99a:	ed88 0a33 	vstr	s0, [r8, #204]	; 0xcc
  obs[oidx].sensor[sidx++].inuse = true;
   ba99e:	f888 90d8 	strb.w	r9, [r8, #216]	; 0xd8
  strcpy (obs[oidx].sensor[sidx].id, "wd");
   ba9a2:	4420      	add	r0, r4
   ba9a4:	f00f fc82 	bl	ca2ac <strcpy>
  obs[oidx].sensor[sidx].type = I_OBS;
   ba9a8:	f8c8 90e4 	str.w	r9, [r8, #228]	; 0xe4
  wd = Wind_DirectionVector();
   ba9ac:	f7fd fb88 	bl	b80c0 <_Z20Wind_DirectionVectorv>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
   ba9b0:	2800      	cmp	r0, #0
   ba9b2:	f2c0 80c2 	blt.w	bab3a <_Z6OBS_Dov+0x45a>
   ba9b6:	4b47      	ldr	r3, [pc, #284]	; (baad4 <_Z6OBS_Dov+0x3f4>)
   ba9b8:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
   ba9bc:	bfc8      	it	gt
   ba9be:	4618      	movgt	r0, r3
  obs[oidx].sensor[sidx].i_obs = wd;
   ba9c0:	9b00      	ldr	r3, [sp, #0]
  return(wind.gust);
   ba9c2:	f8df 9134 	ldr.w	r9, [pc, #308]	; baaf8 <_Z6OBS_Dov+0x418>
  strcpy (obs[oidx].sensor[sidx].id, "wg");
   ba9c6:	4944      	ldr	r1, [pc, #272]	; (baad8 <_Z6OBS_Dov+0x3f8>)
  obs[oidx].sensor[sidx].i_obs = wd;
   ba9c8:	fb07 4703 	mla	r7, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
   ba9cc:	2301      	movs	r3, #1
  obs[oidx].sensor[sidx].i_obs = wd;
   ba9ce:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  strcpy (obs[oidx].sensor[sidx].id, "wg");
   ba9d2:	f106 00f8 	add.w	r0, r6, #248	; 0xf8
  obs[oidx].sensor[sidx++].inuse = true;
   ba9d6:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
  strcpy (obs[oidx].sensor[sidx].id, "wg");
   ba9da:	4420      	add	r0, r4
   ba9dc:	f00f fc66 	bl	ca2ac <strcpy>
   ba9e0:	edd9 7a79 	vldr	s15, [r9, #484]	; 0x1e4
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
   ba9e4:	eef4 7a67 	vcmp.f32	s15, s15
  obs[oidx].sensor[sidx].type = F_OBS;
   ba9e8:	2300      	movs	r3, #0
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
   ba9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  obs[oidx].sensor[sidx].type = F_OBS;
   ba9ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
   ba9f2:	f180 80a4 	bvs.w	bab3e <_Z6OBS_Dov+0x45e>
   ba9f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   ba9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   ba9fe:	f100 809e 	bmi.w	bab3e <_Z6OBS_Dov+0x45e>
   baa02:	ed9f 7a32 	vldr	s14, [pc, #200]	; baacc <_Z6OBS_Dov+0x3ec>
   baa06:	eef4 7a47 	vcmp.f32	s15, s14
   baa0a:	ed9f 7a27 	vldr	s14, [pc, #156]	; baaa8 <_Z6OBS_Dov+0x3c8>
   baa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baa12:	bfc8      	it	gt
   baa14:	eef0 7a47 	vmovgt.f32	s15, s14
  obs[oidx].sensor[sidx].f_obs = ws;
   baa18:	9b00      	ldr	r3, [sp, #0]
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
   baa1a:	4930      	ldr	r1, [pc, #192]	; (baadc <_Z6OBS_Dov+0x3fc>)
  obs[oidx].sensor[sidx].f_obs = ws;
   baa1c:	f640 2798 	movw	r7, #2712	; 0xa98
   baa20:	fb07 4803 	mla	r8, r7, r3, r4
  obs[oidx].sensor[sidx++].inuse = true;
   baa24:	f04f 0a01 	mov.w	sl, #1
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
   baa28:	f506 708a 	add.w	r0, r6, #276	; 0x114
  obs[oidx].sensor[sidx].f_obs = ws;
   baa2c:	edc8 7a41 	vstr	s15, [r8, #260]	; 0x104
  obs[oidx].sensor[sidx++].inuse = true;
   baa30:	f888 a110 	strb.w	sl, [r8, #272]	; 0x110
  strcpy (obs[oidx].sensor[sidx].id, "wgd");
   baa34:	4420      	add	r0, r4
   baa36:	f00f fc39 	bl	ca2ac <strcpy>
  return(wind.gust_direction);
   baa3a:	f8d9 31e8 	ldr.w	r3, [r9, #488]	; 0x1e8
  obs[oidx].sensor[sidx].type = I_OBS;
   baa3e:	f8c8 a11c 	str.w	sl, [r8, #284]	; 0x11c
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
   baa42:	2b00      	cmp	r3, #0
   baa44:	db7e      	blt.n	bab44 <_Z6OBS_Dov+0x464>
   baa46:	4a23      	ldr	r2, [pc, #140]	; (baad4 <_Z6OBS_Dov+0x3f4>)
   baa48:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   baa4c:	bfc8      	it	gt
   baa4e:	4613      	movgt	r3, r2
  obs[oidx].sensor[sidx].i_obs = wd;
   baa50:	9a00      	ldr	r2, [sp, #0]
   baa52:	fb07 4702 	mla	r7, r7, r2, r4
   baa56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  obs[oidx].sensor[sidx++].inuse = true;
   baa5a:	2301      	movs	r3, #1
   baa5c:	f887 312c 	strb.w	r3, [r7, #300]	; 0x12c
  if (BMX_1_exists) {
   baa60:	4b1f      	ldr	r3, [pc, #124]	; (baae0 <_Z6OBS_Dov+0x400>)
   baa62:	781b      	ldrb	r3, [r3, #0]
   baa64:	2b00      	cmp	r3, #0
   baa66:	f000 8144 	beq.w	bacf2 <_Z6OBS_Dov+0x612>
    if (BMX_1_chip_id == BMP280_CHIP_ID) {
   baa6a:	4b1e      	ldr	r3, [pc, #120]	; (baae4 <_Z6OBS_Dov+0x404>)
   baa6c:	f8df 908c 	ldr.w	r9, [pc, #140]	; baafc <_Z6OBS_Dov+0x41c>
   baa70:	781b      	ldrb	r3, [r3, #0]
   baa72:	2b58      	cmp	r3, #88	; 0x58
   baa74:	d168      	bne.n	bab48 <_Z6OBS_Dov+0x468>
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
   baa76:	481c      	ldr	r0, [pc, #112]	; (baae8 <_Z6OBS_Dov+0x408>)
   baa78:	f004 fe02 	bl	bf680 <_ZN15Adafruit_BMP28012readPressureEv>
   baa7c:	e042      	b.n	bab04 <_Z6OBS_Dov+0x424>
   baa7e:	bf00      	nop
   baa80:	9999999a 	.word	0x9999999a
   baa84:	3fc99999 	.word	0x3fc99999
   baa88:	2003e630 	.word	0x2003e630
   baa8c:	2003e1d8 	.word	0x2003e1d8
   baa90:	20032cd0 	.word	0x20032cd0
   baa94:	000cb8a5 	.word	0x000cb8a5
   baa98:	000cb8a9 	.word	0x000cb8a9
   baa9c:	000cb8ad 	.word	0x000cb8ad
   baaa0:	2003e1e8 	.word	0x2003e1e8
   baaa4:	403e0000 	.word	0x403e0000
   baaa8:	c479f99a 	.word	0xc479f99a
   baaac:	2003e1e0 	.word	0x2003e1e0
   baab0:	2002da5c 	.word	0x2002da5c
   baab4:	2003e200 	.word	0x2003e200
   baab8:	2003e1f8 	.word	0x2003e1f8
   baabc:	000cb8b1 	.word	0x000cb8b1
   baac0:	000cb8b4 	.word	0x000cb8b4
   baac4:	000cb8b8 	.word	0x000cb8b8
   baac8:	000cb8bc 	.word	0x000cb8bc
   baacc:	42ce0000 	.word	0x42ce0000
   baad0:	000cb8bf 	.word	0x000cb8bf
   baad4:	fffffc19 	.word	0xfffffc19
   baad8:	000cb8c2 	.word	0x000cb8c2
   baadc:	000cb8c5 	.word	0x000cb8c5
   baae0:	2002da82 	.word	0x2002da82
   baae4:	2002da81 	.word	0x2002da81
   baae8:	2002e390 	.word	0x2002e390
   baaec:	2003e1dc 	.word	0x2003e1dc
   baaf0:	2003e1f0 	.word	0x2003e1f0
   baaf4:	2002e5f4 	.word	0x2002e5f4
   baaf8:	2003e3f0 	.word	0x2003e3f0
   baafc:	2002da83 	.word	0x2002da83
   bab00:	42c80000 	.word	0x42c80000
   bab04:	ed5f 7a02 	vldr	s15, [pc, #-8]	; bab00 <_Z6OBS_Dov+0x420>
      t = bmp1.readTemperature();           // bt1
   bab08:	487d      	ldr	r0, [pc, #500]	; (bad00 <_Z6OBS_Dov+0x620>)
      p = bmp1.readPressure()/100.0F;       // bp1 hPa
   bab0a:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp1.readTemperature();           // bt1
   bab0e:	f004 fd77 	bl	bf600 <_ZN15Adafruit_BMP28015readTemperatureEv>
    float h = 0.0;
   bab12:	eddf 8a7c 	vldr	s17, [pc, #496]	; bad04 <_Z6OBS_Dov+0x624>
      t = bm31.readTemperature();           // bt1
   bab16:	eeb0 8a40 	vmov.f32	s16, s0
   bab1a:	e03e      	b.n	bab9a <_Z6OBS_Dov+0x4ba>
  float BatteryPoC = 0.0; // Battery Percent of Charge
   bab1c:	ed9f 8a79 	vldr	s16, [pc, #484]	; bad04 <_Z6OBS_Dov+0x624>
   bab20:	e606      	b.n	ba730 <_Z6OBS_Dov+0x50>
  rain = (isnan(rain) || (rain < QC_MIN_RG) || (rain > ((rgds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain;
   bab22:	ed9f 8a79 	vldr	s16, [pc, #484]	; bad08 <_Z6OBS_Dov+0x628>
   bab26:	e67a      	b.n	ba81e <_Z6OBS_Dov+0x13e>
    rain2 = (isnan(rain2) || (rain2 < QC_MIN_RG) || (rain2 > ((rg2ds / 60) * QC_MAX_RG)) ) ? QC_ERR_RG : rain2;
   bab28:	ed9f 9a77 	vldr	s18, [pc, #476]	; bad08 <_Z6OBS_Dov+0x628>
   bab2c:	e6c5      	b.n	ba8ba <_Z6OBS_Dov+0x1da>
  float rain2 = 0.0;
   bab2e:	ed9f 9a75 	vldr	s18, [pc, #468]	; bad04 <_Z6OBS_Dov+0x624>
   bab32:	e6ce      	b.n	ba8d2 <_Z6OBS_Dov+0x1f2>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
   bab34:	ed9f 0a74 	vldr	s0, [pc, #464]	; bad08 <_Z6OBS_Dov+0x628>
   bab38:	e725      	b.n	ba986 <_Z6OBS_Dov+0x2a6>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
   bab3a:	4874      	ldr	r0, [pc, #464]	; (bad0c <_Z6OBS_Dov+0x62c>)
   bab3c:	e740      	b.n	ba9c0 <_Z6OBS_Dov+0x2e0>
  ws = (isnan(ws) || (ws < QC_MIN_WS) || (ws > QC_MAX_WS)) ? QC_ERR_WS : ws;
   bab3e:	eddf 7a72 	vldr	s15, [pc, #456]	; bad08 <_Z6OBS_Dov+0x628>
   bab42:	e769      	b.n	baa18 <_Z6OBS_Dov+0x338>
  wd = (isnan(wd) || (wd < QC_MIN_WD) || (wd > QC_MAX_WD)) ? QC_ERR_WD : wd;
   bab44:	4b71      	ldr	r3, [pc, #452]	; (bad0c <_Z6OBS_Dov+0x62c>)
   bab46:	e783      	b.n	baa50 <_Z6OBS_Dov+0x370>
    else if (BMX_1_chip_id == BME280_BMP390_CHIP_ID) {
   bab48:	2b60      	cmp	r3, #96	; 0x60
   bab4a:	f040 80be 	bne.w	bacca <_Z6OBS_Dov+0x5ea>
      if (BMX_1_type == BMX_TYPE_BME280) {
   bab4e:	f899 3000 	ldrb.w	r3, [r9]
   bab52:	2b02      	cmp	r3, #2
   bab54:	f040 80b2 	bne.w	bacbc <_Z6OBS_Dov+0x5dc>
        p = bme1.readPressure()/100.0F;     // bp1 hPa
   bab58:	486d      	ldr	r0, [pc, #436]	; (bad10 <_Z6OBS_Dov+0x630>)
   bab5a:	f004 f949 	bl	bedf0 <_ZN15Adafruit_BME28012readPressureEv>
   bab5e:	eddf 7a6d 	vldr	s15, [pc, #436]	; bad14 <_Z6OBS_Dov+0x634>
        t = bme1.readTemperature();         // bt1
   bab62:	486b      	ldr	r0, [pc, #428]	; (bad10 <_Z6OBS_Dov+0x630>)
        p = bme1.readPressure()/100.0F;     // bp1 hPa
   bab64:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme1.readTemperature();         // bt1
   bab68:	f004 f910 	bl	bed8c <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme1.readHumidity();            // bh1 
   bab6c:	4868      	ldr	r0, [pc, #416]	; (bad10 <_Z6OBS_Dov+0x630>)
        t = bme1.readTemperature();         // bt1
   bab6e:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme1.readHumidity();            // bh1 
   bab72:	f004 fa0d 	bl	bef90 <_ZN15Adafruit_BME28012readHumidityEv>
   bab76:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_1_type == BMX_TYPE_BMP390) {
   bab7a:	f899 3000 	ldrb.w	r3, [r9]
   bab7e:	2b04      	cmp	r3, #4
   bab80:	d10b      	bne.n	bab9a <_Z6OBS_Dov+0x4ba>
        p = bm31.readPressure()/100.0F;     // bp1 hPa
   bab82:	4865      	ldr	r0, [pc, #404]	; (bad18 <_Z6OBS_Dov+0x638>)
   bab84:	f004 ff89 	bl	bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>
   bab88:	eddf 7a62 	vldr	s15, [pc, #392]	; bad14 <_Z6OBS_Dov+0x634>
        t = bm31.readTemperature();         // bt1 
   bab8c:	4862      	ldr	r0, [pc, #392]	; (bad18 <_Z6OBS_Dov+0x638>)
        p = bm31.readPressure()/100.0F;     // bp1 hPa
   bab8e:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm31.readTemperature();         // bt1 
   bab92:	f004 ff77 	bl	bfa84 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
   bab96:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bab9a:	eef4 9a69 	vcmp.f32	s19, s19
   bab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baba2:	f180 809d 	bvs.w	bace0 <_Z6OBS_Dov+0x600>
   baba6:	eddf 7a5d 	vldr	s15, [pc, #372]	; bad1c <_Z6OBS_Dov+0x63c>
   babaa:	eef4 9ae7 	vcmpe.f32	s19, s15
   babae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   babb2:	f100 8095 	bmi.w	bace0 <_Z6OBS_Dov+0x600>
   babb6:	eddf 7a5a 	vldr	s15, [pc, #360]	; bad20 <_Z6OBS_Dov+0x640>
   babba:	eef4 9a67 	vcmp.f32	s19, s15
   babbe:	eddf 7a52 	vldr	s15, [pc, #328]	; bad08 <_Z6OBS_Dov+0x628>
   babc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   babc6:	bfc8      	it	gt
   babc8:	eef0 9a67 	vmovgt.f32	s19, s15
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   babcc:	eeb4 8a48 	vcmp.f32	s16, s16
   babd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   babd4:	f180 8087 	bvs.w	bace6 <_Z6OBS_Dov+0x606>
   babd8:	eddf 7a52 	vldr	s15, [pc, #328]	; bad24 <_Z6OBS_Dov+0x644>
   babdc:	eeb4 8ae7 	vcmpe.f32	s16, s15
   babe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   babe4:	d47f      	bmi.n	bace6 <_Z6OBS_Dov+0x606>
   babe6:	eddf 7a50 	vldr	s15, [pc, #320]	; bad28 <_Z6OBS_Dov+0x648>
   babea:	eeb4 8a67 	vcmp.f32	s16, s15
   babee:	eddf 7a46 	vldr	s15, [pc, #280]	; bad08 <_Z6OBS_Dov+0x628>
   babf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   babf6:	bfc8      	it	gt
   babf8:	eeb0 8a67 	vmovgt.f32	s16, s15
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   babfc:	eef4 8a68 	vcmp.f32	s17, s17
   bac00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bac04:	d672      	bvs.n	bacec <_Z6OBS_Dov+0x60c>
   bac06:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   bac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bac0e:	d46d      	bmi.n	bacec <_Z6OBS_Dov+0x60c>
   bac10:	eddf 7a40 	vldr	s15, [pc, #256]	; bad14 <_Z6OBS_Dov+0x634>
   bac14:	eef4 8a67 	vcmp.f32	s17, s15
   bac18:	eddf 7a3b 	vldr	s15, [pc, #236]	; bad08 <_Z6OBS_Dov+0x628>
   bac1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bac20:	bfc8      	it	gt
   bac22:	eef0 8a67 	vmovgt.f32	s17, s15
    strcpy (obs[oidx].sensor[sidx].id, "bp1");
   bac26:	f506 7098 	add.w	r0, r6, #304	; 0x130
   bac2a:	4940      	ldr	r1, [pc, #256]	; (bad2c <_Z6OBS_Dov+0x64c>)
   bac2c:	4420      	add	r0, r4
   bac2e:	f00f fb3d 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bac32:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
   bac34:	493e      	ldr	r1, [pc, #248]	; (bad30 <_Z6OBS_Dov+0x650>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bac36:	f640 2798 	movw	r7, #2712	; 0xa98
   bac3a:	fb07 4703 	mla	r7, r7, r3, r4
   bac3e:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bac42:	f04f 0801 	mov.w	r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
   bac46:	f506 70a6 	add.w	r0, r6, #332	; 0x14c
    obs[oidx].sensor[sidx].type = F_OBS;
   bac4a:	f8c7 a138 	str.w	sl, [r7, #312]	; 0x138
    obs[oidx].sensor[sidx].f_obs = p;
   bac4e:	edc7 9a4f 	vstr	s19, [r7, #316]	; 0x13c
    obs[oidx].sensor[sidx++].inuse = true;
   bac52:	f887 8148 	strb.w	r8, [r7, #328]	; 0x148
    strcpy (obs[oidx].sensor[sidx].id, "bt1");
   bac56:	4420      	add	r0, r4
   bac58:	f00f fb28 	bl	ca2ac <strcpy>
    if (BMX_1_type == BMX_TYPE_BME280) {
   bac5c:	f899 3000 	ldrb.w	r3, [r9]
    obs[oidx].sensor[sidx].type = F_OBS;
   bac60:	f8c7 a154 	str.w	sl, [r7, #340]	; 0x154
    if (BMX_1_type == BMX_TYPE_BME280) {
   bac64:	2b02      	cmp	r3, #2
    obs[oidx].sensor[sidx].f_obs = t;
   bac66:	ed87 8a56 	vstr	s16, [r7, #344]	; 0x158
    obs[oidx].sensor[sidx++].inuse = true;
   bac6a:	f887 8164 	strb.w	r8, [r7, #356]	; 0x164
    if (BMX_1_type == BMX_TYPE_BME280) {
   bac6e:	d143      	bne.n	bacf8 <_Z6OBS_Dov+0x618>
      strcpy (obs[oidx].sensor[sidx].id, "bh1");
   bac70:	f506 70b4 	add.w	r0, r6, #360	; 0x168
   bac74:	492f      	ldr	r1, [pc, #188]	; (bad34 <_Z6OBS_Dov+0x654>)
   bac76:	4420      	add	r0, r4
   bac78:	f00f fb18 	bl	ca2ac <strcpy>
      obs[oidx].sensor[sidx++].inuse = true;
   bac7c:	f887 8180 	strb.w	r8, [r7, #384]	; 0x180
      obs[oidx].sensor[sidx].type = F_OBS;
   bac80:	f8c7 a170 	str.w	sl, [r7, #368]	; 0x170
      obs[oidx].sensor[sidx].f_obs = h;
   bac84:	edc7 8a5d 	vstr	s17, [r7, #372]	; 0x174
      obs[oidx].sensor[sidx++].inuse = true;
   bac88:	f04f 080d 	mov.w	r8, #13
  if (BMX_2_exists) {
   bac8c:	4b2a      	ldr	r3, [pc, #168]	; (bad38 <_Z6OBS_Dov+0x658>)
   bac8e:	781b      	ldrb	r3, [r3, #0]
   bac90:	2b00      	cmp	r3, #0
   bac92:	f000 810c 	beq.w	baeae <_Z6OBS_Dov+0x7ce>
    if (BMX_2_chip_id == BMP280_CHIP_ID) {
   bac96:	4b29      	ldr	r3, [pc, #164]	; (bad3c <_Z6OBS_Dov+0x65c>)
   bac98:	781b      	ldrb	r3, [r3, #0]
   bac9a:	2b58      	cmp	r3, #88	; 0x58
   bac9c:	d152      	bne.n	bad44 <_Z6OBS_Dov+0x664>
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
   bac9e:	4828      	ldr	r0, [pc, #160]	; (bad40 <_Z6OBS_Dov+0x660>)
   baca0:	f004 fcee 	bl	bf680 <_ZN15Adafruit_BMP28012readPressureEv>
   baca4:	eddf 7a1b 	vldr	s15, [pc, #108]	; bad14 <_Z6OBS_Dov+0x634>
      t = bmp2.readTemperature();           // bt2
   baca8:	4825      	ldr	r0, [pc, #148]	; (bad40 <_Z6OBS_Dov+0x660>)
      p = bmp2.readPressure()/100.0F;       // bp2 hPa
   bacaa:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bmp2.readTemperature();           // bt2
   bacae:	f004 fca7 	bl	bf600 <_ZN15Adafruit_BMP28015readTemperatureEv>
    float h = 0.0;
   bacb2:	eddf 8a14 	vldr	s17, [pc, #80]	; bad04 <_Z6OBS_Dov+0x624>
      t = bm32.readTemperature();           // bt2
   bacb6:	eeb0 8a40 	vmov.f32	s16, s0
   bacba:	e06b      	b.n	bad94 <_Z6OBS_Dov+0x6b4>
    float h = 0.0;
   bacbc:	eddf 8a11 	vldr	s17, [pc, #68]	; bad04 <_Z6OBS_Dov+0x624>
    float t = 0.0;
   bacc0:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
   bacc4:	eef0 9a68 	vmov.f32	s19, s17
   bacc8:	e757      	b.n	bab7a <_Z6OBS_Dov+0x49a>
      p = bm31.readPressure()/100.0F;       // bp1 hPa
   bacca:	4813      	ldr	r0, [pc, #76]	; (bad18 <_Z6OBS_Dov+0x638>)
   baccc:	f004 fee5 	bl	bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>
   bacd0:	eddf 7a10 	vldr	s15, [pc, #64]	; bad14 <_Z6OBS_Dov+0x634>
      t = bm31.readTemperature();           // bt1
   bacd4:	4810      	ldr	r0, [pc, #64]	; (bad18 <_Z6OBS_Dov+0x638>)
      p = bm31.readPressure()/100.0F;       // bp1 hPa
   bacd6:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm31.readTemperature();           // bt1
   bacda:	f004 fed3 	bl	bfa84 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
   bacde:	e718      	b.n	bab12 <_Z6OBS_Dov+0x432>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bace0:	eddf 9a09 	vldr	s19, [pc, #36]	; bad08 <_Z6OBS_Dov+0x628>
   bace4:	e772      	b.n	babcc <_Z6OBS_Dov+0x4ec>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bace6:	ed9f 8a08 	vldr	s16, [pc, #32]	; bad08 <_Z6OBS_Dov+0x628>
   bacea:	e787      	b.n	babfc <_Z6OBS_Dov+0x51c>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bacec:	eddf 8a06 	vldr	s17, [pc, #24]	; bad08 <_Z6OBS_Dov+0x628>
   bacf0:	e799      	b.n	bac26 <_Z6OBS_Dov+0x546>
  obs[oidx].sensor[sidx++].inuse = true;
   bacf2:	f04f 080a 	mov.w	r8, #10
   bacf6:	e7c9      	b.n	bac8c <_Z6OBS_Dov+0x5ac>
    obs[oidx].sensor[sidx++].inuse = true;
   bacf8:	f04f 080c 	mov.w	r8, #12
   bacfc:	e7c6      	b.n	bac8c <_Z6OBS_Dov+0x5ac>
   bacfe:	bf00      	nop
   bad00:	2002e390 	.word	0x2002e390
   bad04:	00000000 	.word	0x00000000
   bad08:	c479f99a 	.word	0xc479f99a
   bad0c:	fffffc19 	.word	0xfffffc19
   bad10:	2002e2e0 	.word	0x2002e2e0
   bad14:	42c80000 	.word	0x42c80000
   bad18:	2002e0e0 	.word	0x2002e0e0
   bad1c:	43960000 	.word	0x43960000
   bad20:	44898000 	.word	0x44898000
   bad24:	c2200000 	.word	0xc2200000
   bad28:	42700000 	.word	0x42700000
   bad2c:	000cb8c9 	.word	0x000cb8c9
   bad30:	000cb8cd 	.word	0x000cb8cd
   bad34:	000cb8d1 	.word	0x000cb8d1
   bad38:	2002da85 	.word	0x2002da85
   bad3c:	2002da84 	.word	0x2002da84
   bad40:	2002e3d0 	.word	0x2002e3d0
    else if (BMX_2_chip_id == BME280_BMP390_CHIP_ID) {
   bad44:	2b60      	cmp	r3, #96	; 0x60
   bad46:	f041 8330 	bne.w	bc3aa <_Z6OBS_Dov+0x1cca>
      if (BMX_2_type == BMX_TYPE_BME280) {
   bad4a:	4edd      	ldr	r6, [pc, #884]	; (bb0c0 <_Z6OBS_Dov+0x9e0>)
   bad4c:	7833      	ldrb	r3, [r6, #0]
   bad4e:	2b02      	cmp	r3, #2
   bad50:	f041 8323 	bne.w	bc39a <_Z6OBS_Dov+0x1cba>
        p = bme2.readPressure()/100.0F;     // bp2 hPa
   bad54:	48db      	ldr	r0, [pc, #876]	; (bb0c4 <_Z6OBS_Dov+0x9e4>)
   bad56:	f004 f84b 	bl	bedf0 <_ZN15Adafruit_BME28012readPressureEv>
   bad5a:	eddf 7adb 	vldr	s15, [pc, #876]	; bb0c8 <_Z6OBS_Dov+0x9e8>
        t = bme2.readTemperature();         // bt2
   bad5e:	48d9      	ldr	r0, [pc, #868]	; (bb0c4 <_Z6OBS_Dov+0x9e4>)
        p = bme2.readPressure()/100.0F;     // bp2 hPa
   bad60:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bme2.readTemperature();         // bt2
   bad64:	f004 f812 	bl	bed8c <_ZN15Adafruit_BME28015readTemperatureEv>
        h = bme2.readHumidity();            // bh2 
   bad68:	48d6      	ldr	r0, [pc, #856]	; (bb0c4 <_Z6OBS_Dov+0x9e4>)
        t = bme2.readTemperature();         // bt2
   bad6a:	eeb0 8a40 	vmov.f32	s16, s0
        h = bme2.readHumidity();            // bh2 
   bad6e:	f004 f90f 	bl	bef90 <_ZN15Adafruit_BME28012readHumidityEv>
   bad72:	eef0 8a40 	vmov.f32	s17, s0
      if (BMX_2_type == BMX_TYPE_BMP390) {
   bad76:	7833      	ldrb	r3, [r6, #0]
   bad78:	2b04      	cmp	r3, #4
   bad7a:	d10b      	bne.n	bad94 <_Z6OBS_Dov+0x6b4>
        p = bm32.readPressure()/100.0F;     // bp2 hPa
   bad7c:	48d3      	ldr	r0, [pc, #844]	; (bb0cc <_Z6OBS_Dov+0x9ec>)
   bad7e:	f004 fe8c 	bl	bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>
   bad82:	eddf 7ad1 	vldr	s15, [pc, #836]	; bb0c8 <_Z6OBS_Dov+0x9e8>
        t = bm32.readTemperature();         // bt2       
   bad86:	48d1      	ldr	r0, [pc, #836]	; (bb0cc <_Z6OBS_Dov+0x9ec>)
        p = bm32.readPressure()/100.0F;     // bp2 hPa
   bad88:	eec0 9a27 	vdiv.f32	s19, s0, s15
        t = bm32.readTemperature();         // bt2       
   bad8c:	f004 fe7a 	bl	bfa84 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
   bad90:	eeb0 8a40 	vmov.f32	s16, s0
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bad94:	eef4 9a69 	vcmp.f32	s19, s19
   bad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bad9c:	f181 8311 	bvs.w	bc3c2 <_Z6OBS_Dov+0x1ce2>
   bada0:	eddf 7acb 	vldr	s15, [pc, #812]	; bb0d0 <_Z6OBS_Dov+0x9f0>
   bada4:	eef4 9ae7 	vcmpe.f32	s19, s15
   bada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   badac:	f101 8309 	bmi.w	bc3c2 <_Z6OBS_Dov+0x1ce2>
   badb0:	eddf 7ac8 	vldr	s15, [pc, #800]	; bb0d4 <_Z6OBS_Dov+0x9f4>
   badb4:	eef4 9a67 	vcmp.f32	s19, s15
   badb8:	eddf 7ad7 	vldr	s15, [pc, #860]	; bb118 <_Z6OBS_Dov+0xa38>
   badbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   badc0:	bfc8      	it	gt
   badc2:	eef0 9a67 	vmovgt.f32	s19, s15
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   badc6:	eeb4 8a48 	vcmp.f32	s16, s16
   badca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   badce:	f181 82fc 	bvs.w	bc3ca <_Z6OBS_Dov+0x1cea>
   badd2:	eddf 7acf 	vldr	s15, [pc, #828]	; bb110 <_Z6OBS_Dov+0xa30>
   badd6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   badda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   badde:	f101 82f4 	bmi.w	bc3ca <_Z6OBS_Dov+0x1cea>
   bade2:	eddf 7acc 	vldr	s15, [pc, #816]	; bb114 <_Z6OBS_Dov+0xa34>
   bade6:	eeb4 8a67 	vcmp.f32	s16, s15
   badea:	eddf 7acb 	vldr	s15, [pc, #812]	; bb118 <_Z6OBS_Dov+0xa38>
   badee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   badf2:	bfc8      	it	gt
   badf4:	eeb0 8a67 	vmovgt.f32	s16, s15
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   badf8:	eef4 8a68 	vcmp.f32	s17, s17
   badfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bae00:	f181 82e7 	bvs.w	bc3d2 <_Z6OBS_Dov+0x1cf2>
   bae04:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   bae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bae0c:	f101 82e1 	bmi.w	bc3d2 <_Z6OBS_Dov+0x1cf2>
   bae10:	eddf 7aad 	vldr	s15, [pc, #692]	; bb0c8 <_Z6OBS_Dov+0x9e8>
   bae14:	eef4 8a67 	vcmp.f32	s17, s15
   bae18:	eddf 7abf 	vldr	s15, [pc, #764]	; bb118 <_Z6OBS_Dov+0xa38>
   bae1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bae20:	bfc8      	it	gt
   bae22:	eef0 8a67 	vmovgt.f32	s17, s15
    strcpy (obs[oidx].sensor[sidx].id, "bp2");
   bae26:	f04f 0b1c 	mov.w	fp, #28
   bae2a:	fb0b f908 	mul.w	r9, fp, r8
   bae2e:	eb05 0009 	add.w	r0, r5, r9
   bae32:	49a9      	ldr	r1, [pc, #676]	; (bb0d8 <_Z6OBS_Dov+0x9f8>)
   bae34:	4420      	add	r0, r4
   bae36:	f00f fa39 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bae3a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
   bae3c:	49a7      	ldr	r1, [pc, #668]	; (bb0dc <_Z6OBS_Dov+0x9fc>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bae3e:	f640 2698 	movw	r6, #2712	; 0xa98
   bae42:	435e      	muls	r6, r3
   bae44:	eb09 0206 	add.w	r2, r9, r6
   bae48:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
   bae4a:	eb09 000b 	add.w	r0, r9, fp
    obs[oidx].sensor[sidx].type = F_OBS;
   bae4e:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bae50:	f04f 0a01 	mov.w	sl, #1
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
   bae54:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bae56:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = p;
   bae58:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bae5c:	f108 0701 	add.w	r7, r8, #1
   bae60:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "bt2");
   bae64:	4420      	add	r0, r4
   bae66:	f00f fa21 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bae6a:	fb0b 6207 	mla	r2, fp, r7, r6
   bae6e:	4422      	add	r2, r4
   bae70:	2300      	movs	r3, #0
   bae72:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = t;
   bae74:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bae78:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    if (BMX_2_type == BMX_TYPE_BME280) {
   bae7c:	4a90      	ldr	r2, [pc, #576]	; (bb0c0 <_Z6OBS_Dov+0x9e0>)
   bae7e:	7812      	ldrb	r2, [r2, #0]
   bae80:	2a02      	cmp	r2, #2
    obs[oidx].sensor[sidx++].inuse = true;
   bae82:	f108 0702 	add.w	r7, r8, #2
    if (BMX_2_type == BMX_TYPE_BME280) {
   bae86:	f041 82a8 	bne.w	bc3da <_Z6OBS_Dov+0x1cfa>
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
   bae8a:	f109 0038 	add.w	r0, r9, #56	; 0x38
   bae8e:	4428      	add	r0, r5
      obs[oidx].sensor[sidx].type = F_OBS;
   bae90:	fb0b 6607 	mla	r6, fp, r7, r6
   bae94:	4426      	add	r6, r4
      strcpy (obs[oidx].sensor[sidx].id, "bh2");
   bae96:	4992      	ldr	r1, [pc, #584]	; (bb0e0 <_Z6OBS_Dov+0xa00>)
   bae98:	4420      	add	r0, r4
   bae9a:	f00f fa07 	bl	ca2ac <strcpy>
      obs[oidx].sensor[sidx].type = F_OBS;
   bae9e:	2300      	movs	r3, #0
   baea0:	6233      	str	r3, [r6, #32]
      obs[oidx].sensor[sidx].f_obs = h;
   baea2:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
      obs[oidx].sensor[sidx++].inuse = true;
   baea6:	f108 0803 	add.w	r8, r8, #3
   baeaa:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HTU21DF_exists) {
   baeae:	4b8d      	ldr	r3, [pc, #564]	; (bb0e4 <_Z6OBS_Dov+0xa04>)
   baeb0:	781b      	ldrb	r3, [r3, #0]
   baeb2:	2b00      	cmp	r3, #0
   baeb4:	d072      	beq.n	baf9c <_Z6OBS_Dov+0x8bc>
    strcpy (obs[oidx].sensor[sidx].id, "hh1");
   baeb6:	261c      	movs	r6, #28
   baeb8:	fb06 f608 	mul.w	r6, r6, r8
   baebc:	19a8      	adds	r0, r5, r6
   baebe:	498a      	ldr	r1, [pc, #552]	; (bb0e8 <_Z6OBS_Dov+0xa08>)
   baec0:	4420      	add	r0, r4
   baec2:	f00f f9f3 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   baec6:	9a00      	ldr	r2, [sp, #0]
    h = htu.readHumidity();
   baec8:	4888      	ldr	r0, [pc, #544]	; (bb0ec <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
   baeca:	f640 2398 	movw	r3, #2712	; 0xa98
   baece:	fb03 6302 	mla	r3, r3, r2, r6
   baed2:	4423      	add	r3, r4
   baed4:	2200      	movs	r2, #0
   baed6:	621a      	str	r2, [r3, #32]
    h = htu.readHumidity();
   baed8:	f005 fe2c 	bl	c0b34 <_ZN16Adafruit_HTU21DF12readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   baedc:	eeb4 0a40 	vcmp.f32	s0, s0
   baee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baee4:	f181 827c 	bvs.w	bc3e0 <_Z6OBS_Dov+0x1d00>
   baee8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   baeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baef0:	f101 8276 	bmi.w	bc3e0 <_Z6OBS_Dov+0x1d00>
   baef4:	eddf 7a74 	vldr	s15, [pc, #464]	; bb0c8 <_Z6OBS_Dov+0x9e8>
   baef8:	eeb4 0a67 	vcmp.f32	s0, s15
   baefc:	eddf 7a86 	vldr	s15, [pc, #536]	; bb118 <_Z6OBS_Dov+0xa38>
   baf00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baf04:	bfc8      	it	gt
   baf06:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = h;
   baf0a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
   baf0c:	4978      	ldr	r1, [pc, #480]	; (bb0f0 <_Z6OBS_Dov+0xa10>)
    obs[oidx].sensor[sidx].f_obs = h;
   baf0e:	f640 2998 	movw	r9, #2712	; 0xa98
   baf12:	f04f 0a1c 	mov.w	sl, #28
   baf16:	fb09 f903 	mul.w	r9, r9, r3
   baf1a:	fb0a 9308 	mla	r3, sl, r8, r9
   baf1e:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   baf20:	f108 0701 	add.w	r7, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
   baf24:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx++].inuse = true;
   baf28:	2201      	movs	r2, #1
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
   baf2a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   baf2c:	fb0a 9907 	mla	r9, sl, r7, r9
    obs[oidx].sensor[sidx].f_obs = h;
   baf30:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   baf34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
   baf38:	4420      	add	r0, r4
    obs[oidx].sensor[sidx].type = F_OBS;
   baf3a:	44a1      	add	r9, r4
    strcpy (obs[oidx].sensor[sidx].id, "ht1");
   baf3c:	f00f f9b6 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   baf40:	2300      	movs	r3, #0
    t = htu.readTemperature();
   baf42:	486a      	ldr	r0, [pc, #424]	; (bb0ec <_Z6OBS_Dov+0xa0c>)
    obs[oidx].sensor[sidx].type = F_OBS;
   baf44:	f8c9 3020 	str.w	r3, [r9, #32]
    t = htu.readTemperature();
   baf48:	f005 fdb4 	bl	c0ab4 <_ZN16Adafruit_HTU21DF15readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   baf4c:	eeb4 0a40 	vcmp.f32	s0, s0
   baf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baf54:	f181 8248 	bvs.w	bc3e8 <_Z6OBS_Dov+0x1d08>
   baf58:	eddf 7a6d 	vldr	s15, [pc, #436]	; bb110 <_Z6OBS_Dov+0xa30>
   baf5c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   baf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baf64:	f101 8240 	bmi.w	bc3e8 <_Z6OBS_Dov+0x1d08>
   baf68:	eddf 7a6a 	vldr	s15, [pc, #424]	; bb114 <_Z6OBS_Dov+0xa34>
   baf6c:	eeb4 0a67 	vcmp.f32	s0, s15
   baf70:	eddf 7a69 	vldr	s15, [pc, #420]	; bb118 <_Z6OBS_Dov+0xa38>
   baf74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baf78:	bfc8      	it	gt
   baf7a:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = t;
   baf7e:	9a00      	ldr	r2, [sp, #0]
   baf80:	f640 2398 	movw	r3, #2712	; 0xa98
   baf84:	4353      	muls	r3, r2
   baf86:	221c      	movs	r2, #28
   baf88:	fb02 3307 	mla	r3, r2, r7, r3
   baf8c:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   baf8e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
   baf90:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   baf94:	f108 0802 	add.w	r8, r8, #2
   baf98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_1_exists) {
   baf9c:	4b55      	ldr	r3, [pc, #340]	; (bb0f4 <_Z6OBS_Dov+0xa14>)
   baf9e:	781b      	ldrb	r3, [r3, #0]
   bafa0:	2b00      	cmp	r3, #0
   bafa2:	f001 822d 	beq.w	bc400 <_Z6OBS_Dov+0x1d20>
    strcpy (obs[oidx].sensor[sidx].id, "st1");
   bafa6:	261c      	movs	r6, #28
   bafa8:	fb06 f608 	mul.w	r6, r6, r8
   bafac:	19a8      	adds	r0, r5, r6
   bafae:	4952      	ldr	r1, [pc, #328]	; (bb0f8 <_Z6OBS_Dov+0xa18>)
   bafb0:	4420      	add	r0, r4
   bafb2:	f00f f97b 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bafb6:	9a00      	ldr	r2, [sp, #0]
    t = sht1.readTemperature();
   bafb8:	4850      	ldr	r0, [pc, #320]	; (bb0fc <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bafba:	f640 2398 	movw	r3, #2712	; 0xa98
   bafbe:	fb03 6302 	mla	r3, r3, r2, r6
   bafc2:	4423      	add	r3, r4
   bafc4:	2200      	movs	r2, #0
   bafc6:	621a      	str	r2, [r3, #32]
    t = sht1.readTemperature();
   bafc8:	f006 f928 	bl	c121c <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bafcc:	eeb4 0a40 	vcmp.f32	s0, s0
   bafd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    t = sht1.readTemperature();
   bafd4:	eeb0 8a40 	vmov.f32	s16, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bafd8:	f181 820a 	bvs.w	bc3f0 <_Z6OBS_Dov+0x1d10>
   bafdc:	eddf 7a4c 	vldr	s15, [pc, #304]	; bb110 <_Z6OBS_Dov+0xa30>
   bafe0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bafe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bafe8:	f101 8202 	bmi.w	bc3f0 <_Z6OBS_Dov+0x1d10>
   bafec:	eddf 7a49 	vldr	s15, [pc, #292]	; bb114 <_Z6OBS_Dov+0xa34>
   baff0:	eeb4 0a67 	vcmp.f32	s0, s15
   baff4:	eddf 7a48 	vldr	s15, [pc, #288]	; bb118 <_Z6OBS_Dov+0xa38>
   baff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   baffc:	bfc8      	it	gt
   baffe:	eeb0 8a67 	vmovgt.f32	s16, s15
    obs[oidx].sensor[sidx].f_obs = t;
   bb002:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
   bb004:	493e      	ldr	r1, [pc, #248]	; (bb100 <_Z6OBS_Dov+0xa20>)
    obs[oidx].sensor[sidx].f_obs = t;
   bb006:	f640 2998 	movw	r9, #2712	; 0xa98
   bb00a:	f04f 0a1c 	mov.w	sl, #28
   bb00e:	fb09 f903 	mul.w	r9, r9, r3
   bb012:	fb0a 9308 	mla	r3, sl, r8, r9
   bb016:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb018:	f108 0701 	add.w	r7, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
   bb01c:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx++].inuse = true;
   bb020:	2201      	movs	r2, #1
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
   bb022:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bb024:	fb0a 9907 	mla	r9, sl, r7, r9
    obs[oidx].sensor[sidx++].inuse = true;
   bb028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    obs[oidx].sensor[sidx].f_obs = t;
   bb02c:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
   bb030:	4420      	add	r0, r4
    obs[oidx].sensor[sidx].type = F_OBS;
   bb032:	44a1      	add	r9, r4
    strcpy (obs[oidx].sensor[sidx].id, "sh1");
   bb034:	f00f f93a 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb038:	2300      	movs	r3, #0
    h = sht1.readHumidity();
   bb03a:	4830      	ldr	r0, [pc, #192]	; (bb0fc <_Z6OBS_Dov+0xa1c>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bb03c:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht1.readHumidity();
   bb040:	f006 f8fa 	bl	c1238 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb044:	eeb4 0a40 	vcmp.f32	s0, s0
   bb048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    h = sht1.readHumidity();
   bb04c:	eef0 9a40 	vmov.f32	s19, s0
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb050:	f181 81d2 	bvs.w	bc3f8 <_Z6OBS_Dov+0x1d18>
   bb054:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   bb058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb05c:	f101 81cc 	bmi.w	bc3f8 <_Z6OBS_Dov+0x1d18>
   bb060:	eddf 7a19 	vldr	s15, [pc, #100]	; bb0c8 <_Z6OBS_Dov+0x9e8>
   bb064:	eeb4 0a67 	vcmp.f32	s0, s15
   bb068:	eddf 7a2b 	vldr	s15, [pc, #172]	; bb118 <_Z6OBS_Dov+0xa38>
   bb06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb070:	bfc8      	it	gt
   bb072:	eef0 9a67 	vmovgt.f32	s19, s15
    obs[oidx].sensor[sidx].f_obs = h;
   bb076:	9a00      	ldr	r2, [sp, #0]
   bb078:	f640 2398 	movw	r3, #2712	; 0xa98
   bb07c:	4353      	muls	r3, r2
   bb07e:	221c      	movs	r2, #28
   bb080:	fb02 3307 	mla	r3, r2, r7, r3
   bb084:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb086:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
   bb088:	edc3 9a09 	vstr	s19, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb08c:	f108 0802 	add.w	r8, r8, #2
   bb090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (SHT_2_exists) {
   bb094:	4b1b      	ldr	r3, [pc, #108]	; (bb104 <_Z6OBS_Dov+0xa24>)
   bb096:	781b      	ldrb	r3, [r3, #0]
   bb098:	2b00      	cmp	r3, #0
   bb09a:	f000 80a2 	beq.w	bb1e2 <_Z6OBS_Dov+0xb02>
    strcpy (obs[oidx].sensor[sidx].id, "st2");
   bb09e:	261c      	movs	r6, #28
   bb0a0:	fb06 f608 	mul.w	r6, r6, r8
   bb0a4:	19a8      	adds	r0, r5, r6
   bb0a6:	4918      	ldr	r1, [pc, #96]	; (bb108 <_Z6OBS_Dov+0xa28>)
   bb0a8:	4420      	add	r0, r4
   bb0aa:	f00f f8ff 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb0ae:	9a00      	ldr	r2, [sp, #0]
    t = sht2.readTemperature();
   bb0b0:	4816      	ldr	r0, [pc, #88]	; (bb10c <_Z6OBS_Dov+0xa2c>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bb0b2:	f640 2398 	movw	r3, #2712	; 0xa98
   bb0b6:	fb03 6302 	mla	r3, r3, r2, r6
   bb0ba:	4423      	add	r3, r4
   bb0bc:	2200      	movs	r2, #0
   bb0be:	e02d      	b.n	bb11c <_Z6OBS_Dov+0xa3c>
   bb0c0:	2002da86 	.word	0x2002da86
   bb0c4:	2002e338 	.word	0x2002e338
   bb0c8:	42c80000 	.word	0x42c80000
   bb0cc:	2002e1e0 	.word	0x2002e1e0
   bb0d0:	43960000 	.word	0x43960000
   bb0d4:	44898000 	.word	0x44898000
   bb0d8:	000cb8d5 	.word	0x000cb8d5
   bb0dc:	000cb8d9 	.word	0x000cb8d9
   bb0e0:	000cb8dd 	.word	0x000cb8dd
   bb0e4:	2002dab0 	.word	0x2002dab0
   bb0e8:	000cb8e1 	.word	0x000cb8e1
   bb0ec:	2002e628 	.word	0x2002e628
   bb0f0:	000cb8e5 	.word	0x000cb8e5
   bb0f4:	2002df8c 	.word	0x2002df8c
   bb0f8:	000cb8e9 	.word	0x000cb8e9
   bb0fc:	2003e338 	.word	0x2003e338
   bb100:	000cb8ed 	.word	0x000cb8ed
   bb104:	2002df8d 	.word	0x2002df8d
   bb108:	000cb8f1 	.word	0x000cb8f1
   bb10c:	2003e348 	.word	0x2003e348
   bb110:	c2200000 	.word	0xc2200000
   bb114:	42700000 	.word	0x42700000
   bb118:	c479f99a 	.word	0xc479f99a
   bb11c:	621a      	str	r2, [r3, #32]
    t = sht2.readTemperature();
   bb11e:	f006 f87d 	bl	c121c <_ZN14Adafruit_SHT3115readTemperatureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb122:	eeb4 0a40 	vcmp.f32	s0, s0
   bb126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb12a:	f181 816f 	bvs.w	bc40c <_Z6OBS_Dov+0x1d2c>
   bb12e:	ed5f 7a08 	vldr	s15, [pc, #-32]	; bb110 <_Z6OBS_Dov+0xa30>
   bb132:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bb136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb13a:	f101 8167 	bmi.w	bc40c <_Z6OBS_Dov+0x1d2c>
   bb13e:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; bb114 <_Z6OBS_Dov+0xa34>
   bb142:	eeb4 0a67 	vcmp.f32	s0, s15
   bb146:	ed5f 7a0c 	vldr	s15, [pc, #-48]	; bb118 <_Z6OBS_Dov+0xa38>
   bb14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb14e:	bfc8      	it	gt
   bb150:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = t;
   bb154:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
   bb156:	49cc      	ldr	r1, [pc, #816]	; (bb488 <_Z6OBS_Dov+0xda8>)
    obs[oidx].sensor[sidx].f_obs = t;
   bb158:	f640 2998 	movw	r9, #2712	; 0xa98
   bb15c:	f04f 0a1c 	mov.w	sl, #28
   bb160:	fb09 f903 	mul.w	r9, r9, r3
   bb164:	fb0a 9308 	mla	r3, sl, r8, r9
   bb168:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb16a:	f108 0701 	add.w	r7, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
   bb16e:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx++].inuse = true;
   bb172:	2201      	movs	r2, #1
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
   bb174:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bb176:	fb0a 9907 	mla	r9, sl, r7, r9
    obs[oidx].sensor[sidx].f_obs = t;
   bb17a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb17e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
   bb182:	4420      	add	r0, r4
    obs[oidx].sensor[sidx].type = F_OBS;
   bb184:	44a1      	add	r9, r4
    strcpy (obs[oidx].sensor[sidx].id, "sh2");
   bb186:	f00f f891 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb18a:	2300      	movs	r3, #0
    h = sht2.readHumidity();
   bb18c:	48bf      	ldr	r0, [pc, #764]	; (bb48c <_Z6OBS_Dov+0xdac>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bb18e:	f8c9 3020 	str.w	r3, [r9, #32]
    h = sht2.readHumidity();
   bb192:	f006 f851 	bl	c1238 <_ZN14Adafruit_SHT3112readHumidityEv>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb196:	eeb4 0a40 	vcmp.f32	s0, s0
   bb19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb19e:	f181 8139 	bvs.w	bc414 <_Z6OBS_Dov+0x1d34>
   bb1a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   bb1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb1aa:	f101 8133 	bmi.w	bc414 <_Z6OBS_Dov+0x1d34>
   bb1ae:	eddf 7ab8 	vldr	s15, [pc, #736]	; bb490 <_Z6OBS_Dov+0xdb0>
   bb1b2:	eeb4 0a67 	vcmp.f32	s0, s15
   bb1b6:	eddf 7ac9 	vldr	s15, [pc, #804]	; bb4dc <_Z6OBS_Dov+0xdfc>
   bb1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb1be:	bfc8      	it	gt
   bb1c0:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = h;
   bb1c4:	9a00      	ldr	r2, [sp, #0]
   bb1c6:	f640 2398 	movw	r3, #2712	; 0xa98
   bb1ca:	4353      	muls	r3, r2
   bb1cc:	221c      	movs	r2, #28
   bb1ce:	fb02 3307 	mla	r3, r2, r7, r3
   bb1d2:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb1d4:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = h;
   bb1d6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb1da:	f108 0802 	add.w	r8, r8, #2
   bb1de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  if (HDC_1_exists) {
   bb1e2:	4bac      	ldr	r3, [pc, #688]	; (bb494 <_Z6OBS_Dov+0xdb4>)
   bb1e4:	f8df b2e8 	ldr.w	fp, [pc, #744]	; bb4d0 <_Z6OBS_Dov+0xdf0>
   bb1e8:	781b      	ldrb	r3, [r3, #0]
   bb1ea:	2b00      	cmp	r3, #0
   bb1ec:	f000 808d 	beq.w	bb30a <_Z6OBS_Dov+0xc2a>
    double t = -999.9;
   bb1f0:	f20f 2a8c 	addw	sl, pc, #652	; 0x28c
   bb1f4:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
   bb1f8:	48a7      	ldr	r0, [pc, #668]	; (bb498 <_Z6OBS_Dov+0xdb8>)
   bb1fa:	f44f 5310 	mov.w	r3, #9216	; 0x2400
   bb1fe:	aa0c      	add	r2, sp, #48	; 0x30
   bb200:	a902      	add	r1, sp, #8
    double t = -999.9;
   bb202:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
   bb206:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc1.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
   bb20a:	f005 fba1 	bl	c0950 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
   bb20e:	2800      	cmp	r0, #0
   bb210:	f001 813b 	beq.w	bc48a <_Z6OBS_Dov+0x1daa>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb214:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   bb218:	4632      	mov	r2, r6
   bb21a:	463b      	mov	r3, r7
   bb21c:	4630      	mov	r0, r6
   bb21e:	4639      	mov	r1, r7
   bb220:	f7f9 fb54 	bl	b48cc <__aeabi_dcmpun>
   bb224:	2800      	cmp	r0, #0
   bb226:	f041 80f9 	bne.w	bc41c <_Z6OBS_Dov+0x1d3c>
   bb22a:	4b9c      	ldr	r3, [pc, #624]	; (bb49c <_Z6OBS_Dov+0xdbc>)
   bb22c:	2200      	movs	r2, #0
   bb22e:	4630      	mov	r0, r6
   bb230:	4639      	mov	r1, r7
   bb232:	f7f9 fb23 	bl	b487c <__aeabi_dcmplt>
   bb236:	2800      	cmp	r0, #0
   bb238:	f041 80f0 	bne.w	bc41c <_Z6OBS_Dov+0x1d3c>
   bb23c:	4b98      	ldr	r3, [pc, #608]	; (bb4a0 <_Z6OBS_Dov+0xdc0>)
   bb23e:	2200      	movs	r2, #0
   bb240:	4630      	mov	r0, r6
   bb242:	4639      	mov	r1, r7
   bb244:	f7f9 fb38 	bl	b48b8 <__aeabi_dcmpgt>
   bb248:	2800      	cmp	r0, #0
   bb24a:	f041 80e7 	bne.w	bc41c <_Z6OBS_Dov+0x1d3c>
   bb24e:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb252:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   bb256:	4632      	mov	r2, r6
   bb258:	463b      	mov	r3, r7
   bb25a:	4630      	mov	r0, r6
   bb25c:	4639      	mov	r1, r7
   bb25e:	f7f9 fb35 	bl	b48cc <__aeabi_dcmpun>
   bb262:	2800      	cmp	r0, #0
   bb264:	f041 810c 	bne.w	bc480 <_Z6OBS_Dov+0x1da0>
   bb268:	2200      	movs	r2, #0
   bb26a:	2300      	movs	r3, #0
   bb26c:	4630      	mov	r0, r6
   bb26e:	4639      	mov	r1, r7
   bb270:	f7f9 fb04 	bl	b487c <__aeabi_dcmplt>
   bb274:	2800      	cmp	r0, #0
   bb276:	f041 8103 	bne.w	bc480 <_Z6OBS_Dov+0x1da0>
   bb27a:	4b8a      	ldr	r3, [pc, #552]	; (bb4a4 <_Z6OBS_Dov+0xdc4>)
   bb27c:	2200      	movs	r2, #0
   bb27e:	4630      	mov	r0, r6
   bb280:	4639      	mov	r1, r7
   bb282:	f7f9 fb19 	bl	b48b8 <__aeabi_dcmpgt>
   bb286:	2800      	cmp	r0, #0
   bb288:	f041 80fa 	bne.w	bc480 <_Z6OBS_Dov+0x1da0>
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
   bb28c:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb290:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_1;  // Turn Off Bit
   bb294:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
   bb298:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt1");
   bb29c:	231c      	movs	r3, #28
   bb29e:	fb03 f708 	mul.w	r7, r3, r8
   bb2a2:	19e8      	adds	r0, r5, r7
   bb2a4:	4980      	ldr	r1, [pc, #512]	; (bb4a8 <_Z6OBS_Dov+0xdc8>)
   bb2a6:	4420      	add	r0, r4
   bb2a8:	f00f f800 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb2ac:	9b00      	ldr	r3, [sp, #0]
   bb2ae:	f640 2698 	movw	r6, #2712	; 0xa98
   bb2b2:	435e      	muls	r6, r3
   bb2b4:	eb07 0906 	add.w	r9, r7, r6
   bb2b8:	44a1      	add	r9, r4
   bb2ba:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bb2bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
   bb2c0:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bb2c4:	f7f9 fb60 	bl	b4988 <__aeabi_d2f>
   bb2c8:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
   bb2cc:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx++].inuse = true;
   bb2d0:	f04f 0a01 	mov.w	sl, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
   bb2d4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bb2d6:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
   bb2da:	4974      	ldr	r1, [pc, #464]	; (bb4ac <_Z6OBS_Dov+0xdcc>)
    obs[oidx].sensor[sidx++].inuse = true;
   bb2dc:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
   bb2e0:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb2e2:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh1");
   bb2e4:	f00e ffe2 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb2e8:	9b01      	ldr	r3, [sp, #4]
   bb2ea:	461a      	mov	r2, r3
   bb2ec:	231c      	movs	r3, #28
   bb2ee:	fb03 6602 	mla	r6, r3, r2, r6
   bb2f2:	4426      	add	r6, r4
   bb2f4:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx].f_obs = (float) h;
   bb2f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
   bb2fa:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
   bb2fc:	f7f9 fb44 	bl	b4988 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
   bb300:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = (float) h;
   bb304:	6270      	str	r0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb306:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (HDC_2_exists) {
   bb30a:	4b69      	ldr	r3, [pc, #420]	; (bb4b0 <_Z6OBS_Dov+0xdd0>)
   bb30c:	781b      	ldrb	r3, [r3, #0]
   bb30e:	2b00      	cmp	r3, #0
   bb310:	f000 808d 	beq.w	bb42e <_Z6OBS_Dov+0xd4e>
    double t = -999.9;
   bb314:	f20f 1a68 	addw	sl, pc, #360	; 0x168
   bb318:	e9da 9a00 	ldrd	r9, sl, [sl]
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
   bb31c:	4865      	ldr	r0, [pc, #404]	; (bb4b4 <_Z6OBS_Dov+0xdd4>)
   bb31e:	f44f 5310 	mov.w	r3, #9216	; 0x2400
   bb322:	aa0c      	add	r2, sp, #48	; 0x30
   bb324:	a902      	add	r1, sp, #8
    double t = -999.9;
   bb326:	e9cd 9a02 	strd	r9, sl, [sp, #8]
    double h = -999.9;
   bb32a:	e9cd 9a0c 	strd	r9, sl, [sp, #48]	; 0x30
    if (hdc2.readTemperatureHumidityOnDemand(t, h, TRIGGERMODE_LP0)) {
   bb32e:	f005 fb0f 	bl	c0950 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>
   bb332:	2800      	cmp	r0, #0
   bb334:	f001 80bb 	beq.w	bc4ae <_Z6OBS_Dov+0x1dce>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb338:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   bb33c:	4632      	mov	r2, r6
   bb33e:	463b      	mov	r3, r7
   bb340:	4630      	mov	r0, r6
   bb342:	4639      	mov	r1, r7
   bb344:	f7f9 fac2 	bl	b48cc <__aeabi_dcmpun>
   bb348:	2800      	cmp	r0, #0
   bb34a:	f041 80a7 	bne.w	bc49c <_Z6OBS_Dov+0x1dbc>
   bb34e:	4b53      	ldr	r3, [pc, #332]	; (bb49c <_Z6OBS_Dov+0xdbc>)
   bb350:	2200      	movs	r2, #0
   bb352:	4630      	mov	r0, r6
   bb354:	4639      	mov	r1, r7
   bb356:	f7f9 fa91 	bl	b487c <__aeabi_dcmplt>
   bb35a:	2800      	cmp	r0, #0
   bb35c:	f041 809e 	bne.w	bc49c <_Z6OBS_Dov+0x1dbc>
   bb360:	4b4f      	ldr	r3, [pc, #316]	; (bb4a0 <_Z6OBS_Dov+0xdc0>)
   bb362:	2200      	movs	r2, #0
   bb364:	4630      	mov	r0, r6
   bb366:	4639      	mov	r1, r7
   bb368:	f7f9 faa6 	bl	b48b8 <__aeabi_dcmpgt>
   bb36c:	2800      	cmp	r0, #0
   bb36e:	f041 8095 	bne.w	bc49c <_Z6OBS_Dov+0x1dbc>
   bb372:	e9cd 6702 	strd	r6, r7, [sp, #8]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb376:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
   bb37a:	4632      	mov	r2, r6
   bb37c:	463b      	mov	r3, r7
   bb37e:	4630      	mov	r0, r6
   bb380:	4639      	mov	r1, r7
   bb382:	f7f9 faa3 	bl	b48cc <__aeabi_dcmpun>
   bb386:	2800      	cmp	r0, #0
   bb388:	f041 808c 	bne.w	bc4a4 <_Z6OBS_Dov+0x1dc4>
   bb38c:	2200      	movs	r2, #0
   bb38e:	2300      	movs	r3, #0
   bb390:	4630      	mov	r0, r6
   bb392:	4639      	mov	r1, r7
   bb394:	f7f9 fa72 	bl	b487c <__aeabi_dcmplt>
   bb398:	2800      	cmp	r0, #0
   bb39a:	f041 8083 	bne.w	bc4a4 <_Z6OBS_Dov+0x1dc4>
   bb39e:	4b41      	ldr	r3, [pc, #260]	; (bb4a4 <_Z6OBS_Dov+0xdc4>)
   bb3a0:	2200      	movs	r2, #0
   bb3a2:	4630      	mov	r0, r6
   bb3a4:	4639      	mov	r1, r7
   bb3a6:	f7f9 fa87 	bl	b48b8 <__aeabi_dcmpgt>
   bb3aa:	2800      	cmp	r0, #0
   bb3ac:	f041 807a 	bne.w	bc4a4 <_Z6OBS_Dov+0x1dc4>
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
   bb3b0:	f8db 3000 	ldr.w	r3, [fp]
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb3b4:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
      SystemStatusBits &= ~ SSB_HDC_2;  // Turn Off Bit
   bb3b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
   bb3bc:	f8cb 3000 	str.w	r3, [fp]
    strcpy (obs[oidx].sensor[sidx].id, "hdt2");
   bb3c0:	231c      	movs	r3, #28
   bb3c2:	fb03 f708 	mul.w	r7, r3, r8
   bb3c6:	19e8      	adds	r0, r5, r7
   bb3c8:	493b      	ldr	r1, [pc, #236]	; (bb4b8 <_Z6OBS_Dov+0xdd8>)
   bb3ca:	4420      	add	r0, r4
   bb3cc:	f00e ff6e 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb3d0:	9b00      	ldr	r3, [sp, #0]
   bb3d2:	f640 2698 	movw	r6, #2712	; 0xa98
   bb3d6:	435e      	muls	r6, r3
   bb3d8:	eb07 0906 	add.w	r9, r7, r6
   bb3dc:	44a1      	add	r9, r4
   bb3de:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bb3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    obs[oidx].sensor[sidx].type = F_OBS;
   bb3e4:	f8c9 2020 	str.w	r2, [r9, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bb3e8:	f7f9 face 	bl	b4988 <__aeabi_d2f>
   bb3ec:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
   bb3f0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx++].inuse = true;
   bb3f4:	f04f 0a01 	mov.w	sl, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
   bb3f8:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bb3fa:	f108 0301 	add.w	r3, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
   bb3fe:	492f      	ldr	r1, [pc, #188]	; (bb4bc <_Z6OBS_Dov+0xddc>)
    obs[oidx].sensor[sidx++].inuse = true;
   bb400:	f889 a030 	strb.w	sl, [r9, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
   bb404:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb406:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hdh2");
   bb408:	f00e ff50 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb40c:	9b01      	ldr	r3, [sp, #4]
   bb40e:	461a      	mov	r2, r3
   bb410:	231c      	movs	r3, #28
   bb412:	fb03 6602 	mla	r6, r3, r2, r6
   bb416:	4426      	add	r6, r4
   bb418:	2200      	movs	r2, #0
    obs[oidx].sensor[sidx].f_obs = (float) h;
   bb41a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
   bb41e:	6232      	str	r2, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) h;
   bb420:	f7f9 fab2 	bl	b4988 <__aeabi_d2f>
    obs[oidx].sensor[sidx++].inuse = true;
   bb424:	f108 0802 	add.w	r8, r8, #2
    obs[oidx].sensor[sidx].f_obs = (float) h;
   bb428:	6270      	str	r0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb42a:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (LPS_1_exists) {
   bb42e:	4b24      	ldr	r3, [pc, #144]	; (bb4c0 <_Z6OBS_Dov+0xde0>)
   bb430:	781b      	ldrb	r3, [r3, #0]
   bb432:	2b00      	cmp	r3, #0
   bb434:	f000 809c 	beq.w	bb570 <_Z6OBS_Dov+0xe90>
    float t = lps1.readTemperature();
   bb438:	4822      	ldr	r0, [pc, #136]	; (bb4c4 <_Z6OBS_Dov+0xde4>)
   bb43a:	f005 fbd1 	bl	c0be0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    float p = lps1.readPressure();
   bb43e:	4821      	ldr	r0, [pc, #132]	; (bb4c4 <_Z6OBS_Dov+0xde4>)
    float t = lps1.readTemperature();
   bb440:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps1.readPressure();
   bb444:	f005 fbee 	bl	c0c24 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb448:	eeb4 aa4a 	vcmp.f32	s20, s20
   bb44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps1.readPressure();
   bb450:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb454:	f181 8034 	bvs.w	bc4c0 <_Z6OBS_Dov+0x1de0>
   bb458:	eddf 7a1b 	vldr	s15, [pc, #108]	; bb4c8 <_Z6OBS_Dov+0xde8>
   bb45c:	eeb4 aae7 	vcmpe.f32	s20, s15
   bb460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb464:	f101 802c 	bmi.w	bc4c0 <_Z6OBS_Dov+0x1de0>
   bb468:	eddf 7a18 	vldr	s15, [pc, #96]	; bb4cc <_Z6OBS_Dov+0xdec>
   bb46c:	eeb4 aa67 	vcmp.f32	s20, s15
   bb470:	eddf 7a1a 	vldr	s15, [pc, #104]	; bb4dc <_Z6OBS_Dov+0xdfc>
   bb474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb478:	bfc8      	it	gt
   bb47a:	eeb0 aa67 	vmovgt.f32	s20, s15
   bb47e:	e02f      	b.n	bb4e0 <_Z6OBS_Dov+0xe00>
   bb480:	33333333 	.word	0x33333333
   bb484:	c08f3f33 	.word	0xc08f3f33
   bb488:	000cb8f5 	.word	0x000cb8f5
   bb48c:	2003e348 	.word	0x2003e348
   bb490:	42c80000 	.word	0x42c80000
   bb494:	2002daac 	.word	0x2002daac
   bb498:	2002e618 	.word	0x2002e618
   bb49c:	c0440000 	.word	0xc0440000
   bb4a0:	404e0000 	.word	0x404e0000
   bb4a4:	40590000 	.word	0x40590000
   bb4a8:	000cb907 	.word	0x000cb907
   bb4ac:	000cb90c 	.word	0x000cb90c
   bb4b0:	2002daad 	.word	0x2002daad
   bb4b4:	2002e620 	.word	0x2002e620
   bb4b8:	000cb911 	.word	0x000cb911
   bb4bc:	000cb916 	.word	0x000cb916
   bb4c0:	2002dab2 	.word	0x2002dab2
   bb4c4:	20032858 	.word	0x20032858
   bb4c8:	c2200000 	.word	0xc2200000
   bb4cc:	42700000 	.word	0x42700000
   bb4d0:	2002d908 	.word	0x2002d908
   bb4d4:	43960000 	.word	0x43960000
   bb4d8:	44898000 	.word	0x44898000
   bb4dc:	c479f99a 	.word	0xc479f99a
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bb4e0:	eef4 8a68 	vcmp.f32	s17, s17
   bb4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb4e8:	f180 87ee 	bvs.w	bc4c8 <_Z6OBS_Dov+0x1de8>
   bb4ec:	ed5f 7a07 	vldr	s15, [pc, #-28]	; bb4d4 <_Z6OBS_Dov+0xdf4>
   bb4f0:	eef4 8ae7 	vcmpe.f32	s17, s15
   bb4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb4f8:	f100 87e6 	bmi.w	bc4c8 <_Z6OBS_Dov+0x1de8>
   bb4fc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; bb4d8 <_Z6OBS_Dov+0xdf8>
   bb500:	eef4 8a67 	vcmp.f32	s17, s15
   bb504:	ed5f 7a0b 	vldr	s15, [pc, #-44]	; bb4dc <_Z6OBS_Dov+0xdfc>
   bb508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb50c:	bfc8      	it	gt
   bb50e:	eef0 8a67 	vmovgt.f32	s17, s15
    strcpy (obs[oidx].sensor[sidx].id, "lpt1");
   bb512:	231c      	movs	r3, #28
   bb514:	fb03 f708 	mul.w	r7, r3, r8
   bb518:	19e8      	adds	r0, r5, r7
   bb51a:	49da      	ldr	r1, [pc, #872]	; (bb884 <_Z6OBS_Dov+0x11a4>)
   bb51c:	4420      	add	r0, r4
   bb51e:	f00e fec5 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb522:	9b00      	ldr	r3, [sp, #0]
   bb524:	f640 2698 	movw	r6, #2712	; 0xa98
   bb528:	435e      	muls	r6, r3
   bb52a:	19b9      	adds	r1, r7, r6
   bb52c:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
   bb52e:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
   bb532:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bb536:	f04f 0901 	mov.w	r9, #1
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
   bb53a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bb53c:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
   bb540:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bb544:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb548:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
   bb54c:	4420      	add	r0, r4
   bb54e:	49ce      	ldr	r1, [pc, #824]	; (bb888 <_Z6OBS_Dov+0x11a8>)
    obs[oidx].sensor[sidx++].inuse = true;
   bb550:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp1");
   bb552:	f00e feab 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb556:	9a01      	ldr	r2, [sp, #4]
   bb558:	231c      	movs	r3, #28
   bb55a:	fb03 6602 	mla	r6, r3, r2, r6
   bb55e:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
   bb560:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bb564:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bb568:	f108 0802 	add.w	r8, r8, #2
   bb56c:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (LPS_2_exists) {
   bb570:	4bc6      	ldr	r3, [pc, #792]	; (bb88c <_Z6OBS_Dov+0x11ac>)
   bb572:	781b      	ldrb	r3, [r3, #0]
   bb574:	2b00      	cmp	r3, #0
   bb576:	d06a      	beq.n	bb64e <_Z6OBS_Dov+0xf6e>
    float t = lps2.readTemperature();
   bb578:	48c5      	ldr	r0, [pc, #788]	; (bb890 <_Z6OBS_Dov+0x11b0>)
   bb57a:	f005 fb31 	bl	c0be0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>
    float p = lps2.readPressure();
   bb57e:	48c4      	ldr	r0, [pc, #784]	; (bb890 <_Z6OBS_Dov+0x11b0>)
    float t = lps2.readTemperature();
   bb580:	eeb0 aa40 	vmov.f32	s20, s0
    float p = lps2.readPressure();
   bb584:	f005 fb4e 	bl	c0c24 <_ZN16Adafruit_LPS35HW12readPressureEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb588:	eeb4 aa4a 	vcmp.f32	s20, s20
   bb58c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float p = lps2.readPressure();
   bb590:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb594:	f180 879c 	bvs.w	bc4d0 <_Z6OBS_Dov+0x1df0>
   bb598:	eddf 7abe 	vldr	s15, [pc, #760]	; bb894 <_Z6OBS_Dov+0x11b4>
   bb59c:	eeb4 aae7 	vcmpe.f32	s20, s15
   bb5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb5a4:	f100 8794 	bmi.w	bc4d0 <_Z6OBS_Dov+0x1df0>
   bb5a8:	eddf 7abb 	vldr	s15, [pc, #748]	; bb898 <_Z6OBS_Dov+0x11b8>
   bb5ac:	eeb4 aa67 	vcmp.f32	s20, s15
   bb5b0:	eddf 7ace 	vldr	s15, [pc, #824]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb5b8:	bfc8      	it	gt
   bb5ba:	eeb0 aa67 	vmovgt.f32	s20, s15
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bb5be:	eef4 8a68 	vcmp.f32	s17, s17
   bb5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb5c6:	f180 8787 	bvs.w	bc4d8 <_Z6OBS_Dov+0x1df8>
   bb5ca:	eddf 7ab4 	vldr	s15, [pc, #720]	; bb89c <_Z6OBS_Dov+0x11bc>
   bb5ce:	eef4 8ae7 	vcmpe.f32	s17, s15
   bb5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb5d6:	f100 877f 	bmi.w	bc4d8 <_Z6OBS_Dov+0x1df8>
   bb5da:	eddf 7ab1 	vldr	s15, [pc, #708]	; bb8a0 <_Z6OBS_Dov+0x11c0>
   bb5de:	eef4 8a67 	vcmp.f32	s17, s15
   bb5e2:	eddf 7ac2 	vldr	s15, [pc, #776]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb5ea:	bfc8      	it	gt
   bb5ec:	eef0 8a67 	vmovgt.f32	s17, s15
    strcpy (obs[oidx].sensor[sidx].id, "lpt2");
   bb5f0:	231c      	movs	r3, #28
   bb5f2:	fb03 f708 	mul.w	r7, r3, r8
   bb5f6:	19e8      	adds	r0, r5, r7
   bb5f8:	49aa      	ldr	r1, [pc, #680]	; (bb8a4 <_Z6OBS_Dov+0x11c4>)
   bb5fa:	4420      	add	r0, r4
   bb5fc:	f00e fe56 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb600:	9b00      	ldr	r3, [sp, #0]
   bb602:	f640 2698 	movw	r6, #2712	; 0xa98
   bb606:	435e      	muls	r6, r3
   bb608:	19b9      	adds	r1, r7, r6
   bb60a:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
   bb60c:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
   bb610:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bb614:	f04f 0901 	mov.w	r9, #1
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
   bb618:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bb61a:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
   bb61e:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bb622:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb626:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
   bb62a:	4420      	add	r0, r4
   bb62c:	499e      	ldr	r1, [pc, #632]	; (bb8a8 <_Z6OBS_Dov+0x11c8>)
    obs[oidx].sensor[sidx++].inuse = true;
   bb62e:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "lpp2");
   bb630:	f00e fe3c 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb634:	9a01      	ldr	r2, [sp, #4]
   bb636:	231c      	movs	r3, #28
   bb638:	fb03 6602 	mla	r6, r3, r2, r6
   bb63c:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = (float) p;
   bb63e:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bb642:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bb646:	f108 0802 	add.w	r8, r8, #2
   bb64a:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (HIH8_exists) {
   bb64e:	4b97      	ldr	r3, [pc, #604]	; (bb8ac <_Z6OBS_Dov+0x11cc>)
   bb650:	781b      	ldrb	r3, [r3, #0]
   bb652:	2b00      	cmp	r3, #0
   bb654:	d06d      	beq.n	bb732 <_Z6OBS_Dov+0x1052>
    float t = 0.0;
   bb656:	2600      	movs	r6, #0
    bool status = hih8_getTempHumid(&t, &h);
   bb658:	a90c      	add	r1, sp, #48	; 0x30
   bb65a:	a802      	add	r0, sp, #8
    float t = 0.0;
   bb65c:	9602      	str	r6, [sp, #8]
    float h = 0.0;
   bb65e:	960c      	str	r6, [sp, #48]	; 0x30
    bool status = hih8_getTempHumid(&t, &h);
   bb660:	f7fb fb6e 	bl	b6d40 <_Z17hih8_getTempHumidPfS_>
    if (!status) {
   bb664:	b910      	cbnz	r0, bb66c <_Z6OBS_Dov+0xf8c>
      t = -999.99;
   bb666:	4b92      	ldr	r3, [pc, #584]	; (bb8b0 <_Z6OBS_Dov+0x11d0>)
   bb668:	9302      	str	r3, [sp, #8]
      h = 0.0;
   bb66a:	960c      	str	r6, [sp, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb66c:	ed9d aa02 	vldr	s20, [sp, #8]
   bb670:	eeb4 aa4a 	vcmp.f32	s20, s20
   bb674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb678:	f180 8732 	bvs.w	bc4e0 <_Z6OBS_Dov+0x1e00>
   bb67c:	eddf 7a85 	vldr	s15, [pc, #532]	; bb894 <_Z6OBS_Dov+0x11b4>
   bb680:	eeb4 aae7 	vcmpe.f32	s20, s15
   bb684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb688:	f100 872a 	bmi.w	bc4e0 <_Z6OBS_Dov+0x1e00>
   bb68c:	eddf 7a82 	vldr	s15, [pc, #520]	; bb898 <_Z6OBS_Dov+0x11b8>
   bb690:	eeb4 aa67 	vcmp.f32	s20, s15
   bb694:	eddf 7a95 	vldr	s15, [pc, #596]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb69c:	bfc8      	it	gt
   bb69e:	eeb0 aa67 	vmovgt.f32	s20, s15
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bb6a2:	eddd 8a0c 	vldr	s17, [sp, #48]	; 0x30
   bb6a6:	eef4 8a68 	vcmp.f32	s17, s17
   bb6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb6ae:	f180 871b 	bvs.w	bc4e8 <_Z6OBS_Dov+0x1e08>
   bb6b2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   bb6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb6ba:	f100 8715 	bmi.w	bc4e8 <_Z6OBS_Dov+0x1e08>
   bb6be:	eddf 7a7d 	vldr	s15, [pc, #500]	; bb8b4 <_Z6OBS_Dov+0x11d4>
   bb6c2:	eef4 8a67 	vcmp.f32	s17, s15
   bb6c6:	eddf 7a89 	vldr	s15, [pc, #548]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb6ce:	bfc8      	it	gt
   bb6d0:	eef0 8a67 	vmovgt.f32	s17, s15
    strcpy (obs[oidx].sensor[sidx].id, "ht2");
   bb6d4:	231c      	movs	r3, #28
   bb6d6:	fb03 f708 	mul.w	r7, r3, r8
   bb6da:	19e8      	adds	r0, r5, r7
   bb6dc:	4976      	ldr	r1, [pc, #472]	; (bb8b8 <_Z6OBS_Dov+0x11d8>)
   bb6de:	4420      	add	r0, r4
   bb6e0:	f00e fde4 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb6e4:	9b00      	ldr	r3, [sp, #0]
   bb6e6:	f640 2698 	movw	r6, #2712	; 0xa98
   bb6ea:	435e      	muls	r6, r3
   bb6ec:	19b9      	adds	r1, r7, r6
   bb6ee:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
   bb6f0:	f107 001c 	add.w	r0, r7, #28
    obs[oidx].sensor[sidx].type = F_OBS;
   bb6f4:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bb6f8:	f04f 0901 	mov.w	r9, #1
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
   bb6fc:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bb6fe:	f108 0201 	add.w	r2, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
   bb702:	f8c1 a020 	str.w	sl, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = t;
   bb706:	ed81 aa09 	vstr	s20, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb70a:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
   bb70e:	4420      	add	r0, r4
   bb710:	496a      	ldr	r1, [pc, #424]	; (bb8bc <_Z6OBS_Dov+0x11dc>)
    obs[oidx].sensor[sidx++].inuse = true;
   bb712:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "hh2");
   bb714:	f00e fdca 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb718:	9a01      	ldr	r2, [sp, #4]
   bb71a:	231c      	movs	r3, #28
   bb71c:	fb03 6602 	mla	r6, r3, r2, r6
   bb720:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = h;
   bb722:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bb726:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bb72a:	f108 0802 	add.w	r8, r8, #2
   bb72e:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
  if (SI1145_exists) {
   bb732:	4e63      	ldr	r6, [pc, #396]	; (bb8c0 <_Z6OBS_Dov+0x11e0>)
   bb734:	7833      	ldrb	r3, [r6, #0]
   bb736:	2b00      	cmp	r3, #0
   bb738:	f000 811f 	beq.w	bb97a <_Z6OBS_Dov+0x129a>
    float si_vis = uv.readVisible();
   bb73c:	4861      	ldr	r0, [pc, #388]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
   bb73e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; bb8e4 <_Z6OBS_Dov+0x1204>
   bb742:	f8df 91a4 	ldr.w	r9, [pc, #420]	; bb8e8 <_Z6OBS_Dov+0x1208>
   bb746:	4f60      	ldr	r7, [pc, #384]	; (bb8c8 <_Z6OBS_Dov+0x11e8>)
   bb748:	f005 fdcb 	bl	c12e2 <_ZN15Adafruit_SI114511readVisibleEv>
   bb74c:	ee07 0a90 	vmov	s15, r0
    float si_ir = uv.readIR();
   bb750:	485c      	ldr	r0, [pc, #368]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
    float si_vis = uv.readVisible();
   bb752:	eef8 aa67 	vcvt.f32.u32	s21, s15
    float si_ir = uv.readIR();
   bb756:	f005 fdc7 	bl	c12e8 <_ZN15Adafruit_SI11456readIREv>
   bb75a:	ee07 0a90 	vmov	s15, r0
    float si_uv = uv.readUV()/100.0;
   bb75e:	4859      	ldr	r0, [pc, #356]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
    float si_ir = uv.readIR();
   bb760:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    float si_uv = uv.readUV()/100.0;
   bb764:	f005 fdba 	bl	c12dc <_ZN15Adafruit_SI11456readUVEv>
   bb768:	f7f8 fdac 	bl	b42c4 <__aeabi_i2d>
   bb76c:	4b57      	ldr	r3, [pc, #348]	; (bb8cc <_Z6OBS_Dov+0x11ec>)
   bb76e:	2200      	movs	r2, #0
   bb770:	f7f8 ff3c 	bl	b45ec <__aeabi_ddiv>
   bb774:	f7f9 f908 	bl	b4988 <__aeabi_d2f>
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
   bb778:	ee7a 7a8a 	vadd.f32	s15, s21, s20
    float si_uv = uv.readUV()/100.0;
   bb77c:	ee08 0a90 	vmov	s17, r0
    if ( ((si_vis+si_ir+si_uv) == 0.0) && ((si_last_vis+si_last_ir+si_last_uv) != 0.0) ) {
   bb780:	ee77 7aa8 	vadd.f32	s15, s15, s17
   bb784:	eef5 7a40 	vcmp.f32	s15, #0.0
   bb788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb78c:	d141      	bne.n	bb812 <_Z6OBS_Dov+0x1132>
   bb78e:	ed99 7a00 	vldr	s14, [r9]
   bb792:	edda 7a00 	vldr	s15, [sl]
   bb796:	ee77 7a87 	vadd.f32	s15, s15, s14
   bb79a:	ed97 7a00 	vldr	s14, [r7]
   bb79e:	ee77 7a87 	vadd.f32	s15, s15, s14
   bb7a2:	eef5 7a40 	vcmp.f32	s15, #0.0
   bb7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb7aa:	d032      	beq.n	bb812 <_Z6OBS_Dov+0x1132>
      Output ("SI RESET");
   bb7ac:	4848      	ldr	r0, [pc, #288]	; (bb8d0 <_Z6OBS_Dov+0x11f0>)
   bb7ae:	f7fa fced 	bl	b618c <_Z6OutputPKc>
      if (uv.begin()) {
   bb7b2:	f00b ffa1 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bb7b6:	2160      	movs	r1, #96	; 0x60
   bb7b8:	4602      	mov	r2, r0
   bb7ba:	4842      	ldr	r0, [pc, #264]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
   bb7bc:	f005 fdf6 	bl	c13ac <_ZN15Adafruit_SI11455beginEhP7TwoWire>
   bb7c0:	2800      	cmp	r0, #0
   bb7c2:	f000 8695 	beq.w	bc4f0 <_Z6OBS_Dov+0x1e10>
        SI1145_exists = true;
   bb7c6:	2301      	movs	r3, #1
        Output ("SI ONLINE");
   bb7c8:	4842      	ldr	r0, [pc, #264]	; (bb8d4 <_Z6OBS_Dov+0x11f4>)
        SI1145_exists = true;
   bb7ca:	7033      	strb	r3, [r6, #0]
        Output ("SI ONLINE");
   bb7cc:	f7fa fcde 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
   bb7d0:	f8db 3000 	ldr.w	r3, [fp]
        si_vis = uv.readVisible();
   bb7d4:	483b      	ldr	r0, [pc, #236]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
        SystemStatusBits &= ~SSB_SI1145; // Turn Off Bit
   bb7d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   bb7da:	f8cb 3000 	str.w	r3, [fp]
        si_vis = uv.readVisible();
   bb7de:	f005 fd80 	bl	c12e2 <_ZN15Adafruit_SI114511readVisibleEv>
   bb7e2:	ee07 0a90 	vmov	s15, r0
        si_ir = uv.readIR();
   bb7e6:	4837      	ldr	r0, [pc, #220]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
        si_vis = uv.readVisible();
   bb7e8:	eef8 aa67 	vcvt.f32.u32	s21, s15
        si_ir = uv.readIR();
   bb7ec:	f005 fd7c 	bl	c12e8 <_ZN15Adafruit_SI11456readIREv>
   bb7f0:	ee07 0a90 	vmov	s15, r0
        si_uv = uv.readUV()/100.0;
   bb7f4:	4833      	ldr	r0, [pc, #204]	; (bb8c4 <_Z6OBS_Dov+0x11e4>)
        si_ir = uv.readIR();
   bb7f6:	eeb8 aa67 	vcvt.f32.u32	s20, s15
        si_uv = uv.readUV()/100.0;
   bb7fa:	f005 fd6f 	bl	c12dc <_ZN15Adafruit_SI11456readUVEv>
   bb7fe:	f7f8 fd61 	bl	b42c4 <__aeabi_i2d>
   bb802:	4b32      	ldr	r3, [pc, #200]	; (bb8cc <_Z6OBS_Dov+0x11ec>)
   bb804:	2200      	movs	r2, #0
   bb806:	f7f8 fef1 	bl	b45ec <__aeabi_ddiv>
   bb80a:	f7f9 f8bd 	bl	b4988 <__aeabi_d2f>
   bb80e:	ee08 0a90 	vmov	s17, r0
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
   bb812:	eef4 aa6a 	vcmp.f32	s21, s21
   bb816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    si_last_vis = si_vis;
   bb81a:	edca aa00 	vstr	s21, [sl]
    si_last_ir = si_ir;
   bb81e:	ed89 aa00 	vstr	s20, [r9]
    si_last_uv = si_uv;
   bb822:	edc7 8a00 	vstr	s17, [r7]
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
   bb826:	f180 866f 	bvs.w	bc508 <_Z6OBS_Dov+0x1e28>
   bb82a:	eddf 7a2b 	vldr	s15, [pc, #172]	; bb8d8 <_Z6OBS_Dov+0x11f8>
   bb82e:	eef4 aa67 	vcmp.f32	s21, s15
   bb832:	eddf 7a2e 	vldr	s15, [pc, #184]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb83a:	bfc8      	it	gt
   bb83c:	eef0 aa67 	vmovgt.f32	s21, s15
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
   bb840:	eeb4 aa4a 	vcmp.f32	s20, s20
   bb844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb848:	f180 8662 	bvs.w	bc510 <_Z6OBS_Dov+0x1e30>
   bb84c:	eddf 7a23 	vldr	s15, [pc, #140]	; bb8dc <_Z6OBS_Dov+0x11fc>
   bb850:	eeb4 aa67 	vcmp.f32	s20, s15
   bb854:	eddf 7a25 	vldr	s15, [pc, #148]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb85c:	bfc8      	it	gt
   bb85e:	eeb0 aa67 	vmovgt.f32	s20, s15
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
   bb862:	eef4 8a68 	vcmp.f32	s17, s17
   bb866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb86a:	f180 8655 	bvs.w	bc518 <_Z6OBS_Dov+0x1e38>
   bb86e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
   bb872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb876:	f100 864f 	bmi.w	bc518 <_Z6OBS_Dov+0x1e38>
   bb87a:	eddf 7a19 	vldr	s15, [pc, #100]	; bb8e0 <_Z6OBS_Dov+0x1200>
   bb87e:	eef4 8a67 	vcmp.f32	s17, s15
   bb882:	e035      	b.n	bb8f0 <_Z6OBS_Dov+0x1210>
   bb884:	000cb91b 	.word	0x000cb91b
   bb888:	000cb920 	.word	0x000cb920
   bb88c:	2002dab3 	.word	0x2002dab3
   bb890:	20032874 	.word	0x20032874
   bb894:	c2200000 	.word	0xc2200000
   bb898:	42700000 	.word	0x42700000
   bb89c:	43960000 	.word	0x43960000
   bb8a0:	44898000 	.word	0x44898000
   bb8a4:	000cb925 	.word	0x000cb925
   bb8a8:	000cb92a 	.word	0x000cb92a
   bb8ac:	2002daae 	.word	0x2002daae
   bb8b0:	c479ff5c 	.word	0xc479ff5c
   bb8b4:	42c80000 	.word	0x42c80000
   bb8b8:	000cb92f 	.word	0x000cb92f
   bb8bc:	000cb933 	.word	0x000cb933
   bb8c0:	2002df8e 	.word	0x2002df8e
   bb8c4:	2003e39c 	.word	0x2003e39c
   bb8c8:	2003e35c 	.word	0x2003e35c
   bb8cc:	40590000 	.word	0x40590000
   bb8d0:	000cb937 	.word	0x000cb937
   bb8d4:	000cad11 	.word	0x000cad11
   bb8d8:	44fa0000 	.word	0x44fa0000
   bb8dc:	467a0000 	.word	0x467a0000
   bb8e0:	447a0000 	.word	0x447a0000
   bb8e4:	2003e360 	.word	0x2003e360
   bb8e8:	2003e358 	.word	0x2003e358
   bb8ec:	c479f99a 	.word	0xc479f99a
   bb8f0:	ed5f 7a02 	vldr	s15, [pc, #-8]	; bb8ec <_Z6OBS_Dov+0x120c>
   bb8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb8f8:	bfc8      	it	gt
   bb8fa:	eef0 8a67 	vmovgt.f32	s17, s15
    strcpy (obs[oidx].sensor[sidx].id, "sv1");
   bb8fe:	f04f 0b1c 	mov.w	fp, #28
   bb902:	fb0b f708 	mul.w	r7, fp, r8
   bb906:	19e8      	adds	r0, r5, r7
   bb908:	49d5      	ldr	r1, [pc, #852]	; (bbc60 <_Z6OBS_Dov+0x1580>)
   bb90a:	4420      	add	r0, r4
   bb90c:	f00e fcce 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb910:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "si1");
   bb912:	49d4      	ldr	r1, [pc, #848]	; (bbc64 <_Z6OBS_Dov+0x1584>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bb914:	f640 2698 	movw	r6, #2712	; 0xa98
   bb918:	435e      	muls	r6, r3
   bb91a:	19ba      	adds	r2, r7, r6
   bb91c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "si1");
   bb91e:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
   bb922:	2300      	movs	r3, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bb924:	f04f 0a01 	mov.w	sl, #1
   bb928:	f108 0901 	add.w	r9, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "si1");
   bb92c:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bb92e:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx].type = F_OBS;
   bb930:	fb0b 6909 	mla	r9, fp, r9, r6
    obs[oidx].sensor[sidx].f_obs = si_vis;
   bb934:	edc2 aa09 	vstr	s21, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb938:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "si1");
   bb93c:	4420      	add	r0, r4
   bb93e:	f00e fcb5 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb942:	eb04 0209 	add.w	r2, r4, r9
    strcpy (obs[oidx].sensor[sidx].id, "su1");
   bb946:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx++].inuse = true;
   bb94a:	f108 0902 	add.w	r9, r8, #2
    obs[oidx].sensor[sidx].type = F_OBS;
   bb94e:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "su1");
   bb950:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bb952:	fb0b 6609 	mla	r6, fp, r9, r6
   bb956:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].type = F_OBS;
   bb958:	6213      	str	r3, [r2, #32]
    strcpy (obs[oidx].sensor[sidx].id, "su1");
   bb95a:	49c3      	ldr	r1, [pc, #780]	; (bbc68 <_Z6OBS_Dov+0x1588>)
    obs[oidx].sensor[sidx].f_obs = si_ir;
   bb95c:	ed82 aa09 	vstr	s20, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb960:	f882 a030 	strb.w	sl, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "su1");
   bb964:	4420      	add	r0, r4
   bb966:	f00e fca1 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb96a:	2300      	movs	r3, #0
   bb96c:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = si_uv;
   bb96e:	edc6 8a09 	vstr	s17, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb972:	f108 0803 	add.w	r8, r8, #3
   bb976:	f886 a030 	strb.w	sl, [r6, #48]	; 0x30
  if (MCP_1_exists) {
   bb97a:	4bbc      	ldr	r3, [pc, #752]	; (bbc6c <_Z6OBS_Dov+0x158c>)
   bb97c:	781b      	ldrb	r3, [r3, #0]
   bb97e:	b3cb      	cbz	r3, bb9f4 <_Z6OBS_Dov+0x1314>
    strcpy (obs[oidx].sensor[sidx].id, "mt1");
   bb980:	261c      	movs	r6, #28
   bb982:	fb06 f608 	mul.w	r6, r6, r8
   bb986:	1970      	adds	r0, r6, r5
   bb988:	49b9      	ldr	r1, [pc, #740]	; (bbc70 <_Z6OBS_Dov+0x1590>)
   bb98a:	4420      	add	r0, r4
   bb98c:	f00e fc8e 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bb990:	9a00      	ldr	r2, [sp, #0]
    t = mcp1.readTempC();
   bb992:	48b8      	ldr	r0, [pc, #736]	; (bbc74 <_Z6OBS_Dov+0x1594>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bb994:	f640 2398 	movw	r3, #2712	; 0xa98
   bb998:	fb03 6602 	mla	r6, r3, r2, r6
   bb99c:	4426      	add	r6, r4
   bb99e:	2300      	movs	r3, #0
   bb9a0:	6233      	str	r3, [r6, #32]
    t = mcp1.readTempC();
   bb9a2:	f005 faab 	bl	c0efc <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bb9a6:	eeb4 0a40 	vcmp.f32	s0, s0
   bb9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb9ae:	f180 85b7 	bvs.w	bc520 <_Z6OBS_Dov+0x1e40>
   bb9b2:	eddf 7ab1 	vldr	s15, [pc, #708]	; bbc78 <_Z6OBS_Dov+0x1598>
   bb9b6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bb9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb9be:	f100 85af 	bmi.w	bc520 <_Z6OBS_Dov+0x1e40>
   bb9c2:	eddf 7aae 	vldr	s15, [pc, #696]	; bbc7c <_Z6OBS_Dov+0x159c>
   bb9c6:	eeb4 0a67 	vcmp.f32	s0, s15
   bb9ca:	eddf 7aad 	vldr	s15, [pc, #692]	; bbc80 <_Z6OBS_Dov+0x15a0>
   bb9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bb9d2:	bfc8      	it	gt
   bb9d4:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = t;
   bb9d8:	9a00      	ldr	r2, [sp, #0]
   bb9da:	f640 2398 	movw	r3, #2712	; 0xa98
   bb9de:	4353      	muls	r3, r2
   bb9e0:	221c      	movs	r2, #28
   bb9e2:	fb02 3308 	mla	r3, r2, r8, r3
   bb9e6:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bb9e8:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
   bb9ea:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bb9ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bb9f2:	4490      	add	r8, r2
  if (MCP_2_exists) {
   bb9f4:	4ba3      	ldr	r3, [pc, #652]	; (bbc84 <_Z6OBS_Dov+0x15a4>)
   bb9f6:	781b      	ldrb	r3, [r3, #0]
   bb9f8:	b3cb      	cbz	r3, bba6e <_Z6OBS_Dov+0x138e>
    strcpy (obs[oidx].sensor[sidx].id, "mt2");
   bb9fa:	261c      	movs	r6, #28
   bb9fc:	fb06 f608 	mul.w	r6, r6, r8
   bba00:	1970      	adds	r0, r6, r5
   bba02:	49a1      	ldr	r1, [pc, #644]	; (bbc88 <_Z6OBS_Dov+0x15a8>)
   bba04:	4420      	add	r0, r4
   bba06:	f00e fc51 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bba0a:	9a00      	ldr	r2, [sp, #0]
    t = mcp2.readTempC();
   bba0c:	489f      	ldr	r0, [pc, #636]	; (bbc8c <_Z6OBS_Dov+0x15ac>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bba0e:	f640 2398 	movw	r3, #2712	; 0xa98
   bba12:	fb03 6602 	mla	r6, r3, r2, r6
   bba16:	4426      	add	r6, r4
   bba18:	2300      	movs	r3, #0
   bba1a:	6233      	str	r3, [r6, #32]
    t = mcp2.readTempC();
   bba1c:	f005 fa6e 	bl	c0efc <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bba20:	eeb4 0a40 	vcmp.f32	s0, s0
   bba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bba28:	f180 857e 	bvs.w	bc528 <_Z6OBS_Dov+0x1e48>
   bba2c:	eddf 7a92 	vldr	s15, [pc, #584]	; bbc78 <_Z6OBS_Dov+0x1598>
   bba30:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bba34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bba38:	f100 8576 	bmi.w	bc528 <_Z6OBS_Dov+0x1e48>
   bba3c:	eddf 7a8f 	vldr	s15, [pc, #572]	; bbc7c <_Z6OBS_Dov+0x159c>
   bba40:	eeb4 0a67 	vcmp.f32	s0, s15
   bba44:	eddf 7a8e 	vldr	s15, [pc, #568]	; bbc80 <_Z6OBS_Dov+0x15a0>
   bba48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bba4c:	bfc8      	it	gt
   bba4e:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = t;
   bba52:	9a00      	ldr	r2, [sp, #0]
   bba54:	f640 2398 	movw	r3, #2712	; 0xa98
   bba58:	4353      	muls	r3, r2
   bba5a:	221c      	movs	r2, #28
   bba5c:	fb02 3308 	mla	r3, r2, r8, r3
   bba60:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bba62:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
   bba64:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bba68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bba6c:	4490      	add	r8, r2
  if (MCP_3_exists) {
   bba6e:	4b88      	ldr	r3, [pc, #544]	; (bbc90 <_Z6OBS_Dov+0x15b0>)
   bba70:	781b      	ldrb	r3, [r3, #0]
   bba72:	2b00      	cmp	r3, #0
   bba74:	f000 8560 	beq.w	bc538 <_Z6OBS_Dov+0x1e58>
    strcpy (obs[oidx].sensor[sidx].id, "gt1");
   bba78:	261c      	movs	r6, #28
   bba7a:	fb06 f608 	mul.w	r6, r6, r8
   bba7e:	1970      	adds	r0, r6, r5
   bba80:	4984      	ldr	r1, [pc, #528]	; (bbc94 <_Z6OBS_Dov+0x15b4>)
   bba82:	4420      	add	r0, r4
   bba84:	f00e fc12 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bba88:	9a00      	ldr	r2, [sp, #0]
    t = mcp3.readTempC();
   bba8a:	4883      	ldr	r0, [pc, #524]	; (bbc98 <_Z6OBS_Dov+0x15b8>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bba8c:	f640 2398 	movw	r3, #2712	; 0xa98
   bba90:	fb03 6602 	mla	r6, r3, r2, r6
   bba94:	4426      	add	r6, r4
   bba96:	2300      	movs	r3, #0
   bba98:	6233      	str	r3, [r6, #32]
    t = mcp3.readTempC();
   bba9a:	f005 fa2f 	bl	c0efc <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bba9e:	eeb4 0a40 	vcmp.f32	s0, s0
   bbaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    t = mcp3.readTempC();
   bbaa6:	eef0 8a40 	vmov.f32	s17, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bbaaa:	f180 8541 	bvs.w	bc530 <_Z6OBS_Dov+0x1e50>
   bbaae:	eddf 7a72 	vldr	s15, [pc, #456]	; bbc78 <_Z6OBS_Dov+0x1598>
   bbab2:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bbab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbaba:	f100 8539 	bmi.w	bc530 <_Z6OBS_Dov+0x1e50>
   bbabe:	eddf 7a6f 	vldr	s15, [pc, #444]	; bbc7c <_Z6OBS_Dov+0x159c>
   bbac2:	eeb4 0a67 	vcmp.f32	s0, s15
   bbac6:	eddf 7a6e 	vldr	s15, [pc, #440]	; bbc80 <_Z6OBS_Dov+0x15a0>
   bbaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbace:	bfc8      	it	gt
   bbad0:	eef0 8a67 	vmovgt.f32	s17, s15
    obs[oidx].sensor[sidx].f_obs = t;
   bbad4:	9a00      	ldr	r2, [sp, #0]
   bbad6:	f640 2398 	movw	r3, #2712	; 0xa98
   bbada:	4353      	muls	r3, r2
   bbadc:	221c      	movs	r2, #28
   bbade:	fb02 3308 	mla	r3, r2, r8, r3
   bbae2:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbae4:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
   bbae6:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbaea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bbaee:	4490      	add	r8, r2
  if (MCP_4_exists) {
   bbaf0:	4b6a      	ldr	r3, [pc, #424]	; (bbc9c <_Z6OBS_Dov+0x15bc>)
   bbaf2:	781b      	ldrb	r3, [r3, #0]
   bbaf4:	b3cb      	cbz	r3, bbb6a <_Z6OBS_Dov+0x148a>
    strcpy (obs[oidx].sensor[sidx].id, "gt2");
   bbaf6:	261c      	movs	r6, #28
   bbaf8:	fb06 f608 	mul.w	r6, r6, r8
   bbafc:	1970      	adds	r0, r6, r5
   bbafe:	4968      	ldr	r1, [pc, #416]	; (bbca0 <_Z6OBS_Dov+0x15c0>)
   bbb00:	4420      	add	r0, r4
   bbb02:	f00e fbd3 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbb06:	9a00      	ldr	r2, [sp, #0]
    t = mcp4.readTempC();
   bbb08:	4866      	ldr	r0, [pc, #408]	; (bbca4 <_Z6OBS_Dov+0x15c4>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bbb0a:	f640 2398 	movw	r3, #2712	; 0xa98
   bbb0e:	fb03 6602 	mla	r6, r3, r2, r6
   bbb12:	4426      	add	r6, r4
   bbb14:	2300      	movs	r3, #0
   bbb16:	6233      	str	r3, [r6, #32]
    t = mcp4.readTempC();
   bbb18:	f005 f9f0 	bl	c0efc <_ZN16Adafruit_MCP98089readTempCEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bbb1c:	eeb4 0a40 	vcmp.f32	s0, s0
   bbb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbb24:	f180 850c 	bvs.w	bc540 <_Z6OBS_Dov+0x1e60>
   bbb28:	eddf 7a53 	vldr	s15, [pc, #332]	; bbc78 <_Z6OBS_Dov+0x1598>
   bbb2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bbb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbb34:	f100 8504 	bmi.w	bc540 <_Z6OBS_Dov+0x1e60>
   bbb38:	eddf 7a50 	vldr	s15, [pc, #320]	; bbc7c <_Z6OBS_Dov+0x159c>
   bbb3c:	eeb4 0a67 	vcmp.f32	s0, s15
   bbb40:	eddf 7a4f 	vldr	s15, [pc, #316]	; bbc80 <_Z6OBS_Dov+0x15a0>
   bbb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbb48:	bfc8      	it	gt
   bbb4a:	eeb0 0a67 	vmovgt.f32	s0, s15
    obs[oidx].sensor[sidx].f_obs = t;
   bbb4e:	9a00      	ldr	r2, [sp, #0]
   bbb50:	f640 2398 	movw	r3, #2712	; 0xa98
   bbb54:	4353      	muls	r3, r2
   bbb56:	221c      	movs	r2, #28
   bbb58:	fb02 3308 	mla	r3, r2, r8, r3
   bbb5c:	4423      	add	r3, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbb5e:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = t;
   bbb60:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbb64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bbb68:	4490      	add	r8, r2
  if (VEML7700_exists) {
   bbb6a:	4b4f      	ldr	r3, [pc, #316]	; (bbca8 <_Z6OBS_Dov+0x15c8>)
   bbb6c:	781b      	ldrb	r3, [r3, #0]
   bbb6e:	b393      	cbz	r3, bbbd6 <_Z6OBS_Dov+0x14f6>
    float lux = veml.readLux(VEML_LUX_AUTO);
   bbb70:	484e      	ldr	r0, [pc, #312]	; (bbcac <_Z6OBS_Dov+0x15cc>)
   bbb72:	2102      	movs	r1, #2
   bbb74:	f006 fbec 	bl	c2350 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
   bbb78:	eeb4 0a40 	vcmp.f32	s0, s0
   bbb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float lux = veml.readLux(VEML_LUX_AUTO);
   bbb80:	eeb0 aa40 	vmov.f32	s20, s0
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
   bbb84:	f180 84e0 	bvs.w	bc548 <_Z6OBS_Dov+0x1e68>
   bbb88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   bbb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbb90:	f100 84da 	bmi.w	bc548 <_Z6OBS_Dov+0x1e68>
   bbb94:	eddf 7a46 	vldr	s15, [pc, #280]	; bbcb0 <_Z6OBS_Dov+0x15d0>
   bbb98:	eeb4 0a67 	vcmp.f32	s0, s15
   bbb9c:	eddf 7a45 	vldr	s15, [pc, #276]	; bbcb4 <_Z6OBS_Dov+0x15d4>
   bbba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbba4:	bfc8      	it	gt
   bbba6:	eeb0 aa67 	vmovgt.f32	s20, s15
    strcpy (obs[oidx].sensor[sidx].id, "vlx");
   bbbaa:	261c      	movs	r6, #28
   bbbac:	fb06 f608 	mul.w	r6, r6, r8
   bbbb0:	1970      	adds	r0, r6, r5
   bbbb2:	4941      	ldr	r1, [pc, #260]	; (bbcb8 <_Z6OBS_Dov+0x15d8>)
   bbbb4:	4420      	add	r0, r4
   bbbb6:	f00e fb79 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbbba:	9a00      	ldr	r2, [sp, #0]
   bbbbc:	f640 2398 	movw	r3, #2712	; 0xa98
   bbbc0:	fb03 6302 	mla	r3, r3, r2, r6
   bbbc4:	4423      	add	r3, r4
   bbbc6:	2200      	movs	r2, #0
   bbbc8:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbbca:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
   bbbcc:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbbd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bbbd4:	4490      	add	r8, r2
  if (BLX_exists) {
   bbbd6:	4b39      	ldr	r3, [pc, #228]	; (bbcbc <_Z6OBS_Dov+0x15dc>)
   bbbd8:	781b      	ldrb	r3, [r3, #0]
   bbbda:	b383      	cbz	r3, bbc3e <_Z6OBS_Dov+0x155e>
    float lux=blx_takereading();
   bbbdc:	f7fb fe04 	bl	b77e8 <_Z15blx_takereadingv>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
   bbbe0:	eeb4 0a40 	vcmp.f32	s0, s0
   bbbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float lux=blx_takereading();
   bbbe8:	eeb0 aa40 	vmov.f32	s20, s0
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
   bbbec:	f180 84b0 	bvs.w	bc550 <_Z6OBS_Dov+0x1e70>
   bbbf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   bbbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbbf8:	f100 84aa 	bmi.w	bc550 <_Z6OBS_Dov+0x1e70>
   bbbfc:	eddf 7a30 	vldr	s15, [pc, #192]	; bbcc0 <_Z6OBS_Dov+0x15e0>
   bbc00:	eeb4 0a67 	vcmp.f32	s0, s15
   bbc04:	eddf 7a1e 	vldr	s15, [pc, #120]	; bbc80 <_Z6OBS_Dov+0x15a0>
   bbc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbc0c:	bfc8      	it	gt
   bbc0e:	eeb0 aa67 	vmovgt.f32	s20, s15
    strcpy (obs[oidx].sensor[sidx].id, "blx");
   bbc12:	261c      	movs	r6, #28
   bbc14:	fb06 f608 	mul.w	r6, r6, r8
   bbc18:	1970      	adds	r0, r6, r5
   bbc1a:	492a      	ldr	r1, [pc, #168]	; (bbcc4 <_Z6OBS_Dov+0x15e4>)
   bbc1c:	4420      	add	r0, r4
   bbc1e:	f00e fb45 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbc22:	9a00      	ldr	r2, [sp, #0]
   bbc24:	f640 2398 	movw	r3, #2712	; 0xa98
   bbc28:	fb03 6302 	mla	r3, r3, r2, r6
   bbc2c:	4423      	add	r3, r4
   bbc2e:	2200      	movs	r2, #0
   bbc30:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbc32:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = lux;
   bbc34:	ed83 aa09 	vstr	s20, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbc38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bbc3c:	4490      	add	r8, r2
  if (A4_State == A4_STATE_DISTANCE) {
   bbc3e:	4b22      	ldr	r3, [pc, #136]	; (bbcc8 <_Z6OBS_Dov+0x15e8>)
   bbc40:	681f      	ldr	r7, [r3, #0]
   bbc42:	2f01      	cmp	r7, #1
   bbc44:	d151      	bne.n	bbcea <_Z6OBS_Dov+0x160a>
    strcpy (obs[oidx].sensor[sidx].id, "sg"); // sg = snow or stream
   bbc46:	261c      	movs	r6, #28
   bbc48:	fb06 f608 	mul.w	r6, r6, r8
   bbc4c:	1970      	adds	r0, r6, r5
   bbc4e:	491f      	ldr	r1, [pc, #124]	; (bbccc <_Z6OBS_Dov+0x15ec>)
   bbc50:	4420      	add	r0, r4
   bbc52:	f00e fb2b 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbc56:	9a00      	ldr	r2, [sp, #0]
   bbc58:	f640 2398 	movw	r3, #2712	; 0xa98
   bbc5c:	e038      	b.n	bbcd0 <_Z6OBS_Dov+0x15f0>
   bbc5e:	bf00      	nop
   bbc60:	000cb940 	.word	0x000cb940
   bbc64:	000cb944 	.word	0x000cb944
   bbc68:	000cb948 	.word	0x000cb948
   bbc6c:	2002dac8 	.word	0x2002dac8
   bbc70:	000cb9e7 	.word	0x000cb9e7
   bbc74:	20032890 	.word	0x20032890
   bbc78:	c2200000 	.word	0xc2200000
   bbc7c:	42700000 	.word	0x42700000
   bbc80:	c479f99a 	.word	0xc479f99a
   bbc84:	2002dac9 	.word	0x2002dac9
   bbc88:	000cb9ee 	.word	0x000cb9ee
   bbc8c:	2003289c 	.word	0x2003289c
   bbc90:	2002daca 	.word	0x2002daca
   bbc94:	000cbbad 	.word	0x000cbbad
   bbc98:	200328a8 	.word	0x200328a8
   bbc9c:	2002dacb 	.word	0x2002dacb
   bbca0:	000cbbb8 	.word	0x000cbbb8
   bbca4:	200328b4 	.word	0x200328b4
   bbca8:	2002dfa0 	.word	0x2002dfa0
   bbcac:	2003e3a4 	.word	0x2003e3a4
   bbcb0:	47ea6000 	.word	0x47ea6000
   bbcb4:	c479c000 	.word	0xc479c000
   bbcb8:	000cb94c 	.word	0x000cb94c
   bbcbc:	2002da80 	.word	0x2002da80
   bbcc0:	48438200 	.word	0x48438200
   bbcc4:	000cb950 	.word	0x000cb950
   bbcc8:	2002da5c 	.word	0x2002da5c
   bbccc:	000cb954 	.word	0x000cb954
   bbcd0:	fb03 6602 	mla	r6, r3, r2, r6
   bbcd4:	4426      	add	r6, r4
   bbcd6:	2300      	movs	r3, #0
   bbcd8:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
   bbcda:	f7fc f8f9 	bl	b7ed0 <_Z20DistanceGauge_Medianv>
    obs[oidx].sensor[sidx++].inuse = true;
   bbcde:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].f_obs = DistanceGauge_Median();
   bbce2:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbce6:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (A4_State == A4_STATE_RAW) {
   bbcea:	4bd5      	ldr	r3, [pc, #852]	; (bc040 <_Z6OBS_Dov+0x1960>)
   bbcec:	681b      	ldr	r3, [r3, #0]
   bbcee:	2b03      	cmp	r3, #3
   bbcf0:	f040 8432 	bne.w	bc558 <_Z6OBS_Dov+0x1e78>
    strcpy (obs[oidx].sensor[sidx].id, "a4r");
   bbcf4:	261c      	movs	r6, #28
   bbcf6:	fb06 f608 	mul.w	r6, r6, r8
   bbcfa:	1970      	adds	r0, r6, r5
   bbcfc:	49d1      	ldr	r1, [pc, #836]	; (bc044 <_Z6OBS_Dov+0x1964>)
   bbcfe:	4420      	add	r0, r4
   bbd00:	f00e fad4 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbd04:	9a00      	ldr	r2, [sp, #0]
   bbd06:	f640 2398 	movw	r3, #2712	; 0xa98
   bbd0a:	fb03 6602 	mla	r6, r3, r2, r6
   bbd0e:	4426      	add	r6, r4
   bbd10:	2300      	movs	r3, #0
   bbd12:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
   bbd14:	200f      	movs	r0, #15
   bbd16:	f7fc f8a1 	bl	b7e5c <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
   bbd1a:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A4);
   bbd1c:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbd20:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
   bbd24:	4498      	add	r8, r3
  if (A5_State == A5_STATE_RAW) {
   bbd26:	4bc8      	ldr	r3, [pc, #800]	; (bc048 <_Z6OBS_Dov+0x1968>)
   bbd28:	681f      	ldr	r7, [r3, #0]
   bbd2a:	2f01      	cmp	r7, #1
   bbd2c:	d118      	bne.n	bbd60 <_Z6OBS_Dov+0x1680>
    strcpy (obs[oidx].sensor[sidx].id, "a5r");
   bbd2e:	261c      	movs	r6, #28
   bbd30:	fb06 f608 	mul.w	r6, r6, r8
   bbd34:	1970      	adds	r0, r6, r5
   bbd36:	49c5      	ldr	r1, [pc, #788]	; (bc04c <_Z6OBS_Dov+0x196c>)
   bbd38:	4420      	add	r0, r4
   bbd3a:	f00e fab7 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbd3e:	9a00      	ldr	r2, [sp, #0]
   bbd40:	f640 2398 	movw	r3, #2712	; 0xa98
   bbd44:	fb03 6602 	mla	r6, r3, r2, r6
   bbd48:	4426      	add	r6, r4
   bbd4a:	2300      	movs	r3, #0
   bbd4c:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
   bbd4e:	200e      	movs	r0, #14
   bbd50:	f7fc f884 	bl	b7e5c <_Z11Pin_ReadAvgi>
    obs[oidx].sensor[sidx++].inuse = true;
   bbd54:	f108 0801 	add.w	r8, r8, #1
    obs[oidx].sensor[sidx].f_obs = Pin_ReadAvg(A5);
   bbd58:	ed86 0a09 	vstr	s0, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bbd5c:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (PM25AQI_exists) {
   bbd60:	4bbb      	ldr	r3, [pc, #748]	; (bc050 <_Z6OBS_Dov+0x1970>)
   bbd62:	781b      	ldrb	r3, [r3, #0]
   bbd64:	2b00      	cmp	r3, #0
   bbd66:	f000 8087 	beq.w	bbe78 <_Z6OBS_Dov+0x1798>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
   bbd6a:	f04f 0a1c 	mov.w	sl, #28
   bbd6e:	fb0a f708 	mul.w	r7, sl, r8
   bbd72:	19e8      	adds	r0, r5, r7
   bbd74:	49b7      	ldr	r1, [pc, #732]	; (bc054 <_Z6OBS_Dov+0x1974>)
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
   bbd76:	f8df 9330 	ldr.w	r9, [pc, #816]	; bc0a8 <_Z6OBS_Dov+0x19c8>
    strcpy (obs[oidx].sensor[sidx].id, "pm1s10");
   bbd7a:	4420      	add	r0, r4
   bbd7c:	f00e fa96 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
   bbd80:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
   bbd82:	49b5      	ldr	r1, [pc, #724]	; (bc058 <_Z6OBS_Dov+0x1978>)
    obs[oidx].sensor[sidx].type = I_OBS;
   bbd84:	f640 2698 	movw	r6, #2712	; 0xa98
   bbd88:	435e      	muls	r6, r3
   bbd8a:	19ba      	adds	r2, r7, r6
   bbd8c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
   bbd8e:	eb07 000a 	add.w	r0, r7, sl
    obs[oidx].sensor[sidx].type = I_OBS;
   bbd92:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s10;
   bbd96:	f8b9 3000 	ldrh.w	r3, [r9]
   bbd9a:	6293      	str	r3, [r2, #40]	; 0x28
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
   bbd9c:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bbd9e:	eb08 030b 	add.w	r3, r8, fp
    obs[oidx].sensor[sidx].type = I_OBS;
   bbda2:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbda6:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
   bbdaa:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbdac:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s25");
   bbdae:	f00e fa7d 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
   bbdb2:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
   bbdb4:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
   bbdb8:	49a8      	ldr	r1, [pc, #672]	; (bc05c <_Z6OBS_Dov+0x197c>)
    obs[oidx].sensor[sidx].type = I_OBS;
   bbdba:	fb0a 6303 	mla	r3, sl, r3, r6
   bbdbe:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
   bbdc0:	f107 0038 	add.w	r0, r7, #56	; 0x38
   bbdc4:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s25;
   bbdc6:	629a      	str	r2, [r3, #40]	; 0x28
    obs[oidx].sensor[sidx].type = I_OBS;
   bbdc8:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbdcc:	f108 0202 	add.w	r2, r8, #2
   bbdd0:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
   bbdd4:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbdd6:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1s100");
   bbdd8:	f00e fa68 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
   bbddc:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
   bbdde:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
   bbde2:	499f      	ldr	r1, [pc, #636]	; (bc060 <_Z6OBS_Dov+0x1980>)
    obs[oidx].sensor[sidx].type = I_OBS;
   bbde4:	fb0a 6202 	mla	r2, sl, r2, r6
   bbde8:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
   bbdea:	f107 0054 	add.w	r0, r7, #84	; 0x54
   bbdee:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_s100;
   bbdf0:	6293      	str	r3, [r2, #40]	; 0x28
    obs[oidx].sensor[sidx].type = I_OBS;
   bbdf2:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbdf6:	f108 0303 	add.w	r3, r8, #3
   bbdfa:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
   bbdfe:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbe00:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e10");
   bbe02:	f00e fa53 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe06:	9b01      	ldr	r3, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
   bbe08:	f8b9 2006 	ldrh.w	r2, [r9, #6]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
   bbe0c:	4995      	ldr	r1, [pc, #596]	; (bc064 <_Z6OBS_Dov+0x1984>)
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe0e:	fb0a 6303 	mla	r3, sl, r3, r6
   bbe12:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
   bbe14:	f107 0070 	add.w	r0, r7, #112	; 0x70
   bbe18:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e10;
   bbe1a:	629a      	str	r2, [r3, #40]	; 0x28
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe1c:	f8c3 b020 	str.w	fp, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbe20:	f108 0204 	add.w	r2, r8, #4
   bbe24:	f883 b030 	strb.w	fp, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
   bbe28:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbe2a:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e25");
   bbe2c:	f00e fa3e 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe30:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
   bbe32:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
   bbe36:	498c      	ldr	r1, [pc, #560]	; (bc068 <_Z6OBS_Dov+0x1988>)
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe38:	fb0a 6202 	mla	r2, sl, r2, r6
   bbe3c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
   bbe3e:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   bbe42:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e25;
   bbe44:	6293      	str	r3, [r2, #40]	; 0x28
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe46:	f8c2 b020 	str.w	fp, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bbe4a:	f108 0305 	add.w	r3, r8, #5
   bbe4e:	f882 b030 	strb.w	fp, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
   bbe52:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bbe54:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "pm1e100");
   bbe56:	f00e fa29 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe5a:	9b01      	ldr	r3, [sp, #4]
   bbe5c:	fb0a 6603 	mla	r6, sl, r3, r6
   bbe60:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
   bbe62:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    obs[oidx].sensor[sidx].type = I_OBS;
   bbe66:	f8c6 b020 	str.w	fp, [r6, #32]
    obs[oidx].sensor[sidx].i_obs = pm25aqi_obs.max_e100;
   bbe6a:	62b3      	str	r3, [r6, #40]	; 0x28
    obs[oidx].sensor[sidx++].inuse = true;
   bbe6c:	f886 b030 	strb.w	fp, [r6, #48]	; 0x30
   bbe70:	f108 0806 	add.w	r8, r8, #6
    pm25aqi_clear();
   bbe74:	f7fb fd0e 	bl	b7894 <_Z13pm25aqi_clearv>
  if (HI_exists) {
   bbe78:	4b7c      	ldr	r3, [pc, #496]	; (bc06c <_Z6OBS_Dov+0x198c>)
   bbe7a:	781b      	ldrb	r3, [r3, #0]
   bbe7c:	2b00      	cmp	r3, #0
   bbe7e:	f000 83b5 	beq.w	bc5ec <_Z6OBS_Dov+0x1f0c>
    heat_index = hi_calculate(sht1_temp, sht1_humid);
   bbe82:	eef0 0a69 	vmov.f32	s1, s19
   bbe86:	eeb0 0a48 	vmov.f32	s0, s16
    strcpy (obs[oidx].sensor[sidx].id, "hi");
   bbe8a:	261c      	movs	r6, #28
    heat_index = hi_calculate(sht1_temp, sht1_humid);
   bbe8c:	f7fb f918 	bl	b70c0 <_Z12hi_calculateff>
    strcpy (obs[oidx].sensor[sidx].id, "hi");
   bbe90:	fb06 f608 	mul.w	r6, r6, r8
   bbe94:	1970      	adds	r0, r6, r5
   bbe96:	4976      	ldr	r1, [pc, #472]	; (bc070 <_Z6OBS_Dov+0x1990>)
   bbe98:	4420      	add	r0, r4
    heat_index = hi_calculate(sht1_temp, sht1_humid);
   bbe9a:	ee10 7a10 	vmov	r7, s0
    strcpy (obs[oidx].sensor[sidx].id, "hi");
   bbe9e:	f00e fa05 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbea2:	9a00      	ldr	r2, [sp, #0]
   bbea4:	f640 2398 	movw	r3, #2712	; 0xa98
   bbea8:	fb03 6302 	mla	r3, r3, r2, r6
   bbeac:	4423      	add	r3, r4
   bbeae:	2200      	movs	r2, #0
   bbeb0:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
   bbeb2:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) heat_index;
   bbeb4:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
   bbeb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bbeba:	4490      	add	r8, r2
  if (WBT_exists) {
   bbebc:	4b6d      	ldr	r3, [pc, #436]	; (bc074 <_Z6OBS_Dov+0x1994>)
   bbebe:	781b      	ldrb	r3, [r3, #0]
   bbec0:	2b00      	cmp	r3, #0
   bbec2:	f000 8395 	beq.w	bc5f0 <_Z6OBS_Dov+0x1f10>
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
   bbec6:	ee19 0a90 	vmov	r0, s19
   bbeca:	f7f8 fa0d 	bl	b42e8 <__aeabi_f2d>
   bbece:	ec41 0b19 	vmov	d9, r0, r1
   bbed2:	ee18 0a10 	vmov	r0, s16
   bbed6:	f7f8 fa07 	bl	b42e8 <__aeabi_f2d>
   bbeda:	eeb0 1a49 	vmov.f32	s2, s18
   bbede:	eef0 1a69 	vmov.f32	s3, s19
   bbee2:	ec41 0b10 	vmov	d0, r0, r1
   bbee6:	f7fb f803 	bl	b6ef0 <_Z13wbt_calculatedd>
   bbeea:	ec51 0b10 	vmov	r0, r1, d0
   bbeee:	f7f8 fd4b 	bl	b4988 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
   bbef2:	261c      	movs	r6, #28
   bbef4:	fb06 f608 	mul.w	r6, r6, r8
    wetbulb_temp = wbt_calculate(sht1_temp, sht1_humid);
   bbef8:	4681      	mov	r9, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbt");
   bbefa:	1970      	adds	r0, r6, r5
   bbefc:	4420      	add	r0, r4
   bbefe:	495e      	ldr	r1, [pc, #376]	; (bc078 <_Z6OBS_Dov+0x1998>)
   bbf00:	f00e f9d4 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbf04:	9a00      	ldr	r2, [sp, #0]
   bbf06:	f640 2398 	movw	r3, #2712	; 0xa98
   bbf0a:	fb03 6602 	mla	r6, r3, r2, r6
   bbf0e:	4434      	add	r4, r6
   bbf10:	2300      	movs	r3, #0
   bbf12:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;  
   bbf14:	2301      	movs	r3, #1
    obs[oidx].sensor[sidx].f_obs = (float) wetbulb_temp;
   bbf16:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;  
   bbf1a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   bbf1e:	4498      	add	r8, r3
  if (WBGT_exists) {
   bbf20:	4b56      	ldr	r3, [pc, #344]	; (bc07c <_Z6OBS_Dov+0x199c>)
   bbf22:	4c57      	ldr	r4, [pc, #348]	; (bc080 <_Z6OBS_Dov+0x19a0>)
   bbf24:	781b      	ldrb	r3, [r3, #0]
   bbf26:	2b00      	cmp	r3, #0
   bbf28:	d039      	beq.n	bbf9e <_Z6OBS_Dov+0x18be>
    if (MCP_3_exists) {
   bbf2a:	4b56      	ldr	r3, [pc, #344]	; (bc084 <_Z6OBS_Dov+0x19a4>)
   bbf2c:	781b      	ldrb	r3, [r3, #0]
   bbf2e:	2b00      	cmp	r3, #0
   bbf30:	f000 8361 	beq.w	bc5f6 <_Z6OBS_Dov+0x1f16>
      wbgt = wbgt_using_wbt(sht1_temp, mcp3_temp, wetbulb_temp); // TempAir, TempGlobe, TempWetBulb
   bbf34:	4648      	mov	r0, r9
   bbf36:	f7f8 f9d7 	bl	b42e8 <__aeabi_f2d>
   bbf3a:	ec41 0b1a 	vmov	d10, r0, r1
   bbf3e:	ee18 0a90 	vmov	r0, s17
   bbf42:	f7f8 f9d1 	bl	b42e8 <__aeabi_f2d>
   bbf46:	ec41 0b19 	vmov	d9, r0, r1
   bbf4a:	ee18 0a10 	vmov	r0, s16
   bbf4e:	f7f8 f9cb 	bl	b42e8 <__aeabi_f2d>
   bbf52:	eeb0 2a4a 	vmov.f32	s4, s20
   bbf56:	eef0 2a6a 	vmov.f32	s5, s21
   bbf5a:	eeb0 1a49 	vmov.f32	s2, s18
   bbf5e:	eef0 1a69 	vmov.f32	s3, s19
   bbf62:	ec41 0b10 	vmov	d0, r0, r1
   bbf66:	f7fb fad7 	bl	b7518 <_Z14wbgt_using_wbtddd>
      wbgt = wbgt_using_hi(heat_index);
   bbf6a:	ec51 0b10 	vmov	r0, r1, d0
   bbf6e:	f7f8 fd0b 	bl	b4988 <__aeabi_d2f>
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
   bbf72:	261c      	movs	r6, #28
   bbf74:	fb06 f608 	mul.w	r6, r6, r8
      wbgt = wbgt_using_hi(heat_index);
   bbf78:	4607      	mov	r7, r0
    strcpy (obs[oidx].sensor[sidx].id, "wbgt");
   bbf7a:	1970      	adds	r0, r6, r5
   bbf7c:	4942      	ldr	r1, [pc, #264]	; (bc088 <_Z6OBS_Dov+0x19a8>)
   bbf7e:	4420      	add	r0, r4
   bbf80:	f00e f994 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bbf84:	9a00      	ldr	r2, [sp, #0]
   bbf86:	f640 2398 	movw	r3, #2712	; 0xa98
   bbf8a:	fb03 6302 	mla	r3, r3, r2, r6
   bbf8e:	4423      	add	r3, r4
   bbf90:	2200      	movs	r2, #0
   bbf92:	621a      	str	r2, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;    
   bbf94:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) wbgt;
   bbf96:	625f      	str	r7, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;    
   bbf98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   bbf9c:	4490      	add	r8, r2
  if (TLW_exists) {
   bbf9e:	4b3b      	ldr	r3, [pc, #236]	; (bc08c <_Z6OBS_Dov+0x19ac>)
   bbfa0:	781b      	ldrb	r3, [r3, #0]
   bbfa2:	2b00      	cmp	r3, #0
   bbfa4:	f000 808f 	beq.w	bc0c6 <_Z6OBS_Dov+0x19e6>
    tlw.newReading();
   bbfa8:	4839      	ldr	r0, [pc, #228]	; (bc090 <_Z6OBS_Dov+0x19b0>)
   bbfaa:	f006 fa77 	bl	c249c <_ZN8LeafSens10newReadingEv>
    delay(100);
   bbfae:	2064      	movs	r0, #100	; 0x64
   bbfb0:	f009 fbbe 	bl	c5730 <delay>
    float w = tlw.getWet();
   bbfb4:	4836      	ldr	r0, [pc, #216]	; (bc090 <_Z6OBS_Dov+0x19b0>)
   bbfb6:	f006 fa87 	bl	c24c8 <_ZN8LeafSens6getWetEv>
    float t = tlw.getTemp();
   bbfba:	4835      	ldr	r0, [pc, #212]	; (bc090 <_Z6OBS_Dov+0x19b0>)
    float w = tlw.getWet();
   bbfbc:	eef0 8a40 	vmov.f32	s17, s0
    float t = tlw.getTemp();
   bbfc0:	f006 fa94 	bl	c24ec <_ZN8LeafSens7getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bbfc4:	eeb4 0a40 	vcmp.f32	s0, s0
   bbfc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = tlw.getTemp();
   bbfcc:	eeb0 8a40 	vmov.f32	s16, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bbfd0:	f180 8319 	bvs.w	bc606 <_Z6OBS_Dov+0x1f26>
   bbfd4:	eddf 7a2f 	vldr	s15, [pc, #188]	; bc094 <_Z6OBS_Dov+0x19b4>
   bbfd8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bbfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbfe0:	f100 8311 	bmi.w	bc606 <_Z6OBS_Dov+0x1f26>
   bbfe4:	eddf 7a2c 	vldr	s15, [pc, #176]	; bc098 <_Z6OBS_Dov+0x19b8>
   bbfe8:	eeb4 0a67 	vcmp.f32	s0, s15
   bbfec:	eddf 7a2b 	vldr	s15, [pc, #172]	; bc09c <_Z6OBS_Dov+0x19bc>
   bbff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbff4:	bfc8      	it	gt
   bbff6:	eeb0 8a67 	vmovgt.f32	s16, s15
    strcpy (obs[oidx].sensor[sidx].id, "tlww");
   bbffa:	f04f 0a1c 	mov.w	sl, #28
   bbffe:	fb0a f208 	mul.w	r2, sl, r8
   bc002:	18a8      	adds	r0, r5, r2
   bc004:	4926      	ldr	r1, [pc, #152]	; (bc0a0 <_Z6OBS_Dov+0x19c0>)
   bc006:	9201      	str	r2, [sp, #4]
   bc008:	4420      	add	r0, r4
   bc00a:	f00e f94f 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc00e:	9b00      	ldr	r3, [sp, #0]
   bc010:	9a01      	ldr	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
   bc012:	4924      	ldr	r1, [pc, #144]	; (bc0a4 <_Z6OBS_Dov+0x19c4>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bc014:	f640 2698 	movw	r6, #2712	; 0xa98
   bc018:	435e      	muls	r6, r3
   bc01a:	1993      	adds	r3, r2, r6
   bc01c:	4423      	add	r3, r4
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
   bc01e:	eb02 000a 	add.w	r0, r2, sl
    obs[oidx].sensor[sidx].type = F_OBS;
   bc022:	f04f 0900 	mov.w	r9, #0
    obs[oidx].sensor[sidx++].inuse = true; 
   bc026:	2701      	movs	r7, #1
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
   bc028:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc02a:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx].f_obs = (float) w;
   bc02e:	edc3 8a09 	vstr	s17, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true; 
   bc032:	f108 0b01 	add.w	fp, r8, #1
   bc036:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tlwt");
   bc03a:	4420      	add	r0, r4
   bc03c:	e036      	b.n	bc0ac <_Z6OBS_Dov+0x19cc>
   bc03e:	bf00      	nop
   bc040:	2002da5c 	.word	0x2002da5c
   bc044:	000cb957 	.word	0x000cb957
   bc048:	2002da60 	.word	0x2002da60
   bc04c:	000cb969 	.word	0x000cb969
   bc050:	2002dacc 	.word	0x2002dacc
   bc054:	000cb96d 	.word	0x000cb96d
   bc058:	000cb974 	.word	0x000cb974
   bc05c:	000cb97b 	.word	0x000cb97b
   bc060:	000cb983 	.word	0x000cb983
   bc064:	000cb98a 	.word	0x000cb98a
   bc068:	000cb991 	.word	0x000cb991
   bc06c:	2002daaf 	.word	0x2002daaf
   bc070:	000cb999 	.word	0x000cb999
   bc074:	2002dfa2 	.word	0x2002dfa2
   bc078:	000cb99c 	.word	0x000cb99c
   bc07c:	2002dfa1 	.word	0x2002dfa1
   bc080:	20032cd0 	.word	0x20032cd0
   bc084:	2002daca 	.word	0x2002daca
   bc088:	000cb9a0 	.word	0x000cb9a0
   bc08c:	2002df9c 	.word	0x2002df9c
   bc090:	2003e384 	.word	0x2003e384
   bc094:	c2200000 	.word	0xc2200000
   bc098:	42700000 	.word	0x42700000
   bc09c:	c479f99a 	.word	0xc479f99a
   bc0a0:	000cb9a5 	.word	0x000cb9a5
   bc0a4:	000cb9aa 	.word	0x000cb9aa
   bc0a8:	2003e1a4 	.word	0x2003e1a4
   bc0ac:	f00e f8fe 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc0b0:	fb0a 630b 	mla	r3, sl, fp, r6
   bc0b4:	4423      	add	r3, r4
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bc0b6:	ed83 8a09 	vstr	s16, [r3, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bc0ba:	f8c3 9020 	str.w	r9, [r3, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc0be:	f108 0802 	add.w	r8, r8, #2
   bc0c2:	f883 7030 	strb.w	r7, [r3, #48]	; 0x30
  if (TSM_exists) {
   bc0c6:	4bd7      	ldr	r3, [pc, #860]	; (bc424 <_Z6OBS_Dov+0x1d44>)
   bc0c8:	781b      	ldrb	r3, [r3, #0]
   bc0ca:	2b00      	cmp	r3, #0
   bc0cc:	f000 8083 	beq.w	bc1d6 <_Z6OBS_Dov+0x1af6>
    tsm.newReading();
   bc0d0:	48d5      	ldr	r0, [pc, #852]	; (bc428 <_Z6OBS_Dov+0x1d48>)
   bc0d2:	f008 fdd4 	bl	c4c7e <_ZN5SVCS310newReadingEv>
    delay(100);
   bc0d6:	2064      	movs	r0, #100	; 0x64
   bc0d8:	f009 fb2a 	bl	c5730 <delay>
    float e25 = tsm.getE25();
   bc0dc:	48d2      	ldr	r0, [pc, #840]	; (bc428 <_Z6OBS_Dov+0x1d48>)
   bc0de:	f008 fde5 	bl	c4cac <_ZN5SVCS36getE25Ev>
    float ec = tsm.getEC();
   bc0e2:	48d1      	ldr	r0, [pc, #836]	; (bc428 <_Z6OBS_Dov+0x1d48>)
    float e25 = tsm.getE25();
   bc0e4:	eef0 9a40 	vmov.f32	s19, s0
    float ec = tsm.getEC();
   bc0e8:	f008 fdf2 	bl	c4cd0 <_ZN5SVCS35getECEv>
    float vwc = tsm.getVWC();
   bc0ec:	48ce      	ldr	r0, [pc, #824]	; (bc428 <_Z6OBS_Dov+0x1d48>)
    float ec = tsm.getEC();
   bc0ee:	eeb0 9a40 	vmov.f32	s18, s0
    float vwc = tsm.getVWC();
   bc0f2:	f008 fe11 	bl	c4d18 <_ZN5SVCS36getVWCEv>
    float t = tsm.getTemp();
   bc0f6:	48cc      	ldr	r0, [pc, #816]	; (bc428 <_Z6OBS_Dov+0x1d48>)
    float vwc = tsm.getVWC();
   bc0f8:	eef0 8a40 	vmov.f32	s17, s0
    float t = tsm.getTemp();
   bc0fc:	f008 fdfa 	bl	c4cf4 <_ZN5SVCS37getTempEv>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc100:	eeb4 0a40 	vcmp.f32	s0, s0
   bc104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float t = tsm.getTemp();
   bc108:	eeb0 8a40 	vmov.f32	s16, s0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc10c:	f180 827e 	bvs.w	bc60c <_Z6OBS_Dov+0x1f2c>
   bc110:	eddf 7ac6 	vldr	s15, [pc, #792]	; bc42c <_Z6OBS_Dov+0x1d4c>
   bc114:	eeb4 0ae7 	vcmpe.f32	s0, s15
   bc118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc11c:	f100 8276 	bmi.w	bc60c <_Z6OBS_Dov+0x1f2c>
   bc120:	eddf 7ac3 	vldr	s15, [pc, #780]	; bc430 <_Z6OBS_Dov+0x1d50>
   bc124:	eeb4 0a67 	vcmp.f32	s0, s15
   bc128:	eddf 7ac2 	vldr	s15, [pc, #776]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc130:	bfc8      	it	gt
   bc132:	eeb0 8a67 	vmovgt.f32	s16, s15
    strcpy (obs[oidx].sensor[sidx].id, "tsme25");
   bc136:	f04f 0a1c 	mov.w	sl, #28
   bc13a:	fb0a f908 	mul.w	r9, sl, r8
   bc13e:	eb05 0009 	add.w	r0, r5, r9
   bc142:	49bd      	ldr	r1, [pc, #756]	; (bc438 <_Z6OBS_Dov+0x1d58>)
   bc144:	4420      	add	r0, r4
   bc146:	f00e f8b1 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc14a:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
   bc14c:	49bb      	ldr	r1, [pc, #748]	; (bc43c <_Z6OBS_Dov+0x1d5c>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bc14e:	f640 2698 	movw	r6, #2712	; 0xa98
   bc152:	435e      	muls	r6, r3
   bc154:	eb09 0206 	add.w	r2, r9, r6
   bc158:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
   bc15a:	eb09 000a 	add.w	r0, r9, sl
    obs[oidx].sensor[sidx++].inuse = true;
   bc15e:	2701      	movs	r7, #1
    obs[oidx].sensor[sidx].type = F_OBS;
   bc160:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
   bc162:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc164:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc166:	f108 0b01 	add.w	fp, r8, #1
    obs[oidx].sensor[sidx].f_obs = (float) e25;
   bc16a:	edc2 9a09 	vstr	s19, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc16e:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmec");
   bc172:	4420      	add	r0, r4
   bc174:	f00e f89a 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc178:	fb0a 620b 	mla	r2, sl, fp, r6
   bc17c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
   bc17e:	f109 0038 	add.w	r0, r9, #56	; 0x38
    obs[oidx].sensor[sidx].type = F_OBS;
   bc182:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
   bc184:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc186:	6213      	str	r3, [r2, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc188:	f108 0b02 	add.w	fp, r8, #2
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
   bc18c:	49ac      	ldr	r1, [pc, #688]	; (bc440 <_Z6OBS_Dov+0x1d60>)
    obs[oidx].sensor[sidx].f_obs = (float) ec;
   bc18e:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc192:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmvwc");
   bc196:	4420      	add	r0, r4
   bc198:	f00e f888 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc19c:	fb0a 620b 	mla	r2, sl, fp, r6
   bc1a0:	4422      	add	r2, r4
    obs[oidx].sensor[sidx++].inuse = true; 
   bc1a2:	f108 0b03 	add.w	fp, r8, #3
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
   bc1a6:	f109 0054 	add.w	r0, r9, #84	; 0x54
    obs[oidx].sensor[sidx].type = F_OBS;
   bc1aa:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
   bc1ac:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc1ae:	fb0a 660b 	mla	r6, sl, fp, r6
   bc1b2:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].type = F_OBS;
   bc1b4:	6213      	str	r3, [r2, #32]
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
   bc1b6:	49a3      	ldr	r1, [pc, #652]	; (bc444 <_Z6OBS_Dov+0x1d64>)
    obs[oidx].sensor[sidx].f_obs = (float) vwc;
   bc1b8:	edc2 8a09 	vstr	s17, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true; 
   bc1bc:	f882 7030 	strb.w	r7, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tsmt");
   bc1c0:	4420      	add	r0, r4
   bc1c2:	f00e f873 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc1c6:	2300      	movs	r3, #0
   bc1c8:	6233      	str	r3, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bc1ca:	ed86 8a09 	vstr	s16, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc1ce:	f108 0804 	add.w	r8, r8, #4
   bc1d2:	f886 7030 	strb.w	r7, [r6, #48]	; 0x30
  if (TMSM_exists) {
   bc1d6:	4b9c      	ldr	r3, [pc, #624]	; (bc448 <_Z6OBS_Dov+0x1d68>)
   bc1d8:	f8df 92a0 	ldr.w	r9, [pc, #672]	; bc47c <_Z6OBS_Dov+0x1d9c>
   bc1dc:	781a      	ldrb	r2, [r3, #0]
   bc1de:	2a00      	cmp	r2, #0
   bc1e0:	f000 80c6 	beq.w	bc370 <_Z6OBS_Dov+0x1c90>
    tmsm.newReading();
   bc1e4:	4899      	ldr	r0, [pc, #612]	; (bc44c <_Z6OBS_Dov+0x1d6c>)
   bc1e6:	f008 fde4 	bl	c4db2 <_ZN7SVMULTI10newReadingEv>
    delay(100);
   bc1ea:	f04f 0a1c 	mov.w	sl, #28
   bc1ee:	2064      	movs	r0, #100	; 0x64
   bc1f0:	f009 fa9e 	bl	c5730 <delay>
    tmsm.getData(&multi);
   bc1f4:	fb0a f608 	mul.w	r6, sl, r8
   bc1f8:	4894      	ldr	r0, [pc, #592]	; (bc44c <_Z6OBS_Dov+0x1d6c>)
   bc1fa:	a90c      	add	r1, sp, #48	; 0x30
   bc1fc:	f008 fe14 	bl	c4e28 <_ZN7SVMULTI7getDataEP10soil_ret_t>
    strcpy (obs[oidx].sensor[sidx].id, "tmsms1");
   bc200:	19a8      	adds	r0, r5, r6
   bc202:	4993      	ldr	r1, [pc, #588]	; (bc450 <_Z6OBS_Dov+0x1d70>)
   bc204:	4420      	add	r0, r4
   bc206:	f00e f851 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc20a:	9b00      	ldr	r3, [sp, #0]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
   bc20c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    obs[oidx].sensor[sidx].type = F_OBS;
   bc20e:	f640 2798 	movw	r7, #2712	; 0xa98
   bc212:	435f      	muls	r7, r3
   bc214:	19f1      	adds	r1, r6, r7
   bc216:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
   bc218:	eb06 000a 	add.w	r0, r6, sl
    obs[oidx].sensor[sidx++].inuse = true;
   bc21c:	f04f 0b01 	mov.w	fp, #1
    obs[oidx].sensor[sidx].type = F_OBS;
   bc220:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
   bc222:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc224:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[0];
   bc226:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc228:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
   bc22c:	f108 0201 	add.w	r2, r8, #1
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
   bc230:	4988      	ldr	r1, [pc, #544]	; (bc454 <_Z6OBS_Dov+0x1d74>)
    obs[oidx].sensor[sidx++].inuse = true;
   bc232:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms2");
   bc234:	4420      	add	r0, r4
   bc236:	f00e f839 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc23a:	9a01      	ldr	r2, [sp, #4]
   bc23c:	fb0a 7102 	mla	r1, sl, r2, r7
   bc240:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
   bc242:	f106 0038 	add.w	r0, r6, #56	; 0x38
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[1];
   bc246:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bc248:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bc24a:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
   bc24c:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc24e:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc250:	f108 0202 	add.w	r2, r8, #2
   bc254:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
   bc258:	4420      	add	r0, r4
   bc25a:	497f      	ldr	r1, [pc, #508]	; (bc458 <_Z6OBS_Dov+0x1d78>)
    obs[oidx].sensor[sidx++].inuse = true;
   bc25c:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms3");
   bc25e:	f00e f825 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc262:	9a01      	ldr	r2, [sp, #4]
   bc264:	fb0a 7102 	mla	r1, sl, r2, r7
   bc268:	4421      	add	r1, r4
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
   bc26a:	f106 0054 	add.w	r0, r6, #84	; 0x54
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[2];
   bc26e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bc270:	624a      	str	r2, [r1, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bc272:	2300      	movs	r3, #0
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
   bc274:	4428      	add	r0, r5
    obs[oidx].sensor[sidx].type = F_OBS;
   bc276:	620b      	str	r3, [r1, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc278:	f108 0203 	add.w	r2, r8, #3
   bc27c:	f881 b030 	strb.w	fp, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
   bc280:	4420      	add	r0, r4
   bc282:	4976      	ldr	r1, [pc, #472]	; (bc45c <_Z6OBS_Dov+0x1d7c>)
    obs[oidx].sensor[sidx++].inuse = true;
   bc284:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "tmsms4");
   bc286:	f00e f811 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc28a:	9a01      	ldr	r2, [sp, #4]
    t = multi.temp[0];
   bc28c:	ed9d 8a0c 	vldr	s16, [sp, #48]	; 0x30
    obs[oidx].sensor[sidx].type = F_OBS;
   bc290:	fb0a 7702 	mla	r7, sl, r2, r7
   bc294:	443c      	add	r4, r7
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc296:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].f_obs = (float) multi.vwc[3];
   bc29a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   bc29c:	6262      	str	r2, [r4, #36]	; 0x24
    obs[oidx].sensor[sidx].type = F_OBS;
   bc29e:	2300      	movs	r3, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx].type = F_OBS;
   bc2a4:	6223      	str	r3, [r4, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc2a6:	f108 0704 	add.w	r7, r8, #4
   bc2aa:	f884 b030 	strb.w	fp, [r4, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc2ae:	f180 81b0 	bvs.w	bc612 <_Z6OBS_Dov+0x1f32>
   bc2b2:	eddf 7a5e 	vldr	s15, [pc, #376]	; bc42c <_Z6OBS_Dov+0x1d4c>
   bc2b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bc2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc2be:	f100 81a8 	bmi.w	bc612 <_Z6OBS_Dov+0x1f32>
   bc2c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; bc430 <_Z6OBS_Dov+0x1d50>
   bc2c6:	eeb4 8a67 	vcmp.f32	s16, s15
   bc2ca:	eddf 7a5a 	vldr	s15, [pc, #360]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc2d2:	bfc8      	it	gt
   bc2d4:	eeb0 8a67 	vmovgt.f32	s16, s15
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt1");
   bc2d8:	f106 0070 	add.w	r0, r6, #112	; 0x70
   bc2dc:	4428      	add	r0, r5
   bc2de:	4960      	ldr	r1, [pc, #384]	; (bc460 <_Z6OBS_Dov+0x1d80>)
   bc2e0:	4448      	add	r0, r9
   bc2e2:	f00d ffe3 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc2e6:	9b00      	ldr	r3, [sp, #0]
   bc2e8:	f640 2298 	movw	r2, #2712	; 0xa98
   bc2ec:	211c      	movs	r1, #28
   bc2ee:	435a      	muls	r2, r3
   bc2f0:	fb01 2207 	mla	r2, r1, r7, r2
   bc2f4:	444a      	add	r2, r9
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bc2f6:	ed82 8a09 	vstr	s16, [r2, #36]	; 0x24
    t = multi.temp[1];
   bc2fa:	ed9d 8a0d 	vldr	s16, [sp, #52]	; 0x34
    obs[oidx].sensor[sidx].type = F_OBS;
   bc2fe:	2100      	movs	r1, #0
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc300:	eeb4 8a48 	vcmp.f32	s16, s16
    obs[oidx].sensor[sidx].type = F_OBS;
   bc304:	6211      	str	r1, [r2, #32]
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    obs[oidx].sensor[sidx++].inuse = true;
   bc30a:	f04f 0101 	mov.w	r1, #1
   bc30e:	f108 0405 	add.w	r4, r8, #5
   bc312:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc316:	f180 817f 	bvs.w	bc618 <_Z6OBS_Dov+0x1f38>
   bc31a:	eddf 7a44 	vldr	s15, [pc, #272]	; bc42c <_Z6OBS_Dov+0x1d4c>
   bc31e:	eeb4 8ae7 	vcmpe.f32	s16, s15
   bc322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc326:	f100 8177 	bmi.w	bc618 <_Z6OBS_Dov+0x1f38>
   bc32a:	eddf 7a41 	vldr	s15, [pc, #260]	; bc430 <_Z6OBS_Dov+0x1d50>
   bc32e:	eeb4 8a67 	vcmp.f32	s16, s15
   bc332:	eddf 7a40 	vldr	s15, [pc, #256]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bc33a:	bfc8      	it	gt
   bc33c:	eeb0 8a67 	vmovgt.f32	s16, s15
    strcpy (obs[oidx].sensor[sidx].id, "tmsmt2");
   bc340:	f106 008c 	add.w	r0, r6, #140	; 0x8c
   bc344:	4428      	add	r0, r5
   bc346:	4947      	ldr	r1, [pc, #284]	; (bc464 <_Z6OBS_Dov+0x1d84>)
   bc348:	4448      	add	r0, r9
   bc34a:	f00d ffaf 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc34e:	9b00      	ldr	r3, [sp, #0]
   bc350:	f640 2898 	movw	r8, #2712	; 0xa98
   bc354:	221c      	movs	r2, #28
   bc356:	fb08 f803 	mul.w	r8, r8, r3
   bc35a:	fb02 8804 	mla	r8, r2, r4, r8
   bc35e:	44c8      	add	r8, r9
   bc360:	2200      	movs	r2, #0
   bc362:	f8c8 2020 	str.w	r2, [r8, #32]
    obs[oidx].sensor[sidx++].inuse = true;
   bc366:	2201      	movs	r2, #1
    obs[oidx].sensor[sidx].f_obs = (float) t;
   bc368:	ed88 8a09 	vstr	s16, [r8, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc36c:	f888 2030 	strb.w	r2, [r8, #48]	; 0x30
  obs[oidx].hth = SystemStatusBits;
   bc370:	9b00      	ldr	r3, [sp, #0]
  OBS_Log(oidx);
   bc372:	9800      	ldr	r0, [sp, #0]
  obs[oidx].hth = SystemStatusBits;
   bc374:	f640 2298 	movw	r2, #2712	; 0xa98
   bc378:	fb02 9303 	mla	r3, r2, r3, r9
   bc37c:	4a3a      	ldr	r2, [pc, #232]	; (bc468 <_Z6OBS_Dov+0x1d88>)
   bc37e:	6812      	ldr	r2, [r2, #0]
   bc380:	615a      	str	r2, [r3, #20]
  OBS_Log(oidx);
   bc382:	f7fd fa23 	bl	b97cc <_Z7OBS_Logi>
  lastOBS = System.millis();
   bc386:	f7f9 fc65 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bc38a:	4b38      	ldr	r3, [pc, #224]	; (bc46c <_Z6OBS_Dov+0x1d8c>)
   bc38c:	e9c3 0100 	strd	r0, r1, [r3]
}
   bc390:	b019      	add	sp, #100	; 0x64
   bc392:	ecbd 8b06 	vpop	{d8-d10}
   bc396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float h = 0.0;
   bc39a:	eddf 8a35 	vldr	s17, [pc, #212]	; bc470 <_Z6OBS_Dov+0x1d90>
    float t = 0.0;
   bc39e:	eeb0 8a68 	vmov.f32	s16, s17
    float p = 0.0;
   bc3a2:	eef0 9a68 	vmov.f32	s19, s17
   bc3a6:	f7fe bce6 	b.w	bad76 <_Z6OBS_Dov+0x696>
      p = bm32.readPressure()/100.0F;       // bp2 hPa
   bc3aa:	4832      	ldr	r0, [pc, #200]	; (bc474 <_Z6OBS_Dov+0x1d94>)
   bc3ac:	f003 fb75 	bl	bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>
   bc3b0:	eddf 7a31 	vldr	s15, [pc, #196]	; bc478 <_Z6OBS_Dov+0x1d98>
      t = bm32.readTemperature();           // bt2
   bc3b4:	482f      	ldr	r0, [pc, #188]	; (bc474 <_Z6OBS_Dov+0x1d94>)
      p = bm32.readPressure()/100.0F;       // bp2 hPa
   bc3b6:	eec0 9a27 	vdiv.f32	s19, s0, s15
      t = bm32.readTemperature();           // bt2
   bc3ba:	f003 fb63 	bl	bfa84 <_ZN15Adafruit_BMP3XX15readTemperatureEv>
   bc3be:	f7fe bc78 	b.w	bacb2 <_Z6OBS_Dov+0x5d2>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bc3c2:	eddf 9a1c 	vldr	s19, [pc, #112]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3c6:	f7fe bcfe 	b.w	badc6 <_Z6OBS_Dov+0x6e6>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc3ca:	ed9f 8a1a 	vldr	s16, [pc, #104]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3ce:	f7fe bd13 	b.w	badf8 <_Z6OBS_Dov+0x718>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc3d2:	eddf 8a18 	vldr	s17, [pc, #96]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3d6:	f7fe bd26 	b.w	bae26 <_Z6OBS_Dov+0x746>
    obs[oidx].sensor[sidx++].inuse = true;
   bc3da:	46b8      	mov	r8, r7
   bc3dc:	f7fe bd67 	b.w	baeae <_Z6OBS_Dov+0x7ce>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc3e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3e4:	f7fe bd91 	b.w	baf0a <_Z6OBS_Dov+0x82a>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc3e8:	ed9f 0a12 	vldr	s0, [pc, #72]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3ec:	f7fe bdc7 	b.w	baf7e <_Z6OBS_Dov+0x89e>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc3f0:	ed9f 8a10 	vldr	s16, [pc, #64]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3f4:	f7fe be05 	b.w	bb002 <_Z6OBS_Dov+0x922>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc3f8:	eddf 9a0e 	vldr	s19, [pc, #56]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc3fc:	f7fe be3b 	b.w	bb076 <_Z6OBS_Dov+0x996>
  float sht1_temp = 0.0;
   bc400:	ed9f 8a1b 	vldr	s16, [pc, #108]	; bc470 <_Z6OBS_Dov+0x1d90>
  float sht1_humid = 0.0;
   bc404:	eef0 9a48 	vmov.f32	s19, s16
   bc408:	f7fe be44 	b.w	bb094 <_Z6OBS_Dov+0x9b4>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc40c:	ed9f 0a09 	vldr	s0, [pc, #36]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc410:	f7fe bea0 	b.w	bb154 <_Z6OBS_Dov+0xa74>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc414:	ed9f 0a07 	vldr	s0, [pc, #28]	; bc434 <_Z6OBS_Dov+0x1d54>
   bc418:	f7fe bed4 	b.w	bb1c4 <_Z6OBS_Dov+0xae4>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc41c:	464e      	mov	r6, r9
   bc41e:	4657      	mov	r7, sl
   bc420:	f7fe bf15 	b.w	bb24e <_Z6OBS_Dov+0xb6e>
   bc424:	2002df9e 	.word	0x2002df9e
   bc428:	2003e394 	.word	0x2003e394
   bc42c:	c2200000 	.word	0xc2200000
   bc430:	42700000 	.word	0x42700000
   bc434:	c479f99a 	.word	0xc479f99a
   bc438:	000cb9af 	.word	0x000cb9af
   bc43c:	000cb9b6 	.word	0x000cb9b6
   bc440:	000cb9bc 	.word	0x000cb9bc
   bc444:	000cb9c3 	.word	0x000cb9c3
   bc448:	2002df9d 	.word	0x2002df9d
   bc44c:	2003e38c 	.word	0x2003e38c
   bc450:	000cb9c8 	.word	0x000cb9c8
   bc454:	000cb9cf 	.word	0x000cb9cf
   bc458:	000cb9d6 	.word	0x000cb9d6
   bc45c:	000cb9dd 	.word	0x000cb9dd
   bc460:	000cb9e4 	.word	0x000cb9e4
   bc464:	000cb9eb 	.word	0x000cb9eb
   bc468:	2002d908 	.word	0x2002d908
   bc46c:	2002e648 	.word	0x2002e648
   bc470:	00000000 	.word	0x00000000
   bc474:	2002e1e0 	.word	0x2002e1e0
   bc478:	42c80000 	.word	0x42c80000
   bc47c:	20032cd0 	.word	0x20032cd0
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc480:	a767      	add	r7, pc, #412	; (adr r7, bc620 <_Z6OBS_Dov+0x1f40>)
   bc482:	e9d7 6700 	ldrd	r6, r7, [r7]
   bc486:	f7fe bf01 	b.w	bb28c <_Z6OBS_Dov+0xbac>
      Output ("ERR:HDC1 Read");
   bc48a:	4867      	ldr	r0, [pc, #412]	; (bc628 <_Z6OBS_Dov+0x1f48>)
   bc48c:	f7f9 fe7e 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_1;  // Turn On Bit
   bc490:	f8db 3000 	ldr.w	r3, [fp]
   bc494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc498:	f7fe befe 	b.w	bb298 <_Z6OBS_Dov+0xbb8>
      t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc49c:	464e      	mov	r6, r9
   bc49e:	4657      	mov	r7, sl
   bc4a0:	f7fe bf67 	b.w	bb372 <_Z6OBS_Dov+0xc92>
      h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc4a4:	a75e      	add	r7, pc, #376	; (adr r7, bc620 <_Z6OBS_Dov+0x1f40>)
   bc4a6:	e9d7 6700 	ldrd	r6, r7, [r7]
   bc4aa:	f7fe bf81 	b.w	bb3b0 <_Z6OBS_Dov+0xcd0>
      Output ("ERR:HDC1 Read");
   bc4ae:	485e      	ldr	r0, [pc, #376]	; (bc628 <_Z6OBS_Dov+0x1f48>)
   bc4b0:	f7f9 fe6c 	bl	b618c <_Z6OutputPKc>
      SystemStatusBits |= SSB_HDC_2;  // Turn On Bit
   bc4b4:	f8db 3000 	ldr.w	r3, [fp]
   bc4b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   bc4bc:	f7fe bf7e 	b.w	bb3bc <_Z6OBS_Dov+0xcdc>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc4c0:	ed9f aa5a 	vldr	s20, [pc, #360]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc4c4:	f7ff b80c 	b.w	bb4e0 <_Z6OBS_Dov+0xe00>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bc4c8:	eddf 8a58 	vldr	s17, [pc, #352]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc4cc:	f7ff b821 	b.w	bb512 <_Z6OBS_Dov+0xe32>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc4d0:	ed9f aa56 	vldr	s20, [pc, #344]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc4d4:	f7ff b873 	b.w	bb5be <_Z6OBS_Dov+0xede>
    p = (isnan(p) || (p < QC_MIN_P)  || (p > QC_MAX_P))  ? QC_ERR_P  : p;
   bc4d8:	eddf 8a54 	vldr	s17, [pc, #336]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc4dc:	f7ff b888 	b.w	bb5f0 <_Z6OBS_Dov+0xf10>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc4e0:	ed9f aa52 	vldr	s20, [pc, #328]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc4e4:	f7ff b8dd 	b.w	bb6a2 <_Z6OBS_Dov+0xfc2>
    h = (isnan(h) || (h < QC_MIN_RH) || (h > QC_MAX_RH)) ? QC_ERR_RH : h;
   bc4e8:	eddf 8a50 	vldr	s17, [pc, #320]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc4ec:	f7ff b8f2 	b.w	bb6d4 <_Z6OBS_Dov+0xff4>
        SI1145_exists = false;
   bc4f0:	7030      	strb	r0, [r6, #0]
        Output ("SI OFFLINE");
   bc4f2:	484f      	ldr	r0, [pc, #316]	; (bc630 <_Z6OBS_Dov+0x1f50>)
   bc4f4:	f7f9 fe4a 	bl	b618c <_Z6OutputPKc>
        SystemStatusBits |= SSB_SI1145;  // Turn On Bit    
   bc4f8:	f8db 3000 	ldr.w	r3, [fp]
   bc4fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   bc500:	f8cb 3000 	str.w	r3, [fp]
   bc504:	f7ff b985 	b.w	bb812 <_Z6OBS_Dov+0x1132>
    si_vis = (isnan(si_vis) || (si_vis < QC_MIN_VI)  || (si_vis > QC_MAX_VI)) ? QC_ERR_VI  : si_vis;
   bc508:	eddf aa48 	vldr	s21, [pc, #288]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc50c:	f7ff b998 	b.w	bb840 <_Z6OBS_Dov+0x1160>
    si_ir  = (isnan(si_ir)  || (si_ir  < QC_MIN_IR)  || (si_ir  > QC_MAX_IR)) ? QC_ERR_IR  : si_ir;
   bc510:	ed9f aa46 	vldr	s20, [pc, #280]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc514:	f7ff b9a5 	b.w	bb862 <_Z6OBS_Dov+0x1182>
    si_uv  = (isnan(si_uv)  || (si_uv  < QC_MIN_UV)  || (si_uv  > QC_MAX_UV)) ? QC_ERR_UV  : si_uv;
   bc518:	eddf 8a44 	vldr	s17, [pc, #272]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc51c:	f7ff b9ef 	b.w	bb8fe <_Z6OBS_Dov+0x121e>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc520:	ed9f 0a42 	vldr	s0, [pc, #264]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc524:	f7ff ba58 	b.w	bb9d8 <_Z6OBS_Dov+0x12f8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc528:	ed9f 0a40 	vldr	s0, [pc, #256]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc52c:	f7ff ba91 	b.w	bba52 <_Z6OBS_Dov+0x1372>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc530:	eddf 8a3e 	vldr	s17, [pc, #248]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc534:	f7ff bace 	b.w	bbad4 <_Z6OBS_Dov+0x13f4>
  float mcp3_temp = 0.0;  // globe temperature
   bc538:	eddf 8a3e 	vldr	s17, [pc, #248]	; bc634 <_Z6OBS_Dov+0x1f54>
   bc53c:	f7ff bad8 	b.w	bbaf0 <_Z6OBS_Dov+0x1410>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc540:	ed9f 0a3a 	vldr	s0, [pc, #232]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc544:	f7ff bb03 	b.w	bbb4e <_Z6OBS_Dov+0x146e>
    lux = (isnan(lux) || (lux < QC_MIN_VLX)  || (lux > QC_MAX_VLX))  ? QC_ERR_VLX  : lux;
   bc548:	ed9f aa3b 	vldr	s20, [pc, #236]	; bc638 <_Z6OBS_Dov+0x1f58>
   bc54c:	f7ff bb2d 	b.w	bbbaa <_Z6OBS_Dov+0x14ca>
    lux = (isnan(lux) || (lux < QC_MIN_BLX)  || (lux > QC_MAX_BLX))  ? QC_ERR_BLX  : lux;
   bc550:	ed9f aa36 	vldr	s20, [pc, #216]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc554:	f7ff bb5d 	b.w	bbc12 <_Z6OBS_Dov+0x1532>
  else if (A4_State == A4_STATE_RAIN) {
   bc558:	2b02      	cmp	r3, #2
   bc55a:	f47f abe4 	bne.w	bbd26 <_Z6OBS_Dov+0x1646>
    strcpy (obs[oidx].sensor[sidx].id, "rg2");
   bc55e:	f04f 0b1c 	mov.w	fp, #28
   bc562:	fb0b f708 	mul.w	r7, fp, r8
   bc566:	19e8      	adds	r0, r5, r7
   bc568:	4934      	ldr	r1, [pc, #208]	; (bc63c <_Z6OBS_Dov+0x1f5c>)
   bc56a:	4420      	add	r0, r4
   bc56c:	f00d fe9e 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc570:	9b00      	ldr	r3, [sp, #0]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
   bc572:	4933      	ldr	r1, [pc, #204]	; (bc640 <_Z6OBS_Dov+0x1f60>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bc574:	f640 2698 	movw	r6, #2712	; 0xa98
   bc578:	435e      	muls	r6, r3
   bc57a:	19ba      	adds	r2, r7, r6
   bc57c:	4422      	add	r2, r4
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
   bc57e:	eb07 000b 	add.w	r0, r7, fp
    obs[oidx].sensor[sidx].type = F_OBS;
   bc582:	f04f 0a00 	mov.w	sl, #0
    obs[oidx].sensor[sidx++].inuse = true;
   bc586:	f04f 0901 	mov.w	r9, #1
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
   bc58a:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bc58c:	f108 0301 	add.w	r3, r8, #1
    obs[oidx].sensor[sidx].type = F_OBS;
   bc590:	f8c2 a020 	str.w	sl, [r2, #32]
    obs[oidx].sensor[sidx].f_obs = rain2;
   bc594:	ed82 9a09 	vstr	s18, [r2, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc598:	f882 9030 	strb.w	r9, [r2, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
   bc59c:	4420      	add	r0, r4
    obs[oidx].sensor[sidx++].inuse = true;
   bc59e:	9301      	str	r3, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgt2");
   bc5a0:	f00d fe84 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc5a4:	9b01      	ldr	r3, [sp, #4]
   bc5a6:	fb0b 6303 	mla	r3, fp, r3, r6
   bc5aa:	18e1      	adds	r1, r4, r3
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
   bc5ac:	4b25      	ldr	r3, [pc, #148]	; (bc644 <_Z6OBS_Dov+0x1f64>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bc5ae:	f8c1 a020 	str.w	sl, [r1, #32]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
   bc5b2:	f107 0038 	add.w	r0, r7, #56	; 0x38
    obs[oidx].sensor[sidx].f_obs = eeprom.rgt2;
   bc5b6:	689a      	ldr	r2, [r3, #8]
   bc5b8:	624a      	str	r2, [r1, #36]	; 0x24
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
   bc5ba:	4428      	add	r0, r5
    obs[oidx].sensor[sidx++].inuse = true;
   bc5bc:	f108 0202 	add.w	r2, r8, #2
   bc5c0:	f881 9030 	strb.w	r9, [r1, #48]	; 0x30
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
   bc5c4:	4420      	add	r0, r4
   bc5c6:	4920      	ldr	r1, [pc, #128]	; (bc648 <_Z6OBS_Dov+0x1f68>)
    obs[oidx].sensor[sidx++].inuse = true;
   bc5c8:	9201      	str	r2, [sp, #4]
    strcpy (obs[oidx].sensor[sidx].id, "rgp2");
   bc5ca:	f00d fe6f 	bl	ca2ac <strcpy>
    obs[oidx].sensor[sidx].type = F_OBS;
   bc5ce:	9a01      	ldr	r2, [sp, #4]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
   bc5d0:	4b1c      	ldr	r3, [pc, #112]	; (bc644 <_Z6OBS_Dov+0x1f64>)
    obs[oidx].sensor[sidx].type = F_OBS;
   bc5d2:	fb0b 6602 	mla	r6, fp, r2, r6
   bc5d6:	4426      	add	r6, r4
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
   bc5d8:	68db      	ldr	r3, [r3, #12]
    obs[oidx].sensor[sidx].type = F_OBS;
   bc5da:	f8c6 a020 	str.w	sl, [r6, #32]
    obs[oidx].sensor[sidx].f_obs = eeprom.rgp2;
   bc5de:	6273      	str	r3, [r6, #36]	; 0x24
    obs[oidx].sensor[sidx++].inuse = true;
   bc5e0:	f108 0803 	add.w	r8, r8, #3
   bc5e4:	f886 9030 	strb.w	r9, [r6, #48]	; 0x30
   bc5e8:	f7ff bb9d 	b.w	bbd26 <_Z6OBS_Dov+0x1646>
  float heat_index = 0.0;
   bc5ec:	2700      	movs	r7, #0
   bc5ee:	e465      	b.n	bbebc <_Z6OBS_Dov+0x17dc>
  float wetbulb_temp = 0.0;
   bc5f0:	f04f 0900 	mov.w	r9, #0
   bc5f4:	e494      	b.n	bbf20 <_Z6OBS_Dov+0x1840>
      wbgt = wbgt_using_hi(heat_index);
   bc5f6:	4638      	mov	r0, r7
   bc5f8:	f7f7 fe76 	bl	b42e8 <__aeabi_f2d>
   bc5fc:	ec41 0b10 	vmov	d0, r0, r1
   bc600:	f7fa ff1a 	bl	b7438 <_Z13wbgt_using_hid>
   bc604:	e4b1      	b.n	bbf6a <_Z6OBS_Dov+0x188a>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc606:	ed9f 8a09 	vldr	s16, [pc, #36]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc60a:	e4f6      	b.n	bbffa <_Z6OBS_Dov+0x191a>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc60c:	ed9f 8a07 	vldr	s16, [pc, #28]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc610:	e591      	b.n	bc136 <_Z6OBS_Dov+0x1a56>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc612:	ed9f 8a06 	vldr	s16, [pc, #24]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc616:	e65f      	b.n	bc2d8 <_Z6OBS_Dov+0x1bf8>
    t = (isnan(t) || (t < QC_MIN_T)  || (t > QC_MAX_T))  ? QC_ERR_T  : t;
   bc618:	ed9f 8a04 	vldr	s16, [pc, #16]	; bc62c <_Z6OBS_Dov+0x1f4c>
   bc61c:	e690      	b.n	bc340 <_Z6OBS_Dov+0x1c60>
   bc61e:	bf00      	nop
   bc620:	33333333 	.word	0x33333333
   bc624:	c08f3f33 	.word	0xc08f3f33
   bc628:	000cb8f9 	.word	0x000cb8f9
   bc62c:	c479f99a 	.word	0xc479f99a
   bc630:	000cad1b 	.word	0x000cad1b
   bc634:	00000000 	.word	0x00000000
   bc638:	c479c000 	.word	0xc479c000
   bc63c:	000cb95b 	.word	0x000cb95b
   bc640:	000cb95f 	.word	0x000cb95f
   bc644:	2002e5f4 	.word	0x2002e5f4
   bc648:	000cb964 	.word	0x000cb964

000bc64c <_Z22Output_CellBatteryInfov>:
void Output_CellBatteryInfo() {
   bc64c:	b530      	push	{r4, r5, lr}
   bc64e:	ed2d 8b02 	vpush	{d8}
   bc652:	b08d      	sub	sp, #52	; 0x34
  CellularSignal sig = Cellular.RSSI();
   bc654:	491f      	ldr	r1, [pc, #124]	; (bc6d4 <_Z22Output_CellBatteryInfov+0x88>)
   bc656:	a804      	add	r0, sp, #16
   bc658:	f009 f8e2 	bl	c5820 <_ZN5spark13CellularClass4RSSIEv>
  float SignalStrength = sig.getStrength();
   bc65c:	a804      	add	r0, sp, #16
   bc65e:	f009 f93d 	bl	c58dc <_ZNK14CellularSignal11getStrengthEv>
   bc662:	eeb0 8a40 	vmov.f32	s16, s0
  int BatteryState = System.batteryState();
   bc666:	f7fe f82f 	bl	ba6c8 <_ZNK11SystemClass12batteryStateEv.isra.0>
  if (BatteryState>0 && BatteryState<6) {
   bc66a:	1e43      	subs	r3, r0, #1
   bc66c:	2b04      	cmp	r3, #4
  int BatteryState = System.batteryState();
   bc66e:	4604      	mov	r4, r0
  if (BatteryState>0 && BatteryState<6) {
   bc670:	d82d      	bhi.n	bc6ce <_Z22Output_CellBatteryInfov+0x82>
    BatteryPoC = System.batteryCharge();
   bc672:	f7fe f817 	bl	ba6a4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
    (int)SignalStrength, (int)(SignalStrength*100)%100,
   bc676:	eddf 7a18 	vldr	s15, [pc, #96]	; bc6d8 <_Z22Output_CellBatteryInfov+0x8c>
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
   bc67a:	9400      	str	r4, [sp, #0]
    (int)SignalStrength, (int)(SignalStrength*100)%100,
   bc67c:	ee28 7a27 	vmul.f32	s14, s16, s15
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
   bc680:	ee60 7a27 	vmul.f32	s15, s0, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
   bc684:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
   bc688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    (int)SignalStrength, (int)(SignalStrength*100)%100,
   bc68c:	ee17 3a10 	vmov	r3, s14
    BatteryState, (int)BatteryPoC, (int)(BatteryPoC*100)%100);
   bc690:	ee17 2a90 	vmov	r2, s15
  sprintf (Buffer32Bytes, "CS:%d.%02d B:%d,%d.%02d", 
   bc694:	2164      	movs	r1, #100	; 0x64
   bc696:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   bc69a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   bc69e:	fb92 f5f1 	sdiv	r5, r2, r1
   bc6a2:	fb01 2215 	mls	r2, r1, r5, r2
   bc6a6:	9202      	str	r2, [sp, #8]
   bc6a8:	ed8d 0a01 	vstr	s0, [sp, #4]
   bc6ac:	ee17 2a90 	vmov	r2, s15
   bc6b0:	fb93 f0f1 	sdiv	r0, r3, r1
   bc6b4:	fb01 3310 	mls	r3, r1, r0, r3
   bc6b8:	4908      	ldr	r1, [pc, #32]	; (bc6dc <_Z22Output_CellBatteryInfov+0x90>)
   bc6ba:	4809      	ldr	r0, [pc, #36]	; (bc6e0 <_Z22Output_CellBatteryInfov+0x94>)
   bc6bc:	f008 fff0 	bl	c56a0 <sprintf>
  Output(Buffer32Bytes);
   bc6c0:	4807      	ldr	r0, [pc, #28]	; (bc6e0 <_Z22Output_CellBatteryInfov+0x94>)
   bc6c2:	f7f9 fd63 	bl	b618c <_Z6OutputPKc>
}
   bc6c6:	b00d      	add	sp, #52	; 0x34
   bc6c8:	ecbd 8b02 	vpop	{d8}
   bc6cc:	bd30      	pop	{r4, r5, pc}
  float BatteryPoC = 0.0;                 // Battery Percent of Charge
   bc6ce:	ed9f 0a05 	vldr	s0, [pc, #20]	; bc6e4 <_Z22Output_CellBatteryInfov+0x98>
   bc6d2:	e7d0      	b.n	bc676 <_Z22Output_CellBatteryInfov+0x2a>
   bc6d4:	2003e630 	.word	0x2003e630
   bc6d8:	42c80000 	.word	0x42c80000
   bc6dc:	000cb9f2 	.word	0x000cb9f2
   bc6e0:	2002da87 	.word	0x2002da87
   bc6e4:	00000000 	.word	0x00000000

000bc6e8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>:
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
        }
    }

    ResultT result(ResultT defaultValue = ResultT()) const {
   bc6e8:	b570      	push	{r4, r5, r6, lr}
   bc6ea:	4604      	mov	r4, r0
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   bc6ec:	2000      	movs	r0, #0
    ResultT result(ResultT defaultValue = ResultT()) const {
   bc6ee:	460d      	mov	r5, r1
        return (application_thread_current(nullptr) != 0);
   bc6f0:	f008 feb8 	bl	c5464 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc6f4:	b120      	cbz	r0, bc700 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x18>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   bc6f6:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   bc6f8:	b913      	cbnz	r3, bc700 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x18>
        spark_process();
   bc6fa:	f008 fef9 	bl	c54f0 <spark_process>
    }
   bc6fe:	e7fa      	b.n	bc6f6 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0xe>
   bc700:	7863      	ldrb	r3, [r4, #1]
   bc702:	f3bf 8f5b 	dmb	ish
   bc706:	1c66      	adds	r6, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   bc708:	b90b      	cbnz	r3, bc70e <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x26>
        return std::move(defaultValue);
   bc70a:	4628      	mov	r0, r5
    }
   bc70c:	bd70      	pop	{r4, r5, r6, pc}
        return (application_thread_current(nullptr) != 0);
   bc70e:	2000      	movs	r0, #0
   bc710:	f008 fea8 	bl	c5464 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc714:	b120      	cbz	r0, bc720 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x38>
   bc716:	7833      	ldrb	r3, [r6, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   bc718:	b913      	cbnz	r3, bc720 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x38>
        spark_process();
   bc71a:	f008 fee9 	bl	c54f0 <spark_process>
    }
   bc71e:	e7fa      	b.n	bc716 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x2e>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bc720:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   bc722:	2b01      	cmp	r3, #1
   bc724:	d1f1      	bne.n	bc70a <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x22>
            return result_;
   bc726:	7b20      	ldrb	r0, [r4, #12]
   bc728:	e7f0      	b.n	bc70c <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb+0x24>
	...

000bc72c <_GLOBAL__sub_I___appProductVersion>:
      // We need to reinitialize our wind readings before we can move on.
      Wind_Distance_Air_Initialize();
    }
#endif
  }
}
   bc72c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bc72e:	4b65      	ldr	r3, [pc, #404]	; (bc8c4 <_GLOBAL__sub_I___appProductVersion+0x198>)
  SdFat() {
   bc730:	4c65      	ldr	r4, [pc, #404]	; (bc8c8 <_GLOBAL__sub_I___appProductVersion+0x19c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bc732:	4d66      	ldr	r5, [pc, #408]	; (bc8cc <_GLOBAL__sub_I___appProductVersion+0x1a0>)
   bc734:	2208      	movs	r2, #8
   bc736:	b086      	sub	sp, #24
   bc738:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   bc73a:	f00a fee7 	bl	c750c <spark_protocol_instance>
   bc73e:	2300      	movs	r3, #0
   bc740:	461a      	mov	r2, r3
   bc742:	2126      	movs	r1, #38	; 0x26
   bc744:	f00a fef2 	bl	c752c <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   bc748:	f00a fee0 	bl	c750c <spark_protocol_instance>
   bc74c:	2300      	movs	r3, #0
   bc74e:	461a      	mov	r2, r3
   bc750:	210d      	movs	r1, #13
   bc752:	f00a fee3 	bl	c751c <spark_protocol_set_product_id>
   bc756:	2264      	movs	r2, #100	; 0x64
   bc758:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   bc75c:	4a5c      	ldr	r2, [pc, #368]	; (bc8d0 <_GLOBAL__sub_I___appProductVersion+0x1a4>)
   bc75e:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   bc762:	2300      	movs	r3, #0
   bc764:	2201      	movs	r2, #1
   bc766:	6063      	str	r3, [r4, #4]
   bc768:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   bc76c:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   bc770:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   bc774:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   bc778:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   bc77c:	7829      	ldrb	r1, [r5, #0]
   bc77e:	f3bf 8f5b 	dmb	ish
   bc782:	4011      	ands	r1, r2
   bc784:	d10b      	bne.n	bc79e <_GLOBAL__sub_I___appProductVersion+0x72>
   bc786:	4628      	mov	r0, r5
   bc788:	9105      	str	r1, [sp, #20]
   bc78a:	f7f8 fc8d 	bl	b50a8 <__cxa_guard_acquire>
   bc78e:	9905      	ldr	r1, [sp, #20]
   bc790:	b128      	cbz	r0, bc79e <_GLOBAL__sub_I___appProductVersion+0x72>
   bc792:	4850      	ldr	r0, [pc, #320]	; (bc8d4 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
   bc794:	f00a fa2a 	bl	c6bec <_ZN8SPIClassC1E19hal_spi_interface_t>
   bc798:	4628      	mov	r0, r5
   bc79a:	f7f8 fc8a 	bl	b50b2 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   bc79e:	4b4d      	ldr	r3, [pc, #308]	; (bc8d4 <_GLOBAL__sub_I___appProductVersion+0x1a8>)
   bc7a0:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
File SD_fp;
   bc7a4:	484c      	ldr	r0, [pc, #304]	; (bc8d8 <_GLOBAL__sub_I___appProductVersion+0x1ac>)
Adafruit_SSD1306 display32(SCREEN_WIDTH, 32, &Wire, OLED_RESET);
   bc7a6:	4d4d      	ldr	r5, [pc, #308]	; (bc8dc <_GLOBAL__sub_I___appProductVersion+0x1b0>)
   bc7a8:	4e4d      	ldr	r6, [pc, #308]	; (bc8e0 <_GLOBAL__sub_I___appProductVersion+0x1b4>)
   bc7aa:	f7f9 fad5 	bl	b5d58 <_ZN4FileC1Ev>
PMIC pmic;
   bc7ae:	2100      	movs	r1, #0
   bc7b0:	484c      	ldr	r0, [pc, #304]	; (bc8e4 <_GLOBAL__sub_I___appProductVersion+0x1b8>)
   bc7b2:	f00a f8cc 	bl	c694e <_ZN4PMICC1Eb>
   bc7b6:	f00a ff9f 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bc7ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   bc7be:	4603      	mov	r3, r0
   bc7c0:	9400      	str	r4, [sp, #0]
   bc7c2:	2220      	movs	r2, #32
   bc7c4:	2180      	movs	r1, #128	; 0x80
   bc7c6:	e9cd 5601 	strd	r5, r6, [sp, #4]
   bc7ca:	4847      	ldr	r0, [pc, #284]	; (bc8e8 <_GLOBAL__sub_I___appProductVersion+0x1bc>)
   bc7cc:	f004 feec 	bl	c15a8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
Adafruit_SSD1306 display64(SCREEN_WIDTH, 64, &Wire, OLED_RESET);
   bc7d0:	f00a ff92 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bc7d4:	9400      	str	r4, [sp, #0]
   bc7d6:	4603      	mov	r3, r0
   bc7d8:	2240      	movs	r2, #64	; 0x40
   bc7da:	e9cd 5601 	strd	r5, r6, [sp, #4]
   bc7de:	2180      	movs	r1, #128	; 0x80
   bc7e0:	4842      	ldr	r0, [pc, #264]	; (bc8ec <_GLOBAL__sub_I___appProductVersion+0x1c0>)
   bc7e2:	f004 fee1 	bl	c15a8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
DateTime now;
   bc7e6:	4942      	ldr	r1, [pc, #264]	; (bc8f0 <_GLOBAL__sub_I___appProductVersion+0x1c4>)
   bc7e8:	4842      	ldr	r0, [pc, #264]	; (bc8f4 <_GLOBAL__sub_I___appProductVersion+0x1c8>)
   bc7ea:	f006 fb77 	bl	c2edc <_ZN8DateTimeC1Em>
RH_RF95 rf95(LORA_SS, LORA_IRQ_PIN, hardware_spi); // SPI1
   bc7ee:	4b42      	ldr	r3, [pc, #264]	; (bc8f8 <_GLOBAL__sub_I___appProductVersion+0x1cc>)
   bc7f0:	4842      	ldr	r0, [pc, #264]	; (bc8fc <_GLOBAL__sub_I___appProductVersion+0x1d0>)
   bc7f2:	2206      	movs	r2, #6
   bc7f4:	210a      	movs	r1, #10
   bc7f6:	f006 f8f5 	bl	c29e4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>
AES aes;
   bc7fa:	4841      	ldr	r0, [pc, #260]	; (bc900 <_GLOBAL__sub_I___appProductVersion+0x1d4>)
   bc7fc:	f001 fcfa 	bl	be1f4 <_ZN3AESC1Ev>
Adafruit_BMP280 bmp1;
   bc800:	f00a ff7a 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bc804:	4601      	mov	r1, r0
   bc806:	483f      	ldr	r0, [pc, #252]	; (bc904 <_GLOBAL__sub_I___appProductVersion+0x1d8>)
   bc808:	f002 fc64 	bl	bf0d4 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BMP280 bmp2;
   bc80c:	f00a ff74 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bc810:	4601      	mov	r1, r0
   bc812:	483d      	ldr	r0, [pc, #244]	; (bc908 <_GLOBAL__sub_I___appProductVersion+0x1dc>)
   bc814:	f002 fc5e 	bl	bf0d4 <_ZN15Adafruit_BMP280C1EP7TwoWire>
Adafruit_BME280 bme1;
   bc818:	483c      	ldr	r0, [pc, #240]	; (bc90c <_GLOBAL__sub_I___appProductVersion+0x1e0>)
   bc81a:	f001 ffd1 	bl	be7c0 <_ZN15Adafruit_BME280C1Ev>
Adafruit_BME280 bme2;
   bc81e:	483c      	ldr	r0, [pc, #240]	; (bc910 <_GLOBAL__sub_I___appProductVersion+0x1e4>)
   bc820:	f001 ffce 	bl	be7c0 <_ZN15Adafruit_BME280C1Ev>
Adafruit_BMP3XX bm31;
   bc824:	483b      	ldr	r0, [pc, #236]	; (bc914 <_GLOBAL__sub_I___appProductVersion+0x1e8>)
   bc826:	f003 f83d 	bl	bf8a4 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_BMP3XX bm32;
   bc82a:	483b      	ldr	r0, [pc, #236]	; (bc918 <_GLOBAL__sub_I___appProductVersion+0x1ec>)
   bc82c:	f003 f83a 	bl	bf8a4 <_ZN15Adafruit_BMP3XXC1Ev>
Adafruit_HTU21DF htu = Adafruit_HTU21DF();
   bc830:	483a      	ldr	r0, [pc, #232]	; (bc91c <_GLOBAL__sub_I___appProductVersion+0x1f0>)
   bc832:	f004 f8f9 	bl	c0a28 <_ZN16Adafruit_HTU21DFC1Ev>
Adafruit_MCP9808 mcp1;
   bc836:	483a      	ldr	r0, [pc, #232]	; (bc920 <_GLOBAL__sub_I___appProductVersion+0x1f4>)
   bc838:	f004 faee 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp2;
   bc83c:	4839      	ldr	r0, [pc, #228]	; (bc924 <_GLOBAL__sub_I___appProductVersion+0x1f8>)
   bc83e:	f004 faeb 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp3;
   bc842:	4839      	ldr	r0, [pc, #228]	; (bc928 <_GLOBAL__sub_I___appProductVersion+0x1fc>)
   bc844:	f004 fae8 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_MCP9808 mcp4;
   bc848:	4838      	ldr	r0, [pc, #224]	; (bc92c <_GLOBAL__sub_I___appProductVersion+0x200>)
   bc84a:	f004 fae5 	bl	c0e18 <_ZN16Adafruit_MCP9808C1Ev>
Adafruit_SHT31 sht1;
   bc84e:	f00a ff53 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bc852:	4601      	mov	r1, r0
   bc854:	4836      	ldr	r0, [pc, #216]	; (bc930 <_GLOBAL__sub_I___appProductVersion+0x204>)
   bc856:	f004 fc33 	bl	c10c0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SHT31 sht2;
   bc85a:	f00a ff4d 	bl	c76f8 <_Z19__fetch_global_Wirev>
   bc85e:	4601      	mov	r1, r0
   bc860:	4834      	ldr	r0, [pc, #208]	; (bc934 <_GLOBAL__sub_I___appProductVersion+0x208>)
   bc862:	f004 fc2d 	bl	c10c0 <_ZN14Adafruit_SHT31C1EP7TwoWire>
Adafruit_SI1145 uv = Adafruit_SI1145();
   bc866:	4834      	ldr	r0, [pc, #208]	; (bc938 <_GLOBAL__sub_I___appProductVersion+0x20c>)
   bc868:	f004 fcf4 	bl	c1254 <_ZN15Adafruit_SI1145C1Ev>
Adafruit_VEML7700 veml = Adafruit_VEML7700();
   bc86c:	4833      	ldr	r0, [pc, #204]	; (bc93c <_GLOBAL__sub_I___appProductVersion+0x210>)
   bc86e:	f005 fb25 	bl	c1ebc <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_PM25AQI pmaq = Adafruit_PM25AQI();
   bc872:	4833      	ldr	r0, [pc, #204]	; (bc940 <_GLOBAL__sub_I___appProductVersion+0x214>)
   bc874:	f004 fb77 	bl	c0f66 <_ZN16Adafruit_PM25AQIC1Ev>
Adafruit_HDC302x hdc1;
   bc878:	4832      	ldr	r0, [pc, #200]	; (bc944 <_GLOBAL__sub_I___appProductVersion+0x218>)
   bc87a:	f003 ffc6 	bl	c080a <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_HDC302x hdc2;
   bc87e:	4832      	ldr	r0, [pc, #200]	; (bc948 <_GLOBAL__sub_I___appProductVersion+0x21c>)
   bc880:	f003 ffc3 	bl	c080a <_ZN16Adafruit_HDC302xC1Ev>
Adafruit_LPS35HW lps1;
   bc884:	4831      	ldr	r0, [pc, #196]	; (bc94c <_GLOBAL__sub_I___appProductVersion+0x220>)
   bc886:	f004 f993 	bl	c0bb0 <_ZN16Adafruit_LPS35HWC1Ev>
Adafruit_LPS35HW lps2;
   bc88a:	4831      	ldr	r0, [pc, #196]	; (bc950 <_GLOBAL__sub_I___appProductVersion+0x224>)
   bc88c:	f004 f990 	bl	c0bb0 <_ZN16Adafruit_LPS35HWC1Ev>
LeafSens tlw;
   bc890:	4830      	ldr	r0, [pc, #192]	; (bc954 <_GLOBAL__sub_I___appProductVersion+0x228>)
   bc892:	f005 fd96 	bl	c23c2 <_ZN8LeafSensC1Ev>
SVCS3 tsm;
   bc896:	4830      	ldr	r0, [pc, #192]	; (bc958 <_GLOBAL__sub_I___appProductVersion+0x22c>)
   bc898:	f008 f98a 	bl	c4bb0 <_ZN5SVCS3C1Ev>
SVMULTI tmsm;
   bc89c:	482f      	ldr	r0, [pc, #188]	; (bc95c <_GLOBAL__sub_I___appProductVersion+0x230>)
   bc89e:	f008 fa4d 	bl	c4d3c <_ZN7SVMULTIC1Ev>
              error_(SYSTEM_ERROR_NONE) {
   bc8a2:	4b2f      	ldr	r3, [pc, #188]	; (bc960 <_GLOBAL__sub_I___appProductVersion+0x234>)
    SleepResult() {}
   bc8a4:	4a2f      	ldr	r2, [pc, #188]	; (bc964 <_GLOBAL__sub_I___appProductVersion+0x238>)
   bc8a6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bc8a8:	2400      	movs	r4, #0
   bc8aa:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   bc8ae:	2002      	movs	r0, #2
   bc8b0:	f008 fdb8 	bl	c5424 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   bc8b4:	4621      	mov	r1, r4
   bc8b6:	2001      	movs	r0, #1
}
   bc8b8:	b006      	add	sp, #24
   bc8ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_THREAD(ENABLED);
   bc8be:	f008 bdc1 	b.w	c5444 <system_thread_set_state>
   bc8c2:	bf00      	nop
   bc8c4:	2002dfa3 	.word	0x2002dfa3
   bc8c8:	2002dad0 	.word	0x2002dad0
   bc8cc:	2002da50 	.word	0x2002da50
   bc8d0:	000cbe8c 	.word	0x000cbe8c
   bc8d4:	2002da54 	.word	0x2002da54
   bc8d8:	2002df58 	.word	0x2002df58
   bc8dc:	00061a80 	.word	0x00061a80
   bc8e0:	000186a0 	.word	0x000186a0
   bc8e4:	2003e1d8 	.word	0x2003e1d8
   bc8e8:	2002e50c 	.word	0x2002e50c
   bc8ec:	2002e580 	.word	0x2002e580
   bc8f0:	386d4380 	.word	0x386d4380
   bc8f4:	20032cc4 	.word	0x20032cc4
   bc8f8:	2003e5f4 	.word	0x2003e5f4
   bc8fc:	2003e208 	.word	0x2003e208
   bc900:	2002dfa8 	.word	0x2002dfa8
   bc904:	2002e390 	.word	0x2002e390
   bc908:	2002e3d0 	.word	0x2002e3d0
   bc90c:	2002e2e0 	.word	0x2002e2e0
   bc910:	2002e338 	.word	0x2002e338
   bc914:	2002e0e0 	.word	0x2002e0e0
   bc918:	2002e1e0 	.word	0x2002e1e0
   bc91c:	2002e628 	.word	0x2002e628
   bc920:	20032890 	.word	0x20032890
   bc924:	2003289c 	.word	0x2003289c
   bc928:	200328a8 	.word	0x200328a8
   bc92c:	200328b4 	.word	0x200328b4
   bc930:	2003e338 	.word	0x2003e338
   bc934:	2003e348 	.word	0x2003e348
   bc938:	2003e39c 	.word	0x2003e39c
   bc93c:	2003e3a4 	.word	0x2003e3a4
   bc940:	2003e1b0 	.word	0x2003e1b0
   bc944:	2002e618 	.word	0x2002e618
   bc948:	2002e620 	.word	0x2002e620
   bc94c:	20032858 	.word	0x20032858
   bc950:	20032874 	.word	0x20032874
   bc954:	2003e384 	.word	0x2003e384
   bc958:	2003e394 	.word	0x2003e394
   bc95c:	2003e38c 	.word	0x2003e38c
   bc960:	2002df90 	.word	0x2002df90
   bc964:	ffff0000 	.word	0xffff0000

000bc968 <_Z15lora_initializev>:
void lora_initialize() {
   bc968:	b510      	push	{r4, lr}
  if (lora_cf_validate()) {
   bc96a:	f7f9 fe3f 	bl	b65ec <_Z16lora_cf_validatev>
   bc96e:	2800      	cmp	r0, #0
   bc970:	d04b      	beq.n	bca0a <_Z15lora_initializev+0xa2>
    pinMode(LORA_RESET, OUTPUT);
   bc972:	2101      	movs	r1, #1
   bc974:	2009      	movs	r0, #9
   bc976:	f00a fe1f 	bl	c75b8 <pinMode>
    digitalWrite(LORA_RESET, LOW);
   bc97a:	2100      	movs	r1, #0
   bc97c:	2009      	movs	r0, #9
   bc97e:	f00a fe2c 	bl	c75da <digitalWrite>
    delay(100);
   bc982:	2064      	movs	r0, #100	; 0x64
   bc984:	f008 fed4 	bl	c5730 <delay>
    digitalWrite(LORA_RESET, HIGH);
   bc988:	2101      	movs	r1, #1
   bc98a:	2009      	movs	r0, #9
   bc98c:	f00a fe25 	bl	c75da <digitalWrite>
    delay(100);
   bc990:	2064      	movs	r0, #100	; 0x64
   bc992:	f008 fecd 	bl	c5730 <delay>
    if (rf95.init()) {
   bc996:	481e      	ldr	r0, [pc, #120]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc998:	f006 fa04 	bl	c2da4 <_ZN7RH_RF954initEv>
   bc99c:	b370      	cbz	r0, bc9fc <_Z15lora_initializev+0x94>
      rf95.setTxPower(cf_lora_txpower, false);
   bc99e:	4b1d      	ldr	r3, [pc, #116]	; (bca14 <_Z15lora_initializev+0xac>)
   bc9a0:	481b      	ldr	r0, [pc, #108]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc9a2:	f993 1000 	ldrsb.w	r1, [r3]
      rf95.setThisAddress(cf_lora_unitid);
   bc9a6:	4c1c      	ldr	r4, [pc, #112]	; (bca18 <_Z15lora_initializev+0xb0>)
      rf95.setTxPower(cf_lora_txpower, false);
   bc9a8:	2200      	movs	r2, #0
   bc9aa:	f006 f9b3 	bl	c2d14 <_ZN7RH_RF9510setTxPowerEab>
      rf95.setFrequency(cf_lora_freq);
   bc9ae:	4b1b      	ldr	r3, [pc, #108]	; (bca1c <_Z15lora_initializev+0xb4>)
   bc9b0:	4817      	ldr	r0, [pc, #92]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc9b2:	ed93 0a00 	vldr	s0, [r3]
   bc9b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   bc9ba:	f006 f849 	bl	c2a50 <_ZN7RH_RF9512setFrequencyEf>
      rf95.setThisAddress(cf_lora_unitid);
   bc9be:	7821      	ldrb	r1, [r4, #0]
   bc9c0:	4813      	ldr	r0, [pc, #76]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc9c2:	f005 fdb9 	bl	c2538 <_ZN15RHGenericDriver14setThisAddressEh>
      rf95.setHeaderFrom(cf_lora_unitid);
   bc9c6:	7821      	ldrb	r1, [r4, #0]
   bc9c8:	4811      	ldr	r0, [pc, #68]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc9ca:	f005 fdb9 	bl	c2540 <_ZN15RHGenericDriver13setHeaderFromEh>
      rf95.setPromiscuous(true);
   bc9ce:	4810      	ldr	r0, [pc, #64]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc9d0:	2101      	movs	r1, #1
   bc9d2:	f005 fdaf 	bl	c2534 <_ZN15RHGenericDriver14setPromiscuousEb>
      rf95.setModeRx();
   bc9d6:	480e      	ldr	r0, [pc, #56]	; (bca10 <_Z15lora_initializev+0xa8>)
   bc9d8:	f006 f92e 	bl	c2c38 <_ZN7RH_RF959setModeRxEv>
      LORA_exists=true;
   bc9dc:	4b10      	ldr	r3, [pc, #64]	; (bca20 <_Z15lora_initializev+0xb8>)
      Output ("LORA OK");
   bc9de:	4811      	ldr	r0, [pc, #68]	; (bca24 <_Z15lora_initializev+0xbc>)
      LORA_exists=true;
   bc9e0:	2201      	movs	r2, #1
   bc9e2:	701a      	strb	r2, [r3, #0]
    Output ("LORA INIT ERR");
   bc9e4:	f7f9 fbd2 	bl	b618c <_Z6OutputPKc>
  lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);  // Minutes * 60 seconds
   bc9e8:	f7f9 f934 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bc9ec:	4a0e      	ldr	r2, [pc, #56]	; (bca28 <_Z15lora_initializev+0xc0>)
   bc9ee:	4b0f      	ldr	r3, [pc, #60]	; (bca2c <_Z15lora_initializev+0xc4>)
   bc9f0:	1880      	adds	r0, r0, r2
   bc9f2:	f141 0100 	adc.w	r1, r1, #0
   bc9f6:	e9c3 0100 	strd	r0, r1, [r3]
}
   bc9fa:	bd10      	pop	{r4, pc}
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
   bc9fc:	4a0c      	ldr	r2, [pc, #48]	; (bca30 <_Z15lora_initializev+0xc8>)
      Output ("LORA NF");
   bc9fe:	480d      	ldr	r0, [pc, #52]	; (bca34 <_Z15lora_initializev+0xcc>)
      SystemStatusBits |= SSB_LORA;  // Turn On Bit
   bca00:	6813      	ldr	r3, [r2, #0]
   bca02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   bca06:	6013      	str	r3, [r2, #0]
      Output ("LORA NF");
   bca08:	e7ec      	b.n	bc9e4 <_Z15lora_initializev+0x7c>
    Output ("LORA INIT ERR");
   bca0a:	480b      	ldr	r0, [pc, #44]	; (bca38 <_Z15lora_initializev+0xd0>)
   bca0c:	e7ea      	b.n	bc9e4 <_Z15lora_initializev+0x7c>
   bca0e:	bf00      	nop
   bca10:	2003e208 	.word	0x2003e208
   bca14:	2002d924 	.word	0x2002d924
   bca18:	2002d928 	.word	0x2002d928
   bca1c:	2002d920 	.word	0x2002d920
   bca20:	2002dab1 	.word	0x2002dab1
   bca24:	000cba0a 	.word	0x000cba0a
   bca28:	001b7740 	.word	0x001b7740
   bca2c:	2002e650 	.word	0x2002e650
   bca30:	2002d908 	.word	0x2002d908
   bca34:	000cba12 	.word	0x000cba12
   bca38:	000cba1a 	.word	0x000cba1a

000bca3c <_Z14lora_msg_checkv.part.0>:
/* 
 *=======================================================================================================================
 * lora_msg_check()
 *=======================================================================================================================
 */
void lora_msg_check() {
   bca3c:	b570      	push	{r4, r5, r6, lr}
   bca3e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
    if (rf95.available()) {
      byte iv [N_BLOCK];
    
      // Should be a message for us now
      uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; // 251 Bytes
      uint8_t len  = sizeof(buf);
   bca42:	24fb      	movs	r4, #251	; 0xfb
      uint8_t from = rf95.headerFrom();
   bca44:	483b      	ldr	r0, [pc, #236]	; (bcb34 <_Z14lora_msg_checkv.part.0+0xf8>)
      uint8_t len  = sizeof(buf);
   bca46:	f88d 4013 	strb.w	r4, [sp, #19]
      uint8_t from = rf95.headerFrom();
   bca4a:	f005 fd85 	bl	c2558 <_ZN15RHGenericDriver10headerFromEv>
      uint8_t to   = rf95.headerTo();
   bca4e:	4839      	ldr	r0, [pc, #228]	; (bcb34 <_Z14lora_msg_checkv.part.0+0xf8>)
   bca50:	f005 fd80 	bl	c2554 <_ZN15RHGenericDriver8headerToEv>
      uint8_t id   = rf95.headerId();
   bca54:	4837      	ldr	r0, [pc, #220]	; (bcb34 <_Z14lora_msg_checkv.part.0+0xf8>)
   bca56:	f005 fd81 	bl	c255c <_ZN15RHGenericDriver8headerIdEv>
      uint8_t flags= rf95.headerFlags();
   bca5a:	4836      	ldr	r0, [pc, #216]	; (bcb34 <_Z14lora_msg_checkv.part.0+0xf8>)
   bca5c:	f005 fd80 	bl	c2560 <_ZN15RHGenericDriver11headerFlagsEv>
      int8_t  rssi = rf95.lastRssi(); 
   bca60:	4834      	ldr	r0, [pc, #208]	; (bcb34 <_Z14lora_msg_checkv.part.0+0xf8>)
   bca62:	f005 fd7f 	bl	c2564 <_ZN15RHGenericDriver8lastRssiEv>
      uint8_t byte2;
      uint8_t i;
      uint8_t msglen = 0;
      char msg[256];             // Used to hold decrypted lora messages

      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
   bca66:	4622      	mov	r2, r4
   bca68:	2100      	movs	r1, #0
   bca6a:	a809      	add	r0, sp, #36	; 0x24
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
   bca6c:	ac48      	add	r4, sp, #288	; 0x120
      memset(buf, 0, RH_RF95_MAX_MESSAGE_LEN);
   bca6e:	f00d fba9 	bl	ca1c4 <memset>
      memset(msg, 0, RH_RF95_MAX_MESSAGE_LEN+1);
   bca72:	22fc      	movs	r2, #252	; 0xfc
   bca74:	2100      	movs	r1, #0
   bca76:	4620      	mov	r0, r4
   bca78:	f00d fba4 	bl	ca1c4 <memset>
    
      if (rf95.recv(buf, &len)) {
   bca7c:	482d      	ldr	r0, [pc, #180]	; (bcb34 <_Z14lora_msg_checkv.part.0+0xf8>)
   bca7e:	f10d 0213 	add.w	r2, sp, #19
   bca82:	a909      	add	r1, sp, #36	; 0x24
   bca84:	f005 ff68 	bl	c2958 <_ZN7RH_RF954recvEPhS0_>
   bca88:	2800      	cmp	r0, #0
   bca8a:	d043      	beq.n	bcb14 <_Z14lora_msg_checkv.part.0+0xd8>
        // memcpy (msg, &buf[3], buf[0]);
        // Output (msg);
        // Serial_write ("LoRa Msg");
     
        aes.iv_inc();
   bca8c:	482a      	ldr	r0, [pc, #168]	; (bcb38 <_Z14lora_msg_checkv.part.0+0xfc>)
   bca8e:	f001 fe56 	bl	be73e <_ZN3AES6iv_incEv>
        aes.set_IV(AES_MYIV);
   bca92:	4b2a      	ldr	r3, [pc, #168]	; (bcb3c <_Z14lora_msg_checkv.part.0+0x100>)
   bca94:	4828      	ldr	r0, [pc, #160]	; (bcb38 <_Z14lora_msg_checkv.part.0+0xfc>)
   bca96:	e9d3 2300 	ldrd	r2, r3, [r3]
        aes.get_IV(iv);
   bca9a:	ad05      	add	r5, sp, #20
        aes.set_IV(AES_MYIV);
   bca9c:	f001 fe3b 	bl	be716 <_ZN3AES6set_IVEy>
        aes.get_IV(iv);
   bcaa0:	4825      	ldr	r0, [pc, #148]	; (bcb38 <_Z14lora_msg_checkv.part.0+0xfc>)
   bcaa2:	4629      	mov	r1, r5
   bcaa4:	f001 fe63 	bl	be76e <_ZN3AES6get_IVEPh>
        aes.do_aes_decrypt(buf, len, (byte *) msg, AES_KEY, 128, iv);
   bcaa8:	2380      	movs	r3, #128	; 0x80
   bcaaa:	9301      	str	r3, [sp, #4]
   bcaac:	4b24      	ldr	r3, [pc, #144]	; (bcb40 <_Z14lora_msg_checkv.part.0+0x104>)
   bcaae:	9300      	str	r3, [sp, #0]
   bcab0:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bcab4:	4820      	ldr	r0, [pc, #128]	; (bcb38 <_Z14lora_msg_checkv.part.0+0xfc>)
   bcab6:	9502      	str	r5, [sp, #8]
   bcab8:	4623      	mov	r3, r4
   bcaba:	a909      	add	r1, sp, #36	; 0x24
   bcabc:	f001 fe64 	bl	be788 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>
      
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
   bcac0:	78e3      	ldrb	r3, [r4, #3]
   bcac2:	2b49      	cmp	r3, #73	; 0x49
   bcac4:	d111      	bne.n	bcaea <_Z14lora_msg_checkv.part.0+0xae>
   bcac6:	7923      	ldrb	r3, [r4, #4]
   bcac8:	2b46      	cmp	r3, #70	; 0x46
             ( msg[3] == 'L' && msg[4] == 'R')) {
   bcaca:	d123      	bne.n	bcb14 <_Z14lora_msg_checkv.part.0+0xd8>

          // Get length of what follows
          msglen = msg[0];
   bcacc:	f20d 1123 	addw	r1, sp, #291	; 0x123
   bcad0:	7825      	ldrb	r5, [r4, #0]

          // Compute Checksum
          checksum=0;
          for (i=3; i<msglen; i++) {
   bcad2:	2203      	movs	r2, #3
          checksum=0;
   bcad4:	2300      	movs	r3, #0
   bcad6:	4608      	mov	r0, r1
          for (i=3; i<msglen; i++) {
   bcad8:	4295      	cmp	r5, r2
   bcada:	d90b      	bls.n	bcaf4 <_Z14lora_msg_checkv.part.0+0xb8>
            checksum += msg[i];
   bcadc:	f811 6b01 	ldrb.w	r6, [r1], #1
          for (i=3; i<msglen; i++) {
   bcae0:	3201      	adds	r2, #1
            checksum += msg[i];
   bcae2:	4433      	add	r3, r6
   bcae4:	b29b      	uxth	r3, r3
          for (i=3; i<msglen; i++) {
   bcae6:	b2d2      	uxtb	r2, r2
   bcae8:	e7f6      	b.n	bcad8 <_Z14lora_msg_checkv.part.0+0x9c>
        if ( ( msg[3] == 'I' && msg[4] == 'F') ||
   bcaea:	2b4c      	cmp	r3, #76	; 0x4c
   bcaec:	d112      	bne.n	bcb14 <_Z14lora_msg_checkv.part.0+0xd8>
             ( msg[3] == 'L' && msg[4] == 'R')) {
   bcaee:	7923      	ldrb	r3, [r4, #4]
   bcaf0:	2b52      	cmp	r3, #82	; 0x52
   bcaf2:	e7ea      	b.n	bcaca <_Z14lora_msg_checkv.part.0+0x8e>
          }
          byte1 = checksum>>8;
          byte2 = checksum%256;

          // Validate Checksum against sent checksum
          if ((byte1 == msg[1]) && (byte2 == msg[2])) {
   bcaf4:	7862      	ldrb	r2, [r4, #1]
   bcaf6:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   bcafa:	d117      	bne.n	bcb2c <_Z14lora_msg_checkv.part.0+0xf0>
   bcafc:	78a2      	ldrb	r2, [r4, #2]
   bcafe:	b2db      	uxtb	r3, r3
   bcb00:	429a      	cmp	r2, r3
   bcb02:	d113      	bne.n	bcb2c <_Z14lora_msg_checkv.part.0+0xf0>
            // Make what follows a string
            msg[msglen]=0;
   bcb04:	2300      	movs	r3, #0
   bcb06:	5563      	strb	r3, [r4, r5]

            char *payload = (char*)(msg+3); // After length and 2 checksum bytes

            // Display LoRa Message on Serial Console           
            Serial_write (payload);
   bcb08:	f7f9 fb16 	bl	b6138 <_Z12Serial_writePKc>

            lora_relay_msg (payload);
   bcb0c:	f20d 1023 	addw	r0, sp, #291	; 0x123
   bcb10:	f7fc fb18 	bl	b9144 <_Z14lora_relay_msgPc>
            Output ("LORA CS-ERR");
          }
        }
      }
      // Received LoRa Signal, Reset alarm
      lora_alarm_timer = System.millis() + (LORA_RESET_NOACTIVITY * 60000);
   bcb14:	f7f9 f89e 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcb18:	4a0a      	ldr	r2, [pc, #40]	; (bcb44 <_Z14lora_msg_checkv.part.0+0x108>)
   bcb1a:	4b0b      	ldr	r3, [pc, #44]	; (bcb48 <_Z14lora_msg_checkv.part.0+0x10c>)
   bcb1c:	1880      	adds	r0, r0, r2
   bcb1e:	f141 0100 	adc.w	r1, r1, #0
   bcb22:	e9c3 0100 	strd	r0, r1, [r3]
        // Need to set some system status bit here too
        lora_initialize();
      }
    }
  }
}
   bcb26:	f50d 7d08 	add.w	sp, sp, #544	; 0x220
   bcb2a:	bd70      	pop	{r4, r5, r6, pc}
            Output ("LORA CS-ERR");
   bcb2c:	4807      	ldr	r0, [pc, #28]	; (bcb4c <_Z14lora_msg_checkv.part.0+0x110>)
   bcb2e:	f7f9 fb2d 	bl	b618c <_Z6OutputPKc>
   bcb32:	e7ef      	b.n	bcb14 <_Z14lora_msg_checkv.part.0+0xd8>
   bcb34:	2003e208 	.word	0x2003e208
   bcb38:	2002dfa8 	.word	0x2002dfa8
   bcb3c:	2002da78 	.word	0x2002da78
   bcb40:	2002da64 	.word	0x2002da64
   bcb44:	001b7740 	.word	0x001b7740
   bcb48:	2002e650 	.word	0x2002e650
   bcb4c:	000cba28 	.word	0x000cba28

000bcb50 <_Z14lora_msg_checkv>:
void lora_msg_check() {
   bcb50:	b508      	push	{r3, lr}
  if (LORA_exists) {
   bcb52:	4b0e      	ldr	r3, [pc, #56]	; (bcb8c <_Z14lora_msg_checkv+0x3c>)
   bcb54:	781b      	ldrb	r3, [r3, #0]
   bcb56:	b1bb      	cbz	r3, bcb88 <_Z14lora_msg_checkv+0x38>
    if (rf95.available()) {
   bcb58:	480d      	ldr	r0, [pc, #52]	; (bcb90 <_Z14lora_msg_checkv+0x40>)
   bcb5a:	f006 f87e 	bl	c2c5a <_ZN7RH_RF959availableEv>
   bcb5e:	b118      	cbz	r0, bcb68 <_Z14lora_msg_checkv+0x18>
}
   bcb60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bcb64:	f7ff bf6a 	b.w	bca3c <_Z14lora_msg_checkv.part.0>
      if (System.millis() >= lora_alarm_timer) {
   bcb68:	f7f9 f874 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcb6c:	4b09      	ldr	r3, [pc, #36]	; (bcb94 <_Z14lora_msg_checkv+0x44>)
   bcb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   bcb72:	4290      	cmp	r0, r2
   bcb74:	eb71 0303 	sbcs.w	r3, r1, r3
   bcb78:	d306      	bcc.n	bcb88 <_Z14lora_msg_checkv+0x38>
        Output ("LORA Init");
   bcb7a:	4807      	ldr	r0, [pc, #28]	; (bcb98 <_Z14lora_msg_checkv+0x48>)
   bcb7c:	f7f9 fb06 	bl	b618c <_Z6OutputPKc>
}
   bcb80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        lora_initialize();
   bcb84:	f7ff bef0 	b.w	bc968 <_Z15lora_initializev>
}
   bcb88:	bd08      	pop	{r3, pc}
   bcb8a:	bf00      	nop
   bcb8c:	2002dab1 	.word	0x2002dab1
   bcb90:	2003e208 	.word	0x2003e208
   bcb94:	2002e650 	.word	0x2002e650
   bcb98:	000cba34 	.word	0x000cba34

000bcb9c <_Z13lora_msg_pollv>:
/* 
 *=======================================================================================================================
 * lora_msg_poll() -- Spend 750ms looking for LoRa Messages
 *=======================================================================================================================
 */
void lora_msg_poll() {
   bcb9c:	b508      	push	{r3, lr}
  for (int i=0; i<3; i++) {
    lora_msg_check();
   bcb9e:	f7ff ffd7 	bl	bcb50 <_Z14lora_msg_checkv>
    delay (250);
   bcba2:	20fa      	movs	r0, #250	; 0xfa
   bcba4:	f008 fdc4 	bl	c5730 <delay>
    lora_msg_check();
   bcba8:	f7ff ffd2 	bl	bcb50 <_Z14lora_msg_checkv>
    delay (250);
   bcbac:	20fa      	movs	r0, #250	; 0xfa
   bcbae:	f008 fdbf 	bl	c5730 <delay>
    lora_msg_check();
   bcbb2:	f7ff ffcd 	bl	bcb50 <_Z14lora_msg_checkv>
  }
   bcbb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay (250);
   bcbba:	20fa      	movs	r0, #250	; 0xfa
   bcbbc:	f008 bdb8 	b.w	c5730 <delay>

000bcbc0 <_Z28Wind_Distance_Air_Initializev>:
void Wind_Distance_Air_Initialize() {
   bcbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Output ("WindDist Init()");
   bcbc2:	4822      	ldr	r0, [pc, #136]	; (bcc4c <_Z28Wind_Distance_Air_Initializev+0x8c>)
    if (A4_State == A4_STATE_DISTANCE) {
   bcbc4:	4e22      	ldr	r6, [pc, #136]	; (bcc50 <_Z28Wind_Distance_Air_Initializev+0x90>)
    if (PM25AQI_exists) {
   bcbc6:	4f23      	ldr	r7, [pc, #140]	; (bcc54 <_Z28Wind_Distance_Air_Initializev+0x94>)
  Output ("WindDist Init()");
   bcbc8:	f7f9 fae0 	bl	b618c <_Z6OutputPKc>
  anemometer_interrupt_count = 0;
   bcbcc:	4b22      	ldr	r3, [pc, #136]	; (bcc58 <_Z28Wind_Distance_Air_Initializev+0x98>)
   bcbce:	2400      	movs	r4, #0
   bcbd0:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
   bcbd2:	f7f9 f83f 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcbd6:	4b21      	ldr	r3, [pc, #132]	; (bcc5c <_Z28Wind_Distance_Air_Initializev+0x9c>)
   bcbd8:	e9c3 0100 	strd	r0, r1, [r3]
  wind.gust = 0.0;
   bcbdc:	4b20      	ldr	r3, [pc, #128]	; (bcc60 <_Z28Wind_Distance_Air_Initializev+0xa0>)
   bcbde:	2200      	movs	r2, #0
   bcbe0:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
  wind.gust_direction = -1;
   bcbe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  wind.bucket_idx = 0;
   bcbe8:	f8c3 41e0 	str.w	r4, [r3, #480]	; 0x1e0
  wind.gust_direction = -1;
   bcbec:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
  wind.bucket_idx = 0;
   bcbf0:	243c      	movs	r4, #60	; 0x3c
    lora_msg_poll(); // 750ms Second Delay
   bcbf2:	f7ff ffd3 	bl	bcb9c <_Z13lora_msg_pollv>
    HeartBeat();     // Provides a 250ms delay
   bcbf6:	f7fd fcc1 	bl	ba57c <_Z9HeartBeatv>
    Wind_TakeReading();
   bcbfa:	f7fb fbe1 	bl	b83c0 <_Z16Wind_TakeReadingv>
    if (A4_State == A4_STATE_DISTANCE) {
   bcbfe:	6833      	ldr	r3, [r6, #0]
   bcc00:	2b01      	cmp	r3, #1
   bcc02:	d101      	bne.n	bcc08 <_Z28Wind_Distance_Air_Initializev+0x48>
      DistanceGauge_TakeReading();
   bcc04:	f7fb f940 	bl	b7e88 <_Z25DistanceGauge_TakeReadingv>
    if (PM25AQI_exists) {
   bcc08:	783b      	ldrb	r3, [r7, #0]
   bcc0a:	b10b      	cbz	r3, bcc10 <_Z28Wind_Distance_Air_Initializev+0x50>
      pm25aqi_TakeReading();
   bcc0c:	f7fa fe8e 	bl	b792c <_Z19pm25aqi_TakeReadingv>
    if (SerialConsoleEnabled) Serial.print(".");  // Provide Serial Console some feedback as we loop and wait til next observation
   bcc10:	4d14      	ldr	r5, [pc, #80]	; (bcc64 <_Z28Wind_Distance_Air_Initializev+0xa4>)
   bcc12:	782b      	ldrb	r3, [r5, #0]
   bcc14:	b123      	cbz	r3, bcc20 <_Z28Wind_Distance_Air_Initializev+0x60>
   bcc16:	f00a fbb7 	bl	c7388 <_Z16_fetch_usbserialv>
   bcc1a:	4913      	ldr	r1, [pc, #76]	; (bcc68 <_Z28Wind_Distance_Air_Initializev+0xa8>)
   bcc1c:	f009 ff54 	bl	c6ac8 <_ZN5Print5printEPKc>
    OLED_spin();
   bcc20:	f7f9 f92c 	bl	b5e7c <_Z9OLED_spinv>
  for (int i=0; i< WIND_READINGS; i++) {
   bcc24:	3c01      	subs	r4, #1
   bcc26:	d1e4      	bne.n	bcbf2 <_Z28Wind_Distance_Air_Initializev+0x32>
  Wind_TakeReading();
   bcc28:	f7fb fbca 	bl	b83c0 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
   bcc2c:	6833      	ldr	r3, [r6, #0]
   bcc2e:	2b01      	cmp	r3, #1
   bcc30:	d101      	bne.n	bcc36 <_Z28Wind_Distance_Air_Initializev+0x76>
    DistanceGauge_TakeReading();
   bcc32:	f7fb f929 	bl	b7e88 <_Z25DistanceGauge_TakeReadingv>
  if (SerialConsoleEnabled) Serial.println();  // Send a newline out to cleanup after all the periods we have been logging
   bcc36:	782b      	ldrb	r3, [r5, #0]
   bcc38:	b11b      	cbz	r3, bcc42 <_Z28Wind_Distance_Air_Initializev+0x82>
   bcc3a:	f00a fba5 	bl	c7388 <_Z16_fetch_usbserialv>
   bcc3e:	f009 ff4e 	bl	c6ade <_ZN5Print7printlnEv>
  ws_refresh = false; // Set to false since we have just initialized wind speed data.
   bcc42:	4b0a      	ldr	r3, [pc, #40]	; (bcc6c <_Z28Wind_Distance_Air_Initializev+0xac>)
   bcc44:	2200      	movs	r2, #0
   bcc46:	701a      	strb	r2, [r3, #0]
}
   bcc48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bcc4a:	bf00      	nop
   bcc4c:	000cba3e 	.word	0x000cba3e
   bcc50:	2002da5c 	.word	0x2002da5c
   bcc54:	2002dacc 	.word	0x2002dacc
   bcc58:	2002e0d0 	.word	0x2002e0d0
   bcc5c:	2002e0d8 	.word	0x2002e0d8
   bcc60:	2003e3f0 	.word	0x2003e3f0
   bcc64:	2002df8f 	.word	0x2002df8f
   bcc68:	000cba4e 	.word	0x000cba4e
   bcc6c:	2003e5dc 	.word	0x2003e5dc

000bcc70 <_Z14BackGroundWorkv>:
void BackGroundWork() {
   bcc70:	b538      	push	{r3, r4, r5, lr}
  uint64_t OneSecondFromNow = System.millis() + 1000;
   bcc72:	f7f8 ffef 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcc76:	f510 747a 	adds.w	r4, r0, #1000	; 0x3e8
   bcc7a:	f141 0500 	adc.w	r5, r1, #0
  Wind_TakeReading();
   bcc7e:	f7fb fb9f 	bl	b83c0 <_Z16Wind_TakeReadingv>
  if (A4_State == A4_STATE_DISTANCE) {
   bcc82:	4b16      	ldr	r3, [pc, #88]	; (bccdc <_Z14BackGroundWorkv+0x6c>)
   bcc84:	681b      	ldr	r3, [r3, #0]
   bcc86:	2b01      	cmp	r3, #1
   bcc88:	d101      	bne.n	bcc8e <_Z14BackGroundWorkv+0x1e>
    DistanceGauge_TakeReading();
   bcc8a:	f7fb f8fd 	bl	b7e88 <_Z25DistanceGauge_TakeReadingv>
  if (PM25AQI_exists) {
   bcc8e:	4b14      	ldr	r3, [pc, #80]	; (bcce0 <_Z14BackGroundWorkv+0x70>)
   bcc90:	781b      	ldrb	r3, [r3, #0]
   bcc92:	b10b      	cbz	r3, bcc98 <_Z14BackGroundWorkv+0x28>
    pm25aqi_TakeReading();
   bcc94:	f7fa fe4a 	bl	b792c <_Z19pm25aqi_TakeReadingv>
  HeartBeat();  // Burns 250ms
   bcc98:	f7fd fc70 	bl	ba57c <_Z9HeartBeatv>
  if (LORA_exists) {
   bcc9c:	4b11      	ldr	r3, [pc, #68]	; (bcce4 <_Z14BackGroundWorkv+0x74>)
   bcc9e:	781b      	ldrb	r3, [r3, #0]
   bcca0:	b10b      	cbz	r3, bcca6 <_Z14BackGroundWorkv+0x36>
    lora_msg_poll(); // Provides a 750ms delay
   bcca2:	f7ff ff7b 	bl	bcb9c <_Z13lora_msg_pollv>
  int64_t TimeRemaining = (OneSecondFromNow - System.millis());
   bcca6:	f7f8 ffd5 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bccaa:	1a20      	subs	r0, r4, r0
   bccac:	eb65 0101 	sbc.w	r1, r5, r1
  if ((TimeRemaining > 0) && (TimeRemaining < 1000)) {
   bccb0:	f240 33e7 	movw	r3, #999	; 0x3e7
   bccb4:	1e42      	subs	r2, r0, #1
   bccb6:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
   bccba:	429a      	cmp	r2, r3
   bccbc:	f171 0300 	sbcs.w	r3, r1, #0
   bccc0:	d201      	bcs.n	bccc6 <_Z14BackGroundWorkv+0x56>
    delay (TimeRemaining);
   bccc2:	f008 fd35 	bl	c5730 <delay>
  if (TurnLedOff) {   // Turned on by rain gauge interrupt handler
   bccc6:	4c08      	ldr	r4, [pc, #32]	; (bcce8 <_Z14BackGroundWorkv+0x78>)
   bccc8:	7823      	ldrb	r3, [r4, #0]
   bccca:	b133      	cbz	r3, bccda <_Z14BackGroundWorkv+0x6a>
    digitalWrite(LED_PIN, LOW);  
   bcccc:	4b07      	ldr	r3, [pc, #28]	; (bccec <_Z14BackGroundWorkv+0x7c>)
   bccce:	2100      	movs	r1, #0
   bccd0:	8818      	ldrh	r0, [r3, #0]
   bccd2:	f00a fc82 	bl	c75da <digitalWrite>
    TurnLedOff = false;
   bccd6:	2300      	movs	r3, #0
   bccd8:	7023      	strb	r3, [r4, #0]
}
   bccda:	bd38      	pop	{r3, r4, r5, pc}
   bccdc:	2002da5c 	.word	0x2002da5c
   bcce0:	2002dacc 	.word	0x2002dacc
   bcce4:	2002dab1 	.word	0x2002dab1
   bcce8:	2002df9f 	.word	0x2002df9f
   bccec:	2002d880 	.word	0x2002d880

000bccf0 <_Z16Particle_PublishPc>:
/*
 * ======================================================================================================================
 * Particle_Publish() - Publish to Particle what is in msgbuf
 * ======================================================================================================================
 */
bool Particle_Publish(char *EventName) {
   bccf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bccf2:	b087      	sub	sp, #28
   bccf4:	4604      	mov	r4, r0
   bccf6:	f008 fc0b 	bl	c5510 <spark_cloud_flag_connected>
  // Calling Particle.publish() when the cloud connection has been turned off will not publish an event. 
  // This is indicated by the return success code of false. If the cloud connection is turned on and 
  // trying to connect to the cloud unsuccessfully, Particle.publish() may block for up to 20 seconds 
  // (normal conditions) to 10 minutes (unusual conditions). Checking Particle.connected() 
  // before calling Particle.publish() can help prevent this.
  if (Particle.connected()) {
   bccfa:	4605      	mov	r5, r0
   bccfc:	2800      	cmp	r0, #0
   bccfe:	d03e      	beq.n	bcd7e <_Z16Particle_PublishPc+0x8e>
    uint64_t start_ts = System.millis();
   bcd00:	f7f8 ffa8 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcd04:	4606      	mov	r6, r0
        return publish_event(eventName, eventData, eventData ? std::strlen(eventData) : 0, static_cast<int>(particle::ContentType::TEXT), ttl, flags1 | flags2);
   bcd06:	4820      	ldr	r0, [pc, #128]	; (bcd88 <_Z16Particle_PublishPc+0x98>)
   bcd08:	460f      	mov	r7, r1
   bcd0a:	f7f8 f977 	bl	b4ffc <strlen>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   bcd0e:	4a1f      	ldr	r2, [pc, #124]	; (bcd8c <_Z16Particle_PublishPc+0x9c>)
   bcd10:	7812      	ldrb	r2, [r2, #0]
   bcd12:	f88d 2008 	strb.w	r2, [sp, #8]
   bcd16:	2500      	movs	r5, #0
   bcd18:	223c      	movs	r2, #60	; 0x3c
   bcd1a:	e9cd 5200 	strd	r5, r2, [sp]
   bcd1e:	4603      	mov	r3, r0
   bcd20:	4621      	mov	r1, r4
   bcd22:	4a19      	ldr	r2, [pc, #100]	; (bcd88 <_Z16Particle_PublishPc+0x98>)
   bcd24:	a804      	add	r0, sp, #16
   bcd26:	f009 f8dd 	bl	c5ee4 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
        return this->p_->result();
   bcd2a:	4629      	mov	r1, r5
   bcd2c:	9804      	ldr	r0, [sp, #16]
   bcd2e:	f7ff fcdb 	bl	bc6e8 <_ZNK8particle6detail10FutureImplIbNS0_13FutureContextEE6resultEb>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   bcd32:	9c05      	ldr	r4, [sp, #20]
   bcd34:	4605      	mov	r5, r0
   bcd36:	b17c      	cbz	r4, bcd58 <_Z16Particle_PublishPc+0x68>
      if (--_M_use_count == 0)
   bcd38:	6863      	ldr	r3, [r4, #4]
   bcd3a:	3b01      	subs	r3, #1
   bcd3c:	6063      	str	r3, [r4, #4]
   bcd3e:	b95b      	cbnz	r3, bcd58 <_Z16Particle_PublishPc+0x68>
          _M_dispose();
   bcd40:	6823      	ldr	r3, [r4, #0]
   bcd42:	4620      	mov	r0, r4
   bcd44:	689b      	ldr	r3, [r3, #8]
   bcd46:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bcd48:	68a3      	ldr	r3, [r4, #8]
   bcd4a:	3b01      	subs	r3, #1
   bcd4c:	60a3      	str	r3, [r4, #8]
   bcd4e:	b91b      	cbnz	r3, bcd58 <_Z16Particle_PublishPc+0x68>
            _M_destroy();
   bcd50:	6823      	ldr	r3, [r4, #0]
   bcd52:	4620      	mov	r0, r4
   bcd54:	68db      	ldr	r3, [r3, #12]
   bcd56:	4798      	blx	r3
    if (Particle.publish(EventName, msgbuf, WITH_ACK)) {  // PRIVATE flag is always used even when not specified
   bcd58:	b175      	cbz	r5, bcd78 <_Z16Particle_PublishPc+0x88>

      // A safty check, If we got hung up for N seconds or more sending, 
      // let's invalidate our wind data and force a reinit in the main loop()
      if ((System.millis() - start_ts) >= 2000) {
   bcd5a:	f7f8 ff7b 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcd5e:	1b80      	subs	r0, r0, r6
   bcd60:	eb61 0107 	sbc.w	r1, r1, r7
   bcd64:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   bcd68:	f171 0300 	sbcs.w	r3, r1, #0
        ws_refresh = true;
   bcd6c:	bf22      	ittt	cs
   bcd6e:	4b08      	ldrcs	r3, [pc, #32]	; (bcd90 <_Z16Particle_PublishPc+0xa0>)
   bcd70:	2201      	movcs	r2, #1
   bcd72:	701a      	strbcs	r2, [r3, #0]
      }
      // Currently, a device can publish at rate of about 1 event/sec, with bursts of up to 4 allowed in 1 second. 
      // Back to back burst of 4 messages will take 4 seconds to recover.
      // Our BackGroundWork() provides a delay between observations of 1 second 
      BackGroundWork();
   bcd74:	f7ff ff7c 	bl	bcc70 <_Z14BackGroundWorkv>
  }
  else {
    Output ("Particle:NotReady");
  }
  return(false);
}
   bcd78:	4628      	mov	r0, r5
   bcd7a:	b007      	add	sp, #28
   bcd7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Output ("Particle:NotReady");
   bcd7e:	4805      	ldr	r0, [pc, #20]	; (bcd94 <_Z16Particle_PublishPc+0xa4>)
   bcd80:	f7f9 fa04 	bl	b618c <_Z6OutputPKc>
   bcd84:	e7f8      	b.n	bcd78 <_Z16Particle_PublishPc+0x88>
   bcd86:	bf00      	nop
   bcd88:	200328c0 	.word	0x200328c0
   bcd8c:	2002dfa3 	.word	0x2002dfa3
   bcd90:	2003e5dc 	.word	0x2003e5dc
   bcd94:	000cba50 	.word	0x000cba50

000bcd98 <_Z14OBS_FS_Publishi>:
/*
 * ======================================================================================================================
 * OBS_FS_Publish() - obs[i].inuse for this observation must be true prior to calling
 * ======================================================================================================================
 */
bool OBS_FS_Publish(int i) {
   bcd98:	b513      	push	{r0, r1, r4, lr}
   bcd9a:	9001      	str	r0, [sp, #4]
  OBS_FS_Build_JSON(i);  
   bcd9c:	f7fc fc44 	bl	b9628 <_Z17OBS_FS_Build_JSONi>
  if (Particle_Publish((char *) "FS")) {
   bcda0:	480e      	ldr	r0, [pc, #56]	; (bcddc <_Z14OBS_FS_Publishi+0x44>)
   bcda2:	f7ff ffa5 	bl	bccf0 <_Z16Particle_PublishPc>
   bcda6:	9a01      	ldr	r2, [sp, #4]
   bcda8:	4604      	mov	r4, r0
   bcdaa:	b188      	cbz	r0, bcdd0 <_Z14OBS_FS_Publishi+0x38>
    Serial_write (msgbuf);
   bcdac:	480c      	ldr	r0, [pc, #48]	; (bcde0 <_Z14OBS_FS_Publishi+0x48>)
   bcdae:	f7f9 f9c3 	bl	b6138 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "FS[%d]->PUB OK[%d]", i, strlen(msgbuf)+1);
   bcdb2:	480b      	ldr	r0, [pc, #44]	; (bcde0 <_Z14OBS_FS_Publishi+0x48>)
   bcdb4:	f7f8 f922 	bl	b4ffc <strlen>
   bcdb8:	9a01      	ldr	r2, [sp, #4]
   bcdba:	490a      	ldr	r1, [pc, #40]	; (bcde4 <_Z14OBS_FS_Publishi+0x4c>)
   bcdbc:	1c43      	adds	r3, r0, #1
   bcdbe:	480a      	ldr	r0, [pc, #40]	; (bcde8 <_Z14OBS_FS_Publishi+0x50>)
   bcdc0:	f008 fc6e 	bl	c56a0 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
    Output(Buffer32Bytes);
   bcdc4:	4808      	ldr	r0, [pc, #32]	; (bcde8 <_Z14OBS_FS_Publishi+0x50>)
   bcdc6:	f7f9 f9e1 	bl	b618c <_Z6OutputPKc>
    return(false);
  }
}
   bcdca:	4620      	mov	r0, r4
   bcdcc:	b002      	add	sp, #8
   bcdce:	bd10      	pop	{r4, pc}
    sprintf (Buffer32Bytes, "FS[%d]->PUB ERR", i);
   bcdd0:	4906      	ldr	r1, [pc, #24]	; (bcdec <_Z14OBS_FS_Publishi+0x54>)
   bcdd2:	4805      	ldr	r0, [pc, #20]	; (bcde8 <_Z14OBS_FS_Publishi+0x50>)
   bcdd4:	f008 fc64 	bl	c56a0 <sprintf>
   bcdd8:	e7f4      	b.n	bcdc4 <_Z14OBS_FS_Publishi+0x2c>
   bcdda:	bf00      	nop
   bcddc:	000cb0ab 	.word	0x000cb0ab
   bcde0:	200328c0 	.word	0x200328c0
   bcde4:	000cba62 	.word	0x000cba62
   bcde8:	2002da87 	.word	0x2002da87
   bcdec:	000cba75 	.word	0x000cba75

000bcdf0 <_Z17OBS_Relay_Publishi>:
/*
 * ======================================================================================================================
 * OBS_Relay_Publish()
 * ======================================================================================================================
 */
bool OBS_Relay_Publish(int relay_type) {
   bcdf0:	b570      	push	{r4, r5, r6, lr}
  if (relay_type > 0) {  // little safty check. Should not be 0
   bcdf2:	1e04      	subs	r4, r0, #0
   bcdf4:	dd16      	ble.n	bce24 <_Z17OBS_Relay_Publishi+0x34>
    Serial_write (msgbuf);
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
   bcdf6:	4e10      	ldr	r6, [pc, #64]	; (bce38 <_Z17OBS_Relay_Publishi+0x48>)
    Serial_write (msgbuf);
   bcdf8:	4810      	ldr	r0, [pc, #64]	; (bce3c <_Z17OBS_Relay_Publishi+0x4c>)
   bcdfa:	f7f9 f99d 	bl	b6138 <_Z12Serial_writePKc>
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
   bcdfe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   bce02:	f7ff ff75 	bl	bccf0 <_Z16Particle_PublishPc>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
   bce06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
    if (Particle_Publish((char *) relay_msgtypes[relay_type])) {
   bce0a:	4605      	mov	r5, r0
   bce0c:	b140      	cbz	r0, bce20 <_Z17OBS_Relay_Publishi+0x30>
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB OK", relay_msgtypes[relay_type]);
   bce0e:	490c      	ldr	r1, [pc, #48]	; (bce40 <_Z17OBS_Relay_Publishi+0x50>)
      Output(Buffer32Bytes);
      return(true);
    }
    else {
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
   bce10:	480c      	ldr	r0, [pc, #48]	; (bce44 <_Z17OBS_Relay_Publishi+0x54>)
   bce12:	f008 fc45 	bl	c56a0 <sprintf>
      Output(Buffer32Bytes);       
   bce16:	480b      	ldr	r0, [pc, #44]	; (bce44 <_Z17OBS_Relay_Publishi+0x54>)
   bce18:	f7f9 f9b8 	bl	b618c <_Z6OutputPKc>
  else {
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
    Output(Buffer32Bytes);
    return(false);
  }
}
   bce1c:	4628      	mov	r0, r5
   bce1e:	bd70      	pop	{r4, r5, r6, pc}
      sprintf (Buffer32Bytes, "RELAY[%s]->PUB ERR", relay_msgtypes[relay_type]);
   bce20:	4909      	ldr	r1, [pc, #36]	; (bce48 <_Z17OBS_Relay_Publishi+0x58>)
   bce22:	e7f5      	b.n	bce10 <_Z17OBS_Relay_Publishi+0x20>
    sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
   bce24:	4909      	ldr	r1, [pc, #36]	; (bce4c <_Z17OBS_Relay_Publishi+0x5c>)
   bce26:	4807      	ldr	r0, [pc, #28]	; (bce44 <_Z17OBS_Relay_Publishi+0x54>)
   bce28:	4622      	mov	r2, r4
   bce2a:	f008 fc39 	bl	c56a0 <sprintf>
    Output(Buffer32Bytes);
   bce2e:	4805      	ldr	r0, [pc, #20]	; (bce44 <_Z17OBS_Relay_Publishi+0x54>)
   bce30:	f7f9 f9ac 	bl	b618c <_Z6OutputPKc>
    return(false);
   bce34:	2500      	movs	r5, #0
   bce36:	e7f1      	b.n	bce1c <_Z17OBS_Relay_Publishi+0x2c>
   bce38:	2002d9c4 	.word	0x2002d9c4
   bce3c:	200328c0 	.word	0x200328c0
   bce40:	000cba85 	.word	0x000cba85
   bce44:	2002da87 	.word	0x2002da87
   bce48:	000cba97 	.word	0x000cba97
   bce4c:	000cbaaa 	.word	0x000cbaaa

000bce50 <_Z7INFO_Dov>:
/*
 * ======================================================================================================================
 * INFO_Do() - Get and Send System Information to Particle Cloud
 * ======================================================================================================================
 */
bool INFO_Do() {
   bce50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bce54:	b0ee      	sub	sp, #440	; 0x1b8
  char buf[256];
  const char *comma = "";
  time_t ts = Time.now();
   bce56:	f00a f985 	bl	c7164 <_ZN9TimeClass3nowEv>
   bce5a:	4604      	mov	r4, r0
   bce5c:	17c6      	asrs	r6, r0, #31

  Output("INFO_DO()");
   bce5e:	48c6      	ldr	r0, [pc, #792]	; (bd178 <_Z7INFO_Dov+0x328>)

  SendSystemInformation = false;
   bce60:	2500      	movs	r5, #0
  Output("INFO_DO()");
   bce62:	f7f9 f993 	bl	b618c <_Z6OutputPKc>
  SendSystemInformation = false;
   bce66:	4bc5      	ldr	r3, [pc, #788]	; (bd17c <_Z7INFO_Dov+0x32c>)

  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
   bce68:	4629      	mov	r1, r5
   bce6a:	f44f 7280 	mov.w	r2, #256	; 0x100
   bce6e:	a82e      	add	r0, sp, #184	; 0xb8
  SendSystemInformation = false;
   bce70:	701d      	strb	r5, [r3, #0]
  memset(buf, 0, sizeof(buf));        // holds string of found sensors 
   bce72:	f00d f9a7 	bl	ca1c4 <memset>
  memset(msgbuf, 0, sizeof(msgbuf));  // hold the json formatted message we are building for sending.
   bce76:	4bc2      	ldr	r3, [pc, #776]	; (bd180 <_Z7INFO_Dov+0x330>)
   bce78:	4629      	mov	r1, r5
   bce7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   bce7e:	4618      	mov	r0, r3
   bce80:	f00d f9a0 	bl	ca1c4 <memset>
        n_(0) {
   bce84:	f240 33ff 	movw	r3, #1023	; 0x3ff
   bce88:	4abe      	ldr	r2, [pc, #760]	; (bd184 <_Z7INFO_Dov+0x334>)
   bce8a:	9009      	str	r0, [sp, #36]	; 0x24

  JSONBufferWriter writer(msgbuf, sizeof(msgbuf)-1);
  writer.beginObject();
   bce8c:	a807      	add	r0, sp, #28
   bce8e:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   bce92:	9207      	str	r2, [sp, #28]
        state_(BEGIN) {
   bce94:	f88d 5020 	strb.w	r5, [sp, #32]
   bce98:	f009 fb7a 	bl	c6590 <_ZN5spark10JSONWriter11beginObjectEv>

  writer.name("devid").value(System.deviceID());
   bce9c:	49ba      	ldr	r1, [pc, #744]	; (bd188 <_Z7INFO_Dov+0x338>)
   bce9e:	a807      	add	r0, sp, #28
   bcea0:	f7f8 ff2c 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcea4:	4607      	mov	r7, r0
        return spark_deviceID();
   bcea6:	a821      	add	r0, sp, #132	; 0x84
   bcea8:	f008 fb3a 	bl	c5520 <spark_deviceID>
    return value(val.c_str(), val.length());
   bceac:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   bceae:	9921      	ldr	r1, [sp, #132]	; 0x84
   bceb0:	4638      	mov	r0, r7
   bceb2:	f009 fc61 	bl	c6778 <_ZN5spark10JSONWriter5valueEPKcj>
   bceb6:	a821      	add	r0, sp, #132	; 0x84
   bceb8:	f009 ffc1 	bl	c6e3e <_ZN6StringD1Ev>
  writer.name("devos").value(System.version());
   bcebc:	49b3      	ldr	r1, [pc, #716]	; (bd18c <_Z7INFO_Dov+0x33c>)
   bcebe:	a807      	add	r0, sp, #28
   bcec0:	f7f8 ff1c 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
        SystemVersionInfo info = {};
   bcec4:	f04f 081c 	mov.w	r8, #28
   bcec8:	4642      	mov	r2, r8
   bceca:	4607      	mov	r7, r0
   bcecc:	4629      	mov	r1, r5
   bcece:	a821      	add	r0, sp, #132	; 0x84
   bced0:	f00d f978 	bl	ca1c4 <memset>
        system_version_info(&info, nullptr);
   bced4:	4629      	mov	r1, r5
   bced6:	a821      	add	r0, sp, #132	; 0x84
        info.size = sizeof(SystemVersionInfo);
   bced8:	f8ad 8084 	strh.w	r8, [sp, #132]	; 0x84
        system_version_info(&info, nullptr);
   bcedc:	f008 faba 	bl	c5454 <system_version_info>
        return String(info.versionString);
   bcee0:	a923      	add	r1, sp, #140	; 0x8c
   bcee2:	a819      	add	r0, sp, #100	; 0x64
   bcee4:	f009 fff6 	bl	c6ed4 <_ZN6StringC1EPK19__FlashStringHelper>
   bcee8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   bceea:	9919      	ldr	r1, [sp, #100]	; 0x64
   bceec:	4638      	mov	r0, r7
   bceee:	f009 fc43 	bl	c6778 <_ZN5spark10JSONWriter5valueEPKcj>
   bcef2:	a819      	add	r0, sp, #100	; 0x64
   bcef4:	f009 ffa3 	bl	c6e3e <_ZN6StringD1Ev>
  writer.name("freemem").value(System.freeMemory());
   bcef8:	49a5      	ldr	r1, [pc, #660]	; (bd190 <_Z7INFO_Dov+0x340>)
   bcefa:	eb0d 0008 	add.w	r0, sp, r8
   bcefe:	f7f8 fefd 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcf02:	4607      	mov	r7, r0
   bcf04:	f00a f827 	bl	c6f56 <_ZN11SystemClass10freeMemoryEv>
   bcf08:	4601      	mov	r1, r0
   bcf0a:	4638      	mov	r0, r7
   bcf0c:	f009 fb70 	bl	c65f0 <_ZN5spark10JSONWriter5valueEm>
  writer.name("uptime").value(System.uptime());
   bcf10:	49a0      	ldr	r1, [pc, #640]	; (bd194 <_Z7INFO_Dov+0x344>)
   bcf12:	eb0d 0008 	add.w	r0, sp, r8
   bcf16:	f7f8 fef1 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcf1a:	4607      	mov	r7, r0
        return (hal_timer_millis(nullptr) / 1000);
   bcf1c:	4628      	mov	r0, r5
   bcf1e:	f008 f8a7 	bl	c5070 <hal_timer_millis>
   bcf22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bcf26:	2300      	movs	r3, #0
   bcf28:	f7f7 fedc 	bl	b4ce4 <__aeabi_uldivmod>
   bcf2c:	4601      	mov	r1, r0
   bcf2e:	4638      	mov	r0, r7
   bcf30:	f009 fb4c 	bl	c65cc <_ZN5spark10JSONWriter5valueEj>

#if PLATFORM_ID == PLATFORM_ARGON
  writer.name("type").value("argon");
#endif
#if PLATFORM_ID == PLATFORM_BORON
  writer.name("board").value("boron");
   bcf34:	4998      	ldr	r1, [pc, #608]	; (bd198 <_Z7INFO_Dov+0x348>)
   bcf36:	eb0d 0008 	add.w	r0, sp, r8
   bcf3a:	f7f8 fedf 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcf3e:	4997      	ldr	r1, [pc, #604]	; (bd19c <_Z7INFO_Dov+0x34c>)
   bcf40:	f7f8 fe32 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
#endif

  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
   bcf44:	4620      	mov	r0, r4
   bcf46:	4631      	mov	r1, r6
   bcf48:	f00a f8d4 	bl	c70f4 <_ZN9TimeClass4yearEx>
   bcf4c:	4631      	mov	r1, r6
   bcf4e:	9005      	str	r0, [sp, #20]
   bcf50:	4620      	mov	r0, r4
   bcf52:	f00a f8c5 	bl	c70e0 <_ZN9TimeClass5monthEx>
   bcf56:	4631      	mov	r1, r6
   bcf58:	9004      	str	r0, [sp, #16]
   bcf5a:	4620      	mov	r0, r4
   bcf5c:	f00a f8b8 	bl	c70d0 <_ZN9TimeClass3dayEx>
   bcf60:	4631      	mov	r1, r6
   bcf62:	4605      	mov	r5, r0
   bcf64:	4620      	mov	r0, r4
   bcf66:	f00a f89b 	bl	c70a0 <_ZN9TimeClass4hourEx>
   bcf6a:	4631      	mov	r1, r6
   bcf6c:	4607      	mov	r7, r0
   bcf6e:	4620      	mov	r0, r4
   bcf70:	f00a f89e 	bl	c70b0 <_ZN9TimeClass6minuteEx>
   bcf74:	4631      	mov	r1, r6
   bcf76:	4680      	mov	r8, r0
   bcf78:	4620      	mov	r0, r4
   bcf7a:	f00a f8a1 	bl	c70c0 <_ZN9TimeClass6secondEx>
   bcf7e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   bcf82:	e9cd 8002 	strd	r8, r0, [sp, #8]
   bcf86:	e9cd 5700 	strd	r5, r7, [sp]
   bcf8a:	4985      	ldr	r1, [pc, #532]	; (bd1a0 <_Z7INFO_Dov+0x350>)
   bcf8c:	4885      	ldr	r0, [pc, #532]	; (bd1a4 <_Z7INFO_Dov+0x354>)
  writer.name("ver").value(VERSION_INFO);
  writer.name("hth").value((int) SystemStatusBits);

  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
  writer.name("obsi").value(Buffer32Bytes);
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
   bcf8e:	4c86      	ldr	r4, [pc, #536]	; (bd1a8 <_Z7INFO_Dov+0x358>)
  sprintf (Buffer32Bytes, "%d-%02d-%02dT%02d:%02d:%02d",
   bcf90:	f008 fb86 	bl	c56a0 <sprintf>
  writer.name("at").value(Buffer32Bytes);
   bcf94:	4985      	ldr	r1, [pc, #532]	; (bd1ac <_Z7INFO_Dov+0x35c>)
   bcf96:	a807      	add	r0, sp, #28
   bcf98:	f7f8 feb0 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcf9c:	4981      	ldr	r1, [pc, #516]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bcf9e:	f7f8 fe03 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("ver").value(VERSION_INFO);
   bcfa2:	4983      	ldr	r1, [pc, #524]	; (bd1b0 <_Z7INFO_Dov+0x360>)
   bcfa4:	a807      	add	r0, sp, #28
   bcfa6:	f7f8 fea9 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcfaa:	4982      	ldr	r1, [pc, #520]	; (bd1b4 <_Z7INFO_Dov+0x364>)
   bcfac:	f7f8 fdfc 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("hth").value((int) SystemStatusBits);
   bcfb0:	4981      	ldr	r1, [pc, #516]	; (bd1b8 <_Z7INFO_Dov+0x368>)
   bcfb2:	a807      	add	r0, sp, #28
   bcfb4:	f7f8 fea2 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcfb8:	4b80      	ldr	r3, [pc, #512]	; (bd1bc <_Z7INFO_Dov+0x36c>)
   bcfba:	6819      	ldr	r1, [r3, #0]
   bcfbc:	f009 faf4 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
  sprintf (Buffer32Bytes,"%ds", OBSERVATION_INTERVAL/1000);
   bcfc0:	223c      	movs	r2, #60	; 0x3c
   bcfc2:	497f      	ldr	r1, [pc, #508]	; (bd1c0 <_Z7INFO_Dov+0x370>)
   bcfc4:	4877      	ldr	r0, [pc, #476]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bcfc6:	f008 fb6b 	bl	c56a0 <sprintf>
  writer.name("obsi").value(Buffer32Bytes);
   bcfca:	497e      	ldr	r1, [pc, #504]	; (bd1c4 <_Z7INFO_Dov+0x374>)
   bcfcc:	a807      	add	r0, sp, #28
   bcfce:	f7f8 fe95 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcfd2:	4974      	ldr	r1, [pc, #464]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bcfd4:	f7f8 fde8 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  sprintf (Buffer32Bytes,"%dm", (int) obs_tx_interval);
   bcfd8:	6822      	ldr	r2, [r4, #0]
   bcfda:	497b      	ldr	r1, [pc, #492]	; (bd1c8 <_Z7INFO_Dov+0x378>)
   bcfdc:	4871      	ldr	r0, [pc, #452]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bcfde:	f008 fb5f 	bl	c56a0 <sprintf>
  writer.name("obsti").value(Buffer32Bytes);
   bcfe2:	497a      	ldr	r1, [pc, #488]	; (bd1cc <_Z7INFO_Dov+0x37c>)
   bcfe4:	a807      	add	r0, sp, #28
   bcfe6:	f7f8 fe89 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bcfea:	496e      	ldr	r1, [pc, #440]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bcfec:	f7f8 fddc 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Time 2 Next Transmit in Seconds
  sprintf (Buffer32Bytes, "%ds", (int) ((obs_tx_interval * 60) - ((System.millis() - LastTransmitTime)/1000)));
   bcff0:	6824      	ldr	r4, [r4, #0]
   bcff2:	233c      	movs	r3, #60	; 0x3c
   bcff4:	435c      	muls	r4, r3
   bcff6:	f7f8 fe2d 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bcffa:	4a75      	ldr	r2, [pc, #468]	; (bd1d0 <_Z7INFO_Dov+0x380>)
   bcffc:	e9d2 3500 	ldrd	r3, r5, [r2]
   bd000:	1ac0      	subs	r0, r0, r3
   bd002:	eb61 0105 	sbc.w	r1, r1, r5
   bd006:	2300      	movs	r3, #0
   bd008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   bd00c:	f7f7 fe6a 	bl	b4ce4 <__aeabi_uldivmod>
   bd010:	496b      	ldr	r1, [pc, #428]	; (bd1c0 <_Z7INFO_Dov+0x370>)
   bd012:	1a22      	subs	r2, r4, r0
   bd014:	4863      	ldr	r0, [pc, #396]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bd016:	f008 fb43 	bl	c56a0 <sprintf>
  writer.name("t2nt").value(Buffer32Bytes);
   bd01a:	496e      	ldr	r1, [pc, #440]	; (bd1d4 <_Z7INFO_Dov+0x384>)
   bd01c:	a807      	add	r0, sp, #28
   bd01e:	f7f8 fe6d 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd022:	4960      	ldr	r1, [pc, #384]	; (bd1a4 <_Z7INFO_Dov+0x354>)
   bd024:	f7f8 fdc0 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // Daily Reboot Countdown Timer
  writer.name("drct").value(DailyRebootCountDownTimer);
   bd028:	496b      	ldr	r1, [pc, #428]	; (bd1d8 <_Z7INFO_Dov+0x388>)
   bd02a:	a807      	add	r0, sp, #28
   bd02c:	f7f8 fe66 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd030:	4b6a      	ldr	r3, [pc, #424]	; (bd1dc <_Z7INFO_Dov+0x38c>)
   bd032:	6819      	ldr	r1, [r3, #0]
   bd034:	f009 fab8 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
    return vwd()->exists(path);
   bd038:	4969      	ldr	r1, [pc, #420]	; (bd1e0 <_Z7INFO_Dov+0x390>)
   bd03a:	486a      	ldr	r0, [pc, #424]	; (bd1e4 <_Z7INFO_Dov+0x394>)
   bd03c:	f7f8 fe6c 	bl	b5d18 <_ZN7FatFile6existsEPKc>

  // Need 2 Send File
  if (SD.exists(SD_n2s_file)) {
   bd040:	2800      	cmp	r0, #0
   bd042:	f000 835c 	beq.w	bd6fe <_Z7INFO_Dov+0x8ae>
    File tmpFile;
   bd046:	a821      	add	r0, sp, #132	; 0x84
   bd048:	f7f8 fe86 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   bd04c:	4965      	ldr	r1, [pc, #404]	; (bd1e4 <_Z7INFO_Dov+0x394>)
   bd04e:	4a64      	ldr	r2, [pc, #400]	; (bd1e0 <_Z7INFO_Dov+0x390>)
   bd050:	f244 2302 	movw	r3, #16898	; 0x4202
   bd054:	a825      	add	r0, sp, #148	; 0x94
   bd056:	f006 faf0 	bl	c363a <_ZN7FatFile4openEPS_PKci>
    File fp = SD.open(SD_n2s_file, FILE_WRITE);
    if (fp) {
   bd05a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
      writer.name("n2s").value(fp.size());
   bd05e:	4962      	ldr	r1, [pc, #392]	; (bd1e8 <_Z7INFO_Dov+0x398>)
   bd060:	a807      	add	r0, sp, #28
    if (fp) {
   bd062:	2b00      	cmp	r3, #0
   bd064:	f000 8344 	beq.w	bd6f0 <_Z7INFO_Dov+0x8a0>
      writer.name("n2s").value(fp.size());
   bd068:	f7f8 fe48 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd06c:	992c      	ldr	r1, [sp, #176]	; 0xb0
   bd06e:	f009 fabf 	bl	c65f0 <_ZN5spark10JSONWriter5valueEm>
      fp.close();
   bd072:	a825      	add	r0, sp, #148	; 0x94
   bd074:	f006 fada 	bl	c362c <_ZN7FatFile5closeEv>
  writer.name("bcs").value((digitalRead(PWR) && !digitalRead(CHG)) ? "CHARGING" : "!CHARGING"); // Battery Charger State
#endif

#if PLATFORM_ID == PLATFORM_BORON
  // Power Source
  const char *ps[] = {"UNKN", "VIN", "USB_HOST", "USB_ADAPTER", "USB_OTG", "BATTERY"};
   bd078:	4d5c      	ldr	r5, [pc, #368]	; (bd1ec <_Z7INFO_Dov+0x39c>)
   bd07a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd07c:	ae0c      	add	r6, sp, #48	; 0x30
   bd07e:	4634      	mov	r4, r6
   bd080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd082:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd086:	e884 0003 	stmia.w	r4, {r0, r1}
   bd08a:	a921      	add	r1, sp, #132	; 0x84
   bd08c:	2018      	movs	r0, #24
   bd08e:	f7fd fae7 	bl	ba660 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   bd092:	1e04      	subs	r4, r0, #0
        return val;
   bd094:	bfa8      	it	ge
   bd096:	9c21      	ldrge	r4, [sp, #132]	; 0x84
  int sps = System.powerSource();
  if ((sps>=0) && (sps<=5)) {
    writer.name("ps").value(ps[sps]);
   bd098:	4955      	ldr	r1, [pc, #340]	; (bd1f0 <_Z7INFO_Dov+0x3a0>)
  if ((sps>=0) && (sps<=5)) {
   bd09a:	2c05      	cmp	r4, #5
    writer.name("ps").value(ps[sps]);
   bd09c:	a807      	add	r0, sp, #28
  if ((sps>=0) && (sps<=5)) {
   bd09e:	f200 8336 	bhi.w	bd70e <_Z7INFO_Dov+0x8be>
    writer.name("ps").value(ps[sps]);
   bd0a2:	f7f8 fe2b 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd0a6:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   bd0aa:	f7f8 fd7d 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  else {
    writer.name("ps").value(sps);
  }

  // Battery Charge State
  const char *bs[] = {"UNKN", "!CHARGING", "CHARGING", "CHARGED", "DISCHARGING", "FAULT", "MISSING"};
   bd0ae:	4d51      	ldr	r5, [pc, #324]	; (bd1f4 <_Z7INFO_Dov+0x3a4>)
   bd0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd0b2:	ae12      	add	r6, sp, #72	; 0x48
   bd0b4:	4634      	mov	r4, r6
   bd0b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd0b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   bd0bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  int sbs = System.batteryState();
   bd0c0:	f7fd fb02 	bl	ba6c8 <_ZNK11SystemClass12batteryStateEv.isra.0>
   bd0c4:	4604      	mov	r4, r0
  if ((sbs>=0) && (sbs<=6)) {
   bd0c6:	2c06      	cmp	r4, #6
    writer.name("bcs").value(bs[sbs]);     
   bd0c8:	494b      	ldr	r1, [pc, #300]	; (bd1f8 <_Z7INFO_Dov+0x3a8>)
   bd0ca:	a807      	add	r0, sp, #28
  if ((sbs>=0) && (sbs<=6)) {
   bd0cc:	f200 8325 	bhi.w	bd71a <_Z7INFO_Dov+0x8ca>
    writer.name("bcs").value(bs[sbs]);     
   bd0d0:	f7f8 fe14 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd0d4:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   bd0d8:	f7f8 fd66 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
  else {
    writer.name("bcs").value(sbs);
  }
  writer.name("bpc").value(System.batteryCharge(), 1);   // Battery Percent Charge
   bd0dc:	4947      	ldr	r1, [pc, #284]	; (bd1fc <_Z7INFO_Dov+0x3ac>)
   bd0de:	a807      	add	r0, sp, #28
   bd0e0:	f7f8 fe0c 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd0e4:	4604      	mov	r4, r0
   bd0e6:	f7fd fadd 	bl	ba6a4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   bd0ea:	ee10 0a10 	vmov	r0, s0
   bd0ee:	f7f7 f8fb 	bl	b42e8 <__aeabi_f2d>
   bd0f2:	ec41 0b10 	vmov	d0, r0, r1
   bd0f6:	2101      	movs	r1, #1
   bd0f8:	4620      	mov	r0, r4
   bd0fa:	f009 fa8b 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>
  sprintf (Buffer32Bytes, "%02x:%02x:%02x:%02x:%02x:%02x", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
  writer.name("bssid").value(Buffer32Bytes);
#endif

#if PLATFORM_ID == PLATFORM_BORON
  CellularSignal sig = Cellular.RSSI();
   bd0fe:	4940      	ldr	r1, [pc, #256]	; (bd200 <_Z7INFO_Dov+0x3b0>)
   bd100:	a819      	add	r0, sp, #100	; 0x64
   bd102:	f008 fb8d 	bl	c5820 <_ZN5spark13CellularClass4RSSIEv>
  writer.name("css").value(sig.getStrength(), 4);
   bd106:	493f      	ldr	r1, [pc, #252]	; (bd204 <_Z7INFO_Dov+0x3b4>)
   bd108:	a807      	add	r0, sp, #28
   bd10a:	f7f8 fdf7 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd10e:	4604      	mov	r4, r0
   bd110:	a819      	add	r0, sp, #100	; 0x64
   bd112:	f008 fbe3 	bl	c58dc <_ZNK14CellularSignal11getStrengthEv>
   bd116:	ee10 0a10 	vmov	r0, s0
   bd11a:	f7f7 f8e5 	bl	b42e8 <__aeabi_f2d>
   bd11e:	ec41 0b10 	vmov	d0, r0, r1
   bd122:	2104      	movs	r1, #4
   bd124:	4620      	mov	r0, r4
   bd126:	f009 fa75 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>
  writer.name("csq").value(sig.getQuality(), 4);
   bd12a:	4937      	ldr	r1, [pc, #220]	; (bd208 <_Z7INFO_Dov+0x3b8>)
   bd12c:	a807      	add	r0, sp, #28
   bd12e:	f7f8 fde5 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd132:	4604      	mov	r4, r0
   bd134:	a819      	add	r0, sp, #100	; 0x64
   bd136:	f008 fc01 	bl	c593c <_ZNK14CellularSignal10getQualityEv>
   bd13a:	ee10 0a10 	vmov	r0, s0
   bd13e:	f7f7 f8d3 	bl	b42e8 <__aeabi_f2d>
   bd142:	ec41 0b10 	vmov	d0, r0, r1
   bd146:	2104      	movs	r1, #4
   bd148:	4620      	mov	r0, r4
   bd14a:	f009 fa63 	bl	c6614 <_ZN5spark10JSONWriter5valueEdi>

  writer.name("imsi").value(imsi); // International Mobile Subscriber Identity
   bd14e:	492f      	ldr	r1, [pc, #188]	; (bd20c <_Z7INFO_Dov+0x3bc>)
   bd150:	a807      	add	r0, sp, #28
   bd152:	f7f8 fdd3 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd156:	492e      	ldr	r1, [pc, #184]	; (bd210 <_Z7INFO_Dov+0x3c0>)
   bd158:	f7f8 fd26 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
        int sim = 0;
   bd15c:	2100      	movs	r1, #0
        const int r = cellular_get_active_sim(&sim, nullptr);
   bd15e:	a821      	add	r0, sp, #132	; 0x84
        int sim = 0;
   bd160:	9121      	str	r1, [sp, #132]	; 0x84
        const int r = cellular_get_active_sim(&sim, nullptr);
   bd162:	f007 ff19 	bl	c4f98 <cellular_get_active_sim>
        if (r < 0) {
   bd166:	2800      	cmp	r0, #0
   bd168:	f2c0 82e5 	blt.w	bd736 <_Z7INFO_Dov+0x8e6>
        return (SimType)sim;
   bd16c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84

  SimType simType = Cellular.getActiveSim();
  if (simType == INTERNAL_SIM) {
   bd170:	2b01      	cmp	r3, #1
   bd172:	f040 82d8 	bne.w	bd726 <_Z7INFO_Dov+0x8d6>
   bd176:	e04d      	b.n	bd214 <_Z7INFO_Dov+0x3c4>
   bd178:	000cbae3 	.word	0x000cbae3
   bd17c:	2002d904 	.word	0x2002d904
   bd180:	200328c0 	.word	0x200328c0
   bd184:	000ccef0 	.word	0x000ccef0
   bd188:	000cbaed 	.word	0x000cbaed
   bd18c:	000cbaf3 	.word	0x000cbaf3
   bd190:	000cbaf9 	.word	0x000cbaf9
   bd194:	000cbb01 	.word	0x000cbb01
   bd198:	000cbb08 	.word	0x000cbb08
   bd19c:	000cbb0e 	.word	0x000cbb0e
   bd1a0:	000ca767 	.word	0x000ca767
   bd1a4:	2002da87 	.word	0x2002da87
   bd1a8:	2002d938 	.word	0x2002d938
   bd1ac:	000cb093 	.word	0x000cb093
   bd1b0:	000cbb14 	.word	0x000cbb14
   bd1b4:	000cbb18 	.word	0x000cbb18
   bd1b8:	000cb09a 	.word	0x000cb09a
   bd1bc:	2002d908 	.word	0x2002d908
   bd1c0:	000cbb27 	.word	0x000cbb27
   bd1c4:	000cbb2b 	.word	0x000cbb2b
   bd1c8:	000cbb30 	.word	0x000cbb30
   bd1cc:	000cbb34 	.word	0x000cbb34
   bd1d0:	2002dac0 	.word	0x2002dac0
   bd1d4:	000cbb3a 	.word	0x000cbb3a
   bd1d8:	000cbb3f 	.word	0x000cbb3f
   bd1dc:	2002daa8 	.word	0x2002daa8
   bd1e0:	2002d8db 	.word	0x2002d8db
   bd1e4:	2002df0c 	.word	0x2002df0c
   bd1e8:	000cbb44 	.word	0x000cbb44
   bd1ec:	000ca5a4 	.word	0x000ca5a4
   bd1f0:	000cbb48 	.word	0x000cbb48
   bd1f4:	000ca5bc 	.word	0x000ca5bc
   bd1f8:	000cb8a5 	.word	0x000cb8a5
   bd1fc:	000cb8a9 	.word	0x000cb8a9
   bd200:	2003e630 	.word	0x2003e630
   bd204:	000cb096 	.word	0x000cb096
   bd208:	000cbb4b 	.word	0x000cbb4b
   bd20c:	000cbb4f 	.word	0x000cbb4f
   bd210:	2002e634 	.word	0x2002e634
    writer.name("actsim").value("INTERNAL");
   bd214:	4998      	ldr	r1, [pc, #608]	; (bd478 <_Z7INFO_Dov+0x628>)
   bd216:	a807      	add	r0, sp, #28
   bd218:	f7f8 fd70 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd21c:	4997      	ldr	r1, [pc, #604]	; (bd47c <_Z7INFO_Dov+0x62c>)
  } else if (simType == EXTERNAL_SIM) {
    writer.name("actsim").value("EXTERNAL");
  } else {
    writer.name("actsim").value("ERR");
   bd21e:	f7f8 fcc3 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
#endif

  // How Pin A4 is Configured
  if (A4_State == A4_STATE_DISTANCE) {
   bd222:	4b97      	ldr	r3, [pc, #604]	; (bd480 <_Z7INFO_Dov+0x630>)
   bd224:	681b      	ldr	r3, [r3, #0]
   bd226:	2b01      	cmp	r3, #1
   bd228:	f040 828f 	bne.w	bd74a <_Z7INFO_Dov+0x8fa>
    if (dg_adjustment == 1.25) {
   bd22c:	4b95      	ldr	r3, [pc, #596]	; (bd484 <_Z7INFO_Dov+0x634>)
      writer.name("a4").value("DIST 5M");
   bd22e:	4996      	ldr	r1, [pc, #600]	; (bd488 <_Z7INFO_Dov+0x638>)
    if (dg_adjustment == 1.25) {
   bd230:	ed93 7a00 	vldr	s14, [r3]
   bd234:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
   bd238:	eeb4 7a67 	vcmp.f32	s14, s15
   bd23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      writer.name("a4").value("DIST 5M");
   bd240:	a807      	add	r0, sp, #28
    if (dg_adjustment == 1.25) {
   bd242:	f040 827e 	bne.w	bd742 <_Z7INFO_Dov+0x8f2>
      writer.name("a4").value("DIST 5M");
   bd246:	f7f8 fd59 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd24a:	4990      	ldr	r1, [pc, #576]	; (bd48c <_Z7INFO_Dov+0x63c>)
  }
  else if (A4_State == A4_STATE_RAW){
    writer.name("a4").value("RAW");
  }
  else {
    writer.name("a4").value("NS"); // Not Set
   bd24c:	f7f8 fcac 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  if (A5_State == A5_STATE_RAW){
   bd250:	4b8f      	ldr	r3, [pc, #572]	; (bd490 <_Z7INFO_Dov+0x640>)
    writer.name("a5").value("RAW");
   bd252:	4990      	ldr	r1, [pc, #576]	; (bd494 <_Z7INFO_Dov+0x644>)
  if (A5_State == A5_STATE_RAW){
   bd254:	681b      	ldr	r3, [r3, #0]
   bd256:	2b01      	cmp	r3, #1
    writer.name("a5").value("RAW");
   bd258:	a807      	add	r0, sp, #28
  if (A5_State == A5_STATE_RAW){
   bd25a:	f040 8288 	bne.w	bd76e <_Z7INFO_Dov+0x91e>
    writer.name("a5").value("RAW");
   bd25e:	f7f8 fd4d 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd262:	498d      	ldr	r1, [pc, #564]	; (bd498 <_Z7INFO_Dov+0x648>)
  }
  else {
    writer.name("a5").value("NS"); // Not Set
   bd264:	f7f8 fca0 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Sensors
  if (BMX_1_exists) {
   bd268:	4b8c      	ldr	r3, [pc, #560]	; (bd49c <_Z7INFO_Dov+0x64c>)
   bd26a:	781b      	ldrb	r3, [r3, #0]
   bd26c:	2b00      	cmp	r3, #0
   bd26e:	f000 8282 	beq.w	bd776 <_Z7INFO_Dov+0x926>
    sprintf (buf+strlen(buf), "%sBMX1(%s)", comma, bmxtype[BMX_1_type]);
   bd272:	a82e      	add	r0, sp, #184	; 0xb8
   bd274:	f7f7 fec2 	bl	b4ffc <strlen>
   bd278:	4b89      	ldr	r3, [pc, #548]	; (bd4a0 <_Z7INFO_Dov+0x650>)
   bd27a:	498a      	ldr	r1, [pc, #552]	; (bd4a4 <_Z7INFO_Dov+0x654>)
   bd27c:	781a      	ldrb	r2, [r3, #0]
   bd27e:	4b8a      	ldr	r3, [pc, #552]	; (bd4a8 <_Z7INFO_Dov+0x658>)
   bd280:	ac2e      	add	r4, sp, #184	; 0xb8
   bd282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   bd286:	4a89      	ldr	r2, [pc, #548]	; (bd4ac <_Z7INFO_Dov+0x65c>)
   bd288:	4420      	add	r0, r4
   bd28a:	f008 fa09 	bl	c56a0 <sprintf>
    comma=",";
   bd28e:	4c88      	ldr	r4, [pc, #544]	; (bd4b0 <_Z7INFO_Dov+0x660>)
  }
  if (BMX_2_exists) {
   bd290:	4b88      	ldr	r3, [pc, #544]	; (bd4b4 <_Z7INFO_Dov+0x664>)
   bd292:	781b      	ldrb	r3, [r3, #0]
   bd294:	b173      	cbz	r3, bd2b4 <_Z7INFO_Dov+0x464>
    sprintf (buf+strlen(buf), "%sBMX2(%s)", comma, bmxtype[BMX_2_type]);
   bd296:	a82e      	add	r0, sp, #184	; 0xb8
   bd298:	f7f7 feb0 	bl	b4ffc <strlen>
   bd29c:	4b86      	ldr	r3, [pc, #536]	; (bd4b8 <_Z7INFO_Dov+0x668>)
   bd29e:	4987      	ldr	r1, [pc, #540]	; (bd4bc <_Z7INFO_Dov+0x66c>)
   bd2a0:	781a      	ldrb	r2, [r3, #0]
   bd2a2:	4b81      	ldr	r3, [pc, #516]	; (bd4a8 <_Z7INFO_Dov+0x658>)
   bd2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   bd2a8:	4622      	mov	r2, r4
   bd2aa:	ac2e      	add	r4, sp, #184	; 0xb8
   bd2ac:	4420      	add	r0, r4
   bd2ae:	f008 f9f7 	bl	c56a0 <sprintf>
    comma=",";
   bd2b2:	4c7f      	ldr	r4, [pc, #508]	; (bd4b0 <_Z7INFO_Dov+0x660>)
  }
  if (MCP_1_exists) {
   bd2b4:	4b82      	ldr	r3, [pc, #520]	; (bd4c0 <_Z7INFO_Dov+0x670>)
   bd2b6:	781b      	ldrb	r3, [r3, #0]
   bd2b8:	b14b      	cbz	r3, bd2ce <_Z7INFO_Dov+0x47e>
    sprintf (buf+strlen(buf), "%sMCP1", comma);
   bd2ba:	a82e      	add	r0, sp, #184	; 0xb8
   bd2bc:	f7f7 fe9e 	bl	b4ffc <strlen>
   bd2c0:	ab2e      	add	r3, sp, #184	; 0xb8
   bd2c2:	4622      	mov	r2, r4
   bd2c4:	497f      	ldr	r1, [pc, #508]	; (bd4c4 <_Z7INFO_Dov+0x674>)
    comma=",";
   bd2c6:	4c7a      	ldr	r4, [pc, #488]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sMCP1", comma);
   bd2c8:	4418      	add	r0, r3
   bd2ca:	f008 f9e9 	bl	c56a0 <sprintf>
  }
  if (MCP_2_exists) {
   bd2ce:	4b7e      	ldr	r3, [pc, #504]	; (bd4c8 <_Z7INFO_Dov+0x678>)
   bd2d0:	781b      	ldrb	r3, [r3, #0]
   bd2d2:	b14b      	cbz	r3, bd2e8 <_Z7INFO_Dov+0x498>
    sprintf (buf+strlen(buf), "%sMCP2", comma);
   bd2d4:	a82e      	add	r0, sp, #184	; 0xb8
   bd2d6:	f7f7 fe91 	bl	b4ffc <strlen>
   bd2da:	ab2e      	add	r3, sp, #184	; 0xb8
   bd2dc:	4622      	mov	r2, r4
   bd2de:	497b      	ldr	r1, [pc, #492]	; (bd4cc <_Z7INFO_Dov+0x67c>)
    comma=",";
   bd2e0:	4c73      	ldr	r4, [pc, #460]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sMCP2", comma);
   bd2e2:	4418      	add	r0, r3
   bd2e4:	f008 f9dc 	bl	c56a0 <sprintf>
  }
  if (MCP_3_exists) {
   bd2e8:	4d79      	ldr	r5, [pc, #484]	; (bd4d0 <_Z7INFO_Dov+0x680>)
   bd2ea:	782b      	ldrb	r3, [r5, #0]
   bd2ec:	b14b      	cbz	r3, bd302 <_Z7INFO_Dov+0x4b2>
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
   bd2ee:	a82e      	add	r0, sp, #184	; 0xb8
   bd2f0:	f7f7 fe84 	bl	b4ffc <strlen>
   bd2f4:	ab2e      	add	r3, sp, #184	; 0xb8
   bd2f6:	4622      	mov	r2, r4
   bd2f8:	4976      	ldr	r1, [pc, #472]	; (bd4d4 <_Z7INFO_Dov+0x684>)
    comma=",";
   bd2fa:	4c6d      	ldr	r4, [pc, #436]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sMCP3/gt1", comma);
   bd2fc:	4418      	add	r0, r3
   bd2fe:	f008 f9cf 	bl	c56a0 <sprintf>
  }
  if (MCP_4_exists) {
   bd302:	4b75      	ldr	r3, [pc, #468]	; (bd4d8 <_Z7INFO_Dov+0x688>)
   bd304:	781b      	ldrb	r3, [r3, #0]
   bd306:	b14b      	cbz	r3, bd31c <_Z7INFO_Dov+0x4cc>
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
   bd308:	a82e      	add	r0, sp, #184	; 0xb8
   bd30a:	f7f7 fe77 	bl	b4ffc <strlen>
   bd30e:	ab2e      	add	r3, sp, #184	; 0xb8
   bd310:	4622      	mov	r2, r4
   bd312:	4972      	ldr	r1, [pc, #456]	; (bd4dc <_Z7INFO_Dov+0x68c>)
    comma=",";
   bd314:	4c66      	ldr	r4, [pc, #408]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sMCP4/gt2", comma);
   bd316:	4418      	add	r0, r3
   bd318:	f008 f9c2 	bl	c56a0 <sprintf>
  }
  if (SHT_1_exists) {
   bd31c:	4b70      	ldr	r3, [pc, #448]	; (bd4e0 <_Z7INFO_Dov+0x690>)
   bd31e:	781b      	ldrb	r3, [r3, #0]
   bd320:	b14b      	cbz	r3, bd336 <_Z7INFO_Dov+0x4e6>
    sprintf (buf+strlen(buf), "%sSHT1", comma);
   bd322:	a82e      	add	r0, sp, #184	; 0xb8
   bd324:	f7f7 fe6a 	bl	b4ffc <strlen>
   bd328:	ab2e      	add	r3, sp, #184	; 0xb8
   bd32a:	4622      	mov	r2, r4
   bd32c:	496d      	ldr	r1, [pc, #436]	; (bd4e4 <_Z7INFO_Dov+0x694>)
    comma=",";
   bd32e:	4c60      	ldr	r4, [pc, #384]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sSHT1", comma);
   bd330:	4418      	add	r0, r3
   bd332:	f008 f9b5 	bl	c56a0 <sprintf>
  }
  if (SHT_2_exists) {
   bd336:	4b6c      	ldr	r3, [pc, #432]	; (bd4e8 <_Z7INFO_Dov+0x698>)
   bd338:	781b      	ldrb	r3, [r3, #0]
   bd33a:	b14b      	cbz	r3, bd350 <_Z7INFO_Dov+0x500>
    sprintf (buf+strlen(buf), "%sSHT2", comma);
   bd33c:	a82e      	add	r0, sp, #184	; 0xb8
   bd33e:	f7f7 fe5d 	bl	b4ffc <strlen>
   bd342:	ab2e      	add	r3, sp, #184	; 0xb8
   bd344:	4622      	mov	r2, r4
   bd346:	4969      	ldr	r1, [pc, #420]	; (bd4ec <_Z7INFO_Dov+0x69c>)
    comma=",";
   bd348:	4c59      	ldr	r4, [pc, #356]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sSHT2", comma);
   bd34a:	4418      	add	r0, r3
   bd34c:	f008 f9a8 	bl	c56a0 <sprintf>
  }
  if (HDC_1_exists) {
   bd350:	4b67      	ldr	r3, [pc, #412]	; (bd4f0 <_Z7INFO_Dov+0x6a0>)
   bd352:	781b      	ldrb	r3, [r3, #0]
   bd354:	b14b      	cbz	r3, bd36a <_Z7INFO_Dov+0x51a>
    sprintf (buf+strlen(buf), "%sHDC1", comma);
   bd356:	a82e      	add	r0, sp, #184	; 0xb8
   bd358:	f7f7 fe50 	bl	b4ffc <strlen>
   bd35c:	ab2e      	add	r3, sp, #184	; 0xb8
   bd35e:	4622      	mov	r2, r4
   bd360:	4964      	ldr	r1, [pc, #400]	; (bd4f4 <_Z7INFO_Dov+0x6a4>)
    comma=",";
   bd362:	4c53      	ldr	r4, [pc, #332]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sHDC1", comma);
   bd364:	4418      	add	r0, r3
   bd366:	f008 f99b 	bl	c56a0 <sprintf>
  }
  if (HDC_2_exists) {
   bd36a:	4b63      	ldr	r3, [pc, #396]	; (bd4f8 <_Z7INFO_Dov+0x6a8>)
   bd36c:	781b      	ldrb	r3, [r3, #0]
   bd36e:	b14b      	cbz	r3, bd384 <_Z7INFO_Dov+0x534>
    sprintf (buf+strlen(buf), "%sHDC2", comma);
   bd370:	a82e      	add	r0, sp, #184	; 0xb8
   bd372:	f7f7 fe43 	bl	b4ffc <strlen>
   bd376:	ab2e      	add	r3, sp, #184	; 0xb8
   bd378:	4622      	mov	r2, r4
   bd37a:	4960      	ldr	r1, [pc, #384]	; (bd4fc <_Z7INFO_Dov+0x6ac>)
    comma=",";
   bd37c:	4c4c      	ldr	r4, [pc, #304]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sHDC2", comma);
   bd37e:	4418      	add	r0, r3
   bd380:	f008 f98e 	bl	c56a0 <sprintf>
  }
  if (LPS_1_exists) {
   bd384:	4b5e      	ldr	r3, [pc, #376]	; (bd500 <_Z7INFO_Dov+0x6b0>)
   bd386:	781b      	ldrb	r3, [r3, #0]
   bd388:	b14b      	cbz	r3, bd39e <_Z7INFO_Dov+0x54e>
    sprintf (buf+strlen(buf), "%sLPS1", comma);
   bd38a:	a82e      	add	r0, sp, #184	; 0xb8
   bd38c:	f7f7 fe36 	bl	b4ffc <strlen>
   bd390:	ab2e      	add	r3, sp, #184	; 0xb8
   bd392:	4622      	mov	r2, r4
   bd394:	495b      	ldr	r1, [pc, #364]	; (bd504 <_Z7INFO_Dov+0x6b4>)
    comma=",";
   bd396:	4c46      	ldr	r4, [pc, #280]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sLPS1", comma);
   bd398:	4418      	add	r0, r3
   bd39a:	f008 f981 	bl	c56a0 <sprintf>
  }
  if (LPS_2_exists) {
   bd39e:	4b5a      	ldr	r3, [pc, #360]	; (bd508 <_Z7INFO_Dov+0x6b8>)
   bd3a0:	781b      	ldrb	r3, [r3, #0]
   bd3a2:	b14b      	cbz	r3, bd3b8 <_Z7INFO_Dov+0x568>
    sprintf (buf+strlen(buf), "%sLPS2", comma);
   bd3a4:	a82e      	add	r0, sp, #184	; 0xb8
   bd3a6:	f7f7 fe29 	bl	b4ffc <strlen>
   bd3aa:	ab2e      	add	r3, sp, #184	; 0xb8
   bd3ac:	4622      	mov	r2, r4
   bd3ae:	4957      	ldr	r1, [pc, #348]	; (bd50c <_Z7INFO_Dov+0x6bc>)
    comma=",";
   bd3b0:	4c3f      	ldr	r4, [pc, #252]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sLPS2", comma);
   bd3b2:	4418      	add	r0, r3
   bd3b4:	f008 f974 	bl	c56a0 <sprintf>
  }
  if (HIH8_exists) {
   bd3b8:	4b55      	ldr	r3, [pc, #340]	; (bd510 <_Z7INFO_Dov+0x6c0>)
   bd3ba:	781b      	ldrb	r3, [r3, #0]
   bd3bc:	b14b      	cbz	r3, bd3d2 <_Z7INFO_Dov+0x582>
    sprintf (buf+strlen(buf), "%sHIH8", comma);
   bd3be:	a82e      	add	r0, sp, #184	; 0xb8
   bd3c0:	f7f7 fe1c 	bl	b4ffc <strlen>
   bd3c4:	ab2e      	add	r3, sp, #184	; 0xb8
   bd3c6:	4622      	mov	r2, r4
   bd3c8:	4952      	ldr	r1, [pc, #328]	; (bd514 <_Z7INFO_Dov+0x6c4>)
    comma=",";
   bd3ca:	4c39      	ldr	r4, [pc, #228]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sHIH8", comma);
   bd3cc:	4418      	add	r0, r3
   bd3ce:	f008 f967 	bl	c56a0 <sprintf>
  }
  if (SI1145_exists) {
   bd3d2:	4b51      	ldr	r3, [pc, #324]	; (bd518 <_Z7INFO_Dov+0x6c8>)
   bd3d4:	781b      	ldrb	r3, [r3, #0]
   bd3d6:	b14b      	cbz	r3, bd3ec <_Z7INFO_Dov+0x59c>
    sprintf (buf+strlen(buf), "%sSI", comma);
   bd3d8:	a82e      	add	r0, sp, #184	; 0xb8
   bd3da:	f7f7 fe0f 	bl	b4ffc <strlen>
   bd3de:	ab2e      	add	r3, sp, #184	; 0xb8
   bd3e0:	4622      	mov	r2, r4
   bd3e2:	494e      	ldr	r1, [pc, #312]	; (bd51c <_Z7INFO_Dov+0x6cc>)
    comma=",";
   bd3e4:	4c32      	ldr	r4, [pc, #200]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sSI", comma);
   bd3e6:	4418      	add	r0, r3
   bd3e8:	f008 f95a 	bl	c56a0 <sprintf>
  }
  if (VEML7700_exists) {
   bd3ec:	4b4c      	ldr	r3, [pc, #304]	; (bd520 <_Z7INFO_Dov+0x6d0>)
   bd3ee:	781b      	ldrb	r3, [r3, #0]
   bd3f0:	b14b      	cbz	r3, bd406 <_Z7INFO_Dov+0x5b6>
    sprintf (buf+strlen(buf), "%sVEML", comma);
   bd3f2:	a82e      	add	r0, sp, #184	; 0xb8
   bd3f4:	f7f7 fe02 	bl	b4ffc <strlen>
   bd3f8:	ab2e      	add	r3, sp, #184	; 0xb8
   bd3fa:	4622      	mov	r2, r4
   bd3fc:	4949      	ldr	r1, [pc, #292]	; (bd524 <_Z7INFO_Dov+0x6d4>)
    comma=",";
   bd3fe:	4c2c      	ldr	r4, [pc, #176]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sVEML", comma);
   bd400:	4418      	add	r0, r3
   bd402:	f008 f94d 	bl	c56a0 <sprintf>
  }
  if (BLX_exists) {
   bd406:	4b48      	ldr	r3, [pc, #288]	; (bd528 <_Z7INFO_Dov+0x6d8>)
   bd408:	781b      	ldrb	r3, [r3, #0]
   bd40a:	b14b      	cbz	r3, bd420 <_Z7INFO_Dov+0x5d0>
    sprintf (buf+strlen(buf), "%sBLX", comma);
   bd40c:	a82e      	add	r0, sp, #184	; 0xb8
   bd40e:	f7f7 fdf5 	bl	b4ffc <strlen>
   bd412:	ab2e      	add	r3, sp, #184	; 0xb8
   bd414:	4622      	mov	r2, r4
   bd416:	4945      	ldr	r1, [pc, #276]	; (bd52c <_Z7INFO_Dov+0x6dc>)
    comma=",";
   bd418:	4c25      	ldr	r4, [pc, #148]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sBLX", comma);
   bd41a:	4418      	add	r0, r3
   bd41c:	f008 f940 	bl	c56a0 <sprintf>
  }
  if (AS5600_exists) {
   bd420:	4b43      	ldr	r3, [pc, #268]	; (bd530 <_Z7INFO_Dov+0x6e0>)
   bd422:	781b      	ldrb	r3, [r3, #0]
   bd424:	b14b      	cbz	r3, bd43a <_Z7INFO_Dov+0x5ea>
    sprintf (buf+strlen(buf), "%sAS5600", comma);
   bd426:	a82e      	add	r0, sp, #184	; 0xb8
   bd428:	f7f7 fde8 	bl	b4ffc <strlen>
   bd42c:	ab2e      	add	r3, sp, #184	; 0xb8
   bd42e:	4622      	mov	r2, r4
   bd430:	4940      	ldr	r1, [pc, #256]	; (bd534 <_Z7INFO_Dov+0x6e4>)
    comma=",";
   bd432:	4c1f      	ldr	r4, [pc, #124]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sAS5600", comma);
   bd434:	4418      	add	r0, r3
   bd436:	f008 f933 	bl	c56a0 <sprintf>
  }
  if (TLW_exists) {
   bd43a:	4b3f      	ldr	r3, [pc, #252]	; (bd538 <_Z7INFO_Dov+0x6e8>)
   bd43c:	781b      	ldrb	r3, [r3, #0]
   bd43e:	b14b      	cbz	r3, bd454 <_Z7INFO_Dov+0x604>
    sprintf (buf+strlen(buf), "%sTLW", comma);
   bd440:	a82e      	add	r0, sp, #184	; 0xb8
   bd442:	f7f7 fddb 	bl	b4ffc <strlen>
   bd446:	ab2e      	add	r3, sp, #184	; 0xb8
   bd448:	4622      	mov	r2, r4
   bd44a:	493c      	ldr	r1, [pc, #240]	; (bd53c <_Z7INFO_Dov+0x6ec>)
    comma=",";
   bd44c:	4c18      	ldr	r4, [pc, #96]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sTLW", comma);
   bd44e:	4418      	add	r0, r3
   bd450:	f008 f926 	bl	c56a0 <sprintf>
  }
  if (TSM_exists) {
   bd454:	4b3a      	ldr	r3, [pc, #232]	; (bd540 <_Z7INFO_Dov+0x6f0>)
   bd456:	781b      	ldrb	r3, [r3, #0]
   bd458:	b14b      	cbz	r3, bd46e <_Z7INFO_Dov+0x61e>
    sprintf (buf+strlen(buf), "%sTSM", comma);
   bd45a:	a82e      	add	r0, sp, #184	; 0xb8
   bd45c:	f7f7 fdce 	bl	b4ffc <strlen>
   bd460:	ab2e      	add	r3, sp, #184	; 0xb8
   bd462:	4622      	mov	r2, r4
   bd464:	4937      	ldr	r1, [pc, #220]	; (bd544 <_Z7INFO_Dov+0x6f4>)
    comma=",";
   bd466:	4c12      	ldr	r4, [pc, #72]	; (bd4b0 <_Z7INFO_Dov+0x660>)
    sprintf (buf+strlen(buf), "%sTSM", comma);
   bd468:	4418      	add	r0, r3
   bd46a:	f008 f919 	bl	c56a0 <sprintf>
  }
  if (TMSM_exists) {
   bd46e:	4b36      	ldr	r3, [pc, #216]	; (bd548 <_Z7INFO_Dov+0x6f8>)
   bd470:	781b      	ldrb	r3, [r3, #0]
   bd472:	2b00      	cmp	r3, #0
   bd474:	d074      	beq.n	bd560 <_Z7INFO_Dov+0x710>
   bd476:	e069      	b.n	bd54c <_Z7INFO_Dov+0x6fc>
   bd478:	000cbb54 	.word	0x000cbb54
   bd47c:	000cb68e 	.word	0x000cb68e
   bd480:	2002da5c 	.word	0x2002da5c
   bd484:	2002d930 	.word	0x2002d930
   bd488:	000cbb64 	.word	0x000cbb64
   bd48c:	000cbb67 	.word	0x000cbb67
   bd490:	2002da60 	.word	0x2002da60
   bd494:	000cbb7f 	.word	0x000cbb7f
   bd498:	000cb2df 	.word	0x000cb2df
   bd49c:	2002da82 	.word	0x2002da82
   bd4a0:	2002da83 	.word	0x2002da83
   bd4a4:	000cbb82 	.word	0x000cbb82
   bd4a8:	2002d90c 	.word	0x2002d90c
   bd4ac:	000cbdf3 	.word	0x000cbdf3
   bd4b0:	000caf7c 	.word	0x000caf7c
   bd4b4:	2002da85 	.word	0x2002da85
   bd4b8:	2002da86 	.word	0x2002da86
   bd4bc:	000cbb8d 	.word	0x000cbb8d
   bd4c0:	2002dac8 	.word	0x2002dac8
   bd4c4:	000cbb98 	.word	0x000cbb98
   bd4c8:	2002dac9 	.word	0x2002dac9
   bd4cc:	000cbb9f 	.word	0x000cbb9f
   bd4d0:	2002daca 	.word	0x2002daca
   bd4d4:	000cbba6 	.word	0x000cbba6
   bd4d8:	2002dacb 	.word	0x2002dacb
   bd4dc:	000cbbb1 	.word	0x000cbbb1
   bd4e0:	2002df8c 	.word	0x2002df8c
   bd4e4:	000cbbbc 	.word	0x000cbbbc
   bd4e8:	2002df8d 	.word	0x2002df8d
   bd4ec:	000cbbc3 	.word	0x000cbbc3
   bd4f0:	2002daac 	.word	0x2002daac
   bd4f4:	000cbbca 	.word	0x000cbbca
   bd4f8:	2002daad 	.word	0x2002daad
   bd4fc:	000cbbd1 	.word	0x000cbbd1
   bd500:	2002dab2 	.word	0x2002dab2
   bd504:	000cbbd8 	.word	0x000cbbd8
   bd508:	2002dab3 	.word	0x2002dab3
   bd50c:	000cbbdf 	.word	0x000cbbdf
   bd510:	2002daae 	.word	0x2002daae
   bd514:	000cbbe6 	.word	0x000cbbe6
   bd518:	2002df8e 	.word	0x2002df8e
   bd51c:	000cbbed 	.word	0x000cbbed
   bd520:	2002dfa0 	.word	0x2002dfa0
   bd524:	000cbbf2 	.word	0x000cbbf2
   bd528:	2002da80 	.word	0x2002da80
   bd52c:	000cbbf9 	.word	0x000cbbf9
   bd530:	2002d87c 	.word	0x2002d87c
   bd534:	000cbbff 	.word	0x000cbbff
   bd538:	2002df9c 	.word	0x2002df9c
   bd53c:	000cbc08 	.word	0x000cbc08
   bd540:	2002df9e 	.word	0x2002df9e
   bd544:	000cbc0e 	.word	0x000cbc0e
   bd548:	2002df9d 	.word	0x2002df9d
    sprintf (buf+strlen(buf), "%sTMSM", comma);
   bd54c:	a82e      	add	r0, sp, #184	; 0xb8
   bd54e:	f7f7 fd55 	bl	b4ffc <strlen>
   bd552:	ab2e      	add	r3, sp, #184	; 0xb8
   bd554:	4622      	mov	r2, r4
   bd556:	4992      	ldr	r1, [pc, #584]	; (bd7a0 <_Z7INFO_Dov+0x950>)
    comma=",";
   bd558:	4c92      	ldr	r4, [pc, #584]	; (bd7a4 <_Z7INFO_Dov+0x954>)
    sprintf (buf+strlen(buf), "%sTMSM", comma);
   bd55a:	4418      	add	r0, r3
   bd55c:	f008 f8a0 	bl	c56a0 <sprintf>
  }
  if (HI_exists) {
   bd560:	4b91      	ldr	r3, [pc, #580]	; (bd7a8 <_Z7INFO_Dov+0x958>)
   bd562:	781b      	ldrb	r3, [r3, #0]
   bd564:	b14b      	cbz	r3, bd57a <_Z7INFO_Dov+0x72a>
    sprintf (buf+strlen(buf), "%sHI", comma);
   bd566:	a82e      	add	r0, sp, #184	; 0xb8
   bd568:	f7f7 fd48 	bl	b4ffc <strlen>
   bd56c:	ab2e      	add	r3, sp, #184	; 0xb8
   bd56e:	4622      	mov	r2, r4
   bd570:	498e      	ldr	r1, [pc, #568]	; (bd7ac <_Z7INFO_Dov+0x95c>)
    comma=",";
   bd572:	4c8c      	ldr	r4, [pc, #560]	; (bd7a4 <_Z7INFO_Dov+0x954>)
    sprintf (buf+strlen(buf), "%sHI", comma);
   bd574:	4418      	add	r0, r3
   bd576:	f008 f893 	bl	c56a0 <sprintf>
  }
  if (WBT_exists) {
   bd57a:	4b8d      	ldr	r3, [pc, #564]	; (bd7b0 <_Z7INFO_Dov+0x960>)
   bd57c:	781b      	ldrb	r3, [r3, #0]
   bd57e:	b14b      	cbz	r3, bd594 <_Z7INFO_Dov+0x744>
    sprintf (buf+strlen(buf), "%sWBT", comma);
   bd580:	a82e      	add	r0, sp, #184	; 0xb8
   bd582:	f7f7 fd3b 	bl	b4ffc <strlen>
   bd586:	ab2e      	add	r3, sp, #184	; 0xb8
   bd588:	4622      	mov	r2, r4
   bd58a:	498a      	ldr	r1, [pc, #552]	; (bd7b4 <_Z7INFO_Dov+0x964>)
    comma=",";
   bd58c:	4c85      	ldr	r4, [pc, #532]	; (bd7a4 <_Z7INFO_Dov+0x954>)
    sprintf (buf+strlen(buf), "%sWBT", comma);
   bd58e:	4418      	add	r0, r3
   bd590:	f008 f886 	bl	c56a0 <sprintf>
  }
  if (WBGT_exists) {
   bd594:	4b88      	ldr	r3, [pc, #544]	; (bd7b8 <_Z7INFO_Dov+0x968>)
   bd596:	781b      	ldrb	r3, [r3, #0]
   bd598:	b16b      	cbz	r3, bd5b6 <_Z7INFO_Dov+0x766>
    if (MCP_3_exists) {
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
   bd59a:	a82e      	add	r0, sp, #184	; 0xb8
   bd59c:	f7f7 fd2e 	bl	b4ffc <strlen>
   bd5a0:	ab2e      	add	r3, sp, #184	; 0xb8
   bd5a2:	4418      	add	r0, r3
    if (MCP_3_exists) {
   bd5a4:	782b      	ldrb	r3, [r5, #0]
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
   bd5a6:	4622      	mov	r2, r4
    if (MCP_3_exists) {
   bd5a8:	2b00      	cmp	r3, #0
   bd5aa:	f000 80e6 	beq.w	bd77a <_Z7INFO_Dov+0x92a>
      sprintf (buf+strlen(buf), "%sWBGT W/GLOBE", comma);
   bd5ae:	4983      	ldr	r1, [pc, #524]	; (bd7bc <_Z7INFO_Dov+0x96c>)
    }
    else {
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
    }
    comma=",";
   bd5b0:	4c7c      	ldr	r4, [pc, #496]	; (bd7a4 <_Z7INFO_Dov+0x954>)
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
   bd5b2:	f008 f875 	bl	c56a0 <sprintf>
  }
  if (PM25AQI_exists) {
   bd5b6:	4b82      	ldr	r3, [pc, #520]	; (bd7c0 <_Z7INFO_Dov+0x970>)
   bd5b8:	781b      	ldrb	r3, [r3, #0]
   bd5ba:	b14b      	cbz	r3, bd5d0 <_Z7INFO_Dov+0x780>
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
   bd5bc:	a82e      	add	r0, sp, #184	; 0xb8
   bd5be:	f7f7 fd1d 	bl	b4ffc <strlen>
   bd5c2:	ab2e      	add	r3, sp, #184	; 0xb8
   bd5c4:	4622      	mov	r2, r4
   bd5c6:	497f      	ldr	r1, [pc, #508]	; (bd7c4 <_Z7INFO_Dov+0x974>)
    comma=",";
   bd5c8:	4c76      	ldr	r4, [pc, #472]	; (bd7a4 <_Z7INFO_Dov+0x954>)
    sprintf (buf+strlen(buf), "%sPM25AQ", comma);
   bd5ca:	4418      	add	r0, r3
   bd5cc:	f008 f868 	bl	c56a0 <sprintf>
  }

  sprintf (buf+strlen(buf), "%sRG(%s)", comma, pinNames[RAINGAUGE1_IRQ_PIN]);
   bd5d0:	a82e      	add	r0, sp, #184	; 0xb8
   bd5d2:	f7f7 fd13 	bl	b4ffc <strlen>
   bd5d6:	4b7c      	ldr	r3, [pc, #496]	; (bd7c8 <_Z7INFO_Dov+0x978>)
   bd5d8:	497c      	ldr	r1, [pc, #496]	; (bd7cc <_Z7INFO_Dov+0x97c>)
   bd5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd5dc:	4622      	mov	r2, r4
   bd5de:	ac2e      	add	r4, sp, #184	; 0xb8
   bd5e0:	4420      	add	r0, r4
   bd5e2:	f008 f85d 	bl	c56a0 <sprintf>

  writer.name("sensors").value(buf);
   bd5e6:	497a      	ldr	r1, [pc, #488]	; (bd7d0 <_Z7INFO_Dov+0x980>)
   bd5e8:	a807      	add	r0, sp, #28
   bd5ea:	f7f8 fb87 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd5ee:	4621      	mov	r1, r4
   bd5f0:	f7f8 fada 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  // LoRa
  if (LORA_exists) {
   bd5f4:	4b77      	ldr	r3, [pc, #476]	; (bd7d4 <_Z7INFO_Dov+0x984>)
   bd5f6:	781b      	ldrb	r3, [r3, #0]
   bd5f8:	b18b      	cbz	r3, bd61e <_Z7INFO_Dov+0x7ce>
    sprintf (buf, "%d,%d,%dMHz", cf_lora_unitid, cf_lora_txpower, cf_lora_freq);
   bd5fa:	4b77      	ldr	r3, [pc, #476]	; (bd7d8 <_Z7INFO_Dov+0x988>)
   bd5fc:	4a77      	ldr	r2, [pc, #476]	; (bd7dc <_Z7INFO_Dov+0x98c>)
   bd5fe:	681b      	ldr	r3, [r3, #0]
   bd600:	9300      	str	r3, [sp, #0]
   bd602:	4b77      	ldr	r3, [pc, #476]	; (bd7e0 <_Z7INFO_Dov+0x990>)
   bd604:	6812      	ldr	r2, [r2, #0]
   bd606:	681b      	ldr	r3, [r3, #0]
   bd608:	4976      	ldr	r1, [pc, #472]	; (bd7e4 <_Z7INFO_Dov+0x994>)
   bd60a:	4620      	mov	r0, r4
   bd60c:	f008 f848 	bl	c56a0 <sprintf>
    writer.name("lora").value(buf);
   bd610:	4975      	ldr	r1, [pc, #468]	; (bd7e8 <_Z7INFO_Dov+0x998>)
   bd612:	a807      	add	r0, sp, #28
   bd614:	f7f8 fb72 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd618:	4621      	mov	r1, r4
   bd61a:	f7f8 fac5 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }

  // Oled Display
  if (oled_type) {
   bd61e:	4c73      	ldr	r4, [pc, #460]	; (bd7ec <_Z7INFO_Dov+0x99c>)
    writer.name("oled").value(OLED32 ? "32" : "64");
   bd620:	4973      	ldr	r1, [pc, #460]	; (bd7f0 <_Z7INFO_Dov+0x9a0>)
  if (oled_type) {
   bd622:	6823      	ldr	r3, [r4, #0]
    writer.name("oled").value(OLED32 ? "32" : "64");
   bd624:	a807      	add	r0, sp, #28
  if (oled_type) {
   bd626:	2b00      	cmp	r3, #0
   bd628:	f000 80a9 	beq.w	bd77e <_Z7INFO_Dov+0x92e>
    writer.name("oled").value(OLED32 ? "32" : "64");
   bd62c:	f7f8 fb66 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd630:	6821      	ldr	r1, [r4, #0]
   bd632:	4a70      	ldr	r2, [pc, #448]	; (bd7f4 <_Z7INFO_Dov+0x9a4>)
   bd634:	4b70      	ldr	r3, [pc, #448]	; (bd7f8 <_Z7INFO_Dov+0x9a8>)
   bd636:	293c      	cmp	r1, #60	; 0x3c
   bd638:	bf0c      	ite	eq
   bd63a:	4611      	moveq	r1, r2
   bd63c:	4619      	movne	r1, r3
  }
  else {
    writer.name("oled").value("NF");
   bd63e:	f7f8 fab3 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  }
  writer.name("scepin").value((digitalRead(SCE_PIN)) ? "DISABLED" : "ENABLED");
   bd642:	496e      	ldr	r1, [pc, #440]	; (bd7fc <_Z7INFO_Dov+0x9ac>)
   bd644:	a807      	add	r0, sp, #28
   bd646:	f7f8 fb59 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd64a:	4b6d      	ldr	r3, [pc, #436]	; (bd800 <_Z7INFO_Dov+0x9b0>)
   bd64c:	4604      	mov	r4, r0
   bd64e:	8818      	ldrh	r0, [r3, #0]
   bd650:	f009 ffdc 	bl	c760c <digitalRead>
   bd654:	4a6b      	ldr	r2, [pc, #428]	; (bd804 <_Z7INFO_Dov+0x9b4>)
   bd656:	496c      	ldr	r1, [pc, #432]	; (bd808 <_Z7INFO_Dov+0x9b8>)
   bd658:	2800      	cmp	r0, #0
   bd65a:	bf18      	it	ne
   bd65c:	4611      	movne	r1, r2
   bd65e:	4620      	mov	r0, r4
   bd660:	f7f8 faa2 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
  writer.name("sce").value((SerialConsoleEnabled) ? "TRUE" : "FALSE");
   bd664:	4969      	ldr	r1, [pc, #420]	; (bd80c <_Z7INFO_Dov+0x9bc>)
   bd666:	a807      	add	r0, sp, #28
   bd668:	f7f8 fb48 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd66c:	4b68      	ldr	r3, [pc, #416]	; (bd810 <_Z7INFO_Dov+0x9c0>)
   bd66e:	4a69      	ldr	r2, [pc, #420]	; (bd814 <_Z7INFO_Dov+0x9c4>)
   bd670:	7819      	ldrb	r1, [r3, #0]
   bd672:	4b69      	ldr	r3, [pc, #420]	; (bd818 <_Z7INFO_Dov+0x9c8>)
   bd674:	2900      	cmp	r1, #0
   bd676:	bf14      	ite	ne
   bd678:	4611      	movne	r1, r2
   bd67a:	4619      	moveq	r1, r3
   bd67c:	f7f8 fa94 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>

  writer.endObject();
   bd680:	a807      	add	r0, sp, #28
   bd682:	f008 ff6f 	bl	c6564 <_ZN5spark10JSONWriter9endObjectEv>

  // Done profiling system

  // Update INFO.TXT file
  if (SD_exists) {
   bd686:	4b65      	ldr	r3, [pc, #404]	; (bd81c <_Z7INFO_Dov+0x9cc>)
   bd688:	781b      	ldrb	r3, [r3, #0]
   bd68a:	b1cb      	cbz	r3, bd6c0 <_Z7INFO_Dov+0x870>
    File tmpFile;
   bd68c:	a821      	add	r0, sp, #132	; 0x84
   bd68e:	f7f8 fb63 	bl	b5d58 <_ZN4FileC1Ev>
    tmpFile.open(vwd(), path, oflag);
   bd692:	f244 6302 	movw	r3, #17922	; 0x4602
   bd696:	4a62      	ldr	r2, [pc, #392]	; (bd820 <_Z7INFO_Dov+0x9d0>)
   bd698:	4962      	ldr	r1, [pc, #392]	; (bd824 <_Z7INFO_Dov+0x9d4>)
   bd69a:	4c63      	ldr	r4, [pc, #396]	; (bd828 <_Z7INFO_Dov+0x9d8>)
   bd69c:	a825      	add	r0, sp, #148	; 0x94
   bd69e:	f005 ffcc 	bl	c363a <_ZN7FatFile4openEPS_PKci>
    File fp = SD.open(SD_INFO_FILE, FILE_WRITE | O_TRUNC); 
    if (fp) {
   bd6a2:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   bd6a6:	2b00      	cmp	r3, #0
   bd6a8:	d06d      	beq.n	bd786 <_Z7INFO_Dov+0x936>
      fp.println(msgbuf);
   bd6aa:	4960      	ldr	r1, [pc, #384]	; (bd82c <_Z7INFO_Dov+0x9dc>)
   bd6ac:	a821      	add	r0, sp, #132	; 0x84
   bd6ae:	f009 fa22 	bl	c6af6 <_ZN5Print7printlnEPKc>
      fp.close();
   bd6b2:	a825      	add	r0, sp, #148	; 0x94
   bd6b4:	f005 ffba 	bl	c362c <_ZN7FatFile5closeEv>
      SystemStatusBits &= ~SSB_SD;  // Turn Off Bit
   bd6b8:	6823      	ldr	r3, [r4, #0]
   bd6ba:	f023 0302 	bic.w	r3, r3, #2
   bd6be:	6023      	str	r3, [r4, #0]
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
      Output ("SD:Open(Info)ERR");
    }
  }

  if (Particle_Publish((char *) "INFO")) {
   bd6c0:	485b      	ldr	r0, [pc, #364]	; (bd830 <_Z7INFO_Dov+0x9e0>)
   bd6c2:	f7ff fb15 	bl	bccf0 <_Z16Particle_PublishPc>
   bd6c6:	4604      	mov	r4, r0
   bd6c8:	2800      	cmp	r0, #0
   bd6ca:	d064      	beq.n	bd796 <_Z7INFO_Dov+0x946>
    Serial_write (msgbuf);
   bd6cc:	4857      	ldr	r0, [pc, #348]	; (bd82c <_Z7INFO_Dov+0x9dc>)
   bd6ce:	f7f8 fd33 	bl	b6138 <_Z12Serial_writePKc>
    sprintf (Buffer32Bytes, "INFO->PUB OK[%d]", strlen(msgbuf)+1);
   bd6d2:	4856      	ldr	r0, [pc, #344]	; (bd82c <_Z7INFO_Dov+0x9dc>)
   bd6d4:	f7f7 fc92 	bl	b4ffc <strlen>
   bd6d8:	4956      	ldr	r1, [pc, #344]	; (bd834 <_Z7INFO_Dov+0x9e4>)
   bd6da:	1c42      	adds	r2, r0, #1
   bd6dc:	4856      	ldr	r0, [pc, #344]	; (bd838 <_Z7INFO_Dov+0x9e8>)
   bd6de:	f007 ffdf 	bl	c56a0 <sprintf>
    Output(Buffer32Bytes);
    return(true);
  }
  else {
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
    Output(Buffer32Bytes);
   bd6e2:	4855      	ldr	r0, [pc, #340]	; (bd838 <_Z7INFO_Dov+0x9e8>)
   bd6e4:	f7f8 fd52 	bl	b618c <_Z6OutputPKc>
    return(false);
  }
   bd6e8:	4620      	mov	r0, r4
   bd6ea:	b06e      	add	sp, #440	; 0x1b8
   bd6ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      writer.name("n2s").value(-1);
   bd6f0:	f7f8 fb04 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd6f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   bd6f8:	f008 ff56 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
    virtual ~Print() {}
   bd6fc:	e4bc      	b.n	bd078 <_Z7INFO_Dov+0x228>
    writer.name("n2s").value("NF");
   bd6fe:	494f      	ldr	r1, [pc, #316]	; (bd83c <_Z7INFO_Dov+0x9ec>)
   bd700:	a807      	add	r0, sp, #28
   bd702:	f7f8 fafb 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd706:	494e      	ldr	r1, [pc, #312]	; (bd840 <_Z7INFO_Dov+0x9f0>)
   bd708:	f7f8 fa4e 	bl	b5ba8 <_ZN5spark10JSONWriter5valueEPKc.isra.0>
   bd70c:	e4b4      	b.n	bd078 <_Z7INFO_Dov+0x228>
    writer.name("ps").value(sps);
   bd70e:	f7f8 faf5 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd712:	4621      	mov	r1, r4
   bd714:	f008 ff48 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
   bd718:	e4c9      	b.n	bd0ae <_Z7INFO_Dov+0x25e>
    writer.name("bcs").value(sbs);
   bd71a:	f7f8 faef 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd71e:	4621      	mov	r1, r4
   bd720:	f008 ff42 	bl	c65a8 <_ZN5spark10JSONWriter5valueEi>
   bd724:	e4da      	b.n	bd0dc <_Z7INFO_Dov+0x28c>
  } else if (simType == EXTERNAL_SIM) {
   bd726:	2b02      	cmp	r3, #2
   bd728:	d105      	bne.n	bd736 <_Z7INFO_Dov+0x8e6>
    writer.name("actsim").value("EXTERNAL");
   bd72a:	4946      	ldr	r1, [pc, #280]	; (bd844 <_Z7INFO_Dov+0x9f4>)
   bd72c:	a807      	add	r0, sp, #28
   bd72e:	f7f8 fae5 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd732:	4945      	ldr	r1, [pc, #276]	; (bd848 <_Z7INFO_Dov+0x9f8>)
   bd734:	e573      	b.n	bd21e <_Z7INFO_Dov+0x3ce>
    writer.name("actsim").value("ERR");
   bd736:	4943      	ldr	r1, [pc, #268]	; (bd844 <_Z7INFO_Dov+0x9f4>)
   bd738:	a807      	add	r0, sp, #28
   bd73a:	f7f8 fadf 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd73e:	4943      	ldr	r1, [pc, #268]	; (bd84c <_Z7INFO_Dov+0x9fc>)
   bd740:	e56d      	b.n	bd21e <_Z7INFO_Dov+0x3ce>
      writer.name("a4").value("DIST 10M");
   bd742:	f7f8 fadb 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd746:	4942      	ldr	r1, [pc, #264]	; (bd850 <_Z7INFO_Dov+0xa00>)
   bd748:	e580      	b.n	bd24c <_Z7INFO_Dov+0x3fc>
  else if (A4_State == A4_STATE_RAIN){
   bd74a:	2b02      	cmp	r3, #2
    writer.name("a4").value("RG2");
   bd74c:	4941      	ldr	r1, [pc, #260]	; (bd854 <_Z7INFO_Dov+0xa04>)
   bd74e:	a807      	add	r0, sp, #28
  else if (A4_State == A4_STATE_RAIN){
   bd750:	d103      	bne.n	bd75a <_Z7INFO_Dov+0x90a>
    writer.name("a4").value("RG2");
   bd752:	f7f8 fad3 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd756:	4940      	ldr	r1, [pc, #256]	; (bd858 <_Z7INFO_Dov+0xa08>)
   bd758:	e578      	b.n	bd24c <_Z7INFO_Dov+0x3fc>
  else if (A4_State == A4_STATE_RAW){
   bd75a:	2b03      	cmp	r3, #3
   bd75c:	d103      	bne.n	bd766 <_Z7INFO_Dov+0x916>
    writer.name("a4").value("RAW");
   bd75e:	f7f8 facd 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd762:	493e      	ldr	r1, [pc, #248]	; (bd85c <_Z7INFO_Dov+0xa0c>)
   bd764:	e572      	b.n	bd24c <_Z7INFO_Dov+0x3fc>
    writer.name("a4").value("NS"); // Not Set
   bd766:	f7f8 fac9 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd76a:	493d      	ldr	r1, [pc, #244]	; (bd860 <_Z7INFO_Dov+0xa10>)
   bd76c:	e56e      	b.n	bd24c <_Z7INFO_Dov+0x3fc>
    writer.name("a5").value("NS"); // Not Set
   bd76e:	f7f8 fac5 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd772:	493b      	ldr	r1, [pc, #236]	; (bd860 <_Z7INFO_Dov+0xa10>)
   bd774:	e576      	b.n	bd264 <_Z7INFO_Dov+0x414>
  const char *comma = "";
   bd776:	4c3b      	ldr	r4, [pc, #236]	; (bd864 <_Z7INFO_Dov+0xa14>)
   bd778:	e58a      	b.n	bd290 <_Z7INFO_Dov+0x440>
      sprintf (buf+strlen(buf), "%sWBGT WO/GLOBE", comma);
   bd77a:	493b      	ldr	r1, [pc, #236]	; (bd868 <_Z7INFO_Dov+0xa18>)
   bd77c:	e718      	b.n	bd5b0 <_Z7INFO_Dov+0x760>
    writer.name("oled").value("NF");
   bd77e:	f7f8 fabd 	bl	b5cfc <_ZN5spark10JSONWriter4nameEPKc>
   bd782:	492f      	ldr	r1, [pc, #188]	; (bd840 <_Z7INFO_Dov+0x9f0>)
   bd784:	e75b      	b.n	bd63e <_Z7INFO_Dov+0x7ee>
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
   bd786:	6823      	ldr	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
   bd788:	4838      	ldr	r0, [pc, #224]	; (bd86c <_Z7INFO_Dov+0xa1c>)
      SystemStatusBits |= SSB_SD;  // Turn On Bit - Note this will be reported on next observation
   bd78a:	f043 0302 	orr.w	r3, r3, #2
   bd78e:	6023      	str	r3, [r4, #0]
      Output ("SD:Open(Info)ERR");
   bd790:	f7f8 fcfc 	bl	b618c <_Z6OutputPKc>
   bd794:	e794      	b.n	bd6c0 <_Z7INFO_Dov+0x870>
    sprintf (Buffer32Bytes, "INFO->PUB ERR");
   bd796:	4936      	ldr	r1, [pc, #216]	; (bd870 <_Z7INFO_Dov+0xa20>)
   bd798:	4827      	ldr	r0, [pc, #156]	; (bd838 <_Z7INFO_Dov+0x9e8>)
   bd79a:	f00c fd87 	bl	ca2ac <strcpy>
   bd79e:	e7a0      	b.n	bd6e2 <_Z7INFO_Dov+0x892>
   bd7a0:	000cbc14 	.word	0x000cbc14
   bd7a4:	000caf7c 	.word	0x000caf7c
   bd7a8:	2002daaf 	.word	0x2002daaf
   bd7ac:	000cbc1b 	.word	0x000cbc1b
   bd7b0:	2002dfa2 	.word	0x2002dfa2
   bd7b4:	000cbc20 	.word	0x000cbc20
   bd7b8:	2002dfa1 	.word	0x2002dfa1
   bd7bc:	000cbc26 	.word	0x000cbc26
   bd7c0:	2002dacc 	.word	0x2002dacc
   bd7c4:	000cbc45 	.word	0x000cbc45
   bd7c8:	2002d940 	.word	0x2002d940
   bd7cc:	000cbc4e 	.word	0x000cbc4e
   bd7d0:	000cbc57 	.word	0x000cbc57
   bd7d4:	2002dab1 	.word	0x2002dab1
   bd7d8:	2002d920 	.word	0x2002d920
   bd7dc:	2002d928 	.word	0x2002d928
   bd7e0:	2002d924 	.word	0x2002d924
   bd7e4:	000cbc5f 	.word	0x000cbc5f
   bd7e8:	000cbc6b 	.word	0x000cbc6b
   bd7ec:	2003e1a0 	.word	0x2003e1a0
   bd7f0:	000cbc70 	.word	0x000cbc70
   bd7f4:	000cbac1 	.word	0x000cbac1
   bd7f8:	000cbac4 	.word	0x000cbac4
   bd7fc:	000cbc75 	.word	0x000cbc75
   bd800:	2002d884 	.word	0x2002d884
   bd804:	000cbac7 	.word	0x000cbac7
   bd808:	000cbad0 	.word	0x000cbad0
   bd80c:	000cbc7c 	.word	0x000cbc7c
   bd810:	2002df8f 	.word	0x2002df8f
   bd814:	000cbad8 	.word	0x000cbad8
   bd818:	000cbadd 	.word	0x000cbadd
   bd81c:	2002df54 	.word	0x2002df54
   bd820:	2002d8bd 	.word	0x2002d8bd
   bd824:	2002df0c 	.word	0x2002df0c
   bd828:	2002d908 	.word	0x2002d908
   bd82c:	200328c0 	.word	0x200328c0
   bd830:	000cb0fe 	.word	0x000cb0fe
   bd834:	000cbc91 	.word	0x000cbc91
   bd838:	2002da87 	.word	0x2002da87
   bd83c:	000cbb44 	.word	0x000cbb44
   bd840:	000cab55 	.word	0x000cab55
   bd844:	000cbb54 	.word	0x000cbb54
   bd848:	000cbb5b 	.word	0x000cbb5b
   bd84c:	000ca941 	.word	0x000ca941
   bd850:	000cbb6f 	.word	0x000cbb6f
   bd854:	000cbb64 	.word	0x000cbb64
   bd858:	000cbb78 	.word	0x000cbb78
   bd85c:	000cb2df 	.word	0x000cb2df
   bd860:	000cbb7c 	.word	0x000cbb7c
   bd864:	000cbdf3 	.word	0x000cbdf3
   bd868:	000cbc35 	.word	0x000cbc35
   bd86c:	000cbc80 	.word	0x000cbc80
   bd870:	000cbca2 	.word	0x000cbca2

000bd874 <_Z14SD_N2S_Publishv>:
void SD_N2S_Publish() {
   bd874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd878:	b09a      	sub	sp, #104	; 0x68
  File fp;
   bd87a:	4668      	mov	r0, sp
   bd87c:	f7f8 fa6c 	bl	b5d58 <_ZN4FileC1Ev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
   bd880:	4b72      	ldr	r3, [pc, #456]	; (bda4c <_Z14SD_N2S_Publishv+0x1d8>)
   bd882:	781b      	ldrb	r3, [r3, #0]
   bd884:	2b00      	cmp	r3, #0
   bd886:	d02f      	beq.n	bd8e8 <_Z14SD_N2S_Publishv+0x74>
    return vwd()->exists(path);
   bd888:	4971      	ldr	r1, [pc, #452]	; (bda50 <_Z14SD_N2S_Publishv+0x1dc>)
   bd88a:	4872      	ldr	r0, [pc, #456]	; (bda54 <_Z14SD_N2S_Publishv+0x1e0>)
   bd88c:	f7f8 fa44 	bl	b5d18 <_ZN7FatFile6existsEPKc>
   bd890:	2800      	cmp	r0, #0
   bd892:	d029      	beq.n	bd8e8 <_Z14SD_N2S_Publishv+0x74>
    Output ("N2S:Publish");
   bd894:	4870      	ldr	r0, [pc, #448]	; (bda58 <_Z14SD_N2S_Publishv+0x1e4>)
   bd896:	f7f8 fc79 	bl	b618c <_Z6OutputPKc>
    File tmpFile;
   bd89a:	a80d      	add	r0, sp, #52	; 0x34
   bd89c:	f7f8 fa5c 	bl	b5d58 <_ZN4FileC1Ev>
class File : public FatFile, public Stream {
   bd8a0:	ac11      	add	r4, sp, #68	; 0x44
    tmpFile.open(vwd(), path, oflag);
   bd8a2:	4a6b      	ldr	r2, [pc, #428]	; (bda50 <_Z14SD_N2S_Publishv+0x1dc>)
   bd8a4:	496b      	ldr	r1, [pc, #428]	; (bda54 <_Z14SD_N2S_Publishv+0x1e0>)
   bd8a6:	2300      	movs	r3, #0
   bd8a8:	a811      	add	r0, sp, #68	; 0x44
   bd8aa:	f005 fec6 	bl	c363a <_ZN7FatFile4openEPS_PKci>
   bd8ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd8b0:	ad04      	add	r5, sp, #16
   bd8b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd8b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bd8b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bd8b8:	6823      	ldr	r3, [r4, #0]
   bd8ba:	602b      	str	r3, [r5, #0]
class Print
   bd8bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   bd8be:	9301      	str	r3, [sp, #4]
   bd8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   bd8c2:	9302      	str	r3, [sp, #8]
   bd8c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   bd8c6:	9303      	str	r3, [sp, #12]
    if (fp) {
   bd8c8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   bd8cc:	2b00      	cmp	r3, #0
   bd8ce:	f000 80b8 	beq.w	bda42 <_Z14SD_N2S_Publishv+0x1ce>
    return m_fileSize;
   bd8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      if (fp.size()<=20) {
   bd8d4:	2b14      	cmp	r3, #20
   bd8d6:	d80a      	bhi.n	bd8ee <_Z14SD_N2S_Publishv+0x7a>
        fp.close();
   bd8d8:	a804      	add	r0, sp, #16
   bd8da:	f005 fea7 	bl	c362c <_ZN7FatFile5closeEv>
        Output ("N2S:Empty");
   bd8de:	485f      	ldr	r0, [pc, #380]	; (bda5c <_Z14SD_N2S_Publishv+0x1e8>)
   bd8e0:	f7f8 fc54 	bl	b618c <_Z6OutputPKc>
            SD_N2S_Delete(); // Bad data in the file so delete the file           
   bd8e4:	f7fb fb52 	bl	b8f8c <_Z13SD_N2S_Deletev>
}
   bd8e8:	b01a      	add	sp, #104	; 0x68
   bd8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (eeprom.n2sfp) {
   bd8ee:	f8df 8190 	ldr.w	r8, [pc, #400]	; bda80 <_Z14SD_N2S_Publishv+0x20c>
   bd8f2:	f8d8 1014 	ldr.w	r1, [r8, #20]
   bd8f6:	b121      	cbz	r1, bd902 <_Z14SD_N2S_Publishv+0x8e>
          if (fp.size()<=eeprom.n2sfp) {
   bd8f8:	4299      	cmp	r1, r3
   bd8fa:	d311      	bcc.n	bd920 <_Z14SD_N2S_Publishv+0xac>
            eeprom.n2sfp = 0; 
   bd8fc:	2300      	movs	r3, #0
   bd8fe:	f8c8 3014 	str.w	r3, [r8, #20]
   bd902:	2400      	movs	r4, #0
   bd904:	4f56      	ldr	r7, [pc, #344]	; (bda60 <_Z14SD_N2S_Publishv+0x1ec>)
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
   bd906:	f8df 917c 	ldr.w	r9, [pc, #380]	; bda84 <_Z14SD_N2S_Publishv+0x210>
              Output ("N2S:OBS Needed");
   bd90a:	f8df a17c 	ldr.w	sl, [pc, #380]	; bda88 <_Z14SD_N2S_Publishv+0x214>
   bd90e:	4625      	mov	r5, r4
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
   bd910:	4668      	mov	r0, sp
   bd912:	f7f8 f8f9 	bl	b5b08 <_ZN4File9availableEv>
   bd916:	b938      	cbnz	r0, bd928 <_Z14SD_N2S_Publishv+0xb4>
            fp.close();
   bd918:	a804      	add	r0, sp, #16
   bd91a:	f005 fe87 	bl	c362c <_ZN7FatFile5closeEv>
   bd91e:	e7e1      	b.n	bd8e4 <_Z14SD_N2S_Publishv+0x70>
    return seekSet(pos);
   bd920:	a804      	add	r0, sp, #16
   bd922:	f005 fda0 	bl	c3466 <_ZN7FatFile7seekSetEm>
   bd926:	e7ec      	b.n	bd902 <_Z14SD_N2S_Publishv+0x8e>
        while (fp.available() && (i < MAX_MSGBUF_SIZE )) {
   bd928:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   bd92c:	da5e      	bge.n	bd9ec <_Z14SD_N2S_Publishv+0x178>
    return FatFile::read();
   bd92e:	a804      	add	r0, sp, #16
   bd930:	f7f8 f9fe 	bl	b5d30 <_ZN7FatFile4readEv>
          ch = fp.read();
   bd934:	b2c3      	uxtb	r3, r0
          if (ch == 0x0A) {  // newline
   bd936:	2b0a      	cmp	r3, #10
   bd938:	d16a      	bne.n	bda10 <_Z14SD_N2S_Publishv+0x19c>
            if (Particle_Publish(EventType)) {
   bd93a:	4630      	mov	r0, r6
   bd93c:	f7ff f9d8 	bl	bccf0 <_Z16Particle_PublishPc>
   bd940:	b330      	cbz	r0, bd990 <_Z14SD_N2S_Publishv+0x11c>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
   bd942:	4948      	ldr	r1, [pc, #288]	; (bda64 <_Z14SD_N2S_Publishv+0x1f0>)
   bd944:	4848      	ldr	r0, [pc, #288]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bd946:	4633      	mov	r3, r6
   bd948:	4622      	mov	r2, r4
   bd94a:	f007 fea9 	bl	c56a0 <sprintf>
              Output (Buffer32Bytes);
   bd94e:	4846      	ldr	r0, [pc, #280]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bd950:	f7f8 fc1c 	bl	b618c <_Z6OutputPKc>
              Serial_write (msgbuf);
   bd954:	4638      	mov	r0, r7
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
   bd956:	1c65      	adds	r5, r4, #1
              Serial_write (msgbuf);
   bd958:	f7f8 fbee 	bl	b6138 <_Z12Serial_writePKc>
                eeprom.n2sfp = fp.position();
   bd95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bd95e:	f8c8 3014 	str.w	r3, [r8, #20]
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
   bd962:	f7f8 f977 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bd966:	e9d9 2300 	ldrd	r2, r3, [r9]
   bd96a:	1a80      	subs	r0, r0, r2
   bd96c:	eb61 0103 	sbc.w	r1, r1, r3
   bd970:	f64e 2361 	movw	r3, #60001	; 0xea61
   bd974:	4298      	cmp	r0, r3
   bd976:	f171 0300 	sbcs.w	r3, r1, #0
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
   bd97a:	462c      	mov	r4, r5
            if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {
   bd97c:	d345      	bcc.n	bda0a <_Z14SD_N2S_Publishv+0x196>
              Output ("N2S:OBS Needed");
   bd97e:	4650      	mov	r0, sl
   bd980:	f7f8 fc04 	bl	b618c <_Z6OutputPKc>
              if (OBS_Full()) {
   bd984:	f7fb ff84 	bl	b9890 <_Z8OBS_Fullv>
   bd988:	2800      	cmp	r0, #0
   bd98a:	d03a      	beq.n	bda02 <_Z14SD_N2S_Publishv+0x18e>
                Output ("N2S:OBS FULL");
   bd98c:	4837      	ldr	r0, [pc, #220]	; (bda6c <_Z14SD_N2S_Publishv+0x1f8>)
   bd98e:	e02b      	b.n	bd9e8 <_Z14SD_N2S_Publishv+0x174>
              sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:RETRY", sent, EventType);
   bd990:	4937      	ldr	r1, [pc, #220]	; (bda70 <_Z14SD_N2S_Publishv+0x1fc>)
   bd992:	4835      	ldr	r0, [pc, #212]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bd994:	4633      	mov	r3, r6
   bd996:	4622      	mov	r2, r4
   bd998:	f007 fe82 	bl	c56a0 <sprintf>
              Output (Buffer32Bytes);
   bd99c:	4832      	ldr	r0, [pc, #200]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bd99e:	f7f8 fbf5 	bl	b618c <_Z6OutputPKc>
              Serial_write (msgbuf);
   bd9a2:	4638      	mov	r0, r7
   bd9a4:	f7f8 fbc8 	bl	b6138 <_Z12Serial_writePKc>
                BackGroundWork(); 
   bd9a8:	f7ff f962 	bl	bcc70 <_Z14BackGroundWorkv>
   bd9ac:	f7ff f960 	bl	bcc70 <_Z14BackGroundWorkv>
   bd9b0:	f7ff f95e 	bl	bcc70 <_Z14BackGroundWorkv>
   bd9b4:	f7ff f95c 	bl	bcc70 <_Z14BackGroundWorkv>
   bd9b8:	f7ff f95a 	bl	bcc70 <_Z14BackGroundWorkv>
              if (Particle_Publish(EventType)) {
   bd9bc:	4630      	mov	r0, r6
   bd9be:	f7ff f997 	bl	bccf0 <_Z16Particle_PublishPc>
   bd9c2:	b150      	cbz	r0, bd9da <_Z14SD_N2S_Publishv+0x166>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
   bd9c4:	4927      	ldr	r1, [pc, #156]	; (bda64 <_Z14SD_N2S_Publishv+0x1f0>)
   bd9c6:	4828      	ldr	r0, [pc, #160]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bd9c8:	4633      	mov	r3, r6
   bd9ca:	4622      	mov	r2, r4
   bd9cc:	f007 fe68 	bl	c56a0 <sprintf>
                Output (Buffer32Bytes);
   bd9d0:	4825      	ldr	r0, [pc, #148]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:OK", sent++, EventType);
   bd9d2:	1c65      	adds	r5, r4, #1
                Output (Buffer32Bytes);
   bd9d4:	f7f8 fbda 	bl	b618c <_Z6OutputPKc>
   bd9d8:	e7c0      	b.n	bd95c <_Z14SD_N2S_Publishv+0xe8>
                sprintf (Buffer32Bytes, "N2S[%d]%s->PUB:ERR", sent, EventType);
   bd9da:	4926      	ldr	r1, [pc, #152]	; (bda74 <_Z14SD_N2S_Publishv+0x200>)
   bd9dc:	4822      	ldr	r0, [pc, #136]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bd9de:	4633      	mov	r3, r6
   bd9e0:	4622      	mov	r2, r4
   bd9e2:	f007 fe5d 	bl	c56a0 <sprintf>
                Output (Buffer32Bytes);
   bd9e6:	4820      	ldr	r0, [pc, #128]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
                Output ("N2S:OBS FULL");
   bd9e8:	f7f8 fbd0 	bl	b618c <_Z6OutputPKc>
        if (fp.available() <= 20) {
   bd9ec:	4668      	mov	r0, sp
   bd9ee:	f7f8 f88b 	bl	b5b08 <_ZN4File9availableEv>
   bd9f2:	2814      	cmp	r0, #20
   bd9f4:	dd90      	ble.n	bd918 <_Z14SD_N2S_Publishv+0xa4>
          fp.close();
   bd9f6:	a804      	add	r0, sp, #16
   bd9f8:	f005 fe18 	bl	c362c <_ZN7FatFile5closeEv>
          EEPROM_Update(); // Update file postion in the eeprom.
   bd9fc:	f7fb f8f8 	bl	b8bf0 <_Z13EEPROM_Updatev>
   bda00:	e772      	b.n	bd8e8 <_Z14SD_N2S_Publishv+0x74>
                I2C_Check_Sensors(); // Make sure Sensors are online
   bda02:	f7fa fcfb 	bl	b83fc <_Z17I2C_Check_Sensorsv>
                OBS_Do();                  
   bda06:	f7fc fe6b 	bl	ba6e0 <_Z6OBS_Dov>
   bda0a:	2000      	movs	r0, #0
   bda0c:	4605      	mov	r5, r0
   bda0e:	e77f      	b.n	bd910 <_Z14SD_N2S_Publishv+0x9c>
          else if (ch == 0x0D) { // CR, LF follows and will trigger the line to be processed       
   bda10:	2b0d      	cmp	r3, #13
   bda12:	d108      	bne.n	bda26 <_Z14SD_N2S_Publishv+0x1b2>
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
   bda14:	197a      	adds	r2, r7, r5
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
   bda16:	2300      	movs	r3, #0
            EventType = &msgbuf[i-2];      
   bda18:	1eae      	subs	r6, r5, #2
            msgbuf[i] = 0; // null terminate then wait for newline to be read to process OBS
   bda1a:	557b      	strb	r3, [r7, r5]
            EventType = &msgbuf[i-2];      
   bda1c:	443e      	add	r6, r7
            msgbuf[i-3] = 0; // Set the comma to Null so we don't transmit to Particle what follows
   bda1e:	f802 3c03 	strb.w	r3, [r2, #-3]
            EventType = &msgbuf[i-2];      
   bda22:	4628      	mov	r0, r5
   bda24:	e7f2      	b.n	bda0c <_Z14SD_N2S_Publishv+0x198>
            msgbuf[i++] = ch;
   bda26:	1c68      	adds	r0, r5, #1
          if (i >= MAX_MSGBUF_SIZE) {
   bda28:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
            msgbuf[i++] = ch;
   bda2c:	557b      	strb	r3, [r7, r5]
          if (i >= MAX_MSGBUF_SIZE) {
   bda2e:	d1ed      	bne.n	bda0c <_Z14SD_N2S_Publishv+0x198>
            sprintf (Buffer32Bytes, "N2S[%d]->BOR:ERR", sent);
   bda30:	4911      	ldr	r1, [pc, #68]	; (bda78 <_Z14SD_N2S_Publishv+0x204>)
   bda32:	480d      	ldr	r0, [pc, #52]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bda34:	4622      	mov	r2, r4
   bda36:	f007 fe33 	bl	c56a0 <sprintf>
            Output (Buffer32Bytes);
   bda3a:	480b      	ldr	r0, [pc, #44]	; (bda68 <_Z14SD_N2S_Publishv+0x1f4>)
   bda3c:	f7f8 fba6 	bl	b618c <_Z6OutputPKc>
   bda40:	e76a      	b.n	bd918 <_Z14SD_N2S_Publishv+0xa4>
        Output ("N2S->OPEN:ERR");
   bda42:	480e      	ldr	r0, [pc, #56]	; (bda7c <_Z14SD_N2S_Publishv+0x208>)
   bda44:	f7f8 fba2 	bl	b618c <_Z6OutputPKc>
    virtual ~Print() {}
   bda48:	e74e      	b.n	bd8e8 <_Z14SD_N2S_Publishv+0x74>
   bda4a:	bf00      	nop
   bda4c:	2002df54 	.word	0x2002df54
   bda50:	2002d8db 	.word	0x2002d8db
   bda54:	2002df0c 	.word	0x2002df0c
   bda58:	000cbcb0 	.word	0x000cbcb0
   bda5c:	000cbcbc 	.word	0x000cbcbc
   bda60:	200328c0 	.word	0x200328c0
   bda64:	000cbcc6 	.word	0x000cbcc6
   bda68:	2002da87 	.word	0x2002da87
   bda6c:	000cbd0f 	.word	0x000cbd0f
   bda70:	000cbcd8 	.word	0x000cbcd8
   bda74:	000cbced 	.word	0x000cbced
   bda78:	000cbd1c 	.word	0x000cbd1c
   bda7c:	000cbd2d 	.word	0x000cbd2d
   bda80:	2002e5f4 	.word	0x2002e5f4
   bda84:	2002e648 	.word	0x2002e648
   bda88:	000cbd00 	.word	0x000cbd00

000bda8c <_Z14OBS_PublishAllv>:
 * 
 * If sending an observation takes 2 or more seconds ws_refresh is set and 
 *   the main program loop calls Wind_Distance_Air_Initialize() 
 * ======================================================================================================================
 */
void OBS_PublishAll() {
   bda8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bda90:	b088      	sub	sp, #32
  bool OK2Send=true;
  int relay_type;

  // Update Cell Signal Strength On Last (Most Current) OBS Since Cell is turned to get reading
  int last = OBS_Last();
   bda92:	f7fb feeb 	bl	b986c <_Z8OBS_Lastv>
  if (last >= 0) {
   bda96:	1e04      	subs	r4, r0, #0
   bda98:	4f30      	ldr	r7, [pc, #192]	; (bdb5c <_Z14OBS_PublishAllv+0xd0>)
   bda9a:	db0c      	blt.n	bdab6 <_Z14OBS_PublishAllv+0x2a>
#if PLATFORM_ID == PLATFORM_ARGON
    WiFiSignal sig = WiFi.RSSI();
#else
    CellularSignal sig = Cellular.RSSI();
   bda9c:	4930      	ldr	r1, [pc, #192]	; (bdb60 <_Z14OBS_PublishAllv+0xd4>)
   bda9e:	4668      	mov	r0, sp
   bdaa0:	f007 febe 	bl	c5820 <_ZN5spark13CellularClass4RSSIEv>
#endif
    obs[last].css = sig.getStrength();
   bdaa4:	4668      	mov	r0, sp
   bdaa6:	f007 ff19 	bl	c58dc <_ZNK14CellularSignal11getStrengthEv>
   bdaaa:	f640 2098 	movw	r0, #2712	; 0xa98
   bdaae:	fb00 7004 	mla	r0, r0, r4, r7
   bdab2:	ed80 0a04 	vstr	s0, [r0, #16]
void OBS_PublishAll() {
   bdab6:	2500      	movs	r5, #0
   bdab8:	2401      	movs	r4, #1
  }

  // Go through the saved 1 minute observers and send them
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
    if (obs[i].inuse) {
   bdaba:	f640 2898 	movw	r8, #2712	; 0xa98
   bdabe:	fb08 f305 	mul.w	r3, r8, r5
   bdac2:	5cfb      	ldrb	r3, [r7, r3]
   bdac4:	b15b      	cbz	r3, bdade <_Z14OBS_PublishAllv+0x52>
      if (OBS_FS_Publish(i) == false) {
   bdac6:	4628      	mov	r0, r5
   bdac8:	f7ff f966 	bl	bcd98 <_Z14OBS_FS_Publishi>
   bdacc:	4606      	mov	r6, r0
   bdace:	b918      	cbnz	r0, bdad8 <_Z14OBS_PublishAllv+0x4c>
        OBS_N2S_Add (i);
   bdad0:	4628      	mov	r0, r5
   bdad2:	f7fb fcd3 	bl	b947c <_Z11OBS_N2S_Addi>
        // Don't try to send any N2S because we just added to the file
        OK2Send = false;
   bdad6:	4634      	mov	r4, r6
      }
      OBS_Clear(i);
   bdad8:	4628      	mov	r0, r5
   bdada:	f7fb fcbd 	bl	b9458 <_Z9OBS_Cleari>
  for (int i=0; i<MAX_ONE_MINUTE_OBS; i++) {
   bdade:	3501      	adds	r5, #1
   bdae0:	2d11      	cmp	r5, #17
   bdae2:	d1ec      	bne.n	bdabe <_Z14OBS_PublishAllv+0x32>
    }
  }

  // Publish LoRa Relay Observations   
  if (LORA_exists) {
   bdae4:	4b1f      	ldr	r3, [pc, #124]	; (bdb64 <_Z14OBS_PublishAllv+0xd8>)
   bdae6:	781b      	ldrb	r3, [r3, #0]
   bdae8:	b373      	cbz	r3, bdb48 <_Z14OBS_PublishAllv+0xbc>
      else {
        if (OK2Send && (relay_type>0)) {
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
        }
        if (!OK2Send) {
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
   bdaea:	4e1f      	ldr	r6, [pc, #124]	; (bdb68 <_Z14OBS_PublishAllv+0xdc>)
   bdaec:	4f1f      	ldr	r7, [pc, #124]	; (bdb6c <_Z14OBS_PublishAllv+0xe0>)
   bdaee:	f8df 808c 	ldr.w	r8, [pc, #140]	; bdb7c <_Z14OBS_PublishAllv+0xf0>
    while (lora_relay_need2log()) {
   bdaf2:	f7f8 fd39 	bl	b6568 <_Z19lora_relay_need2logv>
   bdaf6:	b338      	cbz	r0, bdb48 <_Z14OBS_PublishAllv+0xbc>
      relay_type = OBS_Relay_Build_JSON(); // This removed msg from relay structure and places it in msgbuf
   bdaf8:	f7fb fe46 	bl	b9788 <_Z20OBS_Relay_Build_JSONv>
      if (relay_type<=0) {
   bdafc:	1e05      	subs	r5, r0, #0
   bdafe:	dc08      	bgt.n	bdb12 <_Z14OBS_PublishAllv+0x86>
        sprintf (Buffer32Bytes, "RELAY TYPE[%d] INVALID", relay_type);
   bdb00:	491b      	ldr	r1, [pc, #108]	; (bdb70 <_Z14OBS_PublishAllv+0xe4>)
   bdb02:	481c      	ldr	r0, [pc, #112]	; (bdb74 <_Z14OBS_PublishAllv+0xe8>)
   bdb04:	462a      	mov	r2, r5
   bdb06:	f007 fdcb 	bl	c56a0 <sprintf>
        Output(Buffer32Bytes);
   bdb0a:	481a      	ldr	r0, [pc, #104]	; (bdb74 <_Z14OBS_PublishAllv+0xe8>)
   bdb0c:	f7f8 fb3e 	bl	b618c <_Z6OutputPKc>
   bdb10:	e7ef      	b.n	bdaf2 <_Z14OBS_PublishAllv+0x66>
        if (OK2Send && (relay_type>0)) {
   bdb12:	b99c      	cbnz	r4, bdb3c <_Z14OBS_PublishAllv+0xb0>
          sprintf (msgbuf+strlen(msgbuf), ",%s", relay_msgtypes[relay_type]);  // Add Particle Event Type after JSON structure
   bdb14:	4814      	ldr	r0, [pc, #80]	; (bdb68 <_Z14OBS_PublishAllv+0xdc>)
   bdb16:	f7f7 fa71 	bl	b4ffc <strlen>
   bdb1a:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   bdb1e:	4641      	mov	r1, r8
   bdb20:	4430      	add	r0, r6
   bdb22:	f007 fdbd 	bl	c56a0 <sprintf>
          SD_NeedToSend_Add(msgbuf); // Save to N2F File
   bdb26:	4810      	ldr	r0, [pc, #64]	; (bdb68 <_Z14OBS_PublishAllv+0xdc>)
   bdb28:	f7fb fa70 	bl	b900c <_Z17SD_NeedToSend_AddPc>
          Output("RELAY->N2S");
   bdb2c:	4812      	ldr	r0, [pc, #72]	; (bdb78 <_Z14OBS_PublishAllv+0xec>)
   bdb2e:	f7f8 fb2d 	bl	b618c <_Z6OutputPKc>
          Serial_write (msgbuf); 
   bdb32:	480d      	ldr	r0, [pc, #52]	; (bdb68 <_Z14OBS_PublishAllv+0xdc>)
   bdb34:	f7f8 fb00 	bl	b6138 <_Z12Serial_writePKc>
   bdb38:	2400      	movs	r4, #0
   bdb3a:	e7da      	b.n	bdaf2 <_Z14OBS_PublishAllv+0x66>
         OK2Send = OBS_Relay_Publish(relay_type);  // Note a new LoRa RS msgs could be received as we are sending    
   bdb3c:	f7ff f958 	bl	bcdf0 <_Z17OBS_Relay_Publishi>
        if (!OK2Send) {
   bdb40:	4604      	mov	r4, r0
   bdb42:	2800      	cmp	r0, #0
   bdb44:	d1d5      	bne.n	bdaf2 <_Z14OBS_PublishAllv+0x66>
   bdb46:	e7e5      	b.n	bdb14 <_Z14OBS_PublishAllv+0x88>
      }
    }
  }

  // Check if we have any N2S only if we have not added to the file while trying to send OBS
  if (OK2Send) {
   bdb48:	b124      	cbz	r4, bdb54 <_Z14OBS_PublishAllv+0xc8>
    SD_N2S_Publish(); 
  }
}
   bdb4a:	b008      	add	sp, #32
   bdb4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SD_N2S_Publish(); 
   bdb50:	f7ff be90 	b.w	bd874 <_Z14SD_N2S_Publishv>
}
   bdb54:	b008      	add	sp, #32
   bdb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdb5a:	bf00      	nop
   bdb5c:	20032cd0 	.word	0x20032cd0
   bdb60:	2003e630 	.word	0x2003e630
   bdb64:	2002dab1 	.word	0x2002dab1
   bdb68:	200328c0 	.word	0x200328c0
   bdb6c:	2002d9c4 	.word	0x2002d9c4
   bdb70:	000cbaaa 	.word	0x000cbaaa
   bdb74:	2002da87 	.word	0x2002da87
   bdb78:	000cbd3b 	.word	0x000cbd3b
   bdb7c:	000caf52 	.word	0x000caf52

000bdb80 <setup>:
void setup() {
   bdb80:	b530      	push	{r4, r5, lr}
	pmic.enableBATFET();
   bdb82:	488a      	ldr	r0, [pc, #552]	; (bddac <setup+0x22c>)
  if (SD_exists && SD.exists(SD_n2s_file)) {
   bdb84:	4d8a      	ldr	r5, [pc, #552]	; (bddb0 <setup+0x230>)
   bdb86:	4c8b      	ldr	r4, [pc, #556]	; (bddb4 <setup+0x234>)
void setup() {
   bdb88:	b087      	sub	sp, #28
	pmic.enableBATFET();
   bdb8a:	f008 ff5c 	bl	c6a46 <_ZN4PMIC12enableBATFETEv>
  Time.setFormat(TIME_FORMAT_ISO8601_FULL);
   bdb8e:	4b8a      	ldr	r3, [pc, #552]	; (bddb8 <setup+0x238>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
   bdb90:	681a      	ldr	r2, [r3, #0]
   bdb92:	4b8a      	ldr	r3, [pc, #552]	; (bddbc <setup+0x23c>)
  pinMode (REBOOT_PIN, OUTPUT);
   bdb94:	2101      	movs	r1, #1
   bdb96:	2013      	movs	r0, #19
   bdb98:	601a      	str	r2, [r3, #0]
   bdb9a:	f009 fd0d 	bl	c75b8 <pinMode>
  pinMode (HEARTBEAT_PIN, OUTPUT);
   bdb9e:	2101      	movs	r1, #1
   bdba0:	2012      	movs	r0, #18
   bdba2:	f009 fd09 	bl	c75b8 <pinMode>
  pinMode (LED_PIN, OUTPUT);
   bdba6:	4b86      	ldr	r3, [pc, #536]	; (bddc0 <setup+0x240>)
   bdba8:	2101      	movs	r1, #1
   bdbaa:	8818      	ldrh	r0, [r3, #0]
   bdbac:	f009 fd04 	bl	c75b8 <pinMode>
  Output_Initialize();
   bdbb0:	f7fc fd44 	bl	ba63c <_Z17Output_Initializev>
  delay(2000); // Prevents usb driver crash on startup, Arduino needed this so keeping for Particle
   bdbb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   bdbb8:	f007 fdba 	bl	c5730 <delay>
  Serial_write(COPYRIGHT);
   bdbbc:	4881      	ldr	r0, [pc, #516]	; (bddc4 <setup+0x244>)
   bdbbe:	f7f8 fabb 	bl	b6138 <_Z12Serial_writePKc>
  Output (VERSION_INFO);
   bdbc2:	4881      	ldr	r0, [pc, #516]	; (bddc8 <setup+0x248>)
   bdbc4:	f7f8 fae2 	bl	b618c <_Z6OutputPKc>
  delay(4000);
   bdbc8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   bdbcc:	f007 fdb0 	bl	c5730 <delay>
  DailyRebootCountDownTimer = cf_reboot_countdown_timer;
   bdbd0:	4b7e      	ldr	r3, [pc, #504]	; (bddcc <setup+0x24c>)
   bdbd2:	681a      	ldr	r2, [r3, #0]
   bdbd4:	4b7e      	ldr	r3, [pc, #504]	; (bddd0 <setup+0x250>)
   bdbd6:	601a      	str	r2, [r3, #0]
  SD_initialize();
   bdbd8:	f7fb f8f0 	bl	b8dbc <_Z13SD_initializev>
  if (SD_exists && SD.exists(SD_n2s_file)) {
   bdbdc:	782b      	ldrb	r3, [r5, #0]
   bdbde:	2b00      	cmp	r3, #0
   bdbe0:	f000 80c6 	beq.w	bdd70 <setup+0x1f0>
    return vwd()->exists(path);
   bdbe4:	497b      	ldr	r1, [pc, #492]	; (bddd4 <setup+0x254>)
   bdbe6:	487c      	ldr	r0, [pc, #496]	; (bddd8 <setup+0x258>)
   bdbe8:	f7f8 f896 	bl	b5d18 <_ZN7FatFile6existsEPKc>
   bdbec:	2800      	cmp	r0, #0
   bdbee:	f000 80bf 	beq.w	bdd70 <setup+0x1f0>
    SystemStatusBits |= SSB_N2S; // Turn on Bit
   bdbf2:	6823      	ldr	r3, [r4, #0]
    Output("N2S:Exists");
   bdbf4:	4879      	ldr	r0, [pc, #484]	; (bdddc <setup+0x25c>)
    SystemStatusBits |= SSB_N2S; // Turn on Bit
   bdbf6:	f043 0310 	orr.w	r3, r3, #16
   bdbfa:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
   bdbfc:	f7f8 fac6 	bl	b618c <_Z6OutputPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
   bdc00:	782b      	ldrb	r3, [r5, #0]
   bdc02:	2b00      	cmp	r3, #0
   bdc04:	f040 80ba 	bne.w	bdd7c <setup+0x1fc>
    sprintf(msgbuf, "CF:NO %s", CF_NAME); Output (msgbuf);
   bdc08:	4a75      	ldr	r2, [pc, #468]	; (bdde0 <setup+0x260>)
   bdc0a:	4976      	ldr	r1, [pc, #472]	; (bdde4 <setup+0x264>)
   bdc0c:	4876      	ldr	r0, [pc, #472]	; (bdde8 <setup+0x268>)
   bdc0e:	f007 fd47 	bl	c56a0 <sprintf>
   bdc12:	4875      	ldr	r0, [pc, #468]	; (bdde8 <setup+0x268>)
   bdc14:	f7f8 faba 	bl	b618c <_Z6OutputPKc>
    Output(msgbuf);
   bdc18:	4873      	ldr	r0, [pc, #460]	; (bdde8 <setup+0x268>)
   bdc1a:	f7f8 fab7 	bl	b618c <_Z6OutputPKc>
  EEPROM_Dump();
   bdc1e:	f7fb f80b 	bl	b8c38 <_Z11EEPROM_Dumpv>
  stc_timestamp();
   bdc22:	f7f8 fb2f 	bl	b6284 <_Z13stc_timestampv>
  sprintf (msgbuf, "%s+", timestamp);
   bdc26:	4a71      	ldr	r2, [pc, #452]	; (bddec <setup+0x26c>)
   bdc28:	4971      	ldr	r1, [pc, #452]	; (bddf0 <setup+0x270>)
   bdc2a:	486f      	ldr	r0, [pc, #444]	; (bdde8 <setup+0x268>)
   bdc2c:	f007 fd38 	bl	c56a0 <sprintf>
  Output(msgbuf);
   bdc30:	486d      	ldr	r0, [pc, #436]	; (bdde8 <setup+0x268>)
   bdc32:	f7f8 faab 	bl	b618c <_Z6OutputPKc>
  rtc_initialize();
   bdc36:	f7f8 fb6f 	bl	b6318 <_Z14rtc_initializev>
  if (Time.isValid()) {
   bdc3a:	f009 fa76 	bl	c712a <_ZN9TimeClass7isValidEv>
   bdc3e:	2800      	cmp	r0, #0
   bdc40:	f000 80a6 	beq.w	bdd90 <setup+0x210>
    Output("STC: Valid");
   bdc44:	486b      	ldr	r0, [pc, #428]	; (bddf4 <setup+0x274>)
    Output("STC: Not Valid");
   bdc46:	f7f8 faa1 	bl	b618c <_Z6OutputPKc>
  stc_timestamp();
   bdc4a:	f7f8 fb1b 	bl	b6284 <_Z13stc_timestampv>
  sprintf (msgbuf, "%s=", timestamp);
   bdc4e:	4a67      	ldr	r2, [pc, #412]	; (bddec <setup+0x26c>)
   bdc50:	4969      	ldr	r1, [pc, #420]	; (bddf8 <setup+0x278>)
   bdc52:	4865      	ldr	r0, [pc, #404]	; (bdde8 <setup+0x268>)
   bdc54:	f007 fd24 	bl	c56a0 <sprintf>
  Output(msgbuf);
   bdc58:	4863      	ldr	r0, [pc, #396]	; (bdde8 <setup+0x268>)
   bdc5a:	f7f8 fa97 	bl	b618c <_Z6OutputPKc>
  SimChangeCheck();
   bdc5e:	f7fc fa49 	bl	ba0f4 <_Z14SimChangeCheckv>
  anemometer_interrupt_count = 0;
   bdc62:	4b66      	ldr	r3, [pc, #408]	; (bddfc <setup+0x27c>)
   bdc64:	2400      	movs	r4, #0
   bdc66:	601c      	str	r4, [r3, #0]
  anemometer_interrupt_stime = System.millis();
   bdc68:	f7f7 fff4 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdc6c:	4b64      	ldr	r3, [pc, #400]	; (bde00 <setup+0x280>)
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
   bdc6e:	2202      	movs	r2, #2
  anemometer_interrupt_stime = System.millis();
   bdc70:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(ANEMOMETER_IRQ_PIN, anemometer_interrupt_handler, FALLING);
   bdc74:	4963      	ldr	r1, [pc, #396]	; (bde04 <setup+0x284>)
   bdc76:	9400      	str	r4, [sp, #0]
   bdc78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bdc7c:	2011      	movs	r0, #17
   bdc7e:	f008 fb8d 	bl	c639c <_Z15attachInterrupttPFvvE13InterruptModeah>
  raingauge1_interrupt_count = 0;
   bdc82:	4b61      	ldr	r3, [pc, #388]	; (bde08 <setup+0x288>)
   bdc84:	601c      	str	r4, [r3, #0]
  raingauge1_interrupt_stime = System.millis();
   bdc86:	f7f7 ffe5 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdc8a:	4b60      	ldr	r3, [pc, #384]	; (bde0c <setup+0x28c>)
   bdc8c:	e9c3 0100 	strd	r0, r1, [r3]
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
   bdc90:	4b5f      	ldr	r3, [pc, #380]	; (bde10 <setup+0x290>)
   bdc92:	2000      	movs	r0, #0
   bdc94:	2100      	movs	r1, #0
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
   bdc96:	2202      	movs	r2, #2
  raingauge1_interrupt_ltime = 0;  // used to debounce the tip
   bdc98:	e9c3 0100 	strd	r0, r1, [r3]
  attachInterrupt(RAINGAUGE1_IRQ_PIN, raingauge1_interrupt_handler, FALLING);
   bdc9c:	495d      	ldr	r1, [pc, #372]	; (bde14 <setup+0x294>)
   bdc9e:	9400      	str	r4, [sp, #0]
   bdca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bdca4:	2010      	movs	r0, #16
   bdca6:	f008 fb79 	bl	c639c <_Z15attachInterrupttPFvvE13InterruptModeah>
  TXI_Initialize();
   bdcaa:	f7fc fc09 	bl	ba4c0 <_Z14TXI_Initializev>
  A4_Initialize();
   bdcae:	f7fa f827 	bl	b7d00 <_Z13A4_Initializev>
  A5_Initialize();
   bdcb2:	f7fa f8a9 	bl	b7e08 <_Z13A5_Initializev>
  bmx_initialize();
   bdcb6:	f7f8 fdb7 	bl	b6828 <_Z14bmx_initializev>
  htu21d_initialize();
   bdcba:	f7f8 fed1 	bl	b6a60 <_Z17htu21d_initializev>
  mcp9808_initialize();
   bdcbe:	f7f8 fefd 	bl	b6abc <_Z18mcp9808_initializev>
  sht_initialize();
   bdcc2:	f7f8 ffab 	bl	b6c1c <_Z14sht_initializev>
  hih8_initialize();
   bdcc6:	f7f9 f811 	bl	b6cec <_Z15hih8_initializev>
  si1145_initialize();
   bdcca:	f7f9 fc81 	bl	b75d0 <_Z17si1145_initializev>
  vlx_initialize();
   bdcce:	f7f9 fd33 	bl	b7738 <_Z14vlx_initializev>
  blx_initialize();
   bdcd2:	f7f9 fd5f 	bl	b7794 <_Z14blx_initializev>
  as5600_initialize();
   bdcd6:	f7f9 ffe3 	bl	b7ca0 <_Z17as5600_initializev>
  pm25aqi_initialize();
   bdcda:	f7f9 fde7 	bl	b78ac <_Z18pm25aqi_initializev>
  hdc_initialize();
   bdcde:	f7f9 fe6b 	bl	b79b8 <_Z14hdc_initializev>
  lps_initialize();
   bdce2:	f7f9 fed9 	bl	b7a98 <_Z14lps_initializev>
  tlw_initialize();
   bdce6:	f7f9 ff51 	bl	b7b8c <_Z14tlw_initializev>
  tsm_initialize();
   bdcea:	f7f9 ff7d 	bl	b7be8 <_Z14tsm_initializev>
  tmsm_initialize();
   bdcee:	f7f9 ffa9 	bl	b7c44 <_Z15tmsm_initializev>
  wbt_initialize();
   bdcf2:	f7f9 f8dd 	bl	b6eb0 <_Z14wbt_initializev>
  hi_initialize();
   bdcf6:	f7f9 f9c7 	bl	b7088 <_Z13hi_initializev>
  wbgt_initialize();
   bdcfa:	f7f9 fb73 	bl	b73e4 <_Z15wbgt_initializev>
  lora_initialize();
   bdcfe:	f7fe fe33 	bl	bc968 <_Z15lora_initializev>
  lora_device_initialize();
   bdd02:	f7f8 fc5f 	bl	b65c4 <_Z22lora_device_initializev>
  lora_msg_check();
   bdd06:	f7fe ff23 	bl	bcb50 <_Z14lora_msg_checkv>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   bdd0a:	2203      	movs	r2, #3
   bdd0c:	f241 3388 	movw	r3, #5000	; 0x1388
   bdd10:	e9cd 2303 	strd	r2, r3, [sp, #12]
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
   bdd14:	a803      	add	r0, sp, #12
        bool clearSession, bool reconnect) :
   bdd16:	2301      	movs	r3, #1
   bdd18:	f8ad 3014 	strh.w	r3, [sp, #20]
        reconnect_(reconnect) {
   bdd1c:	f88d 4016 	strb.w	r4, [sp, #22]
   bdd20:	f007 ffc4 	bl	c5cac <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
        spark_cloud_flag_connect();
   bdd24:	f007 fbec 	bl	c5500 <spark_cloud_flag_connect>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   bdd28:	4a3b      	ldr	r2, [pc, #236]	; (bde18 <setup+0x298>)
   bdd2a:	493c      	ldr	r1, [pc, #240]	; (bde1c <setup+0x29c>)
   bdd2c:	483c      	ldr	r0, [pc, #240]	; (bde20 <setup+0x2a0>)
   bdd2e:	f007 ffa1 	bl	c5c74 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (Particle.function("DoAction", Function_DoAction)) {
   bdd32:	b378      	cbz	r0, bdd94 <setup+0x214>
    Output ("DoAction:OK");
   bdd34:	483b      	ldr	r0, [pc, #236]	; (bde24 <setup+0x2a4>)
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
   bdd36:	4c3c      	ldr	r4, [pc, #240]	; (bde28 <setup+0x2a8>)
    Output ("DoAction:ERR");
   bdd38:	f7f8 fa28 	bl	b618c <_Z6OutputPKc>
  Wind_Distance_Air_Initialize(); // Will call HeartBeat()
   bdd3c:	f7fe ff40 	bl	bcbc0 <_Z28Wind_Distance_Air_Initializev>
   bdd40:	4b3a      	ldr	r3, [pc, #232]	; (bde2c <setup+0x2ac>)
   bdd42:	483b      	ldr	r0, [pc, #236]	; (bde30 <setup+0x2b0>)
   bdd44:	f242 7210 	movw	r2, #10000	; 0x2710
   bdd48:	4621      	mov	r1, r4
   bdd4a:	f007 f913 	bl	c4f74 <cellular_command>
  if ((RESP_OK == Cellular.command(callback_imsi, imsi, 10000, "AT+CIMI\r\n")) && (strcmp(imsi,"") != 0)) {
   bdd4e:	3002      	adds	r0, #2
   bdd50:	d101      	bne.n	bdd56 <setup+0x1d6>
   bdd52:	7823      	ldrb	r3, [r4, #0]
   bdd54:	bb03      	cbnz	r3, bdd98 <setup+0x218>
    Output("IMSI:NF");
   bdd56:	4837      	ldr	r0, [pc, #220]	; (bde34 <setup+0x2b4>)
    Output (msgbuf);
   bdd58:	f7f8 fa18 	bl	b618c <_Z6OutputPKc>
  if (Time.isValid()) {
   bdd5c:	f009 f9e5 	bl	c712a <_ZN9TimeClass7isValidEv>
   bdd60:	b308      	cbz	r0, bdda6 <setup+0x226>
    EEPROM_Initialize();
   bdd62:	f7fa fd9d 	bl	b88a0 <_Z17EEPROM_Initializev>
}
   bdd66:	b007      	add	sp, #28
   bdd68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    OBS_Do();   
   bdd6c:	f7fc bcb8 	b.w	ba6e0 <_Z6OBS_Dov>
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
   bdd70:	6823      	ldr	r3, [r4, #0]
    Output("N2S:None");
   bdd72:	4831      	ldr	r0, [pc, #196]	; (bde38 <setup+0x2b8>)
    SystemStatusBits &= ~SSB_N2S; // Turn Off Bit
   bdd74:	f023 0310 	bic.w	r3, r3, #16
   bdd78:	6023      	str	r3, [r4, #0]
    Output("N2S:None");
   bdd7a:	e73f      	b.n	bdbfc <setup+0x7c>
   bdd7c:	4918      	ldr	r1, [pc, #96]	; (bdde0 <setup+0x260>)
   bdd7e:	4816      	ldr	r0, [pc, #88]	; (bddd8 <setup+0x258>)
   bdd80:	f7f7 ffca 	bl	b5d18 <_ZN7FatFile6existsEPKc>
  if (SD_exists && SD.exists(CF_NAME)) {
   bdd84:	2800      	cmp	r0, #0
   bdd86:	f43f af3f 	beq.w	bdc08 <setup+0x88>
    SD_ReadConfigFile();
   bdd8a:	f7fb faff 	bl	b938c <_Z17SD_ReadConfigFilev>
   bdd8e:	e746      	b.n	bdc1e <setup+0x9e>
    Output("STC: Not Valid");
   bdd90:	482a      	ldr	r0, [pc, #168]	; (bde3c <setup+0x2bc>)
   bdd92:	e758      	b.n	bdc46 <setup+0xc6>
    Output ("DoAction:ERR");
   bdd94:	482a      	ldr	r0, [pc, #168]	; (bde40 <setup+0x2c0>)
   bdd96:	e7ce      	b.n	bdd36 <setup+0x1b6>
    sprintf (msgbuf, "IMSI:%s", imsi);
   bdd98:	492a      	ldr	r1, [pc, #168]	; (bde44 <setup+0x2c4>)
   bdd9a:	4813      	ldr	r0, [pc, #76]	; (bdde8 <setup+0x268>)
   bdd9c:	4622      	mov	r2, r4
   bdd9e:	f007 fc7f 	bl	c56a0 <sprintf>
    Output (msgbuf);
   bdda2:	4811      	ldr	r0, [pc, #68]	; (bdde8 <setup+0x268>)
   bdda4:	e7d8      	b.n	bdd58 <setup+0x1d8>
}
   bdda6:	b007      	add	sp, #28
   bdda8:	bd30      	pop	{r4, r5, pc}
   bddaa:	bf00      	nop
   bddac:	2003e1d8 	.word	0x2003e1d8
   bddb0:	2002df54 	.word	0x2002df54
   bddb4:	2002d908 	.word	0x2002d908
   bddb8:	2002d9dc 	.word	0x2002d9dc
   bddbc:	2003e6b0 	.word	0x2003e6b0
   bddc0:	2002d880 	.word	0x2002d880
   bddc4:	000cbd46 	.word	0x000cbd46
   bddc8:	000cbb18 	.word	0x000cbb18
   bddcc:	2002d92c 	.word	0x2002d92c
   bddd0:	2002daa8 	.word	0x2002daa8
   bddd4:	2002d8db 	.word	0x2002d8db
   bddd8:	2002df0c 	.word	0x2002df0c
   bdddc:	000cbd89 	.word	0x000cbd89
   bdde0:	000cafd5 	.word	0x000cafd5
   bdde4:	000cbd9d 	.word	0x000cbd9d
   bdde8:	200328c0 	.word	0x200328c0
   bddec:	2003e364 	.word	0x2003e364
   bddf0:	000cbda6 	.word	0x000cbda6
   bddf4:	000cbdaa 	.word	0x000cbdaa
   bddf8:	000cbdc4 	.word	0x000cbdc4
   bddfc:	2002e0d0 	.word	0x2002e0d0
   bde00:	2002e0d8 	.word	0x2002e0d8
   bde04:	000b5b25 	.word	0x000b5b25
   bde08:	2003e1dc 	.word	0x2003e1dc
   bde0c:	2003e1e8 	.word	0x2003e1e8
   bde10:	2003e1e0 	.word	0x2003e1e0
   bde14:	000b5c5d 	.word	0x000b5c5d
   bde18:	000cbdc8 	.word	0x000cbdc8
   bde1c:	000b9909 	.word	0x000b9909
   bde20:	000c5c49 	.word	0x000c5c49
   bde24:	000cbdd1 	.word	0x000cbdd1
   bde28:	2002e634 	.word	0x2002e634
   bde2c:	000cbdea 	.word	0x000cbdea
   bde30:	000b5b7d 	.word	0x000b5b7d
   bde34:	000cbdf4 	.word	0x000cbdf4
   bde38:	000cbd94 	.word	0x000cbd94
   bde3c:	000cbdb5 	.word	0x000cbdb5
   bde40:	000cbddd 	.word	0x000cbddd
   bde44:	000cbdfc 	.word	0x000cbdfc

000bde48 <loop>:
void loop() {
   bde48:	b5f0      	push	{r4, r5, r6, r7, lr}
   bde4a:	b085      	sub	sp, #20
    if (Time.isValid()) {  
   bde4c:	f009 f96d 	bl	c712a <_ZN9TimeClass7isValidEv>
   bde50:	2800      	cmp	r0, #0
   bde52:	f000 80a8 	beq.w	bdfa6 <loop+0x15e>
      RTC_UpdateCheck();
   bde56:	f7f8 fac7 	bl	b63e8 <_Z15RTC_UpdateCheckv>
      if (!eeprom_valid) {
   bde5a:	4ba6      	ldr	r3, [pc, #664]	; (be0f4 <loop+0x2ac>)
   bde5c:	781b      	ldrb	r3, [r3, #0]
   bde5e:	b90b      	cbnz	r3, bde64 <loop+0x1c>
        EEPROM_Initialize();
   bde60:	f7fa fd1e 	bl	b88a0 <_Z17EEPROM_Initializev>
      if ( (System.millis() - lastOBS) > OBSERVATION_INTERVAL) {  // 1 minute
   bde64:	f7f7 fef6 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bde68:	4aa3      	ldr	r2, [pc, #652]	; (be0f8 <loop+0x2b0>)
   bde6a:	e9d2 3200 	ldrd	r3, r2, [r2]
   bde6e:	1ac0      	subs	r0, r0, r3
   bde70:	f64e 2361 	movw	r3, #60001	; 0xea61
   bde74:	eb61 0102 	sbc.w	r1, r1, r2
   bde78:	4298      	cmp	r0, r3
   bde7a:	f171 0300 	sbcs.w	r3, r1, #0
   bde7e:	d303      	bcc.n	bde88 <loop+0x40>
        I2C_Check_Sensors(); // Make sure Sensors are online
   bde80:	f7fa fabc 	bl	b83fc <_Z17I2C_Check_Sensorsv>
        OBS_Do(); 
   bde84:	f7fc fc2c 	bl	ba6e0 <_Z6OBS_Dov>
      if (SendSystemInformation && Particle.connected()) {
   bde88:	4b9c      	ldr	r3, [pc, #624]	; (be0fc <loop+0x2b4>)
   bde8a:	781b      	ldrb	r3, [r3, #0]
   bde8c:	b123      	cbz	r3, bde98 <loop+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bde8e:	f007 fb3f 	bl	c5510 <spark_cloud_flag_connected>
   bde92:	b108      	cbz	r0, bde98 <loop+0x50>
        INFO_Do(); // Function sets SendSystemInformation back to false.
   bde94:	f7fe ffdc 	bl	bce50 <_Z7INFO_Dov>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
   bde98:	4c99      	ldr	r4, [pc, #612]	; (be100 <loop+0x2b8>)
   bde9a:	e9d4 2300 	ldrd	r2, r3, [r4]
   bde9e:	4313      	orrs	r3, r2
   bdea0:	d136      	bne.n	bdf10 <loop+0xc8>
   bdea2:	f007 fb35 	bl	c5510 <spark_cloud_flag_connected>
        if (Particle.connected()) {
   bdea6:	2800      	cmp	r0, #0
   bdea8:	d046      	beq.n	bdf38 <loop+0xf0>
          Output ("Connected");
   bdeaa:	4896      	ldr	r0, [pc, #600]	; (be104 <loop+0x2bc>)
   bdeac:	f7f8 f96e 	bl	b618c <_Z6OutputPKc>
          LastTransmitTime = System.millis();
   bdeb0:	f7f7 fed0 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdeb4:	e9c4 0100 	strd	r0, r1, [r4]
          if ((System.millis() - LastTimeUpdate) > (4*3600*1000)) {
   bdeb8:	4c93      	ldr	r4, [pc, #588]	; (be108 <loop+0x2c0>)
   bdeba:	f7f7 fecb 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdebe:	e9d4 3200 	ldrd	r3, r2, [r4]
   bdec2:	1ac0      	subs	r0, r0, r3
   bdec4:	4b91      	ldr	r3, [pc, #580]	; (be10c <loop+0x2c4>)
   bdec6:	eb61 0102 	sbc.w	r1, r1, r2
   bdeca:	2500      	movs	r5, #0
   bdecc:	4283      	cmp	r3, r0
   bdece:	eb75 0301 	sbcs.w	r3, r5, r1
   bded2:	d209      	bcs.n	bdee8 <loop+0xa0>
   bded4:	f007 fb1c 	bl	c5510 <spark_cloud_flag_connected>
        if (!connected()) {
   bded8:	b110      	cbz	r0, bdee0 <loop+0x98>
        return spark_sync_time(NULL);
   bdeda:	4628      	mov	r0, r5
   bdedc:	f007 fb30 	bl	c5540 <spark_sync_time>
            LastTimeUpdate = System.millis();
   bdee0:	f7f7 feb8 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdee4:	e9c4 0100 	strd	r0, r1, [r4]
          OBS_PublishAll();
   bdee8:	f7ff fdd0 	bl	bda8c <_Z14OBS_PublishAllv>
          if (ws_refresh) {
   bdeec:	4b88      	ldr	r3, [pc, #544]	; (be110 <loop+0x2c8>)
   bdeee:	781b      	ldrb	r3, [r3, #0]
   bdef0:	b123      	cbz	r3, bdefc <loop+0xb4>
            Output ("WS Refresh Required");
   bdef2:	4888      	ldr	r0, [pc, #544]	; (be114 <loop+0x2cc>)
   bdef4:	f7f8 f94a 	bl	b618c <_Z6OutputPKc>
            Wind_Distance_Air_Initialize();
   bdef8:	f7fe fe62 	bl	bcbc0 <_Z28Wind_Distance_Air_Initializev>
          stc_timestamp();
   bdefc:	f7f8 f9c2 	bl	b6284 <_Z13stc_timestampv>
          Output(timestamp);
   bdf00:	4885      	ldr	r0, [pc, #532]	; (be118 <loop+0x2d0>)
   bdf02:	f7f8 f943 	bl	b618c <_Z6OutputPKc>
          Output_CellBatteryInfo();
   bdf06:	f7fe fba1 	bl	bc64c <_Z22Output_CellBatteryInfov>
          JPO_ClearBits();
   bdf0a:	f7f7 ff75 	bl	b5df8 <_Z13JPO_ClearBitsv>
   bdf0e:	e013      	b.n	bdf38 <loop+0xf0>
      if ( (LastTransmitTime == 0) || ((System.millis() - LastTransmitTime) > (obs_tx_interval * 60 * 1000)) ) {
   bdf10:	f7f7 fea0 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdf14:	e9d4 3200 	ldrd	r3, r2, [r4]
   bdf18:	4e80      	ldr	r6, [pc, #512]	; (be11c <loop+0x2d4>)
   bdf1a:	1ac0      	subs	r0, r0, r3
   bdf1c:	6833      	ldr	r3, [r6, #0]
   bdf1e:	6877      	ldr	r7, [r6, #4]
   bdf20:	f64e 2560 	movw	r5, #60000	; 0xea60
   bdf24:	eb61 0102 	sbc.w	r1, r1, r2
   bdf28:	fba3 3205 	umull	r3, r2, r3, r5
   bdf2c:	fb05 2207 	mla	r2, r5, r7, r2
   bdf30:	4283      	cmp	r3, r0
   bdf32:	eb72 0301 	sbcs.w	r3, r2, r1
   bdf36:	d3b4      	bcc.n	bdea2 <loop+0x5a>
      BackGroundWork();
   bdf38:	f7fe fe9a 	bl	bcc70 <_Z14BackGroundWorkv>
    if ((cf_reboot_countdown_timer>0) && (--DailyRebootCountDownTimer<=0)) {
   bdf3c:	4e78      	ldr	r6, [pc, #480]	; (be120 <loop+0x2d8>)
   bdf3e:	6833      	ldr	r3, [r6, #0]
   bdf40:	2b00      	cmp	r3, #0
   bdf42:	dd65      	ble.n	be010 <loop+0x1c8>
   bdf44:	4d77      	ldr	r5, [pc, #476]	; (be124 <loop+0x2dc>)
   bdf46:	682b      	ldr	r3, [r5, #0]
   bdf48:	3b01      	subs	r3, #1
   bdf4a:	2b00      	cmp	r3, #0
   bdf4c:	602b      	str	r3, [r5, #0]
   bdf4e:	dc5f      	bgt.n	be010 <loop+0x1c8>
      Output ("Daily Reboot");
   bdf50:	4875      	ldr	r0, [pc, #468]	; (be128 <loop+0x2e0>)
   bdf52:	f7f8 f91b 	bl	b618c <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bdf56:	f007 fadb 	bl	c5510 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   bdf5a:	b108      	cbz	r0, bdf60 <loop+0x118>
        OBS_PublishAll();
   bdf5c:	f7ff fd96 	bl	bda8c <_Z14OBS_PublishAllv>
      EEPROM_SaveUnreportedRain();
   bdf60:	f7fa fd92 	bl	b8a88 <_Z25EEPROM_SaveUnreportedRainv>
      delay(1000);
   bdf64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   bdf68:	f007 fbe2 	bl	c5730 <delay>
        reconnect_(reconnect) {
   bdf6c:	2300      	movs	r3, #0
      Particle.disconnect();
   bdf6e:	a801      	add	r0, sp, #4
   bdf70:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
   bdf74:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
   bdf78:	f88d 300e 	strb.w	r3, [sp, #14]
   bdf7c:	f007 fe8b 	bl	c5c96 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   bdf80:	f7f7 fe68 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdf84:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   bdf86:	f7f7 fe65 	bl	b5c54 <_ZN11SystemClass6millisEv>
   bdf8a:	1b00      	subs	r0, r0, r4
   bdf8c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   bdf90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   bdf94:	f171 0300 	sbcs.w	r3, r1, #0
   bdf98:	d212      	bcs.n	bdfc0 <loop+0x178>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bdf9a:	f007 fab9 	bl	c5510 <spark_cloud_flag_connected>
   bdf9e:	b178      	cbz	r0, bdfc0 <loop+0x178>
            spark_process();
   bdfa0:	f007 faa6 	bl	c54f0 <spark_process>
        while (_while() && !_condition()) {
   bdfa4:	e7ef      	b.n	bdf86 <loop+0x13e>
      stc_timestamp();
   bdfa6:	f7f8 f96d 	bl	b6284 <_Z13stc_timestampv>
      Output(timestamp);
   bdfaa:	485b      	ldr	r0, [pc, #364]	; (be118 <loop+0x2d0>)
   bdfac:	f7f8 f8ee 	bl	b618c <_Z6OutputPKc>
      Output("ERR: No Clock");
   bdfb0:	485e      	ldr	r0, [pc, #376]	; (be12c <loop+0x2e4>)
   bdfb2:	f7f8 f8eb 	bl	b618c <_Z6OutputPKc>
      delay (DELAY_NO_RTC);
   bdfb6:	f64e 2060 	movw	r0, #60000	; 0xea60
   bdfba:	f007 fbb9 	bl	c5730 <delay>
   bdfbe:	e7bd      	b.n	bdf3c <loop+0xf4>
    virtual bool listening();
    virtual NetworkClass& prefer(bool prefer = true);
    virtual bool isPreferred();

    operator network_interface_t() const {
        return iface_;
   bdfc0:	4c5b      	ldr	r4, [pc, #364]	; (be130 <loop+0x2e8>)
   bdfc2:	f007 faa5 	bl	c5510 <spark_cloud_flag_connected>
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bdfc6:	2200      	movs	r2, #0
   bdfc8:	2102      	movs	r1, #2
   bdfca:	6860      	ldr	r0, [r4, #4]
   bdfcc:	f007 faf0 	bl	c55b0 <network_disconnect>
      delay(1000);
   bdfd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   bdfd4:	f007 fbac 	bl	c5730 <delay>
      Cellular.off();
   bdfd8:	4620      	mov	r0, r4
   bdfda:	f7f7 fe35 	bl	b5c48 <_ZN5spark13CellularClass3offEv>
      Output("Rebooting");  
   bdfde:	4855      	ldr	r0, [pc, #340]	; (be134 <loop+0x2ec>)
   bdfe0:	f7f8 f8d4 	bl	b618c <_Z6OutputPKc>
      delay(1000);
   bdfe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   bdfe8:	f007 fba2 	bl	c5730 <delay>
      DeviceReset();
   bdfec:	f7fb fc76 	bl	b98dc <_Z11DeviceResetv>
      Output("I'm Alive! Why?");  
   bdff0:	4851      	ldr	r0, [pc, #324]	; (be138 <loop+0x2f0>)
   bdff2:	f7f8 f8cb 	bl	b618c <_Z6OutputPKc>
		  Cellular.on();
   bdff6:	4620      	mov	r0, r4
   bdff8:	f7f7 fe20 	bl	b5c3c <_ZN5spark13CellularClass2onEv>
      delay(1000);
   bdffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   be000:	f007 fb96 	bl	c5730 <delay>
        spark_cloud_flag_connect();
   be004:	f007 fa7c 	bl	c5500 <spark_cloud_flag_connect>
      DailyRebootCountDownTimer = cf_reboot_countdown_timer; // Reset count incase reboot fails
   be008:	6833      	ldr	r3, [r6, #0]
   be00a:	602b      	str	r3, [r5, #0]
      Wind_Distance_Air_Initialize();
   be00c:	f7fe fdd8 	bl	bcbc0 <_Z28Wind_Distance_Air_Initializev>
    if (!pmic.isPowerGood() && (System.batteryCharge() <= 15.0)) {
   be010:	484a      	ldr	r0, [pc, #296]	; (be13c <loop+0x2f4>)
   be012:	f008 fce3 	bl	c69dc <_ZN4PMIC11isPowerGoodEv>
   be016:	2800      	cmp	r0, #0
   be018:	d16a      	bne.n	be0f0 <loop+0x2a8>
   be01a:	f7fc fb43 	bl	ba6a4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   be01e:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
   be022:	eeb4 0ae7 	vcmpe.f32	s0, s15
   be026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   be02a:	d861      	bhi.n	be0f0 <loop+0x2a8>
      Output("Low Power!");
   be02c:	4844      	ldr	r0, [pc, #272]	; (be140 <loop+0x2f8>)
   be02e:	f7f8 f8ad 	bl	b618c <_Z6OutputPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   be032:	f007 fa6d 	bl	c5510 <spark_cloud_flag_connected>
      if (Particle.connected()) {
   be036:	b118      	cbz	r0, be040 <loop+0x1f8>
        OBS_PublishAll(); 
   be038:	f7ff fd28 	bl	bda8c <_Z14OBS_PublishAllv>
        INFO_Do();
   be03c:	f7fe ff08 	bl	bce50 <_Z7INFO_Dov>
        reconnect_(reconnect) {
   be040:	2300      	movs	r3, #0
      Particle.disconnect();
   be042:	a801      	add	r0, sp, #4
   be044:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession, bool reconnect) :
   be048:	f8ad 300c 	strh.w	r3, [sp, #12]
        reconnect_(reconnect) {
   be04c:	f88d 300e 	strb.w	r3, [sp, #14]
   be050:	f007 fe21 	bl	c5c96 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        const system_tick_t start = millis();
   be054:	f7f7 fdfe 	bl	b5c54 <_ZN11SystemClass6millisEv>
   be058:	4604      	mov	r4, r0
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   be05a:	f7f7 fdfb 	bl	b5c54 <_ZN11SystemClass6millisEv>
   be05e:	1b00      	subs	r0, r0, r4
   be060:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   be064:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   be068:	f171 0300 	sbcs.w	r3, r1, #0
   be06c:	d205      	bcs.n	be07a <loop+0x232>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   be06e:	f007 fa4f 	bl	c5510 <spark_cloud_flag_connected>
   be072:	b110      	cbz	r0, be07a <loop+0x232>
            spark_process();
   be074:	f007 fa3c 	bl	c54f0 <spark_process>
        while (_while() && !_condition()) {
   be078:	e7ef      	b.n	be05a <loop+0x212>
   be07a:	4c2d      	ldr	r4, [pc, #180]	; (be130 <loop+0x2e8>)
   be07c:	f007 fa48 	bl	c5510 <spark_cloud_flag_connected>
   be080:	2200      	movs	r2, #0
   be082:	2102      	movs	r1, #2
   be084:	6860      	ldr	r0, [r4, #4]
   be086:	f007 fa93 	bl	c55b0 <network_disconnect>
      delay(1000);
   be08a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   be08e:	f007 fb4f 	bl	c5730 <delay>
      Cellular.off();
   be092:	4620      	mov	r0, r4
   be094:	f7f7 fdd8 	bl	b5c48 <_ZN5spark13CellularClass3offEv>
      if (LORA_exists) {
   be098:	4b2a      	ldr	r3, [pc, #168]	; (be144 <loop+0x2fc>)
   be09a:	781b      	ldrb	r3, [r3, #0]
   be09c:	b113      	cbz	r3, be0a4 <loop+0x25c>
        rf95.sleep(); // Power Down LoRa. Note: it turn on when accessed
   be09e:	482a      	ldr	r0, [pc, #168]	; (be148 <loop+0x300>)
   be0a0:	f004 fc4d 	bl	c293e <_ZN7RH_RF955sleepEv>
      Output("Powering Down");
   be0a4:	4829      	ldr	r0, [pc, #164]	; (be14c <loop+0x304>)
   be0a6:	f7f8 f871 	bl	b618c <_Z6OutputPKc>
      OLED_sleepDisplay();
   be0aa:	f7f7 febb 	bl	b5e24 <_Z17OLED_sleepDisplayv>
      delay(5000);
   be0ae:	f241 3088 	movw	r0, #5000	; 0x1388
   be0b2:	f007 fb3d 	bl	c5730 <delay>
		  pmic.disableBATFET();
   be0b6:	4821      	ldr	r0, [pc, #132]	; (be13c <loop+0x2f4>)
   be0b8:	f008 fcda 	bl	c6a70 <_ZN4PMIC13disableBATFETEv>
		  delay(2000);
   be0bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   be0c0:	f007 fb36 	bl	c5730 <delay>
      OLED_wakeDisplay();   // May need to toggle the Display reset pin.
   be0c4:	f7f7 fec4 	bl	b5e50 <_Z16OLED_wakeDisplayv>
		  delay(2000);
   be0c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   be0cc:	f007 fb30 	bl	c5730 <delay>
		  Output("Power Re-applied");
   be0d0:	481f      	ldr	r0, [pc, #124]	; (be150 <loop+0x308>)
   be0d2:	f7f8 f85b 	bl	b618c <_Z6OutputPKc>
		  pmic.enableBATFET();
   be0d6:	4819      	ldr	r0, [pc, #100]	; (be13c <loop+0x2f4>)
   be0d8:	f008 fcb5 	bl	c6a46 <_ZN4PMIC12enableBATFETEv>
		  Cellular.on();
   be0dc:	4814      	ldr	r0, [pc, #80]	; (be130 <loop+0x2e8>)
   be0de:	f7f7 fdad 	bl	b5c3c <_ZN5spark13CellularClass2onEv>
        spark_cloud_flag_connect();
   be0e2:	f007 fa0d 	bl	c5500 <spark_cloud_flag_connect>
}
   be0e6:	b005      	add	sp, #20
   be0e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Wind_Distance_Air_Initialize();
   be0ec:	f7fe bd68 	b.w	bcbc0 <_Z28Wind_Distance_Air_Initializev>
}
   be0f0:	b005      	add	sp, #20
   be0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   be0f4:	2002e614 	.word	0x2002e614
   be0f8:	2002e648 	.word	0x2002e648
   be0fc:	2002d904 	.word	0x2002d904
   be100:	2002dac0 	.word	0x2002dac0
   be104:	000cbe04 	.word	0x000cbe04
   be108:	2002dab8 	.word	0x2002dab8
   be10c:	00dbba00 	.word	0x00dbba00
   be110:	2003e5dc 	.word	0x2003e5dc
   be114:	000cbe0e 	.word	0x000cbe0e
   be118:	2003e364 	.word	0x2003e364
   be11c:	2002d938 	.word	0x2002d938
   be120:	2002d92c 	.word	0x2002d92c
   be124:	2002daa8 	.word	0x2002daa8
   be128:	000cbe30 	.word	0x000cbe30
   be12c:	000cbe22 	.word	0x000cbe22
   be130:	2003e630 	.word	0x2003e630
   be134:	000cbe3d 	.word	0x000cbe3d
   be138:	000cbe47 	.word	0x000cbe47
   be13c:	2003e1d8 	.word	0x2003e1d8
   be140:	000cbe57 	.word	0x000cbe57
   be144:	2002dab1 	.word	0x2002dab1
   be148:	2003e208 	.word	0x2003e208
   be14c:	000cbe62 	.word	0x000cbe62
   be150:	000cbe70 	.word	0x000cbe70

000be154 <_ZL9xor_blockPhS_>:
  return pgm_read_byte (& s_inv [x]) ;
}


static void xor_block (byte * d, byte * s)
{
   be154:	b510      	push	{r4, lr}
   be156:	1d0b      	adds	r3, r1, #4
   be158:	3004      	adds	r0, #4
   be15a:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ ^= *s++ ;  // some unrolling
   be15c:	f813 4c04 	ldrb.w	r4, [r3, #-4]
   be160:	f810 2c04 	ldrb.w	r2, [r0, #-4]
   be164:	4062      	eors	r2, r4
   be166:	f800 2c04 	strb.w	r2, [r0, #-4]
      *d++ ^= *s++ ;
   be16a:	f813 4c03 	ldrb.w	r4, [r3, #-3]
   be16e:	f810 2c03 	ldrb.w	r2, [r0, #-3]
   be172:	4062      	eors	r2, r4
   be174:	f800 2c03 	strb.w	r2, [r0, #-3]
      *d++ ^= *s++ ;
   be178:	f813 4c02 	ldrb.w	r4, [r3, #-2]
   be17c:	f810 2c02 	ldrb.w	r2, [r0, #-2]
   be180:	4062      	eors	r2, r4
   be182:	f800 2c02 	strb.w	r2, [r0, #-2]
      *d++ ^= *s++ ;
   be186:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   be18a:	f810 2c01 	ldrb.w	r2, [r0, #-1]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
   be18e:	3304      	adds	r3, #4
      *d++ ^= *s++ ;
   be190:	4062      	eors	r2, r4
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
   be192:	428b      	cmp	r3, r1
      *d++ ^= *s++ ;
   be194:	f800 2c01 	strb.w	r2, [r0, #-1]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
   be198:	f100 0004 	add.w	r0, r0, #4
   be19c:	d1de      	bne.n	be15c <_ZL9xor_blockPhS_+0x8>
    }
}
   be19e:	bd10      	pop	{r4, pc}

000be1a0 <_ZL12copy_and_keyPhS_S_>:

static void copy_and_key (byte * d, byte * s, byte * k)
{
   be1a0:	b530      	push	{r4, r5, lr}
   be1a2:	1d0b      	adds	r3, r1, #4
   be1a4:	3204      	adds	r2, #4
   be1a6:	3004      	adds	r0, #4
   be1a8:	3114      	adds	r1, #20
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
    {
      *d++ = *s++ ^ *k++ ;  // some unrolling
   be1aa:	f813 4c04 	ldrb.w	r4, [r3, #-4]
   be1ae:	f812 5c04 	ldrb.w	r5, [r2, #-4]
   be1b2:	406c      	eors	r4, r5
   be1b4:	f800 4c04 	strb.w	r4, [r0, #-4]
      *d++ = *s++ ^ *k++ ;
   be1b8:	f813 4c03 	ldrb.w	r4, [r3, #-3]
   be1bc:	f812 5c03 	ldrb.w	r5, [r2, #-3]
   be1c0:	406c      	eors	r4, r5
   be1c2:	f800 4c03 	strb.w	r4, [r0, #-3]
      *d++ = *s++ ^ *k++ ;
   be1c6:	f813 4c02 	ldrb.w	r4, [r3, #-2]
   be1ca:	f812 5c02 	ldrb.w	r5, [r2, #-2]
   be1ce:	406c      	eors	r4, r5
   be1d0:	f800 4c02 	strb.w	r4, [r0, #-2]
      *d++ = *s++ ^ *k++ ;
   be1d4:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   be1d8:	f812 5c01 	ldrb.w	r5, [r2, #-1]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
   be1dc:	3304      	adds	r3, #4
      *d++ = *s++ ^ *k++ ;
   be1de:	406c      	eors	r4, r5
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
   be1e0:	428b      	cmp	r3, r1
      *d++ = *s++ ^ *k++ ;
   be1e2:	f800 4c01 	strb.w	r4, [r0, #-1]
  for (byte i = 0 ; i < N_BLOCK ; i += 4)
   be1e6:	f102 0204 	add.w	r2, r2, #4
   be1ea:	f100 0004 	add.w	r0, r0, #4
   be1ee:	d1dc      	bne.n	be1aa <_ZL12copy_and_keyPhS_S_+0xa>
    }
}
   be1f0:	bd30      	pop	{r4, r5, pc}
	...

000be1f4 <_ZN3AESC1Ev>:
    }
}

/******************************************************************************/

AES::AES(){
   be1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   be1f6:	4a11      	ldr	r2, [pc, #68]	; (be23c <_ZN3AESC1Ev+0x48>)
   be1f8:	4603      	mov	r3, r0
   be1fa:	f500 758c 	add.w	r5, r0, #280	; 0x118
   be1fe:	f102 0610 	add.w	r6, r2, #16
   be202:	4617      	mov	r7, r2
   be204:	6810      	ldr	r0, [r2, #0]
   be206:	6851      	ldr	r1, [r2, #4]
   be208:	462c      	mov	r4, r5
   be20a:	c403      	stmia	r4!, {r0, r1}
   be20c:	3208      	adds	r2, #8
   be20e:	42b2      	cmp	r2, r6
   be210:	4625      	mov	r5, r4
   be212:	d1f7      	bne.n	be204 <_ZN3AESC1Ev+0x10>
	byte ar_iv[8] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01 };
   be214:	6938      	ldr	r0, [r7, #16]
   be216:	6871      	ldr	r1, [r6, #4]
   be218:	466a      	mov	r2, sp
   be21a:	c203      	stmia	r2!, {r0, r1}
	memcpy(iv,ar_iv,8);
   be21c:	466a      	mov	r2, sp
   be21e:	ca03      	ldmia	r2!, {r0, r1}
	memcpy(iv+8,ar_iv,8);
   be220:	466a      	mov	r2, sp
	memcpy(iv,ar_iv,8);
   be222:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   be226:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	memcpy(iv+8,ar_iv,8);
   be22a:	ca03      	ldmia	r2!, {r0, r1}
   be22c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
	arr_pad[11] = 0x0c;
	arr_pad[12] = 0x0d;
	arr_pad[13] = 0x0e;
	arr_pad[14] = 0x0f;
	arr_pad[15] = 0x10;
}
   be230:	4618      	mov	r0, r3
	memcpy(iv+8,ar_iv,8);
   be232:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
}
   be236:	b003      	add	sp, #12
   be238:	bdf0      	pop	{r4, r5, r6, r7, pc}
   be23a:	bf00      	nop
   be23c:	000ca5d8 	.word	0x000ca5d8

000be240 <_ZN3AES12copy_n_bytesEPhS0_h>:
}

/******************************************************************************/

void AES::copy_n_bytes (byte * d, byte * s, byte nn)
{
   be240:	b570      	push	{r4, r5, r6, lr}
   be242:	4618      	mov	r0, r3
   be244:	460c      	mov	r4, r1
   be246:	4615      	mov	r5, r2
  while (nn >= 4)
   be248:	2803      	cmp	r0, #3
   be24a:	f101 0104 	add.w	r1, r1, #4
   be24e:	f105 0504 	add.w	r5, r5, #4
   be252:	d811      	bhi.n	be278 <_ZN3AES12copy_n_bytesEPhS0_h+0x38>
   be254:	0898      	lsrs	r0, r3, #2
   be256:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
   be25a:	440c      	add	r4, r1
   be25c:	4411      	add	r1, r2
   be25e:	ebc0 1280 	rsb	r2, r0, r0, lsl #6
   be262:	eb03 0082 	add.w	r0, r3, r2, lsl #2
   be266:	fa51 f080 	uxtab	r0, r1, r0
      *d++ = *s++ ;
      *d++ = *s++ ;
      *d++ = *s++ ;
      nn -= 4 ;
    }
  while (nn--)
   be26a:	4281      	cmp	r1, r0
   be26c:	d017      	beq.n	be29e <_ZN3AES12copy_n_bytesEPhS0_h+0x5e>
    *d++ = *s++ ;
   be26e:	f811 3b01 	ldrb.w	r3, [r1], #1
   be272:	f804 3b01 	strb.w	r3, [r4], #1
  while (nn--)
   be276:	e7f8      	b.n	be26a <_ZN3AES12copy_n_bytesEPhS0_h+0x2a>
      *d++ = *s++ ;  // some unrolling
   be278:	f815 6c04 	ldrb.w	r6, [r5, #-4]
   be27c:	f801 6c04 	strb.w	r6, [r1, #-4]
      *d++ = *s++ ;
   be280:	f815 6c03 	ldrb.w	r6, [r5, #-3]
   be284:	f801 6c03 	strb.w	r6, [r1, #-3]
      *d++ = *s++ ;
   be288:	f815 6c02 	ldrb.w	r6, [r5, #-2]
   be28c:	f801 6c02 	strb.w	r6, [r1, #-2]
      *d++ = *s++ ;
   be290:	f815 6c01 	ldrb.w	r6, [r5, #-1]
   be294:	f801 6c01 	strb.w	r6, [r1, #-1]
      nn -= 4 ;
   be298:	3804      	subs	r0, #4
   be29a:	b2c0      	uxtb	r0, r0
  while (nn >= 4)
   be29c:	e7d4      	b.n	be248 <_ZN3AES12copy_n_bytesEPhS0_h+0x8>
}
   be29e:	bd70      	pop	{r4, r5, r6, pc}

000be2a0 <_ZN3AES7set_keyEPhi>:
  switch (keylen)
   be2a0:	2a80      	cmp	r2, #128	; 0x80
{
   be2a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be2a6:	4604      	mov	r4, r0
   be2a8:	4608      	mov	r0, r1
  switch (keylen)
   be2aa:	d015      	beq.n	be2d8 <_ZN3AES7set_keyEPhi+0x38>
   be2ac:	dc0b      	bgt.n	be2c6 <_ZN3AES7set_keyEPhi+0x26>
   be2ae:	2a18      	cmp	r2, #24
   be2b0:	d068      	beq.n	be384 <_ZN3AES7set_keyEPhi+0xe4>
   be2b2:	2a20      	cmp	r2, #32
   be2b4:	d00c      	beq.n	be2d0 <_ZN3AES7set_keyEPhi+0x30>
   be2b6:	2a10      	cmp	r2, #16
   be2b8:	d00e      	beq.n	be2d8 <_ZN3AES7set_keyEPhi+0x38>
      round = 0;
   be2ba:	2300      	movs	r3, #0
   be2bc:	6023      	str	r3, [r4, #0]
      return FAILURE;
   be2be:	20ff      	movs	r0, #255	; 0xff
}
   be2c0:	b003      	add	sp, #12
   be2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (keylen)
   be2c6:	2ac0      	cmp	r2, #192	; 0xc0
   be2c8:	d05c      	beq.n	be384 <_ZN3AES7set_keyEPhi+0xe4>
   be2ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   be2ce:	d1f4      	bne.n	be2ba <_ZN3AES7set_keyEPhi+0x1a>
      round = 14 ;
   be2d0:	230e      	movs	r3, #14
   be2d2:	6023      	str	r3, [r4, #0]
      keylen = 32; // 14 rounds
   be2d4:	2620      	movs	r6, #32
      break;
   be2d6:	e002      	b.n	be2de <_ZN3AES7set_keyEPhi+0x3e>
      round = 10 ;
   be2d8:	230a      	movs	r3, #10
   be2da:	6023      	str	r3, [r4, #0]
      keylen = 16; // 10 rounds
   be2dc:	2610      	movs	r6, #16
  hi = (round + 1) << 4 ;
   be2de:	4621      	mov	r1, r4
  copy_n_bytes (key_sched, key, keylen) ;
   be2e0:	b2f7      	uxtb	r7, r6
  hi = (round + 1) << 4 ;
   be2e2:	f851 5b04 	ldr.w	r5, [r1], #4
  copy_n_bytes (key_sched, key, keylen) ;
   be2e6:	4602      	mov	r2, r0
  hi = (round + 1) << 4 ;
   be2e8:	3501      	adds	r5, #1
  copy_n_bytes (key_sched, key, keylen) ;
   be2ea:	463b      	mov	r3, r7
   be2ec:	4620      	mov	r0, r4
   be2ee:	f7ff ffa7 	bl	be240 <_ZN3AES12copy_n_bytesEPhS0_h>
  hi = (round + 1) << 4 ;
   be2f2:	012d      	lsls	r5, r5, #4
  return pgm_read_byte (& s_fwd [x]) ;
   be2f4:	f8df e0c0 	ldr.w	lr, [pc, #192]	; be3b8 <_ZN3AES7set_keyEPhi+0x118>
  hi = (round + 1) << 4 ;
   be2f8:	b2ed      	uxtb	r5, r5
  copy_n_bytes (key_sched, key, keylen) ;
   be2fa:	463a      	mov	r2, r7
   be2fc:	46bc      	mov	ip, r7
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
   be2fe:	2101      	movs	r1, #1
   be300:	42aa      	cmp	r2, r5
   be302:	d256      	bcs.n	be3b2 <_ZN3AES7set_keyEPhi+0x112>
   be304:	58a0      	ldr	r0, [r4, r2]
        t[i] = key_sched [cc-4+i] ;
   be306:	9001      	str	r0, [sp, #4]
      if (cc == next)
   be308:	4594      	cmp	ip, r2
   be30a:	d13f      	bne.n	be38c <_ZN3AES7set_keyEPhi+0xec>
  return pgm_read_byte (& s_fwd [x]) ;
   be30c:	f3c0 2307 	ubfx	r3, r0, #8, #8
          rc = f2 (rc) ;
   be310:	f011 0f80 	tst.w	r1, #128	; 0x80
          t[0] = s_box (t[1]) ^ rc ;
   be314:	f81e 3003 	ldrb.w	r3, [lr, r3]
   be318:	ea83 0301 	eor.w	r3, r3, r1
   be31c:	f88d 3004 	strb.w	r3, [sp, #4]
  return pgm_read_byte (& s_fwd [x]) ;
   be320:	f3c0 4307 	ubfx	r3, r0, #16, #8
   be324:	ea4f 0141 	mov.w	r1, r1, lsl #1
          t[1] = s_box (t[2]) ;
   be328:	f81e 3003 	ldrb.w	r3, [lr, r3]
   be32c:	f88d 3005 	strb.w	r3, [sp, #5]
  return pgm_read_byte (& s_fwd [x]) ;
   be330:	ea4f 6310 	mov.w	r3, r0, lsr #24
   be334:	b2c0      	uxtb	r0, r0
          t[2] = s_box (t[3]) ;
   be336:	f81e 3003 	ldrb.w	r3, [lr, r3]
   be33a:	f88d 3006 	strb.w	r3, [sp, #6]
          next += keylen ;
   be33e:	44bc      	add	ip, r7
          t[3] = s_box (ttt) ;
   be340:	f81e 3000 	ldrb.w	r3, [lr, r0]
   be344:	f88d 3007 	strb.w	r3, [sp, #7]
          rc = f2 (rc) ;
   be348:	bf18      	it	ne
   be34a:	f081 011b 	eorne.w	r1, r1, #27
          next += keylen ;
   be34e:	fa5f fc8c 	uxtb.w	ip, ip
          rc = f2 (rc) ;
   be352:	b2c9      	uxtb	r1, r1
      for (byte i = 0 ; i < N_COL ; i++)
   be354:	1bd0      	subs	r0, r2, r7
   be356:	b2c0      	uxtb	r0, r0
   be358:	3004      	adds	r0, #4
   be35a:	3204      	adds	r2, #4
   be35c:	4420      	add	r0, r4
   be35e:	f10d 0904 	add.w	r9, sp, #4
   be362:	eb04 0a02 	add.w	sl, r4, r2
      else if (keylen == 32 && (cc & 31) == 16)
   be366:	2304      	movs	r3, #4
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
   be368:	f810 8b01 	ldrb.w	r8, [r0], #1
   be36c:	f819 bb01 	ldrb.w	fp, [r9], #1
      for (byte i = 0 ; i < N_COL ; i++)
   be370:	3b01      	subs	r3, #1
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
   be372:	ea88 080b 	eor.w	r8, r8, fp
      for (byte i = 0 ; i < N_COL ; i++)
   be376:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        key_sched [cc + i] = key_sched [tt + i] ^ t[i] ;
   be37a:	f80a 8b01 	strb.w	r8, [sl], #1
      for (byte i = 0 ; i < N_COL ; i++)
   be37e:	d1f3      	bne.n	be368 <_ZN3AES7set_keyEPhi+0xc8>
  for (byte cc = keylen, rc = 1 ; cc < hi ; cc += N_COL)
   be380:	b2d2      	uxtb	r2, r2
   be382:	e7bd      	b.n	be300 <_ZN3AES7set_keyEPhi+0x60>
      round = 12 ;
   be384:	230c      	movs	r3, #12
   be386:	6023      	str	r3, [r4, #0]
      keylen = 24; // 12 rounds
   be388:	2618      	movs	r6, #24
      break;
   be38a:	e7a8      	b.n	be2de <_ZN3AES7set_keyEPhi+0x3e>
      else if (keylen == 32 && (cc & 31) == 16)
   be38c:	2e20      	cmp	r6, #32
   be38e:	d1e1      	bne.n	be354 <_ZN3AES7set_keyEPhi+0xb4>
   be390:	f002 031f 	and.w	r3, r2, #31
   be394:	2b10      	cmp	r3, #16
   be396:	d1dd      	bne.n	be354 <_ZN3AES7set_keyEPhi+0xb4>
   be398:	a801      	add	r0, sp, #4
   be39a:	2304      	movs	r3, #4
            t[i] = s_box (t[i]) ;
   be39c:	f890 8000 	ldrb.w	r8, [r0]
          for (byte i = 0 ; i < 4 ; i++)
   be3a0:	3b01      	subs	r3, #1
            t[i] = s_box (t[i]) ;
   be3a2:	f81e 8008 	ldrb.w	r8, [lr, r8]
   be3a6:	f800 8b01 	strb.w	r8, [r0], #1
          for (byte i = 0 ; i < 4 ; i++)
   be3aa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   be3ae:	d1f5      	bne.n	be39c <_ZN3AES7set_keyEPhi+0xfc>
   be3b0:	e7d0      	b.n	be354 <_ZN3AES7set_keyEPhi+0xb4>
  return SUCCESS ;
   be3b2:	2000      	movs	r0, #0
   be3b4:	e784      	b.n	be2c0 <_ZN3AES7set_keyEPhi+0x20>
   be3b6:	bf00      	nop
   be3b8:	000cbec4 	.word	0x000cbec4

000be3bc <_ZN3AES7decryptEPhS0_>:
}

/******************************************************************************/

byte AES::decrypt (byte plain [N_BLOCK], byte cipher [N_BLOCK])
{
   be3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be3c0:	ee07 2a10 	vmov	s14, r2
  if (round)
   be3c4:	6802      	ldr	r2, [r0, #0]
{
   be3c6:	b095      	sub	sp, #84	; 0x54
   be3c8:	4605      	mov	r5, r0
  if (round)
   be3ca:	2a00      	cmp	r2, #0
   be3cc:	f000 8175 	beq.w	be6ba <_ZN3AES7decryptEPhS0_+0x2fe>
    {
      byte s1 [N_BLOCK] ;
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
   be3d0:	1d03      	adds	r3, r0, #4
   be3d2:	ae0c      	add	r6, sp, #48	; 0x30
   be3d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   be3d8:	4630      	mov	r0, r6
  return pgm_read_byte (& s_inv [x]) ;
   be3da:	4cb9      	ldr	r4, [pc, #740]	; (be6c0 <_ZN3AES7decryptEPhS0_+0x304>)
      copy_and_key (s1, plain, (byte*) (key_sched + round * N_BLOCK)) ;
   be3dc:	9307      	str	r3, [sp, #28]
   be3de:	f7ff fedf 	bl	be1a0 <_ZL12copy_and_keyPhS_S_>
  return pgm_read_byte (& s_inv [x]) ;
   be3e2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   be3e6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
   be3ea:	5ce3      	ldrb	r3, [r4, r3]
   be3ec:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  return pgm_read_byte (& s_inv [x]) ;
   be3f0:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
   be3f4:	5ca2      	ldrb	r2, [r4, r2]
  st [0] = is_box (st[0]) ; st [4] = is_box (st [4]);
   be3f6:	5ce3      	ldrb	r3, [r4, r3]
   be3f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  return pgm_read_byte (& s_inv [x]) ;
   be3fc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
   be400:	5ce3      	ldrb	r3, [r4, r3]
   be402:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  return pgm_read_byte (& s_inv [x]) ;
   be406:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
  st [8] = is_box (st[8]) ; st [12] = is_box (st [12]);
   be40a:	5ce3      	ldrb	r3, [r4, r3]
   be40c:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  byte tt = st[13] ;
   be410:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
   be414:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
  return pgm_read_byte (& s_inv [x]) ;
   be418:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
   be41c:	5ce3      	ldrb	r3, [r4, r3]
  st [13] = is_box (st [9]) ; st [9] = is_box (st [5]) ;
   be41e:	5ca2      	ldrb	r2, [r4, r2]
   be420:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  return pgm_read_byte (& s_inv [x]) ;
   be424:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
  st [5]  = is_box (st [1]) ; st [1] = is_box (tt) ;
   be428:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   be42c:	5ca2      	ldrb	r2, [r4, r2]
   be42e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  return pgm_read_byte (& s_inv [x]) ;
   be432:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
   be436:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   be43a:	5ca2      	ldrb	r2, [r4, r2]
   be43c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
  return pgm_read_byte (& s_inv [x]) ;
   be440:	f89d 203e 	ldrb.w	r2, [sp, #62]	; 0x3e
  tt = st [2] ; st [2] = is_box (st [10]) ; st [10] = is_box (tt) ;
   be444:	5ce3      	ldrb	r3, [r4, r3]
   be446:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
   be44a:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
   be44e:	5ca2      	ldrb	r2, [r4, r2]
   be450:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  return pgm_read_byte (& s_inv [x]) ;
   be454:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
   be458:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
   be45a:	5ca2      	ldrb	r2, [r4, r2]
  tt = st [6] ; st [6] = is_box (st [14]) ; st [14] = is_box (tt) ;
   be45c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
  tt = st [3] ;
   be460:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
   be464:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
  return pgm_read_byte (& s_inv [x]) ;
   be468:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
   be46c:	5ce3      	ldrb	r3, [r4, r3]
  st [3]  = is_box (st [7])  ; st [7]  = is_box (st [11]) ;
   be46e:	5ca2      	ldrb	r2, [r4, r2]
   be470:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  return pgm_read_byte (& s_inv [x]) ;
   be474:	f89d 203f 	ldrb.w	r2, [sp, #63]	; 0x3f
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
   be478:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
      inv_shift_sub_rows (s1) ;

      for (byte r = round ; --r ; )
   be47c:	682b      	ldr	r3, [r5, #0]
  st [11] = is_box (st [15]) ; st [15] = is_box (tt) ;
   be47e:	5ca2      	ldrb	r2, [r4, r2]
   be480:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
      for (byte r = round ; --r ; )
   be484:	3b01      	subs	r3, #1
   be486:	b2da      	uxtb	r2, r3
   be488:	eb05 1502 	add.w	r5, r5, r2, lsl #4
   be48c:	1d2b      	adds	r3, r5, #4
   be48e:	ee07 6a90 	vmov	s15, r6
   be492:	9305      	str	r3, [sp, #20]
   be494:	9b07      	ldr	r3, [sp, #28]
   be496:	9a05      	ldr	r2, [sp, #20]
   be498:	4293      	cmp	r3, r2
   be49a:	f000 8103 	beq.w	be6a4 <_ZN3AES7decryptEPhS0_+0x2e8>
       {
         byte s2 [N_BLOCK] ;
         copy_and_key (s2, s1, (byte*) (key_sched + r * N_BLOCK)) ;
   be49e:	ee17 1a90 	vmov	r1, s15
   be4a2:	a810      	add	r0, sp, #64	; 0x40
   be4a4:	f7ff fe7c 	bl	be1a0 <_ZL12copy_and_keyPhS_S_>
   be4a8:	ab0c      	add	r3, sp, #48	; 0x30
   be4aa:	ee07 3a90 	vmov	s15, r3
   be4ae:	f10d 0940 	add.w	r9, sp, #64	; 0x40
   be4b2:	f04f 0b00 	mov.w	fp, #0
      byte a1 = st [i] ;
   be4b6:	f899 3000 	ldrb.w	r3, [r9]
   be4ba:	9306      	str	r3, [sp, #24]
      byte b1 = st [i+1] ;
   be4bc:	f899 3001 	ldrb.w	r3, [r9, #1]
   be4c0:	9302      	str	r3, [sp, #8]
      byte c1 = st [i+2] ;
   be4c2:	f899 3002 	ldrb.w	r3, [r9, #2]
   be4c6:	9303      	str	r3, [sp, #12]
      byte d1 = st [i+3] ;
   be4c8:	f899 3003 	ldrb.w	r3, [r9, #3]
   be4cc:	9304      	str	r3, [sp, #16]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
   be4ce:	f999 3000 	ldrsb.w	r3, [r9]
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be4d2:	9906      	ldr	r1, [sp, #24]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
   be4d4:	2b00      	cmp	r3, #0
   be4d6:	9b06      	ldr	r3, [sp, #24]
   be4d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be4dc:	bfb8      	it	lt
   be4de:	f083 031b 	eorlt.w	r3, r3, #27
   be4e2:	fa5f fa83 	uxtb.w	sl, r3
   be4e6:	9b02      	ldr	r3, [sp, #8]
   be4e8:	f013 0f80 	tst.w	r3, #128	; 0x80
   be4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be4f0:	bf18      	it	ne
   be4f2:	f083 031b 	eorne.w	r3, r3, #27
   be4f6:	b2db      	uxtb	r3, r3
   be4f8:	9300      	str	r3, [sp, #0]
   be4fa:	9b03      	ldr	r3, [sp, #12]
   be4fc:	f013 0f80 	tst.w	r3, #128	; 0x80
   be500:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be504:	bf18      	it	ne
   be506:	f083 031b 	eorne.w	r3, r3, #27
   be50a:	b2db      	uxtb	r3, r3
   be50c:	9301      	str	r3, [sp, #4]
   be50e:	9b04      	ldr	r3, [sp, #16]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
   be510:	9d01      	ldr	r5, [sp, #4]
      byte a2 = f2(a1), b2 = f2(b1), c2 = f2(c1), d2 = f2(d1) ;
   be512:	f013 0f80 	tst.w	r3, #128	; 0x80
   be516:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be51a:	bf18      	it	ne
   be51c:	f083 031b 	eorne.w	r3, r3, #27
   be520:	b2d8      	uxtb	r0, r3
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
   be522:	9b00      	ldr	r3, [sp, #0]
   be524:	f01a 0f80 	tst.w	sl, #128	; 0x80
   be528:	ea4f 024a 	mov.w	r2, sl, lsl #1
   be52c:	bf18      	it	ne
   be52e:	f082 021b 	eorne.w	r2, r2, #27
   be532:	f013 0f80 	tst.w	r3, #128	; 0x80
   be536:	ea4f 0343 	mov.w	r3, r3, lsl #1
   be53a:	ea4f 0c45 	mov.w	ip, r5, lsl #1
   be53e:	bf18      	it	ne
   be540:	f083 031b 	eorne.w	r3, r3, #27
   be544:	f015 0f80 	tst.w	r5, #128	; 0x80
   be548:	b2d2      	uxtb	r2, r2
   be54a:	ea4f 0740 	mov.w	r7, r0, lsl #1
   be54e:	bf18      	it	ne
   be550:	f08c 0c1b 	eorne.w	ip, ip, #27
   be554:	f010 0f80 	tst.w	r0, #128	; 0x80
   be558:	ea4f 0842 	mov.w	r8, r2, lsl #1
   be55c:	bf18      	it	ne
   be55e:	f087 071b 	eorne.w	r7, r7, #27
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be562:	f012 0f80 	tst.w	r2, #128	; 0x80
   be566:	bf18      	it	ne
   be568:	f088 081b 	eorne.w	r8, r8, #27
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
   be56c:	b2db      	uxtb	r3, r3
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be56e:	fa5f f888 	uxtb.w	r8, r8
   be572:	f013 0f80 	tst.w	r3, #128	; 0x80
   be576:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be57a:	ea81 0108 	eor.w	r1, r1, r8
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be57e:	bf18      	it	ne
   be580:	f08e 0e1b 	eorne.w	lr, lr, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be584:	9108      	str	r1, [sp, #32]
   be586:	9902      	ldr	r1, [sp, #8]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
   be588:	fa5f fc8c 	uxtb.w	ip, ip
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be58c:	fa5f fe8e 	uxtb.w	lr, lr
   be590:	f01c 0f80 	tst.w	ip, #128	; 0x80
   be594:	ea4f 064c 	mov.w	r6, ip, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be598:	ea81 010e 	eor.w	r1, r1, lr
   be59c:	9109      	str	r1, [sp, #36]	; 0x24
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be59e:	bf18      	it	ne
   be5a0:	f086 061b 	eorne.w	r6, r6, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be5a4:	9903      	ldr	r1, [sp, #12]
      byte a4 = f2(a2), b4 = f2(b2), c4 = f2(c2), d4 = f2(d2) ;
   be5a6:	b2ff      	uxtb	r7, r7
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be5a8:	b2f6      	uxtb	r6, r6
   be5aa:	f017 0f80 	tst.w	r7, #128	; 0x80
   be5ae:	ea4f 0547 	mov.w	r5, r7, lsl #1
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be5b2:	ea81 0106 	eor.w	r1, r1, r6
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be5b6:	bf18      	it	ne
   be5b8:	f085 051b 	eorne.w	r5, r5, #27
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be5bc:	910a      	str	r1, [sp, #40]	; 0x28
   be5be:	9904      	ldr	r1, [sp, #16]
      byte a8 = f2(a4), b8 = f2(b4), c8 = f2(c4), d8 = f2(d4) ;
   be5c0:	b2ed      	uxtb	r5, r5
      byte a9 = a8 ^ a1,b9 = b8 ^ b1,c9 = c8 ^ c1,d9 = d8 ^ d1 ;
   be5c2:	4069      	eors	r1, r5
   be5c4:	910b      	str	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
   be5c6:	9903      	ldr	r1, [sp, #12]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
   be5c8:	407d      	eors	r5, r7
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
   be5ca:	ea81 070a 	eor.w	r7, r1, sl
   be5ce:	9900      	ldr	r1, [sp, #0]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
   be5d0:	ea82 0208 	eor.w	r2, r2, r8
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
   be5d4:	404f      	eors	r7, r1
   be5d6:	9909      	ldr	r1, [sp, #36]	; 0x24
   be5d8:	4057      	eors	r7, r2
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
   be5da:	ea8c 0606 	eor.w	r6, ip, r6
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
   be5de:	404f      	eors	r7, r1
  return pgm_read_byte (& s_inv [x]) ;
   be5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
   be5e2:	4077      	eors	r7, r6
  return pgm_read_byte (& s_inv [x]) ;
   be5e4:	404f      	eors	r7, r1
      dt[i]         = is_box (ac^a2  ^  b9^b2  ^  cc^c1  ^  d9) ;
   be5e6:	ee17 1a90 	vmov	r1, s15
   be5ea:	5de7      	ldrb	r7, [r4, r7]
   be5ec:	f80b 7001 	strb.w	r7, [fp, r1]
      byte ac = a8 ^ a4,bc = b8 ^ b4,cc = c8 ^ c4,dc = d8 ^ d4 ;
   be5f0:	ea83 030e 	eor.w	r3, r3, lr
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
   be5f4:	fa5f fe8b 	uxtb.w	lr, fp
   be5f8:	f10e 0705 	add.w	r7, lr, #5
   be5fc:	a914      	add	r1, sp, #80	; 0x50
   be5fe:	f007 070f 	and.w	r7, r7, #15
   be602:	440f      	add	r7, r1
   be604:	9904      	ldr	r1, [sp, #16]
   be606:	468c      	mov	ip, r1
   be608:	9900      	ldr	r1, [sp, #0]
   be60a:	ea8c 0c01 	eor.w	ip, ip, r1
   be60e:	9901      	ldr	r1, [sp, #4]
   be610:	ea81 0c0c 	eor.w	ip, r1, ip
   be614:	9908      	ldr	r1, [sp, #32]
   be616:	ea81 0c0c 	eor.w	ip, r1, ip
   be61a:	990a      	ldr	r1, [sp, #40]	; 0x28
   be61c:	ea83 0c0c 	eor.w	ip, r3, ip
   be620:	ea81 0c0c 	eor.w	ip, r1, ip
  return pgm_read_byte (& s_inv [x]) ;
   be624:	ea85 0c0c 	eor.w	ip, r5, ip
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
   be628:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+5)&15]  = is_box (a9     ^  bc^b2  ^  c9^c2  ^  dc^d1) ;
   be62a:	f814 c00c 	ldrb.w	ip, [r4, ip]
   be62e:	f807 cc20 	strb.w	ip, [r7, #-32]
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
   be632:	f10e 070a 	add.w	r7, lr, #10
   be636:	f007 070f 	and.w	r7, r7, #15
   be63a:	440f      	add	r7, r1
   be63c:	9906      	ldr	r1, [sp, #24]
   be63e:	468c      	mov	ip, r1
   be640:	9901      	ldr	r1, [sp, #4]
   be642:	ea8c 0801 	eor.w	r8, ip, r1
   be646:	ea80 0808 	eor.w	r8, r0, r8
   be64a:	9909      	ldr	r1, [sp, #36]	; 0x24
   be64c:	ea82 0208 	eor.w	r2, r2, r8
   be650:	404a      	eors	r2, r1
  return pgm_read_byte (& s_inv [x]) ;
   be652:	990b      	ldr	r1, [sp, #44]	; 0x2c
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
   be654:	4072      	eors	r2, r6
  return pgm_read_byte (& s_inv [x]) ;
   be656:	404a      	eors	r2, r1
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
   be658:	a914      	add	r1, sp, #80	; 0x50
      dt[(i+10)&15] = is_box (ac^a1  ^  b9     ^  cc^c2  ^  d9^d2) ;
   be65a:	5ca2      	ldrb	r2, [r4, r2]
   be65c:	f807 2c20 	strb.w	r2, [r7, #-32]
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
   be660:	f10e 020f 	add.w	r2, lr, #15
   be664:	f002 020f 	and.w	r2, r2, #15
   be668:	440a      	add	r2, r1
   be66a:	9902      	ldr	r1, [sp, #8]
   be66c:	ea81 0e0a 	eor.w	lr, r1, sl
   be670:	9908      	ldr	r1, [sp, #32]
   be672:	ea80 0e0e 	eor.w	lr, r0, lr
   be676:	ea81 0e0e 	eor.w	lr, r1, lr
   be67a:	990a      	ldr	r1, [sp, #40]	; 0x28
   be67c:	ea83 030e 	eor.w	r3, r3, lr
   be680:	ea81 0003 	eor.w	r0, r1, r3
  return pgm_read_byte (& s_inv [x]) ;
   be684:	4045      	eors	r5, r0
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
   be686:	f10b 0b04 	add.w	fp, fp, #4
      dt[(i+15)&15] = is_box (a9^a2  ^  bc^b1  ^  c9     ^  dc^d2) ;
   be68a:	5d63      	ldrb	r3, [r4, r5]
   be68c:	f802 3c20 	strb.w	r3, [r2, #-32]
  for (byte i = 0 ; i < N_BLOCK ; i += N_COL)
   be690:	f1bb 0f10 	cmp.w	fp, #16
   be694:	f109 0904 	add.w	r9, r9, #4
   be698:	f47f af0d 	bne.w	be4b6 <_ZN3AES7decryptEPhS0_+0xfa>
   be69c:	9b05      	ldr	r3, [sp, #20]
   be69e:	3b10      	subs	r3, #16
   be6a0:	9305      	str	r3, [sp, #20]
      for (byte r = round ; --r ; )
   be6a2:	e6f7      	b.n	be494 <_ZN3AES7decryptEPhS0_+0xd8>
         inv_mix_sub_columns (s1, s2) ;
       }
      copy_and_key (cipher, s1, (byte*) (key_sched)) ;
   be6a4:	ee17 0a10 	vmov	r0, s14
   be6a8:	9a07      	ldr	r2, [sp, #28]
   be6aa:	ee17 1a90 	vmov	r1, s15
   be6ae:	f7ff fd77 	bl	be1a0 <_ZL12copy_and_keyPhS_S_>
    }
  else
    return FAILURE ;
  return SUCCESS ;
   be6b2:	2000      	movs	r0, #0
}
   be6b4:	b015      	add	sp, #84	; 0x54
   be6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return FAILURE ;
   be6ba:	20ff      	movs	r0, #255	; 0xff
   be6bc:	e7fa      	b.n	be6b4 <_ZN3AES7decryptEPhS0_+0x2f8>
   be6be:	bf00      	nop
   be6c0:	000cbfc4 	.word	0x000cbfc4

000be6c4 <_ZN3AES11cbc_decryptEPhS0_iS0_>:

/******************************************************************************/

byte AES::cbc_decrypt (byte * cipher, byte * plain, int n_block, byte iv [N_BLOCK])
{
   be6c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   be6c8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   be6cc:	4607      	mov	r7, r0
   be6ce:	460d      	mov	r5, r1
   be6d0:	4616      	mov	r6, r2
   be6d2:	461c      	mov	r4, r3
  while (n_block--)
   be6d4:	b1ec      	cbz	r4, be712 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x4e>
    {
      byte tmp [N_BLOCK] ;
      copy_n_bytes (tmp, cipher, N_BLOCK) ;
   be6d6:	2310      	movs	r3, #16
   be6d8:	462a      	mov	r2, r5
   be6da:	4669      	mov	r1, sp
   be6dc:	4638      	mov	r0, r7
   be6de:	f7ff fdaf 	bl	be240 <_ZN3AES12copy_n_bytesEPhS0_h>
      if (decrypt (cipher, plain) != SUCCESS)
   be6e2:	4632      	mov	r2, r6
   be6e4:	4629      	mov	r1, r5
   be6e6:	4638      	mov	r0, r7
   be6e8:	f7ff fe68 	bl	be3bc <_ZN3AES7decryptEPhS0_>
   be6ec:	3c01      	subs	r4, #1
   be6ee:	b118      	cbz	r0, be6f8 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x34>
        return FAILURE ;
   be6f0:	20ff      	movs	r0, #255	; 0xff
      copy_n_bytes (iv, tmp, N_BLOCK) ;
      plain  += N_BLOCK ;
      cipher += N_BLOCK;
    }
  return SUCCESS ;
}
   be6f2:	b004      	add	sp, #16
   be6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      xor_block (plain, iv) ;
   be6f8:	4630      	mov	r0, r6
   be6fa:	4641      	mov	r1, r8
   be6fc:	f7ff fd2a 	bl	be154 <_ZL9xor_blockPhS_>
      copy_n_bytes (iv, tmp, N_BLOCK) ;
   be700:	2310      	movs	r3, #16
   be702:	466a      	mov	r2, sp
   be704:	4641      	mov	r1, r8
   be706:	4638      	mov	r0, r7
   be708:	f7ff fd9a 	bl	be240 <_ZN3AES12copy_n_bytesEPhS0_h>
      plain  += N_BLOCK ;
   be70c:	3610      	adds	r6, #16
      cipher += N_BLOCK;
   be70e:	3510      	adds	r5, #16
  while (n_block--)
   be710:	e7e0      	b.n	be6d4 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x10>
  return SUCCESS ;
   be712:	4620      	mov	r0, r4
   be714:	e7ed      	b.n	be6f2 <_ZN3AES11cbc_decryptEPhS0_iS0_+0x2e>

000be716 <_ZN3AES6set_IVEy>:
  return SUCCESS ;
}

/*****************************************************************************/

void AES::set_IV(unsigned long long int IVCl){
   be716:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be718:	e9cd 2300 	strd	r2, r3, [sp]
	memcpy(iv,&IVCl,8);
   be71c:	466d      	mov	r5, sp
void AES::set_IV(unsigned long long int IVCl){
   be71e:	4604      	mov	r4, r0
	memcpy(iv,&IVCl,8);
   be720:	cd03      	ldmia	r5!, {r0, r1}
	memcpy(iv+8,&IVCl,8);
   be722:	466d      	mov	r5, sp
	memcpy(iv,&IVCl,8);
   be724:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   be728:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
	memcpy(iv+8,&IVCl,8);
   be72c:	cd03      	ldmia	r5!, {r0, r1}
	IVC = IVCl;
   be72e:	e9c4 233e 	strd	r2, r3, [r4, #248]	; 0xf8
	memcpy(iv+8,&IVCl,8);
   be732:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   be736:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
}
   be73a:	b003      	add	sp, #12
   be73c:	bd30      	pop	{r4, r5, pc}

000be73e <_ZN3AES6iv_incEv>:

/******************************************************************************/

void AES::iv_inc(){
	IVC += 1;
   be73e:	e9d0 323e 	ldrd	r3, r2, [r0, #248]	; 0xf8
   be742:	3301      	adds	r3, #1
   be744:	f142 0200 	adc.w	r2, r2, #0
   be748:	e9c0 323e 	strd	r3, r2, [r0, #248]	; 0xf8
	memcpy(iv,&IVC,8);
   be74c:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   be750:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be754:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   be758:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	memcpy(iv+8,&IVC,8);
   be75c:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   be760:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   be764:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   be768:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
}
   be76c:	4770      	bx	lr

000be76e <_ZN3AES6get_IVEPh>:


/******************************************************************************/

void AES::get_IV(byte *out){
	memcpy(out,&IVC,8);
   be76e:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   be772:	600b      	str	r3, [r1, #0]
   be774:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   be778:	604b      	str	r3, [r1, #4]
	memcpy(out+8,&IVC,8);
   be77a:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   be77e:	608b      	str	r3, [r1, #8]
   be780:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   be784:	60cb      	str	r3, [r1, #12]
}
   be786:	4770      	bx	lr

000be788 <_ZN3AES14do_aes_decryptEPhiS0_S0_iS0_>:
	cbc_encrypt (plain_p, cipher, blocks);
}

/******************************************************************************/

void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
   be788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   be78c:	460e      	mov	r6, r1
   be78e:	4614      	mov	r4, r2
	size = sizel;
   be790:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
	set_size(size_c);
	int blocks = size_c / N_BLOCK;
	set_key (key, bits);
   be794:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
void AES::do_aes_decrypt(byte *cipher,int size_c,byte *plain,byte *key, int bits, byte ivl [N_BLOCK]){
   be798:	461f      	mov	r7, r3
   be79a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   be79e:	4605      	mov	r5, r0
	set_key (key, bits);
   be7a0:	f7ff fd7e 	bl	be2a0 <_ZN3AES7set_keyEPhi>
	int blocks = size_c / N_BLOCK;
   be7a4:	2c00      	cmp	r4, #0
   be7a6:	bfb8      	it	lt
   be7a8:	340f      	addlt	r4, #15
	cbc_decrypt (cipher,plain, blocks, ivl);
   be7aa:	f8cd 8018 	str.w	r8, [sp, #24]
   be7ae:	1123      	asrs	r3, r4, #4
   be7b0:	463a      	mov	r2, r7
   be7b2:	4631      	mov	r1, r6
   be7b4:	4628      	mov	r0, r5
}
   be7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	cbc_decrypt (cipher,plain, blocks, ivl);
   be7ba:	f7ff bf83 	b.w	be6c4 <_ZN3AES11cbc_decryptEPhS0_iS0_>

000be7be <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  /*! @brief Whether we should automatically change the range (if possible) for
     higher precision
      @param enabled True if we will try to autorange */
  virtual void enableAutoRange(bool enabled) {
    (void)enabled; /* suppress unused warning */
  };
   be7be:	4770      	bx	lr

000be7c0 <_ZN15Adafruit_BME280C1Ev>:
#include <Wire.h>

/*!
 *  @brief  class constructor
 */
Adafruit_BME280::Adafruit_BME280() : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {}
   be7c0:	2200      	movs	r2, #0
   be7c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   be7c6:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be7ca:	e9c0 1208 	strd	r1, r2, [r0, #32]
   be7ce:	6102      	str	r2, [r0, #16]
   be7d0:	4770      	bx	lr

000be7d2 <_ZN15Adafruit_BME2807spixferEh>:
 *   @brief  Encapsulate hardware and software SPI transfer into one
 * function
 *   @param x the data byte to transfer
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   be7d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // hardware SPI
  if (_sck == -1)
   be7d6:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   be7da:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   be7dc:	4604      	mov	r4, r0
   be7de:	460f      	mov	r7, r1
  if (_sck == -1)
   be7e0:	d104      	bne.n	be7ec <_ZN15Adafruit_BME2807spixferEh+0x1a>
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
}
   be7e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
   be7e6:	6840      	ldr	r0, [r0, #4]
   be7e8:	f008 bacc 	b.w	c6d84 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   be7ec:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
   be7ee:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
   be7f0:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   be7f4:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   be7f8:	2100      	movs	r1, #0
   be7fa:	b280      	uxth	r0, r0
   be7fc:	f008 feed 	bl	c75da <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
   be800:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   be804:	fa08 f106 	lsl.w	r1, r8, r6
   be808:	4039      	ands	r1, r7
   be80a:	b280      	uxth	r0, r0
   be80c:	f008 fee5 	bl	c75da <digitalWrite>
    digitalWrite(_sck, HIGH);
   be810:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   be814:	2101      	movs	r1, #1
   be816:	b280      	uxth	r0, r0
   be818:	f008 fedf 	bl	c75da <digitalWrite>
    if (digitalRead(_miso))
   be81c:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
    reply <<= 1;
   be820:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
   be822:	b280      	uxth	r0, r0
    reply <<= 1;
   be824:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
   be826:	f008 fef1 	bl	c760c <digitalRead>
   be82a:	b108      	cbz	r0, be830 <_ZN15Adafruit_BME2807spixferEh+0x5e>
      reply |= 1;
   be82c:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
   be830:	3e01      	subs	r6, #1
   be832:	d2df      	bcs.n	be7f4 <_ZN15Adafruit_BME2807spixferEh+0x22>
}
   be834:	4628      	mov	r0, r5
   be836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000be83c <_ZN15Adafruit_BME2806write8Ehh>:
/*!
 *   @brief  Writes an 8 bit value over I2C or SPI
 *   @param reg the register address to write to
 *   @param value the value to write to the register
 */
void Adafruit_BME280::write8(byte reg, byte value) {
   be83c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
   be83e:	f990 3020 	ldrsb.w	r3, [r0, #32]
   be842:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   be844:	4604      	mov	r4, r0
   be846:	460e      	mov	r6, r1
   be848:	4615      	mov	r5, r2
  if (_cs == -1) {
   be84a:	d113      	bne.n	be874 <_ZN15Adafruit_BME2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
   be84c:	7d01      	ldrb	r1, [r0, #20]
   be84e:	6800      	ldr	r0, [r0, #0]
   be850:	f007 fd5a 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   be854:	6820      	ldr	r0, [r4, #0]
   be856:	6803      	ldr	r3, [r0, #0]
   be858:	4631      	mov	r1, r6
   be85a:	689b      	ldr	r3, [r3, #8]
   be85c:	4798      	blx	r3
    _wire->write((uint8_t)value);
   be85e:	6820      	ldr	r0, [r4, #0]
   be860:	6803      	ldr	r3, [r0, #0]
   be862:	4629      	mov	r1, r5
   be864:	689b      	ldr	r3, [r3, #8]
   be866:	4798      	blx	r3
    _wire->endTransmission();
   be868:	6820      	ldr	r0, [r4, #0]
    spixfer(value);
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
}
   be86a:	b004      	add	sp, #16
   be86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
   be870:	f007 bd6f 	b.w	c6352 <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
   be874:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   be878:	3301      	adds	r3, #1
   be87a:	d10d      	bne.n	be898 <_ZN15Adafruit_BME2806write8Ehh+0x5c>
      dataMode_{dataMode}
   be87c:	4b17      	ldr	r3, [pc, #92]	; (be8dc <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
   be87e:	9300      	str	r3, [sp, #0]
   be880:	2300      	movs	r3, #0
   be882:	f88d 3004 	strb.w	r3, [sp, #4]
   be886:	4b16      	ldr	r3, [pc, #88]	; (be8e0 <_ZN15Adafruit_BME2806write8Ehh+0xa4>)
   be888:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   be88a:	6840      	ldr	r0, [r0, #4]
   be88c:	2301      	movs	r3, #1
   be88e:	4669      	mov	r1, sp
   be890:	f8ad 300c 	strh.w	r3, [sp, #12]
   be894:	f008 fa08 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   be898:	f994 0020 	ldrsb.w	r0, [r4, #32]
   be89c:	2100      	movs	r1, #0
   be89e:	b280      	uxth	r0, r0
   be8a0:	f008 fe9b 	bl	c75da <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   be8a4:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   be8a8:	4620      	mov	r0, r4
   be8aa:	f7ff ff92 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
    spixfer(value);
   be8ae:	4629      	mov	r1, r5
   be8b0:	4620      	mov	r0, r4
   be8b2:	f7ff ff8e 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
    digitalWrite(_cs, HIGH);
   be8b6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   be8ba:	2101      	movs	r1, #1
   be8bc:	b280      	uxth	r0, r0
   be8be:	f008 fe8c 	bl	c75da <digitalWrite>
    if (_sck == -1)
   be8c2:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
   be8c6:	3301      	adds	r3, #1
   be8c8:	d105      	bne.n	be8d6 <_ZN15Adafruit_BME2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
   be8ca:	6860      	ldr	r0, [r4, #4]
}
   be8cc:	b004      	add	sp, #16
   be8ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
   be8d2:	f008 b9cf 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>
}
   be8d6:	b004      	add	sp, #16
   be8d8:	bd70      	pop	{r4, r5, r6, pc}
   be8da:	bf00      	nop
   be8dc:	000cbe8c 	.word	0x000cbe8c
   be8e0:	0007a120 	.word	0x0007a120

000be8e4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
   be8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  _measReg.osrs_t = tempSampling;
   be8e6:	00db      	lsls	r3, r3, #3
   be8e8:	f002 0207 	and.w	r2, r2, #7
   be8ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
   be8f0:	4313      	orrs	r3, r2
   be8f2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
                                  standby_duration duration) {
   be8f6:	f89d 7018 	ldrb.w	r7, [sp, #24]
  _measReg.osrs_t = tempSampling;
   be8fa:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  _humReg.osrs_h = humSampling;
   be8fe:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                                  standby_duration duration) {
   be902:	f89d 501c 	ldrb.w	r5, [sp, #28]
   be906:	f89d 6020 	ldrb.w	r6, [sp, #32]
  _humReg.osrs_h = humSampling;
   be90a:	f367 1347 	bfi	r3, r7, #5, #3
   be90e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  _configReg.t_sb = duration;
   be912:	00ed      	lsls	r5, r5, #3
   be914:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
   be918:	f006 0607 	and.w	r6, r6, #7
   be91c:	f005 0538 	and.w	r5, r5, #56	; 0x38
   be920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   be924:	4335      	orrs	r5, r6
                                  standby_duration duration) {
   be926:	4604      	mov	r4, r0
  _configReg.t_sb = duration;
   be928:	431d      	orrs	r5, r3
   be92a:	f880 504c 	strb.w	r5, [r0, #76]	; 0x4c
  write8(BME280_REGISTER_CONTROL, MODE_SLEEP);
   be92e:	2200      	movs	r2, #0
   be930:	21f4      	movs	r1, #244	; 0xf4
   be932:	f7ff ff83 	bl	be83c <_ZN15Adafruit_BME2806write8Ehh>
    // 100 = x8
    // 101 and above = x16
    unsigned int osrs_h : 3; ///< pressure oversampling

    /// @return combined ctrl hum register
    unsigned int get() { return (osrs_h); }
   be936:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
  write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   be93a:	4620      	mov	r0, r4
   be93c:	0952      	lsrs	r2, r2, #5
   be93e:	21f2      	movs	r1, #242	; 0xf2
   be940:	f7ff ff7c 	bl	be83c <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
   be944:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
   be948:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   be94c:	f002 0107 	and.w	r1, r2, #7
   be950:	009b      	lsls	r3, r3, #2
   be952:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BME280_REGISTER_CONFIG, _configReg.get());
   be956:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   be95a:	4620      	mov	r0, r4
   be95c:	21f5      	movs	r1, #245	; 0xf5
   be95e:	f7ff ff6d 	bl	be83c <_ZN15Adafruit_BME2806write8Ehh>
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
   be962:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   be966:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   be96a:	f002 0107 	and.w	r1, r2, #7
   be96e:	009b      	lsls	r3, r3, #2
   be970:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BME280_REGISTER_CONTROL, _measReg.get());
   be974:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   be978:	4620      	mov	r0, r4
   be97a:	21f4      	movs	r1, #244	; 0xf4
}
   be97c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  write8(BME280_REGISTER_CONTROL, _measReg.get());
   be980:	f7ff bf5c 	b.w	be83c <_ZN15Adafruit_BME2806write8Ehh>

000be984 <_ZN15Adafruit_BME2805read8Eh>:
/*!
 *   @brief  Reads an 8 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the data byte read from the device
 */
uint8_t Adafruit_BME280::read8(byte reg) {
   be984:	b530      	push	{r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
   be986:	f990 3020 	ldrsb.w	r3, [r0, #32]
   be98a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   be98c:	b085      	sub	sp, #20
   be98e:	4604      	mov	r4, r0
   be990:	460d      	mov	r5, r1
  if (_cs == -1) {
   be992:	d118      	bne.n	be9c6 <_ZN15Adafruit_BME2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
   be994:	7d01      	ldrb	r1, [r0, #20]
   be996:	6800      	ldr	r0, [r0, #0]
   be998:	f007 fcb6 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   be99c:	6820      	ldr	r0, [r4, #0]
   be99e:	6803      	ldr	r3, [r0, #0]
   be9a0:	4629      	mov	r1, r5
   be9a2:	689b      	ldr	r3, [r3, #8]
   be9a4:	4798      	blx	r3
    _wire->endTransmission();
   be9a6:	6820      	ldr	r0, [r4, #0]
   be9a8:	f007 fcd3 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
   be9ac:	7d21      	ldrb	r1, [r4, #20]
   be9ae:	6820      	ldr	r0, [r4, #0]
   be9b0:	2201      	movs	r2, #1
   be9b2:	f007 fca6 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
   be9b6:	6820      	ldr	r0, [r4, #0]
   be9b8:	6803      	ldr	r3, [r0, #0]
   be9ba:	695b      	ldr	r3, [r3, #20]
   be9bc:	4798      	blx	r3
   be9be:	b2c5      	uxtb	r5, r0
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }
  return value;
}
   be9c0:	4628      	mov	r0, r5
   be9c2:	b005      	add	sp, #20
   be9c4:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
   be9c6:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   be9ca:	3301      	adds	r3, #1
   be9cc:	d10d      	bne.n	be9ea <_ZN15Adafruit_BME2805read8Eh+0x66>
   be9ce:	4b16      	ldr	r3, [pc, #88]	; (bea28 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   be9d0:	9300      	str	r3, [sp, #0]
   be9d2:	2300      	movs	r3, #0
   be9d4:	f88d 3004 	strb.w	r3, [sp, #4]
   be9d8:	4b14      	ldr	r3, [pc, #80]	; (bea2c <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   be9da:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   be9dc:	6840      	ldr	r0, [r0, #4]
   be9de:	2301      	movs	r3, #1
   be9e0:	4669      	mov	r1, sp
   be9e2:	f8ad 300c 	strh.w	r3, [sp, #12]
   be9e6:	f008 f95f 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   be9ea:	f994 0020 	ldrsb.w	r0, [r4, #32]
   be9ee:	2100      	movs	r1, #0
   be9f0:	b280      	uxth	r0, r0
   be9f2:	f008 fdf2 	bl	c75da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   be9f6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   be9fa:	4620      	mov	r0, r4
   be9fc:	f7ff fee9 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
   bea00:	2100      	movs	r1, #0
   bea02:	4620      	mov	r0, r4
   bea04:	f7ff fee5 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
   bea08:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   bea0a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   bea0e:	2101      	movs	r1, #1
   bea10:	b280      	uxth	r0, r0
   bea12:	f008 fde2 	bl	c75da <digitalWrite>
    if (_sck == -1)
   bea16:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
   bea1a:	3301      	adds	r3, #1
   bea1c:	d1d0      	bne.n	be9c0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
   bea1e:	6860      	ldr	r0, [r4, #4]
   bea20:	f008 f928 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
   bea24:	e7cc      	b.n	be9c0 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   bea26:	bf00      	nop
   bea28:	000cbe8c 	.word	0x000cbe8c
   bea2c:	0007a120 	.word	0x0007a120

000bea30 <_ZN15Adafruit_BME2806read16Eh>:
/*!
 *   @brief  Reads a 16 bit value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16(byte reg) {
   bea30:	b530      	push	{r4, r5, lr}
  uint16_t value;

  if (_cs == -1) {
   bea32:	f990 3020 	ldrsb.w	r3, [r0, #32]
   bea36:	3301      	adds	r3, #1
uint16_t Adafruit_BME280::read16(byte reg) {
   bea38:	b085      	sub	sp, #20
   bea3a:	4604      	mov	r4, r0
   bea3c:	460d      	mov	r5, r1
  if (_cs == -1) {
   bea3e:	d11f      	bne.n	bea80 <_ZN15Adafruit_BME2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
   bea40:	7d01      	ldrb	r1, [r0, #20]
   bea42:	6800      	ldr	r0, [r0, #0]
   bea44:	f007 fc60 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   bea48:	6820      	ldr	r0, [r4, #0]
   bea4a:	6803      	ldr	r3, [r0, #0]
   bea4c:	4629      	mov	r1, r5
   bea4e:	689b      	ldr	r3, [r3, #8]
   bea50:	4798      	blx	r3
    _wire->endTransmission();
   bea52:	6820      	ldr	r0, [r4, #0]
   bea54:	f007 fc7d 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
   bea58:	7d21      	ldrb	r1, [r4, #20]
   bea5a:	6820      	ldr	r0, [r4, #0]
   bea5c:	2202      	movs	r2, #2
   bea5e:	f007 fc50 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
   bea62:	6820      	ldr	r0, [r4, #0]
   bea64:	6803      	ldr	r3, [r0, #0]
   bea66:	695b      	ldr	r3, [r3, #20]
   bea68:	4798      	blx	r3
   bea6a:	4605      	mov	r5, r0
   bea6c:	6820      	ldr	r0, [r4, #0]
   bea6e:	6803      	ldr	r3, [r0, #0]
   bea70:	695b      	ldr	r3, [r3, #20]
   bea72:	4798      	blx	r3
   bea74:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   bea78:	b285      	uxth	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
   bea7a:	4628      	mov	r0, r5
   bea7c:	b005      	add	sp, #20
   bea7e:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
   bea80:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   bea84:	3301      	adds	r3, #1
   bea86:	d10d      	bne.n	beaa4 <_ZN15Adafruit_BME2806read16Eh+0x74>
   bea88:	4b19      	ldr	r3, [pc, #100]	; (beaf0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   bea8a:	9300      	str	r3, [sp, #0]
   bea8c:	2300      	movs	r3, #0
   bea8e:	f88d 3004 	strb.w	r3, [sp, #4]
   bea92:	4b18      	ldr	r3, [pc, #96]	; (beaf4 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   bea94:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   bea96:	6840      	ldr	r0, [r0, #4]
   bea98:	2301      	movs	r3, #1
   bea9a:	4669      	mov	r1, sp
   bea9c:	f8ad 300c 	strh.w	r3, [sp, #12]
   beaa0:	f008 f902 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   beaa4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   beaa8:	2100      	movs	r1, #0
   beaaa:	b280      	uxth	r0, r0
   beaac:	f008 fd95 	bl	c75da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   beab0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   beab4:	4620      	mov	r0, r4
   beab6:	f7ff fe8c 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
   beaba:	2100      	movs	r1, #0
   beabc:	4620      	mov	r0, r4
   beabe:	f7ff fe88 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
   beac2:	2100      	movs	r1, #0
   beac4:	4605      	mov	r5, r0
   beac6:	4620      	mov	r0, r4
   beac8:	f7ff fe83 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
   beacc:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   bead0:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
   bead2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   bead6:	2101      	movs	r1, #1
   bead8:	b280      	uxth	r0, r0
   beada:	f008 fd7e 	bl	c75da <digitalWrite>
    if (_sck == -1)
   beade:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
   beae2:	3301      	adds	r3, #1
   beae4:	d1c9      	bne.n	bea7a <_ZN15Adafruit_BME2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
   beae6:	6860      	ldr	r0, [r4, #4]
   beae8:	f008 f8c4 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
   beaec:	e7c5      	b.n	bea7a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   beaee:	bf00      	nop
   beaf0:	000cbe8c 	.word	0x000cbe8c
   beaf4:	0007a120 	.word	0x0007a120

000beaf8 <_ZN15Adafruit_BME2809read16_LEEh>:
/*!
 *   @brief  Reads a signed 16 bit little endian value over I2C or SPI
 *   @param reg the register address to read from
 *   @returns the 16 bit data value read from the device
 */
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   beaf8:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
   beafa:	f7ff ff99 	bl	bea30 <_ZN15Adafruit_BME2806read16Eh>
  return (temp >> 8) | (temp << 8);
   beafe:	ba40      	rev16	r0, r0
}
   beb00:	b280      	uxth	r0, r0
   beb02:	bd08      	pop	{r3, pc}

000beb04 <_ZN15Adafruit_BME2806read24Eh>:
/*!
 *   @brief  Reads a 24 bit value over I2C
 *   @param reg the register address to read from
 *   @returns the 24 bit data value read from the device
 */
uint32_t Adafruit_BME280::read24(byte reg) {
   beb04:	b530      	push	{r4, r5, lr}
  uint32_t value;

  if (_cs == -1) {
   beb06:	f990 3020 	ldrsb.w	r3, [r0, #32]
   beb0a:	3301      	adds	r3, #1
uint32_t Adafruit_BME280::read24(byte reg) {
   beb0c:	b085      	sub	sp, #20
   beb0e:	4604      	mov	r4, r0
   beb10:	460d      	mov	r5, r1
  if (_cs == -1) {
   beb12:	d123      	bne.n	beb5c <_ZN15Adafruit_BME2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
   beb14:	7d01      	ldrb	r1, [r0, #20]
   beb16:	6800      	ldr	r0, [r0, #0]
   beb18:	f007 fbf6 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   beb1c:	6820      	ldr	r0, [r4, #0]
   beb1e:	6803      	ldr	r3, [r0, #0]
   beb20:	4629      	mov	r1, r5
   beb22:	689b      	ldr	r3, [r3, #8]
   beb24:	4798      	blx	r3
    _wire->endTransmission();
   beb26:	6820      	ldr	r0, [r4, #0]
   beb28:	f007 fc13 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
   beb2c:	7d21      	ldrb	r1, [r4, #20]
   beb2e:	6820      	ldr	r0, [r4, #0]
   beb30:	2203      	movs	r2, #3
   beb32:	f007 fbe6 	bl	c6302 <_ZN7TwoWire11requestFromEhj>

    value = _wire->read();
   beb36:	6820      	ldr	r0, [r4, #0]
   beb38:	6803      	ldr	r3, [r0, #0]
   beb3a:	695b      	ldr	r3, [r3, #20]
   beb3c:	4798      	blx	r3
    value <<= 8;
   beb3e:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
   beb40:	6820      	ldr	r0, [r4, #0]
   beb42:	6803      	ldr	r3, [r0, #0]
   beb44:	695b      	ldr	r3, [r3, #20]
   beb46:	4798      	blx	r3
   beb48:	4328      	orrs	r0, r5
    value <<= 8;
   beb4a:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
   beb4c:	6820      	ldr	r0, [r4, #0]
   beb4e:	6803      	ldr	r3, [r0, #0]
   beb50:	695b      	ldr	r3, [r3, #20]
   beb52:	4798      	blx	r3
   beb54:	4305      	orrs	r5, r0
    if (_sck == -1)
      _spi->endTransaction(); // release the SPI bus
  }

  return value;
}
   beb56:	4628      	mov	r0, r5
   beb58:	b005      	add	sp, #20
   beb5a:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
   beb5c:	f990 3023 	ldrsb.w	r3, [r0, #35]	; 0x23
   beb60:	3301      	adds	r3, #1
   beb62:	d10d      	bne.n	beb80 <_ZN15Adafruit_BME2806read24Eh+0x7c>
   beb64:	4b1b      	ldr	r3, [pc, #108]	; (bebd4 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   beb66:	9300      	str	r3, [sp, #0]
   beb68:	2300      	movs	r3, #0
   beb6a:	f88d 3004 	strb.w	r3, [sp, #4]
   beb6e:	4b1a      	ldr	r3, [pc, #104]	; (bebd8 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
   beb70:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   beb72:	6840      	ldr	r0, [r0, #4]
   beb74:	2301      	movs	r3, #1
   beb76:	4669      	mov	r1, sp
   beb78:	f8ad 300c 	strh.w	r3, [sp, #12]
   beb7c:	f008 f894 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   beb80:	f994 0020 	ldrsb.w	r0, [r4, #32]
   beb84:	2100      	movs	r1, #0
   beb86:	b280      	uxth	r0, r0
   beb88:	f008 fd27 	bl	c75da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   beb8c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   beb90:	4620      	mov	r0, r4
   beb92:	f7ff fe1e 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
    value = spixfer(0);
   beb96:	2100      	movs	r1, #0
   beb98:	4620      	mov	r0, r4
   beb9a:	f7ff fe1a 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
    value |= spixfer(0);
   beb9e:	2100      	movs	r1, #0
    value <<= 8;
   beba0:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
   beba2:	4620      	mov	r0, r4
   beba4:	f7ff fe15 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
   beba8:	4328      	orrs	r0, r5
    value <<= 8;
   bebaa:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
   bebac:	2100      	movs	r1, #0
   bebae:	4620      	mov	r0, r4
   bebb0:	f7ff fe0f 	bl	be7d2 <_ZN15Adafruit_BME2807spixferEh>
   bebb4:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
   bebb6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   bebba:	2101      	movs	r1, #1
   bebbc:	b280      	uxth	r0, r0
   bebbe:	f008 fd0c 	bl	c75da <digitalWrite>
    if (_sck == -1)
   bebc2:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
   bebc6:	3301      	adds	r3, #1
   bebc8:	d1c5      	bne.n	beb56 <_ZN15Adafruit_BME2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
   bebca:	6860      	ldr	r0, [r4, #4]
   bebcc:	f008 f852 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
  return value;
   bebd0:	e7c1      	b.n	beb56 <_ZN15Adafruit_BME2806read24Eh+0x52>
   bebd2:	bf00      	nop
   bebd4:	000cbe8c 	.word	0x000cbe8c
   bebd8:	0007a120 	.word	0x0007a120

000bebdc <_ZN15Adafruit_BME28016readCoefficientsEv>:
}

/*!
 *   @brief  Reads the factory-set coefficients
 */
void Adafruit_BME280::readCoefficients(void) {
   bebdc:	b538      	push	{r3, r4, r5, lr}
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   bebde:	2188      	movs	r1, #136	; 0x88
void Adafruit_BME280::readCoefficients(void) {
   bebe0:	4604      	mov	r4, r0
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   bebe2:	f7ff ff89 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   bebe6:	218a      	movs	r1, #138	; 0x8a
  _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   bebe8:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
   bebea:	4620      	mov	r0, r4
   bebec:	f7ff ff84 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bebf0:	218c      	movs	r1, #140	; 0x8c
  _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   bebf2:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
   bebf4:	4620      	mov	r0, r4
   bebf6:	f7ff ff7f 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   bebfa:	218e      	movs	r1, #142	; 0x8e
  _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   bebfc:	85a0      	strh	r0, [r4, #44]	; 0x2c
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   bebfe:	4620      	mov	r0, r4
   bec00:	f7ff ff7a 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   bec04:	2190      	movs	r1, #144	; 0x90
  _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   bec06:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
   bec08:	4620      	mov	r0, r4
   bec0a:	f7ff ff75 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec0e:	2192      	movs	r1, #146	; 0x92
  _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   bec10:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
   bec12:	4620      	mov	r0, r4
   bec14:	f7ff ff70 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec18:	2194      	movs	r1, #148	; 0x94
  _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   bec1a:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
   bec1c:	4620      	mov	r0, r4
   bec1e:	f7ff ff6b 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec22:	2196      	movs	r1, #150	; 0x96
  _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   bec24:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
   bec26:	4620      	mov	r0, r4
   bec28:	f7ff ff66 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec2c:	2198      	movs	r1, #152	; 0x98
  _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   bec2e:	86e0      	strh	r0, [r4, #54]	; 0x36
  return (int16_t)read16_LE(reg);
   bec30:	4620      	mov	r0, r4
   bec32:	f7ff ff61 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec36:	219a      	movs	r1, #154	; 0x9a
  _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   bec38:	8720      	strh	r0, [r4, #56]	; 0x38
  return (int16_t)read16_LE(reg);
   bec3a:	4620      	mov	r0, r4
   bec3c:	f7ff ff5c 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec40:	219c      	movs	r1, #156	; 0x9c
  _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   bec42:	8760      	strh	r0, [r4, #58]	; 0x3a
  return (int16_t)read16_LE(reg);
   bec44:	4620      	mov	r0, r4
   bec46:	f7ff ff57 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
   bec4a:	219e      	movs	r1, #158	; 0x9e
  _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   bec4c:	87a0      	strh	r0, [r4, #60]	; 0x3c
  return (int16_t)read16_LE(reg);
   bec4e:	4620      	mov	r0, r4
   bec50:	f7ff ff52 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   bec54:	21a1      	movs	r1, #161	; 0xa1
  _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   bec56:	87e0      	strh	r0, [r4, #62]	; 0x3e
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   bec58:	4620      	mov	r0, r4
   bec5a:	f7ff fe93 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
  return (int16_t)read16_LE(reg);
   bec5e:	21e1      	movs	r1, #225	; 0xe1
  _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   bec60:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return (int16_t)read16_LE(reg);
   bec64:	4620      	mov	r0, r4
   bec66:	f7ff ff47 	bl	beaf8 <_ZN15Adafruit_BME2809read16_LEEh>
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   bec6a:	21e3      	movs	r1, #227	; 0xe3
  _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   bec6c:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   bec70:	4620      	mov	r0, r4
   bec72:	f7ff fe87 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
   bec76:	21e4      	movs	r1, #228	; 0xe4
  _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   bec78:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
   bec7c:	4620      	mov	r0, r4
   bec7e:	f7ff fe81 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
   bec82:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
   bec84:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
   bec86:	4620      	mov	r0, r4
   bec88:	f7ff fe7c 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
   bec8c:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H4 + 1) & 0xF);
   bec8e:	f000 000f 	and.w	r0, r0, #15
  _bme280_calib.dig_H4 = ((int8_t)read8(BME280_REGISTER_DIG_H4) << 4) |
   bec92:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   bec96:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
   bec9a:	21e6      	movs	r1, #230	; 0xe6
   bec9c:	4620      	mov	r0, r4
   bec9e:	f7ff fe71 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
   beca2:	21e5      	movs	r1, #229	; 0xe5
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
   beca4:	4605      	mov	r5, r0
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
   beca6:	4620      	mov	r0, r4
   beca8:	f7ff fe6c 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
   becac:	b26d      	sxtb	r5, r5
                         (read8(BME280_REGISTER_DIG_H5) >> 4);
   becae:	f3c0 1007 	ubfx	r0, r0, #4, #8
  _bme280_calib.dig_H5 = ((int8_t)read8(BME280_REGISTER_DIG_H5 + 1) << 4) |
   becb2:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   becb6:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
  _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   becba:	21e7      	movs	r1, #231	; 0xe7
   becbc:	4620      	mov	r0, r4
   becbe:	f7ff fe61 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
   becc2:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
}
   becc6:	bd38      	pop	{r3, r4, r5, pc}

000becc8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:

/*!
 *   @brief return true if chip is busy reading cal data
 *   @returns true if reading calibration, false otherwise
 */
bool Adafruit_BME280::isReadingCalibration(void) {
   becc8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   becca:	21f3      	movs	r1, #243	; 0xf3
   beccc:	f7ff fe5a 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   becd0:	f000 0001 	and.w	r0, r0, #1
   becd4:	bd08      	pop	{r3, pc}

000becd6 <_ZN15Adafruit_BME2804initEv>:
bool Adafruit_BME280::init() {
   becd6:	b530      	push	{r4, r5, lr}
   becd8:	4604      	mov	r4, r0
  if (_cs == -1) {
   becda:	f990 0020 	ldrsb.w	r0, [r0, #32]
   becde:	1c42      	adds	r2, r0, #1
bool Adafruit_BME280::init() {
   bece0:	b085      	sub	sp, #20
  if (_cs == -1) {
   bece2:	d129      	bne.n	bed38 <_ZN15Adafruit_BME2804initEv+0x62>
    _wire->begin();
   bece4:	6820      	ldr	r0, [r4, #0]
   bece6:	f007 fad9 	bl	c629c <_ZN7TwoWire5beginEv>
  _sensorID = read8(BME280_REGISTER_CHIPID);
   becea:	21d0      	movs	r1, #208	; 0xd0
   becec:	4620      	mov	r0, r4
   becee:	f7ff fe49 	bl	be984 <_ZN15Adafruit_BME2805read8Eh>
  if (_sensorID != 0x60)
   becf2:	2860      	cmp	r0, #96	; 0x60
  _sensorID = read8(BME280_REGISTER_CHIPID);
   becf4:	61a0      	str	r0, [r4, #24]
  if (_sensorID != 0x60)
   becf6:	d142      	bne.n	bed7e <_ZN15Adafruit_BME2804initEv+0xa8>
  write8(BME280_REGISTER_SOFTRESET, 0xB6);
   becf8:	22b6      	movs	r2, #182	; 0xb6
   becfa:	21e0      	movs	r1, #224	; 0xe0
   becfc:	4620      	mov	r0, r4
   becfe:	f7ff fd9d 	bl	be83c <_ZN15Adafruit_BME2806write8Ehh>
  delay(10);
   bed02:	200a      	movs	r0, #10
   bed04:	f006 fd14 	bl	c5730 <delay>
  while (isReadingCalibration())
   bed08:	4620      	mov	r0, r4
   bed0a:	f7ff ffdd 	bl	becc8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   bed0e:	4605      	mov	r5, r0
   bed10:	2800      	cmp	r0, #0
   bed12:	d1f6      	bne.n	bed02 <_ZN15Adafruit_BME2804initEv+0x2c>
  readCoefficients(); // read trimming parameters, see DS 4.2.2
   bed14:	4620      	mov	r0, r4
   bed16:	f7ff ff61 	bl	bebdc <_ZN15Adafruit_BME28016readCoefficientsEv>
  setSampling(); // use defaults
   bed1a:	2305      	movs	r3, #5
   bed1c:	9300      	str	r3, [sp, #0]
   bed1e:	461a      	mov	r2, r3
   bed20:	2103      	movs	r1, #3
   bed22:	4620      	mov	r0, r4
   bed24:	e9cd 5501 	strd	r5, r5, [sp, #4]
   bed28:	f7ff fddc 	bl	be8e4 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
   bed2c:	2064      	movs	r0, #100	; 0x64
   bed2e:	f006 fcff 	bl	c5730 <delay>
  return true;
   bed32:	2001      	movs	r0, #1
}
   bed34:	b005      	add	sp, #20
   bed36:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
   bed38:	2101      	movs	r1, #1
   bed3a:	b280      	uxth	r0, r0
   bed3c:	f008 fc4d 	bl	c75da <digitalWrite>
    pinMode(_cs, OUTPUT);
   bed40:	f994 0020 	ldrsb.w	r0, [r4, #32]
   bed44:	2101      	movs	r1, #1
   bed46:	b280      	uxth	r0, r0
   bed48:	f008 fc36 	bl	c75b8 <pinMode>
    if (_sck == -1) {
   bed4c:	f994 0023 	ldrsb.w	r0, [r4, #35]	; 0x23
   bed50:	1c43      	adds	r3, r0, #1
   bed52:	d103      	bne.n	bed5c <_ZN15Adafruit_BME2804initEv+0x86>
      _spi->begin();
   bed54:	6860      	ldr	r0, [r4, #4]
   bed56:	f007 ff53 	bl	c6c00 <_ZN8SPIClass5beginEv>
   bed5a:	e7c6      	b.n	becea <_ZN15Adafruit_BME2804initEv+0x14>
      pinMode(_sck, OUTPUT);
   bed5c:	2101      	movs	r1, #1
   bed5e:	b280      	uxth	r0, r0
   bed60:	f008 fc2a 	bl	c75b8 <pinMode>
      pinMode(_mosi, OUTPUT);
   bed64:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   bed68:	2101      	movs	r1, #1
   bed6a:	b280      	uxth	r0, r0
   bed6c:	f008 fc24 	bl	c75b8 <pinMode>
      pinMode(_miso, INPUT);
   bed70:	f994 0022 	ldrsb.w	r0, [r4, #34]	; 0x22
   bed74:	2100      	movs	r1, #0
   bed76:	b280      	uxth	r0, r0
   bed78:	f008 fc1e 	bl	c75b8 <pinMode>
   bed7c:	e7b5      	b.n	becea <_ZN15Adafruit_BME2804initEv+0x14>
    return false;
   bed7e:	2000      	movs	r0, #0
   bed80:	e7d8      	b.n	bed34 <_ZN15Adafruit_BME2804initEv+0x5e>

000bed82 <_ZN15Adafruit_BME2805beginEhP7TwoWire>:
  _i2caddr = addr;
   bed82:	7501      	strb	r1, [r0, #20]
  _wire = theWire;
   bed84:	6002      	str	r2, [r0, #0]
  status = init();
   bed86:	f7ff bfa6 	b.w	becd6 <_ZN15Adafruit_BME2804initEv>
	...

000bed8c <_ZN15Adafruit_BME28015readTemperatureEv>:

/*!
 *   @brief  Returns the temperature from the sensor
 *   @returns the temperature read from the device
 */
float Adafruit_BME280::readTemperature(void) {
   bed8c:	b538      	push	{r3, r4, r5, lr}
  int32_t var1, var2;

  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   bed8e:	21fa      	movs	r1, #250	; 0xfa
float Adafruit_BME280::readTemperature(void) {
   bed90:	4604      	mov	r4, r0
  int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   bed92:	f7ff feb7 	bl	beb04 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_T == 0x800000) // value in case temp measurement was disabled
   bed96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   bed9a:	d021      	beq.n	bede0 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    return NAN;
  adc_T >>= 4;

  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
   bed9c:	8d21      	ldrh	r1, [r4, #40]	; 0x28
         14;

  t_fine = var1 + var2 + t_fine_adjust;

  float T = (t_fine * 5 + 128) >> 8;
  return T / 100;
   bed9e:	ed9f 7a12 	vldr	s14, [pc, #72]	; bede8 <_ZN15Adafruit_BME28015readTemperatureEv+0x5c>
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
   beda2:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
   beda6:	004d      	lsls	r5, r1, #1
          ((int32_t)_bme280_calib.dig_T2)) >>
   beda8:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
  var1 = ((((adc_T >> 3) - ((int32_t)_bme280_calib.dig_T1 << 1))) *
   bedac:	ebc5 13e0 	rsb	r3, r5, r0, asr #7
   bedb0:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
   bedb2:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bme280_calib.dig_T3)) >>
   bedb6:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
            ((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1))) >>
   bedba:	131b      	asrs	r3, r3, #12
           12) *
   bedbc:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bme280_calib.dig_T1)) *
   bedbe:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2 + t_fine_adjust;
   bedc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bedc2:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   bedc6:	4413      	add	r3, r2
   bedc8:	61e3      	str	r3, [r4, #28]
  float T = (t_fine * 5 + 128) >> 8;
   bedca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   bedce:	3380      	adds	r3, #128	; 0x80
   bedd0:	121b      	asrs	r3, r3, #8
   bedd2:	ee07 3a90 	vmov	s15, r3
   bedd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return T / 100;
   bedda:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   bedde:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
   bede0:	ed9f 0a02 	vldr	s0, [pc, #8]	; bedec <_ZN15Adafruit_BME28015readTemperatureEv+0x60>
   bede4:	e7fb      	b.n	bedde <_ZN15Adafruit_BME28015readTemperatureEv+0x52>
   bede6:	bf00      	nop
   bede8:	42c80000 	.word	0x42c80000
   bedec:	7fc00000 	.word	0x7fc00000

000bedf0 <_ZN15Adafruit_BME28012readPressureEv>:

/*!
 *   @brief  Returns the pressure from the sensor
 *   @returns the pressure value (in Pascal) read from the device
 */
float Adafruit_BME280::readPressure(void) {
   bedf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bedf4:	4605      	mov	r5, r0
  int64_t var1, var2, p;

  readTemperature(); // must be done first to get t_fine
   bedf6:	f7ff ffc9 	bl	bed8c <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   bedfa:	21f7      	movs	r1, #247	; 0xf7
   bedfc:	4628      	mov	r0, r5
   bedfe:	f7ff fe81 	bl	beb04 <_ZN15Adafruit_BME2806read24Eh>
  if (adc_P == 0x800000) // value in case pressure measurement was disabled
   bee02:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   bee06:	f000 80b6 	beq.w	bef76 <_ZN15Adafruit_BME28012readPressureEv+0x186>
    return NAN;
  adc_P >>= 4;

  var1 = ((int64_t)t_fine) - 128000;
   bee0a:	69e9      	ldr	r1, [r5, #28]
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
   bee0c:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
  var1 = ((int64_t)t_fine) - 128000;
   bee10:	ea4f 7ee1 	mov.w	lr, r1, asr #31
   bee14:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   bee18:	f14e 3eff 	adc.w	lr, lr, #4294967295	; 0xffffffff
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
   bee1c:	17dc      	asrs	r4, r3, #31
   bee1e:	fb03 f20e 	mul.w	r2, r3, lr
   bee22:	fb01 2204 	mla	r2, r1, r4, r2
   bee26:	fba3 3401 	umull	r3, r4, r3, r1
   bee2a:	4422      	add	r2, r4
   bee2c:	0312      	lsls	r2, r2, #12
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   bee2e:	fba1 7801 	umull	r7, r8, r1, r1
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
   bee32:	031c      	lsls	r4, r3, #12
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   bee34:	fb01 f60e 	mul.w	r6, r1, lr
         ((var1 * (int64_t)_bme280_calib.dig_P2) << 12);
   bee38:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
   bee3c:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   bee40:	eb08 0846 	add.w	r8, r8, r6, lsl #1
  var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3) >> 8) +
   bee44:	ea4f 7ce3 	mov.w	ip, r3, asr #31
   bee48:	fb03 f608 	mul.w	r6, r3, r8
   bee4c:	fb07 660c 	mla	r6, r7, ip, r6
   bee50:	fba3 3c07 	umull	r3, ip, r3, r7
   bee54:	4466      	add	r6, ip
   bee56:	0a1b      	lsrs	r3, r3, #8
   bee58:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   bee5c:	191b      	adds	r3, r3, r4
   bee5e:	eb42 2226 	adc.w	r2, r2, r6, asr #8
  var1 =
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
   bee62:	8dee      	ldrh	r6, [r5, #46]	; 0x2e
   bee64:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   bee68:	fba3 3406 	umull	r3, r4, r3, r6
   bee6c:	fb06 4402 	mla	r4, r6, r2, r4
  var1 =
   bee70:	17e3      	asrs	r3, r4, #31
   bee72:	1062      	asrs	r2, r4, #1

  if (var1 == 0) {
   bee74:	ea53 0464 	orrs.w	r4, r3, r4, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bme280_calib.dig_P1) >> 33;
   bee78:	f04f 0c00 	mov.w	ip, #0
  if (var1 == 0) {
   bee7c:	d07e      	beq.n	bef7c <_ZN15Adafruit_BME28012readPressureEv+0x18c>
  var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   bee7e:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
   bee82:	fb04 f608 	mul.w	r6, r4, r8
   bee86:	ea4f 79e4 	mov.w	r9, r4, asr #31
   bee8a:	fb07 6609 	mla	r6, r7, r9, r6
   bee8e:	fba4 4707 	umull	r4, r7, r4, r7
   bee92:	443e      	add	r6, r7
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
   bee94:	f9b5 7036 	ldrsh.w	r7, [r5, #54]	; 0x36
   bee98:	ea4f 78e7 	mov.w	r8, r7, asr #31
   bee9c:	fb07 fe0e 	mul.w	lr, r7, lr
   beea0:	fb01 ee08 	mla	lr, r1, r8, lr
   beea4:	fba7 7101 	umull	r7, r1, r7, r1
   beea8:	4471      	add	r1, lr
   beeaa:	0449      	lsls	r1, r1, #17
   beeac:	ea41 31d7 	orr.w	r1, r1, r7, lsr #15
  adc_P >>= 4;
   beeb0:	1100      	asrs	r0, r0, #4
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
   beeb2:	047f      	lsls	r7, r7, #17
   beeb4:	193f      	adds	r7, r7, r4
    return 0; // avoid exception caused by division by zero
  }
  p = 1048576 - adc_P;
   beeb6:	f5c0 1480 	rsb	r4, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bme280_calib.dig_P5) << 17);
   beeba:	eb46 0601 	adc.w	r6, r6, r1
  p = (((p << 31) - var2) * 3125) / var1;
   beebe:	f004 4000 	and.w	r0, r4, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
   beec2:	f9b5 1034 	ldrsh.w	r1, [r5, #52]	; 0x34
   beec6:	eb1c 0707 	adds.w	r7, ip, r7
  p = (((p << 31) - var2) * 3125) / var1;
   beeca:	ea40 0054 	orr.w	r0, r0, r4, lsr #1
   beece:	07e4      	lsls	r4, r4, #31
   beed0:	1be4      	subs	r4, r4, r7
  var2 = var2 + (((int64_t)_bme280_calib.dig_P4) << 35);
   beed2:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
   beed6:	f640 4135 	movw	r1, #3125	; 0xc35
   beeda:	eb60 0606 	sbc.w	r6, r0, r6
   beede:	fba4 0401 	umull	r0, r4, r4, r1
   beee2:	fb01 4106 	mla	r1, r1, r6, r4
   beee6:	f7f5 fead 	bl	b4c44 <__aeabi_ldivmod>
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
   beeea:	f9b5 203e 	ldrsh.w	r2, [r5, #62]	; 0x3e
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   beeee:	f9b5 603c 	ldrsh.w	r6, [r5, #60]	; 0x3c
  var1 = (((int64_t)_bme280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
   beef2:	ea4f 3c61 	mov.w	ip, r1, asr #13
   beef6:	0b43      	lsrs	r3, r0, #13
   beef8:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   beefc:	fb02 f70c 	mul.w	r7, r2, ip
   bef00:	17d4      	asrs	r4, r2, #31
   bef02:	fb03 7704 	mla	r7, r3, r4, r7
   bef06:	fba2 2403 	umull	r2, r4, r2, r3
   bef0a:	443c      	add	r4, r7
   bef0c:	fb02 f70c 	mul.w	r7, r2, ip
   bef10:	fb03 7704 	mla	r7, r3, r4, r7
   bef14:	fba2 2303 	umull	r2, r3, r2, r3
   bef18:	441f      	add	r7, r3
   bef1a:	0e53      	lsrs	r3, r2, #25
   bef1c:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7

  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
   bef20:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   bef22:	ea4f 72e6 	mov.w	r2, r6, asr #31
   bef26:	fb06 f401 	mul.w	r4, r6, r1
  p = (((p << 31) - var2) * 3125) / var1;
   bef2a:	4686      	mov	lr, r0
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
   bef2c:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   bef30:	fb02 4100 	mla	r1, r2, r0, r4
   bef34:	fba6 060e 	umull	r0, r6, r6, lr
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
   bef38:	f9b5 403a 	ldrsh.w	r4, [r5, #58]	; 0x3a
  var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   bef3c:	4431      	add	r1, r6
   bef3e:	0cc0      	lsrs	r0, r0, #19
   bef40:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7) << 4);
   bef44:	1818      	adds	r0, r3, r0
   bef46:	ea4f 75e4 	mov.w	r5, r4, asr #31
   bef4a:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   bef4e:	0a00      	lsrs	r0, r0, #8
   bef50:	012d      	lsls	r5, r5, #4
   bef52:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   bef56:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   bef5a:	0124      	lsls	r4, r4, #4
   bef5c:	1820      	adds	r0, r4, r0
  return (float)p / 256;
   bef5e:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   bef62:	f7f5 fe31 	bl	b4bc8 <__aeabi_l2f>
   bef66:	ed9f 0a07 	vldr	s0, [pc, #28]	; bef84 <_ZN15Adafruit_BME28012readPressureEv+0x194>
   bef6a:	ee07 0a90 	vmov	s15, r0
   bef6e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   bef72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NAN;
   bef76:	ed9f 0a04 	vldr	s0, [pc, #16]	; bef88 <_ZN15Adafruit_BME28012readPressureEv+0x198>
   bef7a:	e7fa      	b.n	bef72 <_ZN15Adafruit_BME28012readPressureEv+0x182>
    return 0; // avoid exception caused by division by zero
   bef7c:	ed9f 0a03 	vldr	s0, [pc, #12]	; bef8c <_ZN15Adafruit_BME28012readPressureEv+0x19c>
   bef80:	e7f7      	b.n	bef72 <_ZN15Adafruit_BME28012readPressureEv+0x182>
   bef82:	bf00      	nop
   bef84:	3b800000 	.word	0x3b800000
   bef88:	7fc00000 	.word	0x7fc00000
   bef8c:	00000000 	.word	0x00000000

000bef90 <_ZN15Adafruit_BME28012readHumidityEv>:

/*!
 *  @brief  Returns the humidity from the sensor
 *  @returns the humidity value read from the device
 */
float Adafruit_BME280::readHumidity(void) {
   bef90:	b538      	push	{r3, r4, r5, lr}
   bef92:	4604      	mov	r4, r0
  readTemperature(); // must be done first to get t_fine
   bef94:	f7ff fefa 	bl	bed8c <_ZN15Adafruit_BME28015readTemperatureEv>

  int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   bef98:	21fd      	movs	r1, #253	; 0xfd
   bef9a:	4620      	mov	r0, r4
   bef9c:	f7ff fd48 	bl	bea30 <_ZN15Adafruit_BME2806read16Eh>
  if (adc_H == 0x8000) // value in case humidity measurement was disabled
   befa0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   befa4:	d038      	beq.n	bf018 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    return NAN;

  int32_t v_x1_u32r;

  v_x1_u32r = (t_fine - ((int32_t)76800));
   befa6:	69e1      	ldr	r1, [r4, #28]

  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
   befa8:	f9b4 2048 	ldrsh.w	r2, [r4, #72]	; 0x48
  v_x1_u32r = (t_fine - ((int32_t)76800));
   befac:	f5a1 3596 	sub.w	r5, r1, #76800	; 0x12c00
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   befb0:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   befb4:	0509      	lsls	r1, r1, #20
   befb6:	ebc1 3380 	rsb	r3, r1, r0, lsl #14
   befba:	fb05 3312 	mls	r3, r5, r2, r3
                  (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) +
   befbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
                 ((int32_t)16384)) >>
   befc2:	13da      	asrs	r2, r3, #15
                15) *
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
   befc4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   befc8:	f994 104a 	ldrsb.w	r1, [r4, #74]	; 0x4a
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
   befcc:	436b      	muls	r3, r5
   befce:	12db      	asrs	r3, r3, #11
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   befd0:	4369      	muls	r1, r5
   befd2:	1289      	asrs	r1, r1, #10
                    (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) +
   befd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
               (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   befd8:	434b      	muls	r3, r1
                     ((int32_t)32768))) >>
   befda:	129b      	asrs	r3, r3, #10
                   10) +
                  ((int32_t)2097152)) *
                     ((int32_t)_bme280_calib.dig_H2) +
   befdc:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
                   10) +
   befe0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
                  ((int32_t)2097152)) *
   befe4:	434b      	muls	r3, r1
                     ((int32_t)_bme280_calib.dig_H2) +
   befe6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
                 8192) >>
   befea:	139b      	asrs	r3, r3, #14
  v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   befec:	4353      	muls	r3, r2
                14));

  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   befee:	13da      	asrs	r2, r3, #15
                             ((int32_t)_bme280_calib.dig_H1)) >>
   beff0:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   beff4:	4352      	muls	r2, r2
   beff6:	11d2      	asrs	r2, r2, #7
   beff8:	434a      	muls	r2, r1
   beffa:	eba3 1322 	sub.w	r3, r3, r2, asr #4
                            4));

  v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   beffe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   bf002:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   bf006:	bfa8      	it	ge
   bf008:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
  float h = (v_x1_u32r >> 12);
   bf00c:	131b      	asrs	r3, r3, #12
   bf00e:	ee00 3a10 	vmov	s0, r3
  return h / 1024.0;
   bf012:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   bf016:	bd38      	pop	{r3, r4, r5, pc}
    return NAN;
   bf018:	ed9f 0a01 	vldr	s0, [pc, #4]	; bf020 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   bf01c:	e7fb      	b.n	bf016 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   bf01e:	bf00      	nop
   bf020:	7fc00000 	.word	0x7fc00000

000bf024 <_ZN24Adafruit_BMP280_PressureD1Ev>:
  int _sensorID = 280;
  Adafruit_BMP280 *_theBMP280 = NULL;
};

/** Adafruit Unified Sensor interface for pressure component of BMP280 */
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
   bf024:	4770      	bx	lr

000bf026 <_ZN20Adafruit_BMP280_TempD1Ev>:
class Adafruit_BMP280_Temp : public Adafruit_Sensor {
   bf026:	4770      	bx	lr

000bf028 <_ZN20Adafruit_BMP280_TempD0Ev>:
   bf028:	b510      	push	{r4, lr}
   bf02a:	2110      	movs	r1, #16
   bf02c:	4604      	mov	r4, r0
   bf02e:	f7f6 f82c 	bl	b508a <_ZdlPvj>
   bf032:	4620      	mov	r0, r4
   bf034:	bd10      	pop	{r4, pc}

000bf036 <_ZN24Adafruit_BMP280_PressureD0Ev>:
class Adafruit_BMP280_Pressure : public Adafruit_Sensor {
   bf036:	b510      	push	{r4, lr}
   bf038:	2110      	movs	r1, #16
   bf03a:	4604      	mov	r4, r0
   bf03c:	f7f6 f825 	bl	b508a <_ZdlPvj>
   bf040:	4620      	mov	r0, r4
   bf042:	bd10      	pop	{r4, pc}

000bf044 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's temperature sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Temp::getSensor(sensor_t *sensor) {
   bf044:	b538      	push	{r3, r4, r5, lr}
   bf046:	460c      	mov	r4, r1
   bf048:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   bf04a:	2220      	movs	r2, #32
   bf04c:	2100      	movs	r1, #0
   bf04e:	f104 0008 	add.w	r0, r4, #8
   bf052:	f00b f8b7 	bl	ca1c4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
   bf056:	4909      	ldr	r1, [pc, #36]	; (bf07c <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x38>)
   bf058:	220b      	movs	r2, #11
   bf05a:	4620      	mov	r0, r4
   bf05c:	f00b f94b 	bl	ca2f6 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   bf060:	2301      	movs	r3, #1
   bf062:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   bf064:	68ab      	ldr	r3, [r5, #8]
   bf066:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   bf068:	230d      	movs	r3, #13
   bf06a:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = -40.0; /* Temperature range -40 ~ +85 C  */
   bf06c:	4b04      	ldr	r3, [pc, #16]	; (bf080 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x3c>)
   bf06e:	61e3      	str	r3, [r4, #28]
  sensor->max_value = +85.0;
   bf070:	4b04      	ldr	r3, [pc, #16]	; (bf084 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x40>)
   bf072:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.01; /*  0.01 C */
   bf074:	4b04      	ldr	r3, [pc, #16]	; (bf088 <_ZN20Adafruit_BMP280_Temp9getSensorEP8sensor_t+0x44>)
   bf076:	6223      	str	r3, [r4, #32]
}
   bf078:	bd38      	pop	{r3, r4, r5, pc}
   bf07a:	bf00      	nop
   bf07c:	000ca8ae 	.word	0x000ca8ae
   bf080:	c2200000 	.word	0xc2200000
   bf084:	42aa0000 	.word	0x42aa0000
   bf088:	3c23d70a 	.word	0x3c23d70a

000bf08c <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data for the BMP280's pressure sensor
*/
/**************************************************************************/
void Adafruit_BMP280_Pressure::getSensor(sensor_t *sensor) {
   bf08c:	b538      	push	{r3, r4, r5, lr}
   bf08e:	460c      	mov	r4, r1
   bf090:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   bf092:	2220      	movs	r2, #32
   bf094:	2100      	movs	r1, #0
   bf096:	f104 0008 	add.w	r0, r4, #8
   bf09a:	f00b f893 	bl	ca1c4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "BMP280", sizeof(sensor->name) - 1);
   bf09e:	4909      	ldr	r1, [pc, #36]	; (bf0c4 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x38>)
   bf0a0:	220b      	movs	r2, #11
   bf0a2:	4620      	mov	r0, r4
   bf0a4:	f00b f927 	bl	ca2f6 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   bf0a8:	2301      	movs	r3, #1
   bf0aa:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   bf0ac:	68ab      	ldr	r3, [r5, #8]
   bf0ae:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_PRESSURE;
   bf0b0:	2306      	movs	r3, #6
   bf0b2:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->min_value = 300.0; /* 300 ~ 1100 hPa  */
   bf0b4:	4b04      	ldr	r3, [pc, #16]	; (bf0c8 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x3c>)
   bf0b6:	61e3      	str	r3, [r4, #28]
  sensor->max_value = 1100.0;
   bf0b8:	4b04      	ldr	r3, [pc, #16]	; (bf0cc <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x40>)
   bf0ba:	61a3      	str	r3, [r4, #24]
  sensor->resolution = 0.012; /* 0.12 hPa relative */
   bf0bc:	4b04      	ldr	r3, [pc, #16]	; (bf0d0 <_ZN24Adafruit_BMP280_Pressure9getSensorEP8sensor_t+0x44>)
   bf0be:	6223      	str	r3, [r4, #32]
}
   bf0c0:	bd38      	pop	{r3, r4, r5, pc}
   bf0c2:	bf00      	nop
   bf0c4:	000ca8ae 	.word	0x000ca8ae
   bf0c8:	43960000 	.word	0x43960000
   bf0cc:	44898000 	.word	0x44898000
   bf0d0:	3c449ba6 	.word	0x3c449ba6

000bf0d4 <_ZN15Adafruit_BMP280C1EP7TwoWire>:
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
   bf0d4:	2300      	movs	r3, #0
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
   bf0d6:	b510      	push	{r4, lr}
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
   bf0d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bf0dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
Adafruit_BMP280::Adafruit_BMP280(TwoWire *theWire)
   bf0e0:	4604      	mov	r4, r0
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1) {
   bf0e2:	61c3      	str	r3, [r0, #28]
  _wire = theWire;
   bf0e4:	6001      	str	r1, [r0, #0]
  temp_sensor = new Adafruit_BMP280_Temp(this);
   bf0e6:	2010      	movs	r0, #16
   bf0e8:	f7f5 ffcb 	bl	b5082 <_Znwj>
   bf0ec:	b128      	cbz	r0, bf0fa <_ZN15Adafruit_BMP280C1EP7TwoWire+0x26>
  Adafruit_BMP280_Temp(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
   bf0ee:	4b09      	ldr	r3, [pc, #36]	; (bf114 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x40>)
   bf0f0:	6003      	str	r3, [r0, #0]
   bf0f2:	f44f 738c 	mov.w	r3, #280	; 0x118
   bf0f6:	e9c0 3402 	strd	r3, r4, [r0, #8]
   bf0fa:	60a0      	str	r0, [r4, #8]
  pressure_sensor = new Adafruit_BMP280_Pressure(this);
   bf0fc:	2010      	movs	r0, #16
   bf0fe:	f7f5 ffc0 	bl	b5082 <_Znwj>
   bf102:	b120      	cbz	r0, bf10e <_ZN15Adafruit_BMP280C1EP7TwoWire+0x3a>
public:
  /** @brief Create an Adafruit_Sensor compatible object for the pressure sensor
      @param parent A pointer to the BMP280 class */
  Adafruit_BMP280_Pressure(Adafruit_BMP280 *parent) { _theBMP280 = parent; }
   bf104:	4b04      	ldr	r3, [pc, #16]	; (bf118 <_ZN15Adafruit_BMP280C1EP7TwoWire+0x44>)
   bf106:	6003      	str	r3, [r0, #0]
   bf108:	2300      	movs	r3, #0
   bf10a:	e9c0 3402 	strd	r3, r4, [r0, #8]
   bf10e:	60e0      	str	r0, [r4, #12]
}
   bf110:	4620      	mov	r0, r4
   bf112:	bd10      	pop	{r4, pc}
   bf114:	000cc0cc 	.word	0x000cc0cc
   bf118:	000cc0e8 	.word	0x000cc0e8

000bf11c <_ZN15Adafruit_BMP2807spixferEh>:
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
   bf11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (_sck == -1)
   bf120:	f990 301f 	ldrsb.w	r3, [r0, #31]
   bf124:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::spixfer(uint8_t x) {
   bf126:	4604      	mov	r4, r0
   bf128:	460f      	mov	r7, r1
  if (_sck == -1)
   bf12a:	d104      	bne.n	bf136 <_ZN15Adafruit_BMP2807spixferEh+0x1a>
}
   bf12c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return _spi->transfer(x);
   bf130:	6840      	ldr	r0, [r0, #4]
   bf132:	f007 be27 	b.w	c6d84 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   bf136:	2500      	movs	r5, #0
  for (int i = 7; i >= 0; i--) {
   bf138:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1 << i));
   bf13a:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   bf13e:	f994 001f 	ldrsb.w	r0, [r4, #31]
   bf142:	2100      	movs	r1, #0
   bf144:	b280      	uxth	r0, r0
   bf146:	f008 fa48 	bl	c75da <digitalWrite>
    digitalWrite(_mosi, x & (1 << i));
   bf14a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   bf14e:	fa08 f106 	lsl.w	r1, r8, r6
   bf152:	4039      	ands	r1, r7
   bf154:	b280      	uxth	r0, r0
   bf156:	f008 fa40 	bl	c75da <digitalWrite>
    digitalWrite(_sck, HIGH);
   bf15a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   bf15e:	2101      	movs	r1, #1
   bf160:	b280      	uxth	r0, r0
   bf162:	f008 fa3a 	bl	c75da <digitalWrite>
    if (digitalRead(_miso))
   bf166:	f994 001e 	ldrsb.w	r0, [r4, #30]
    reply <<= 1;
   bf16a:	006d      	lsls	r5, r5, #1
    if (digitalRead(_miso))
   bf16c:	b280      	uxth	r0, r0
    reply <<= 1;
   bf16e:	b2ed      	uxtb	r5, r5
    if (digitalRead(_miso))
   bf170:	f008 fa4c 	bl	c760c <digitalRead>
   bf174:	b108      	cbz	r0, bf17a <_ZN15Adafruit_BMP2807spixferEh+0x5e>
      reply |= 1;
   bf176:	f045 0501 	orr.w	r5, r5, #1
  for (int i = 7; i >= 0; i--) {
   bf17a:	3e01      	subs	r6, #1
   bf17c:	d2df      	bcs.n	bf13e <_ZN15Adafruit_BMP2807spixferEh+0x22>
}
   bf17e:	4628      	mov	r0, r5
   bf180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bf184 <_ZN15Adafruit_BMP2806write8Ehh>:
void Adafruit_BMP280::write8(byte reg, byte value) {
   bf184:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (_cs == -1) {
   bf186:	f990 301c 	ldrsb.w	r3, [r0, #28]
   bf18a:	3301      	adds	r3, #1
void Adafruit_BMP280::write8(byte reg, byte value) {
   bf18c:	4604      	mov	r4, r0
   bf18e:	460e      	mov	r6, r1
   bf190:	4615      	mov	r5, r2
  if (_cs == -1) {
   bf192:	d113      	bne.n	bf1bc <_ZN15Adafruit_BMP2806write8Ehh+0x38>
    _wire->beginTransmission((uint8_t)_i2caddr);
   bf194:	7c01      	ldrb	r1, [r0, #16]
   bf196:	6800      	ldr	r0, [r0, #0]
   bf198:	f007 f8b6 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   bf19c:	6820      	ldr	r0, [r4, #0]
   bf19e:	6803      	ldr	r3, [r0, #0]
   bf1a0:	4631      	mov	r1, r6
   bf1a2:	689b      	ldr	r3, [r3, #8]
   bf1a4:	4798      	blx	r3
    _wire->write((uint8_t)value);
   bf1a6:	6820      	ldr	r0, [r4, #0]
   bf1a8:	6803      	ldr	r3, [r0, #0]
   bf1aa:	4629      	mov	r1, r5
   bf1ac:	689b      	ldr	r3, [r3, #8]
   bf1ae:	4798      	blx	r3
    _wire->endTransmission();
   bf1b0:	6820      	ldr	r0, [r4, #0]
}
   bf1b2:	b004      	add	sp, #16
   bf1b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _wire->endTransmission();
   bf1b8:	f007 b8cb 	b.w	c6352 <_ZN7TwoWire15endTransmissionEv>
    if (_sck == -1)
   bf1bc:	f990 301f 	ldrsb.w	r3, [r0, #31]
   bf1c0:	3301      	adds	r3, #1
   bf1c2:	d10d      	bne.n	bf1e0 <_ZN15Adafruit_BMP2806write8Ehh+0x5c>
   bf1c4:	4b17      	ldr	r3, [pc, #92]	; (bf224 <_ZN15Adafruit_BMP2806write8Ehh+0xa0>)
   bf1c6:	9300      	str	r3, [sp, #0]
   bf1c8:	2300      	movs	r3, #0
   bf1ca:	f88d 3004 	strb.w	r3, [sp, #4]
   bf1ce:	4b16      	ldr	r3, [pc, #88]	; (bf228 <_ZN15Adafruit_BMP2806write8Ehh+0xa4>)
   bf1d0:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   bf1d2:	6840      	ldr	r0, [r0, #4]
   bf1d4:	2301      	movs	r3, #1
   bf1d6:	4669      	mov	r1, sp
   bf1d8:	f8ad 300c 	strh.w	r3, [sp, #12]
   bf1dc:	f007 fd64 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   bf1e0:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf1e4:	2100      	movs	r1, #0
   bf1e6:	b280      	uxth	r0, r0
   bf1e8:	f008 f9f7 	bl	c75da <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   bf1ec:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   bf1f0:	4620      	mov	r0, r4
   bf1f2:	f7ff ff93 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
    spixfer(value);
   bf1f6:	4629      	mov	r1, r5
   bf1f8:	4620      	mov	r0, r4
   bf1fa:	f7ff ff8f 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
    digitalWrite(_cs, HIGH);
   bf1fe:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf202:	2101      	movs	r1, #1
   bf204:	b280      	uxth	r0, r0
   bf206:	f008 f9e8 	bl	c75da <digitalWrite>
    if (_sck == -1)
   bf20a:	f994 301f 	ldrsb.w	r3, [r4, #31]
   bf20e:	3301      	adds	r3, #1
   bf210:	d105      	bne.n	bf21e <_ZN15Adafruit_BMP2806write8Ehh+0x9a>
      _spi->endTransaction(); // release the SPI bus
   bf212:	6860      	ldr	r0, [r4, #4]
}
   bf214:	b004      	add	sp, #16
   bf216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      _spi->endTransaction(); // release the SPI bus
   bf21a:	f007 bd2b 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>
}
   bf21e:	b004      	add	sp, #16
   bf220:	bd70      	pop	{r4, r5, r6, pc}
   bf222:	bf00      	nop
   bf224:	000cbe8c 	.word	0x000cbe8c
   bf228:	0007a120 	.word	0x0007a120

000bf22c <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>:
                                  standby_duration duration) {
   bf22c:	b570      	push	{r4, r5, r6, lr}
  _measReg.osrs_t = tempSampling;
   bf22e:	00db      	lsls	r3, r3, #3
   bf230:	f002 0207 	and.w	r2, r2, #7
   bf234:	f003 0338 	and.w	r3, r3, #56	; 0x38
                                  standby_duration duration) {
   bf238:	f89d 5010 	ldrb.w	r5, [sp, #16]
   bf23c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  _measReg.osrs_t = tempSampling;
   bf240:	4313      	orrs	r3, r2
   bf242:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
  _configReg.filter = filter;
   bf246:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  _measReg.osrs_t = tempSampling;
   bf24a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  _configReg.filter = filter;
   bf24e:	f005 0307 	and.w	r3, r5, #7
  _configReg.t_sb = duration;
   bf252:	f006 0107 	and.w	r1, r6, #7
  _configReg.filter = filter;
   bf256:	f363 02c5 	bfi	r2, r3, #3, #3
  _configReg.t_sb = duration;
   bf25a:	f361 0202 	bfi	r2, r1, #0, #3
    /** Unused - don't set */
    unsigned int none : 1;
    /** Enables 3-wire SPI */
    unsigned int spi3w_en : 1;
    /** Used to retrieve the assembled config register's byte value. */
    unsigned int get() { return (t_sb << 5) | (filter << 2) | spi3w_en; }
   bf25e:	009b      	lsls	r3, r3, #2
                                  standby_duration duration) {
   bf260:	4604      	mov	r4, r0
   bf262:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  _configReg.t_sb = duration;
   bf266:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
   bf26a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
  write8(BMP280_REGISTER_CONFIG, _configReg.get());
   bf26e:	431a      	orrs	r2, r3
   bf270:	21f5      	movs	r1, #245	; 0xf5
   bf272:	f7ff ff87 	bl	bf184 <_ZN15Adafruit_BMP2806write8Ehh>
    /** Pressure oversampling. */
    unsigned int osrs_p : 3;
    /** Device mode */
    unsigned int mode : 2;
    /** Used to retrieve the assembled ctrl_meas register's byte value. */
    unsigned int get() { return (osrs_t << 5) | (osrs_p << 2) | mode; }
   bf276:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   bf27a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   bf27e:	f002 0107 	and.w	r1, r2, #7
   bf282:	009b      	lsls	r3, r3, #2
   bf284:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
   bf288:	4620      	mov	r0, r4
   bf28a:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
}
   bf28e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  write8(BMP280_REGISTER_CONTROL, _measReg.get());
   bf292:	21f4      	movs	r1, #244	; 0xf4
   bf294:	f7ff bf76 	b.w	bf184 <_ZN15Adafruit_BMP2806write8Ehh>

000bf298 <_ZN15Adafruit_BMP2805read8Eh>:
uint8_t Adafruit_BMP280::read8(byte reg) {
   bf298:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
   bf29a:	f990 301c 	ldrsb.w	r3, [r0, #28]
   bf29e:	3301      	adds	r3, #1
uint8_t Adafruit_BMP280::read8(byte reg) {
   bf2a0:	b085      	sub	sp, #20
   bf2a2:	4604      	mov	r4, r0
   bf2a4:	460d      	mov	r5, r1
  if (_cs == -1) {
   bf2a6:	d118      	bne.n	bf2da <_ZN15Adafruit_BMP2805read8Eh+0x42>
    _wire->beginTransmission((uint8_t)_i2caddr);
   bf2a8:	7c01      	ldrb	r1, [r0, #16]
   bf2aa:	6800      	ldr	r0, [r0, #0]
   bf2ac:	f007 f82c 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   bf2b0:	6820      	ldr	r0, [r4, #0]
   bf2b2:	6803      	ldr	r3, [r0, #0]
   bf2b4:	4629      	mov	r1, r5
   bf2b6:	689b      	ldr	r3, [r3, #8]
   bf2b8:	4798      	blx	r3
    _wire->endTransmission();
   bf2ba:	6820      	ldr	r0, [r4, #0]
   bf2bc:	f007 f849 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)1);
   bf2c0:	7c21      	ldrb	r1, [r4, #16]
   bf2c2:	6820      	ldr	r0, [r4, #0]
   bf2c4:	2201      	movs	r2, #1
   bf2c6:	f007 f81c 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
   bf2ca:	6820      	ldr	r0, [r4, #0]
   bf2cc:	6803      	ldr	r3, [r0, #0]
   bf2ce:	695b      	ldr	r3, [r3, #20]
   bf2d0:	4798      	blx	r3
   bf2d2:	b2c5      	uxtb	r5, r0
}
   bf2d4:	4628      	mov	r0, r5
   bf2d6:	b005      	add	sp, #20
   bf2d8:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
   bf2da:	f990 301f 	ldrsb.w	r3, [r0, #31]
   bf2de:	3301      	adds	r3, #1
   bf2e0:	d10d      	bne.n	bf2fe <_ZN15Adafruit_BMP2805read8Eh+0x66>
   bf2e2:	4b16      	ldr	r3, [pc, #88]	; (bf33c <_ZN15Adafruit_BMP2805read8Eh+0xa4>)
   bf2e4:	9300      	str	r3, [sp, #0]
   bf2e6:	2300      	movs	r3, #0
   bf2e8:	f88d 3004 	strb.w	r3, [sp, #4]
   bf2ec:	4b14      	ldr	r3, [pc, #80]	; (bf340 <_ZN15Adafruit_BMP2805read8Eh+0xa8>)
   bf2ee:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   bf2f0:	6840      	ldr	r0, [r0, #4]
   bf2f2:	2301      	movs	r3, #1
   bf2f4:	4669      	mov	r1, sp
   bf2f6:	f8ad 300c 	strh.w	r3, [sp, #12]
   bf2fa:	f007 fcd5 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   bf2fe:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf302:	2100      	movs	r1, #0
   bf304:	b280      	uxth	r0, r0
   bf306:	f008 f968 	bl	c75da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   bf30a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bf30e:	4620      	mov	r0, r4
   bf310:	f7ff ff04 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
   bf314:	2100      	movs	r1, #0
   bf316:	4620      	mov	r0, r4
   bf318:	f7ff ff00 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
   bf31c:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   bf31e:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf322:	2101      	movs	r1, #1
   bf324:	b280      	uxth	r0, r0
   bf326:	f008 f958 	bl	c75da <digitalWrite>
    if (_sck == -1)
   bf32a:	f994 301f 	ldrsb.w	r3, [r4, #31]
   bf32e:	3301      	adds	r3, #1
   bf330:	d1d0      	bne.n	bf2d4 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
      _spi->endTransaction(); // release the SPI bus
   bf332:	6860      	ldr	r0, [r4, #4]
   bf334:	f007 fc9e 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
   bf338:	e7cc      	b.n	bf2d4 <_ZN15Adafruit_BMP2805read8Eh+0x3c>
   bf33a:	bf00      	nop
   bf33c:	000cbe8c 	.word	0x000cbe8c
   bf340:	0007a120 	.word	0x0007a120

000bf344 <_ZN15Adafruit_BMP2806read16Eh>:
uint16_t Adafruit_BMP280::read16(byte reg) {
   bf344:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
   bf346:	f990 301c 	ldrsb.w	r3, [r0, #28]
   bf34a:	3301      	adds	r3, #1
uint16_t Adafruit_BMP280::read16(byte reg) {
   bf34c:	b085      	sub	sp, #20
   bf34e:	4604      	mov	r4, r0
   bf350:	460d      	mov	r5, r1
  if (_cs == -1) {
   bf352:	d11f      	bne.n	bf394 <_ZN15Adafruit_BMP2806read16Eh+0x50>
    _wire->beginTransmission((uint8_t)_i2caddr);
   bf354:	7c01      	ldrb	r1, [r0, #16]
   bf356:	6800      	ldr	r0, [r0, #0]
   bf358:	f006 ffd6 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   bf35c:	6820      	ldr	r0, [r4, #0]
   bf35e:	6803      	ldr	r3, [r0, #0]
   bf360:	4629      	mov	r1, r5
   bf362:	689b      	ldr	r3, [r3, #8]
   bf364:	4798      	blx	r3
    _wire->endTransmission();
   bf366:	6820      	ldr	r0, [r4, #0]
   bf368:	f006 fff3 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)2);
   bf36c:	7c21      	ldrb	r1, [r4, #16]
   bf36e:	6820      	ldr	r0, [r4, #0]
   bf370:	2202      	movs	r2, #2
   bf372:	f006 ffc6 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
    value = (_wire->read() << 8) | _wire->read();
   bf376:	6820      	ldr	r0, [r4, #0]
   bf378:	6803      	ldr	r3, [r0, #0]
   bf37a:	695b      	ldr	r3, [r3, #20]
   bf37c:	4798      	blx	r3
   bf37e:	4605      	mov	r5, r0
   bf380:	6820      	ldr	r0, [r4, #0]
   bf382:	6803      	ldr	r3, [r0, #0]
   bf384:	695b      	ldr	r3, [r3, #20]
   bf386:	4798      	blx	r3
   bf388:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   bf38c:	b285      	uxth	r5, r0
}
   bf38e:	4628      	mov	r0, r5
   bf390:	b005      	add	sp, #20
   bf392:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
   bf394:	f990 301f 	ldrsb.w	r3, [r0, #31]
   bf398:	3301      	adds	r3, #1
   bf39a:	d10d      	bne.n	bf3b8 <_ZN15Adafruit_BMP2806read16Eh+0x74>
   bf39c:	4b19      	ldr	r3, [pc, #100]	; (bf404 <_ZN15Adafruit_BMP2806read16Eh+0xc0>)
   bf39e:	9300      	str	r3, [sp, #0]
   bf3a0:	2300      	movs	r3, #0
   bf3a2:	f88d 3004 	strb.w	r3, [sp, #4]
   bf3a6:	4b18      	ldr	r3, [pc, #96]	; (bf408 <_ZN15Adafruit_BMP2806read16Eh+0xc4>)
   bf3a8:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   bf3aa:	6840      	ldr	r0, [r0, #4]
   bf3ac:	2301      	movs	r3, #1
   bf3ae:	4669      	mov	r1, sp
   bf3b0:	f8ad 300c 	strh.w	r3, [sp, #12]
   bf3b4:	f007 fc78 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   bf3b8:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf3bc:	2100      	movs	r1, #0
   bf3be:	b280      	uxth	r0, r0
   bf3c0:	f008 f90b 	bl	c75da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   bf3c4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bf3c8:	4620      	mov	r0, r4
   bf3ca:	f7ff fea7 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
    value = (spixfer(0) << 8) | spixfer(0);
   bf3ce:	2100      	movs	r1, #0
   bf3d0:	4620      	mov	r0, r4
   bf3d2:	f7ff fea3 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
   bf3d6:	2100      	movs	r1, #0
   bf3d8:	4605      	mov	r5, r0
   bf3da:	4620      	mov	r0, r4
   bf3dc:	f7ff fe9e 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
   bf3e0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   bf3e4:	b285      	uxth	r5, r0
    digitalWrite(_cs, HIGH);
   bf3e6:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf3ea:	2101      	movs	r1, #1
   bf3ec:	b280      	uxth	r0, r0
   bf3ee:	f008 f8f4 	bl	c75da <digitalWrite>
    if (_sck == -1)
   bf3f2:	f994 301f 	ldrsb.w	r3, [r4, #31]
   bf3f6:	3301      	adds	r3, #1
   bf3f8:	d1c9      	bne.n	bf38e <_ZN15Adafruit_BMP2806read16Eh+0x4a>
      _spi->endTransaction(); // release the SPI bus
   bf3fa:	6860      	ldr	r0, [r4, #4]
   bf3fc:	f007 fc3a 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
   bf400:	e7c5      	b.n	bf38e <_ZN15Adafruit_BMP2806read16Eh+0x4a>
   bf402:	bf00      	nop
   bf404:	000cbe8c 	.word	0x000cbe8c
   bf408:	0007a120 	.word	0x0007a120

000bf40c <_ZN15Adafruit_BMP2809read16_LEEh>:
uint16_t Adafruit_BMP280::read16_LE(byte reg) {
   bf40c:	b508      	push	{r3, lr}
  uint16_t temp = read16(reg);
   bf40e:	f7ff ff99 	bl	bf344 <_ZN15Adafruit_BMP2806read16Eh>
  return (temp >> 8) | (temp << 8);
   bf412:	ba40      	rev16	r0, r0
}
   bf414:	b280      	uxth	r0, r0
   bf416:	bd08      	pop	{r3, pc}

000bf418 <_ZN15Adafruit_BMP2806read24Eh>:
uint32_t Adafruit_BMP280::read24(byte reg) {
   bf418:	b530      	push	{r4, r5, lr}
  if (_cs == -1) {
   bf41a:	f990 301c 	ldrsb.w	r3, [r0, #28]
   bf41e:	3301      	adds	r3, #1
uint32_t Adafruit_BMP280::read24(byte reg) {
   bf420:	b085      	sub	sp, #20
   bf422:	4604      	mov	r4, r0
   bf424:	460d      	mov	r5, r1
  if (_cs == -1) {
   bf426:	d123      	bne.n	bf470 <_ZN15Adafruit_BMP2806read24Eh+0x58>
    _wire->beginTransmission((uint8_t)_i2caddr);
   bf428:	7c01      	ldrb	r1, [r0, #16]
   bf42a:	6800      	ldr	r0, [r0, #0]
   bf42c:	f006 ff6c 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
    _wire->write((uint8_t)reg);
   bf430:	6820      	ldr	r0, [r4, #0]
   bf432:	6803      	ldr	r3, [r0, #0]
   bf434:	4629      	mov	r1, r5
   bf436:	689b      	ldr	r3, [r3, #8]
   bf438:	4798      	blx	r3
    _wire->endTransmission();
   bf43a:	6820      	ldr	r0, [r4, #0]
   bf43c:	f006 ff89 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    _wire->requestFrom((uint8_t)_i2caddr, (byte)3);
   bf440:	7c21      	ldrb	r1, [r4, #16]
   bf442:	6820      	ldr	r0, [r4, #0]
   bf444:	2203      	movs	r2, #3
   bf446:	f006 ff5c 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
    value = _wire->read();
   bf44a:	6820      	ldr	r0, [r4, #0]
   bf44c:	6803      	ldr	r3, [r0, #0]
   bf44e:	695b      	ldr	r3, [r3, #20]
   bf450:	4798      	blx	r3
    value <<= 8;
   bf452:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
   bf454:	6820      	ldr	r0, [r4, #0]
   bf456:	6803      	ldr	r3, [r0, #0]
   bf458:	695b      	ldr	r3, [r3, #20]
   bf45a:	4798      	blx	r3
   bf45c:	4328      	orrs	r0, r5
    value <<= 8;
   bf45e:	0205      	lsls	r5, r0, #8
    value |= _wire->read();
   bf460:	6820      	ldr	r0, [r4, #0]
   bf462:	6803      	ldr	r3, [r0, #0]
   bf464:	695b      	ldr	r3, [r3, #20]
   bf466:	4798      	blx	r3
   bf468:	4305      	orrs	r5, r0
}
   bf46a:	4628      	mov	r0, r5
   bf46c:	b005      	add	sp, #20
   bf46e:	bd30      	pop	{r4, r5, pc}
    if (_sck == -1)
   bf470:	f990 301f 	ldrsb.w	r3, [r0, #31]
   bf474:	3301      	adds	r3, #1
   bf476:	d10d      	bne.n	bf494 <_ZN15Adafruit_BMP2806read24Eh+0x7c>
   bf478:	4b1b      	ldr	r3, [pc, #108]	; (bf4e8 <_ZN15Adafruit_BMP2806read24Eh+0xd0>)
   bf47a:	9300      	str	r3, [sp, #0]
   bf47c:	2300      	movs	r3, #0
   bf47e:	f88d 3004 	strb.w	r3, [sp, #4]
   bf482:	4b1a      	ldr	r3, [pc, #104]	; (bf4ec <_ZN15Adafruit_BMP2806read24Eh+0xd4>)
   bf484:	9302      	str	r3, [sp, #8]
      _spi->beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   bf486:	6840      	ldr	r0, [r0, #4]
   bf488:	2301      	movs	r3, #1
   bf48a:	4669      	mov	r1, sp
   bf48c:	f8ad 300c 	strh.w	r3, [sp, #12]
   bf490:	f007 fc0a 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    digitalWrite(_cs, LOW);
   bf494:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf498:	2100      	movs	r1, #0
   bf49a:	b280      	uxth	r0, r0
   bf49c:	f008 f89d 	bl	c75da <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   bf4a0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bf4a4:	4620      	mov	r0, r4
   bf4a6:	f7ff fe39 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
    value = spixfer(0);
   bf4aa:	2100      	movs	r1, #0
   bf4ac:	4620      	mov	r0, r4
   bf4ae:	f7ff fe35 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
    value |= spixfer(0);
   bf4b2:	2100      	movs	r1, #0
    value <<= 8;
   bf4b4:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
   bf4b6:	4620      	mov	r0, r4
   bf4b8:	f7ff fe30 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
   bf4bc:	4328      	orrs	r0, r5
    value <<= 8;
   bf4be:	0205      	lsls	r5, r0, #8
    value |= spixfer(0);
   bf4c0:	2100      	movs	r1, #0
   bf4c2:	4620      	mov	r0, r4
   bf4c4:	f7ff fe2a 	bl	bf11c <_ZN15Adafruit_BMP2807spixferEh>
   bf4c8:	4305      	orrs	r5, r0
    digitalWrite(_cs, HIGH);
   bf4ca:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf4ce:	2101      	movs	r1, #1
   bf4d0:	b280      	uxth	r0, r0
   bf4d2:	f008 f882 	bl	c75da <digitalWrite>
    if (_sck == -1)
   bf4d6:	f994 301f 	ldrsb.w	r3, [r4, #31]
   bf4da:	3301      	adds	r3, #1
   bf4dc:	d1c5      	bne.n	bf46a <_ZN15Adafruit_BMP2806read24Eh+0x52>
      _spi->endTransaction(); // release the SPI bus
   bf4de:	6860      	ldr	r0, [r4, #4]
   bf4e0:	f007 fbc8 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
  return value;
   bf4e4:	e7c1      	b.n	bf46a <_ZN15Adafruit_BMP2806read24Eh+0x52>
   bf4e6:	bf00      	nop
   bf4e8:	000cbe8c 	.word	0x000cbe8c
   bf4ec:	0007a120 	.word	0x0007a120

000bf4f0 <_ZN15Adafruit_BMP28016readCoefficientsEv>:
void Adafruit_BMP280::readCoefficients() {
   bf4f0:	b510      	push	{r4, lr}
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   bf4f2:	2188      	movs	r1, #136	; 0x88
void Adafruit_BMP280::readCoefficients() {
   bf4f4:	4604      	mov	r4, r0
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   bf4f6:	f7ff ff89 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   bf4fa:	218a      	movs	r1, #138	; 0x8a
  _bmp280_calib.dig_T1 = read16_LE(BMP280_REGISTER_DIG_T1);
   bf4fc:	8420      	strh	r0, [r4, #32]
  return (int16_t)read16_LE(reg);
   bf4fe:	4620      	mov	r0, r4
   bf500:	f7ff ff84 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf504:	218c      	movs	r1, #140	; 0x8c
  _bmp280_calib.dig_T2 = readS16_LE(BMP280_REGISTER_DIG_T2);
   bf506:	8460      	strh	r0, [r4, #34]	; 0x22
  return (int16_t)read16_LE(reg);
   bf508:	4620      	mov	r0, r4
   bf50a:	f7ff ff7f 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   bf50e:	218e      	movs	r1, #142	; 0x8e
  _bmp280_calib.dig_T3 = readS16_LE(BMP280_REGISTER_DIG_T3);
   bf510:	84a0      	strh	r0, [r4, #36]	; 0x24
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   bf512:	4620      	mov	r0, r4
   bf514:	f7ff ff7a 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
  return (int16_t)read16_LE(reg);
   bf518:	2190      	movs	r1, #144	; 0x90
  _bmp280_calib.dig_P1 = read16_LE(BMP280_REGISTER_DIG_P1);
   bf51a:	84e0      	strh	r0, [r4, #38]	; 0x26
  return (int16_t)read16_LE(reg);
   bf51c:	4620      	mov	r0, r4
   bf51e:	f7ff ff75 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf522:	2192      	movs	r1, #146	; 0x92
  _bmp280_calib.dig_P2 = readS16_LE(BMP280_REGISTER_DIG_P2);
   bf524:	8520      	strh	r0, [r4, #40]	; 0x28
  return (int16_t)read16_LE(reg);
   bf526:	4620      	mov	r0, r4
   bf528:	f7ff ff70 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf52c:	2194      	movs	r1, #148	; 0x94
  _bmp280_calib.dig_P3 = readS16_LE(BMP280_REGISTER_DIG_P3);
   bf52e:	8560      	strh	r0, [r4, #42]	; 0x2a
  return (int16_t)read16_LE(reg);
   bf530:	4620      	mov	r0, r4
   bf532:	f7ff ff6b 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf536:	2196      	movs	r1, #150	; 0x96
  _bmp280_calib.dig_P4 = readS16_LE(BMP280_REGISTER_DIG_P4);
   bf538:	85a0      	strh	r0, [r4, #44]	; 0x2c
  return (int16_t)read16_LE(reg);
   bf53a:	4620      	mov	r0, r4
   bf53c:	f7ff ff66 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf540:	2198      	movs	r1, #152	; 0x98
  _bmp280_calib.dig_P5 = readS16_LE(BMP280_REGISTER_DIG_P5);
   bf542:	85e0      	strh	r0, [r4, #46]	; 0x2e
  return (int16_t)read16_LE(reg);
   bf544:	4620      	mov	r0, r4
   bf546:	f7ff ff61 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf54a:	219a      	movs	r1, #154	; 0x9a
  _bmp280_calib.dig_P6 = readS16_LE(BMP280_REGISTER_DIG_P6);
   bf54c:	8620      	strh	r0, [r4, #48]	; 0x30
  return (int16_t)read16_LE(reg);
   bf54e:	4620      	mov	r0, r4
   bf550:	f7ff ff5c 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf554:	219c      	movs	r1, #156	; 0x9c
  _bmp280_calib.dig_P7 = readS16_LE(BMP280_REGISTER_DIG_P7);
   bf556:	8660      	strh	r0, [r4, #50]	; 0x32
  return (int16_t)read16_LE(reg);
   bf558:	4620      	mov	r0, r4
   bf55a:	f7ff ff57 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
   bf55e:	219e      	movs	r1, #158	; 0x9e
  _bmp280_calib.dig_P8 = readS16_LE(BMP280_REGISTER_DIG_P8);
   bf560:	86a0      	strh	r0, [r4, #52]	; 0x34
  return (int16_t)read16_LE(reg);
   bf562:	4620      	mov	r0, r4
   bf564:	f7ff ff52 	bl	bf40c <_ZN15Adafruit_BMP2809read16_LEEh>
  _bmp280_calib.dig_P9 = readS16_LE(BMP280_REGISTER_DIG_P9);
   bf568:	86e0      	strh	r0, [r4, #54]	; 0x36
}
   bf56a:	bd10      	pop	{r4, pc}

000bf56c <_ZN15Adafruit_BMP2805beginEhh>:
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
   bf56c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf56e:	4604      	mov	r4, r0
  _i2caddr = addr;
   bf570:	7401      	strb	r1, [r0, #16]
  if (_cs == -1) {
   bf572:	f990 001c 	ldrsb.w	r0, [r0, #28]
bool Adafruit_BMP280::begin(uint8_t addr, uint8_t chipid) {
   bf576:	4615      	mov	r5, r2
  if (_cs == -1) {
   bf578:	1c42      	adds	r2, r0, #1
   bf57a:	d11b      	bne.n	bf5b4 <_ZN15Adafruit_BMP2805beginEhh+0x48>
    _wire->begin();
   bf57c:	6820      	ldr	r0, [r4, #0]
   bf57e:	f006 fe8d 	bl	c629c <_ZN7TwoWire5beginEv>
  if (read8(BMP280_REGISTER_CHIPID) != chipid)
   bf582:	21d0      	movs	r1, #208	; 0xd0
   bf584:	4620      	mov	r0, r4
   bf586:	f7ff fe87 	bl	bf298 <_ZN15Adafruit_BMP2805read8Eh>
   bf58a:	42a8      	cmp	r0, r5
   bf58c:	f04f 0500 	mov.w	r5, #0
   bf590:	d133      	bne.n	bf5fa <_ZN15Adafruit_BMP2805beginEhh+0x8e>
  readCoefficients();
   bf592:	4620      	mov	r0, r4
   bf594:	f7ff ffac 	bl	bf4f0 <_ZN15Adafruit_BMP28016readCoefficientsEv>
  setSampling();
   bf598:	2305      	movs	r3, #5
   bf59a:	461a      	mov	r2, r3
   bf59c:	2103      	movs	r1, #3
   bf59e:	4620      	mov	r0, r4
   bf5a0:	e9cd 5500 	strd	r5, r5, [sp]
   bf5a4:	f7ff fe42 	bl	bf22c <_ZN15Adafruit_BMP28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_NS_13sensor_filterENS_16standby_durationE>
  delay(100);
   bf5a8:	2064      	movs	r0, #100	; 0x64
   bf5aa:	f006 f8c1 	bl	c5730 <delay>
  return true;
   bf5ae:	2001      	movs	r0, #1
}
   bf5b0:	b003      	add	sp, #12
   bf5b2:	bd30      	pop	{r4, r5, pc}
    digitalWrite(_cs, HIGH);
   bf5b4:	2101      	movs	r1, #1
   bf5b6:	b280      	uxth	r0, r0
   bf5b8:	f008 f80f 	bl	c75da <digitalWrite>
    pinMode(_cs, OUTPUT);
   bf5bc:	f994 001c 	ldrsb.w	r0, [r4, #28]
   bf5c0:	2101      	movs	r1, #1
   bf5c2:	b280      	uxth	r0, r0
   bf5c4:	f007 fff8 	bl	c75b8 <pinMode>
    if (_sck == -1) {
   bf5c8:	f994 001f 	ldrsb.w	r0, [r4, #31]
   bf5cc:	1c43      	adds	r3, r0, #1
   bf5ce:	d103      	bne.n	bf5d8 <_ZN15Adafruit_BMP2805beginEhh+0x6c>
      _spi->begin();
   bf5d0:	6860      	ldr	r0, [r4, #4]
   bf5d2:	f007 fb15 	bl	c6c00 <_ZN8SPIClass5beginEv>
   bf5d6:	e7d4      	b.n	bf582 <_ZN15Adafruit_BMP2805beginEhh+0x16>
      pinMode(_sck, OUTPUT);
   bf5d8:	2101      	movs	r1, #1
   bf5da:	b280      	uxth	r0, r0
   bf5dc:	f007 ffec 	bl	c75b8 <pinMode>
      pinMode(_mosi, OUTPUT);
   bf5e0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   bf5e4:	2101      	movs	r1, #1
   bf5e6:	b280      	uxth	r0, r0
   bf5e8:	f007 ffe6 	bl	c75b8 <pinMode>
      pinMode(_miso, INPUT);
   bf5ec:	f994 001e 	ldrsb.w	r0, [r4, #30]
   bf5f0:	2100      	movs	r1, #0
   bf5f2:	b280      	uxth	r0, r0
   bf5f4:	f007 ffe0 	bl	c75b8 <pinMode>
   bf5f8:	e7c3      	b.n	bf582 <_ZN15Adafruit_BMP2805beginEhh+0x16>
    return false;
   bf5fa:	4628      	mov	r0, r5
   bf5fc:	e7d8      	b.n	bf5b0 <_ZN15Adafruit_BMP2805beginEhh+0x44>
	...

000bf600 <_ZN15Adafruit_BMP28015readTemperatureEv>:
float Adafruit_BMP280::readTemperature() {
   bf600:	b510      	push	{r4, lr}
   bf602:	4604      	mov	r4, r0
  int32_t adc_T = read24(BMP280_REGISTER_TEMPDATA);
   bf604:	21fa      	movs	r1, #250	; 0xfa
   bf606:	f7ff ff07 	bl	bf418 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
   bf60a:	8c21      	ldrh	r1, [r4, #32]
}
   bf60c:	ed9f 0a0f 	vldr	s0, [pc, #60]	; bf64c <_ZN15Adafruit_BMP28015readTemperatureEv+0x4c>
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
   bf610:	004b      	lsls	r3, r1, #1
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
   bf612:	ebc1 2220 	rsb	r2, r1, r0, asr #8
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
   bf616:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
          ((int32_t)_bmp280_calib.dig_T2)) >>
   bf61a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  var1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) *
   bf61e:	4359      	muls	r1, r3
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
   bf620:	fb02 f302 	mul.w	r3, r2, r2
          ((int32_t)_bmp280_calib.dig_T3)) >>
   bf624:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
            ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >>
   bf628:	131b      	asrs	r3, r3, #12
           12) *
   bf62a:	4353      	muls	r3, r2
  var2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) *
   bf62c:	139b      	asrs	r3, r3, #14
  t_fine = var1 + var2;
   bf62e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   bf632:	61a3      	str	r3, [r4, #24]
  float T = (t_fine * 5 + 128) >> 8;
   bf634:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   bf638:	3380      	adds	r3, #128	; 0x80
   bf63a:	121b      	asrs	r3, r3, #8
   bf63c:	ee07 3a90 	vmov	s15, r3
   bf640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
   bf644:	ee87 0a80 	vdiv.f32	s0, s15, s0
   bf648:	bd10      	pop	{r4, pc}
   bf64a:	bf00      	nop
   bf64c:	42c80000 	.word	0x42c80000

000bf650 <_ZN20Adafruit_BMP280_Temp8getEventEP15sensors_event_t>:
bool Adafruit_BMP280_Temp::getEvent(sensors_event_t *event) {
   bf650:	b538      	push	{r3, r4, r5, lr}
   bf652:	460c      	mov	r4, r1
   bf654:	4605      	mov	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
   bf656:	2220      	movs	r2, #32
   bf658:	2100      	movs	r1, #0
   bf65a:	1d20      	adds	r0, r4, #4
   bf65c:	f00a fdb2 	bl	ca1c4 <memset>
  event->version = sizeof(sensors_event_t);
   bf660:	2324      	movs	r3, #36	; 0x24
   bf662:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   bf664:	68ab      	ldr	r3, [r5, #8]
   bf666:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   bf668:	230d      	movs	r3, #13
   bf66a:	60a3      	str	r3, [r4, #8]
   bf66c:	f005 fcd0 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   bf670:	6120      	str	r0, [r4, #16]
  event->temperature = _theBMP280->readTemperature();
   bf672:	68e8      	ldr	r0, [r5, #12]
   bf674:	f7ff ffc4 	bl	bf600 <_ZN15Adafruit_BMP28015readTemperatureEv>
}
   bf678:	2001      	movs	r0, #1
  event->temperature = _theBMP280->readTemperature();
   bf67a:	ed84 0a05 	vstr	s0, [r4, #20]
}
   bf67e:	bd38      	pop	{r3, r4, r5, pc}

000bf680 <_ZN15Adafruit_BMP28012readPressureEv>:
float Adafruit_BMP280::readPressure() {
   bf680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf684:	4604      	mov	r4, r0
  readTemperature();
   bf686:	f7ff ffbb 	bl	bf600 <_ZN15Adafruit_BMP28015readTemperatureEv>
  int32_t adc_P = read24(BMP280_REGISTER_PRESSUREDATA);
   bf68a:	21f7      	movs	r1, #247	; 0xf7
   bf68c:	4620      	mov	r0, r4
   bf68e:	f7ff fec3 	bl	bf418 <_ZN15Adafruit_BMP2806read24Eh>
  var1 = ((int64_t)t_fine) - 128000;
   bf692:	69a1      	ldr	r1, [r4, #24]
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
   bf694:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
  var1 = ((int64_t)t_fine) - 128000;
   bf698:	ea4f 7ce1 	mov.w	ip, r1, asr #31
   bf69c:	f5b1 31fa 	subs.w	r1, r1, #128000	; 0x1f400
   bf6a0:	f14c 3cff 	adc.w	ip, ip, #4294967295	; 0xffffffff
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
   bf6a4:	fba1 6801 	umull	r6, r8, r1, r1
   bf6a8:	fb01 f50c 	mul.w	r5, r1, ip
   bf6ac:	eb08 0845 	add.w	r8, r8, r5, lsl #1
         ((var1 * (int64_t)_bmp280_calib.dig_P2) << 12);
   bf6b0:	fb03 f20c 	mul.w	r2, r3, ip
   bf6b4:	17dd      	asrs	r5, r3, #31
   bf6b6:	fb01 2205 	mla	r2, r1, r5, r2
   bf6ba:	fba3 3501 	umull	r3, r5, r3, r1
   bf6be:	442a      	add	r2, r5
   bf6c0:	0312      	lsls	r2, r2, #12
   bf6c2:	031d      	lsls	r5, r3, #12
   bf6c4:	ea42 5213 	orr.w	r2, r2, r3, lsr #20
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
   bf6c8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
   bf6cc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
   bf6d0:	fb03 f708 	mul.w	r7, r3, r8
   bf6d4:	fb06 770e 	mla	r7, r6, lr, r7
   bf6d8:	fba3 3e06 	umull	r3, lr, r3, r6
   bf6dc:	4477      	add	r7, lr
   bf6de:	0a1b      	lsrs	r3, r3, #8
   bf6e0:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
   bf6e4:	195b      	adds	r3, r3, r5
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
   bf6e6:	f8b4 e026 	ldrh.w	lr, [r4, #38]	; 0x26
  var1 = ((var1 * var1 * (int64_t)_bmp280_calib.dig_P3) >> 8) +
   bf6ea:	eb42 2227 	adc.w	r2, r2, r7, asr #8
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
   bf6ee:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
   bf6f2:	fba3 350e 	umull	r3, r5, r3, lr
   bf6f6:	fb0e 5502 	mla	r5, lr, r2, r5
  var1 =
   bf6fa:	17eb      	asrs	r3, r5, #31
   bf6fc:	106a      	asrs	r2, r5, #1
  if (var1 == 0) {
   bf6fe:	ea53 0565 	orrs.w	r5, r3, r5, asr #1
      (((((int64_t)1) << 47) + var1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
   bf702:	f04f 0700 	mov.w	r7, #0
  if (var1 == 0) {
   bf706:	d07b      	beq.n	bf800 <_ZN15Adafruit_BMP28012readPressureEv+0x180>
  var2 = var1 * var1 * (int64_t)_bmp280_calib.dig_P6;
   bf708:	f9b4 e030 	ldrsh.w	lr, [r4, #48]	; 0x30
   bf70c:	fb0e f508 	mul.w	r5, lr, r8
   bf710:	ea4f 79ee 	mov.w	r9, lr, asr #31
   bf714:	fb06 5509 	mla	r5, r6, r9, r5
   bf718:	fbae e606 	umull	lr, r6, lr, r6
   bf71c:	4435      	add	r5, r6
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
   bf71e:	f9b4 602e 	ldrsh.w	r6, [r4, #46]	; 0x2e
   bf722:	ea4f 78e6 	mov.w	r8, r6, asr #31
   bf726:	fb06 fc0c 	mul.w	ip, r6, ip
   bf72a:	fb01 cc08 	mla	ip, r1, r8, ip
   bf72e:	fba6 6101 	umull	r6, r1, r6, r1
   bf732:	4461      	add	r1, ip
   bf734:	0449      	lsls	r1, r1, #17
   bf736:	ea41 31d6 	orr.w	r1, r1, r6, lsr #15
  adc_P >>= 4;
   bf73a:	1100      	asrs	r0, r0, #4
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
   bf73c:	0476      	lsls	r6, r6, #17
   bf73e:	eb16 060e 	adds.w	r6, r6, lr
  p = 1048576 - adc_P;
   bf742:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
  var2 = var2 + ((var1 * (int64_t)_bmp280_calib.dig_P5) << 17);
   bf746:	eb45 0101 	adc.w	r1, r5, r1
  p = (((p << 31) - var2) * 3125) / var1;
   bf74a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
   bf74e:	f9b4 502c 	ldrsh.w	r5, [r4, #44]	; 0x2c
   bf752:	19be      	adds	r6, r7, r6
  p = (((p << 31) - var2) * 3125) / var1;
   bf754:	ea4c 0c50 	orr.w	ip, ip, r0, lsr #1
   bf758:	07c0      	lsls	r0, r0, #31
   bf75a:	1b80      	subs	r0, r0, r6
  var2 = var2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
   bf75c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
  p = (((p << 31) - var2) * 3125) / var1;
   bf760:	f640 4535 	movw	r5, #3125	; 0xc35
   bf764:	eb6c 0c01 	sbc.w	ip, ip, r1
   bf768:	fba0 0105 	umull	r0, r1, r0, r5
   bf76c:	fb05 110c 	mla	r1, r5, ip, r1
   bf770:	f7f5 fa68 	bl	b4c44 <__aeabi_ldivmod>
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
   bf774:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
   bf778:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
   bf77c:	f9b4 4032 	ldrsh.w	r4, [r4, #50]	; 0x32
  var1 = (((int64_t)_bmp280_calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
   bf780:	ea4f 3c61 	mov.w	ip, r1, asr #13
   bf784:	0b43      	lsrs	r3, r0, #13
   bf786:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
   bf78a:	fb02 f70c 	mul.w	r7, r2, ip
   bf78e:	17d5      	asrs	r5, r2, #31
   bf790:	fb03 7705 	mla	r7, r3, r5, r7
   bf794:	fba2 2503 	umull	r2, r5, r2, r3
   bf798:	443d      	add	r5, r7
   bf79a:	fb02 f70c 	mul.w	r7, r2, ip
   bf79e:	fb03 7705 	mla	r7, r3, r5, r7
   bf7a2:	fba2 2303 	umull	r2, r3, r2, r3
   bf7a6:	441f      	add	r7, r3
   bf7a8:	0e53      	lsrs	r3, r2, #25
   bf7aa:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
   bf7ae:	181b      	adds	r3, r3, r0
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
   bf7b0:	ea4f 72e6 	mov.w	r2, r6, asr #31
   bf7b4:	fb06 f501 	mul.w	r5, r6, r1
  p = (((p << 31) - var2) * 3125) / var1;
   bf7b8:	4686      	mov	lr, r0
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
   bf7ba:	eb41 6767 	adc.w	r7, r1, r7, asr #25
  var2 = (((int64_t)_bmp280_calib.dig_P8) * p) >> 19;
   bf7be:	fb02 5100 	mla	r1, r2, r0, r5
   bf7c2:	fba6 060e 	umull	r0, r6, r6, lr
   bf7c6:	4431      	add	r1, r6
   bf7c8:	0cc0      	lsrs	r0, r0, #19
   bf7ca:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
  p = ((p + var1 + var2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
   bf7ce:	1818      	adds	r0, r3, r0
   bf7d0:	ea4f 75e4 	mov.w	r5, r4, asr #31
   bf7d4:	eb47 41e1 	adc.w	r1, r7, r1, asr #19
   bf7d8:	0a00      	lsrs	r0, r0, #8
   bf7da:	012d      	lsls	r5, r5, #4
   bf7dc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
   bf7e0:	ea45 7514 	orr.w	r5, r5, r4, lsr #28
   bf7e4:	0124      	lsls	r4, r4, #4
   bf7e6:	1820      	adds	r0, r4, r0
  return (float)p / 256;
   bf7e8:	eb45 2121 	adc.w	r1, r5, r1, asr #8
   bf7ec:	f7f5 f9ec 	bl	b4bc8 <__aeabi_l2f>
   bf7f0:	ed9f 0a05 	vldr	s0, [pc, #20]	; bf808 <_ZN15Adafruit_BMP28012readPressureEv+0x188>
   bf7f4:	ee07 0a90 	vmov	s15, r0
   bf7f8:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   bf7fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0; // avoid exception caused by division by zero
   bf800:	ed9f 0a02 	vldr	s0, [pc, #8]	; bf80c <_ZN15Adafruit_BMP28012readPressureEv+0x18c>
   bf804:	e7fa      	b.n	bf7fc <_ZN15Adafruit_BMP28012readPressureEv+0x17c>
   bf806:	bf00      	nop
   bf808:	3b800000 	.word	0x3b800000
   bf80c:	00000000 	.word	0x00000000

000bf810 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t>:
    @brief  Gets the pressure as a standard sensor event
    @param  event Sensor event object that will be populated
    @returns True
*/
/**************************************************************************/
bool Adafruit_BMP280_Pressure::getEvent(sensors_event_t *event) {
   bf810:	b538      	push	{r3, r4, r5, lr}
   bf812:	460c      	mov	r4, r1
   bf814:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   bf816:	2220      	movs	r2, #32
   bf818:	2100      	movs	r1, #0
   bf81a:	1d20      	adds	r0, r4, #4
   bf81c:	f00a fcd2 	bl	ca1c4 <memset>

  event->version = sizeof(sensors_event_t);
   bf820:	2324      	movs	r3, #36	; 0x24
   bf822:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   bf824:	68ab      	ldr	r3, [r5, #8]
   bf826:	6063      	str	r3, [r4, #4]
  event->type = SENSOR_TYPE_PRESSURE;
   bf828:	2306      	movs	r3, #6
   bf82a:	60a3      	str	r3, [r4, #8]
   bf82c:	f005 fbf0 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  event->timestamp = millis();
   bf830:	6120      	str	r0, [r4, #16]
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
   bf832:	68e8      	ldr	r0, [r5, #12]
   bf834:	f7ff ff24 	bl	bf680 <_ZN15Adafruit_BMP28012readPressureEv>
   bf838:	ed9f 7a03 	vldr	s14, [pc, #12]	; bf848 <_ZN24Adafruit_BMP280_Pressure8getEventEP15sensors_event_t+0x38>
   bf83c:	eec0 7a07 	vdiv.f32	s15, s0, s14
  return true;
}
   bf840:	2001      	movs	r0, #1
  event->pressure = _theBMP280->readPressure() / 100; // convert Pa to hPa
   bf842:	edc4 7a05 	vstr	s15, [r4, #20]
}
   bf846:	bd38      	pop	{r3, r4, r5, pc}
   bf848:	42c80000 	.word	0x42c80000

000bf84c <_ZL9i2c_writehPKhmPv>:
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len,
                 void *intf_ptr) {
   bf84c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bf84e:	f88d 000f 	strb.w	r0, [sp, #15]
  // Serial.print("I2C write address 0x"); Serial.print(reg_addr, HEX);
  // Serial.print(" len "); Serial.println(len, HEX);

  if (!g_i2c_dev->write((uint8_t *)reg_data, len, true, &reg_addr, 1))
   bf852:	f10d 000f 	add.w	r0, sp, #15
   bf856:	9000      	str	r0, [sp, #0]
   bf858:	2301      	movs	r3, #1
   bf85a:	4805      	ldr	r0, [pc, #20]	; (bf870 <_ZL9i2c_writehPKhmPv+0x24>)
   bf85c:	9301      	str	r3, [sp, #4]
   bf85e:	6800      	ldr	r0, [r0, #0]
   bf860:	f000 fa66 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bf864:	f080 0001 	eor.w	r0, r0, #1
    return 1;

  return 0;
}
   bf868:	b240      	sxtb	r0, r0
   bf86a:	b005      	add	sp, #20
   bf86c:	f85d fb04 	ldr.w	pc, [sp], #4
   bf870:	2003e5e0 	.word	0x2003e5e0

000bf874 <_ZL8i2c_readhPhmPv>:
                void *intf_ptr) {
   bf874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bf876:	460b      	mov	r3, r1
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
   bf878:	2100      	movs	r1, #0
   bf87a:	e9cd 2100 	strd	r2, r1, [sp]
                void *intf_ptr) {
   bf87e:	f88d 000f 	strb.w	r0, [sp, #15]
  if (!g_i2c_dev->write_then_read(&reg_addr, 1, reg_data, len))
   bf882:	4806      	ldr	r0, [pc, #24]	; (bf89c <_ZL8i2c_readhPhmPv+0x28>)
   bf884:	2201      	movs	r2, #1
   bf886:	f10d 010f 	add.w	r1, sp, #15
   bf88a:	6800      	ldr	r0, [r0, #0]
   bf88c:	f000 faa2 	bl	bfdd4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   bf890:	f080 0001 	eor.w	r0, r0, #1
}
   bf894:	b240      	sxtb	r0, r0
   bf896:	b005      	add	sp, #20
   bf898:	f85d fb04 	ldr.w	pc, [sp], #4
   bf89c:	2003e5e0 	.word	0x2003e5e0

000bf8a0 <_ZL10delay_usecmPv>:
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bf8a0:	f005 bba6 	b.w	c4ff0 <HAL_Delay_Microseconds>

000bf8a4 <_ZN15Adafruit_BMP3XXC1Ev>:
  _meas_end = 0;
   bf8a4:	2200      	movs	r2, #0
Adafruit_BMP3XX::Adafruit_BMP3XX(void) {
   bf8a6:	e9c0 2204 	strd	r2, r2, [r0, #16]
  _meas_end = 0;
   bf8aa:	6282      	str	r2, [r0, #40]	; 0x28
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
   bf8ac:	8302      	strh	r2, [r0, #24]
   bf8ae:	7682      	strb	r2, [r0, #26]
}
   bf8b0:	4770      	bx	lr
	...

000bf8b4 <_ZN15Adafruit_BMP3XX5_initEv>:
bool Adafruit_BMP3XX::_init(void) {
   bf8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  g_i2c_dev = i2c_dev;
   bf8b6:	4b2c      	ldr	r3, [pc, #176]	; (bf968 <_ZN15Adafruit_BMP3XX5_initEv+0xb4>)
   bf8b8:	6902      	ldr	r2, [r0, #16]
   bf8ba:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
   bf8bc:	4b2b      	ldr	r3, [pc, #172]	; (bf96c <_ZN15Adafruit_BMP3XX5_initEv+0xb8>)
   bf8be:	6942      	ldr	r2, [r0, #20]
   bf8c0:	601a      	str	r2, [r3, #0]
  rslt = bmp3_soft_reset(&the_sensor);
   bf8c2:	f100 0730 	add.w	r7, r0, #48	; 0x30
  the_sensor.delay_us = delay_usec;
   bf8c6:	4b2a      	ldr	r3, [pc, #168]	; (bf970 <_ZN15Adafruit_BMP3XX5_initEv+0xbc>)
   bf8c8:	6443      	str	r3, [r0, #68]	; 0x44
bool Adafruit_BMP3XX::_init(void) {
   bf8ca:	b089      	sub	sp, #36	; 0x24
   bf8cc:	4605      	mov	r5, r0
  rslt = bmp3_soft_reset(&the_sensor);
   bf8ce:	4638      	mov	r0, r7
   bf8d0:	f7f5 ff16 	bl	b5700 <bmp3_soft_reset>
  if (rslt != BMP3_OK)
   bf8d4:	b110      	cbz	r0, bf8dc <_ZN15Adafruit_BMP3XX5_initEv+0x28>
    return false;
   bf8d6:	2000      	movs	r0, #0
}
   bf8d8:	b009      	add	sp, #36	; 0x24
   bf8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  rslt = bmp3_init(&the_sensor);
   bf8dc:	4638      	mov	r0, r7
   bf8de:	f7f5 ff4d 	bl	b577c <bmp3_init>
  uint8_t crc = 0xFF;
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
   bf8e2:	2215      	movs	r2, #21
   bf8e4:	463b      	mov	r3, r7
   bf8e6:	a902      	add	r1, sp, #8
   bf8e8:	2031      	movs	r0, #49	; 0x31
   bf8ea:	f7f5 fd2f 	bl	b534c <bmp3_get_regs>
  if (rslt == BMP3_OK) {
   bf8ee:	4602      	mov	r2, r0
   bf8f0:	2800      	cmp	r0, #0
   bf8f2:	d1f0      	bne.n	bf8d6 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
   bf8f4:	a902      	add	r1, sp, #8
  uint8_t crc = 0xFF;
   bf8f6:	24ff      	movs	r4, #255	; 0xff
    for (i = 0; i < 21; i++) {
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
   bf8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   bf8fc:	2608      	movs	r6, #8
  int8_t poly = 0x1D;
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
    if ((seed & 0x80) ^ (data & 0x80)) {
   bf8fe:	ea84 0003 	eor.w	r0, r4, r3
      var2 = 0;
    }

    seed = (seed & 0x7F) << 1;
    data = (data & 0x7F) << 1;
    seed = seed ^ (uint8_t)(poly * var2);
   bf902:	f010 0f80 	tst.w	r0, #128	; 0x80
    seed = (seed & 0x7F) << 1;
   bf906:	ea4f 0444 	mov.w	r4, r4, lsl #1
  for (i = 0; i < 8; i++) {
   bf90a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    seed = seed ^ (uint8_t)(poly * var2);
   bf90e:	bf14      	ite	ne
   bf910:	201d      	movne	r0, #29
   bf912:	2000      	moveq	r0, #0
    seed = (seed & 0x7F) << 1;
   bf914:	b2e4      	uxtb	r4, r4
    data = (data & 0x7F) << 1;
   bf916:	005b      	lsls	r3, r3, #1
  for (i = 0; i < 8; i++) {
   bf918:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
    data = (data & 0x7F) << 1;
   bf91c:	b2db      	uxtb	r3, r3
    seed = seed ^ (uint8_t)(poly * var2);
   bf91e:	ea84 0400 	eor.w	r4, r4, r0
  for (i = 0; i < 8; i++) {
   bf922:	d1ec      	bne.n	bf8fe <_ZN15Adafruit_BMP3XX5_initEv+0x4a>
    for (i = 0; i < 21; i++) {
   bf924:	3201      	adds	r2, #1
   bf926:	b2d2      	uxtb	r2, r2
   bf928:	2a15      	cmp	r2, #21
   bf92a:	d1e5      	bne.n	bf8f8 <_ZN15Adafruit_BMP3XX5_initEv+0x44>
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
   bf92c:	463b      	mov	r3, r7
   bf92e:	2201      	movs	r2, #1
   bf930:	f10d 0107 	add.w	r1, sp, #7
   bf934:	2030      	movs	r0, #48	; 0x30
   bf936:	f7f5 fd09 	bl	b534c <bmp3_get_regs>
    crc = (crc ^ 0xFF);
   bf93a:	43e4      	mvns	r4, r4
    if (stored_crc != crc) {
   bf93c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   bf940:	b2e4      	uxtb	r4, r4
   bf942:	42a3      	cmp	r3, r4
   bf944:	d1c7      	bne.n	bf8d6 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  if (rslt != BMP3_OK)
   bf946:	2800      	cmp	r0, #0
   bf948:	d1c5      	bne.n	bf8d6 <_ZN15Adafruit_BMP3XX5_initEv+0x22>
  the_sensor.settings.odr_filter.odr = odr;
   bf94a:	2303      	movs	r3, #3
   bf94c:	f885 30e6 	strb.w	r3, [r5, #230]	; 0xe6
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
   bf950:	2001      	movs	r0, #1
    _filterEnabled = false;
   bf952:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  the_sensor.settings.odr_filter.press_os = oversample;
   bf956:	f885 60e3 	strb.w	r6, [r5, #227]	; 0xe3
  the_sensor.settings.odr_filter.temp_os = oversample;
   bf95a:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    _filterEnabled = false;
   bf95e:	61ab      	str	r3, [r5, #24]
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
   bf960:	f885 00e0 	strb.w	r0, [r5, #224]	; 0xe0
  return true;
   bf964:	e7b8      	b.n	bf8d8 <_ZN15Adafruit_BMP3XX5_initEv+0x24>
   bf966:	bf00      	nop
   bf968:	2003e5e0 	.word	0x2003e5e0
   bf96c:	2003e5e4 	.word	0x2003e5e4
   bf970:	000bf8a1 	.word	0x000bf8a1

000bf974 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire>:
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
   bf974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf976:	4604      	mov	r4, r0
  if (i2c_dev)
   bf978:	6900      	ldr	r0, [r0, #16]
bool Adafruit_BMP3XX::begin_I2C(uint8_t addr, TwoWire *theWire) {
   bf97a:	460e      	mov	r6, r1
   bf97c:	4617      	mov	r7, r2
  if (i2c_dev)
   bf97e:	b110      	cbz	r0, bf986 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x12>
    delete i2c_dev;
   bf980:	2110      	movs	r1, #16
   bf982:	f7f5 fb82 	bl	b508a <_ZdlPvj>
  if (spi_dev)
   bf986:	6965      	ldr	r5, [r4, #20]
   bf988:	b135      	cbz	r5, bf998 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x24>
    delete spi_dev;
   bf98a:	4628      	mov	r0, r5
   bf98c:	f000 fa39 	bl	bfe02 <_ZN18Adafruit_SPIDeviceD1Ev>
   bf990:	2138      	movs	r1, #56	; 0x38
   bf992:	4628      	mov	r0, r5
   bf994:	f7f5 fb79 	bl	b508a <_ZdlPvj>
  spi_dev = NULL;
   bf998:	2300      	movs	r3, #0
   bf99a:	6163      	str	r3, [r4, #20]
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   bf99c:	2010      	movs	r0, #16
   bf99e:	f7f5 fb70 	bl	b5082 <_Znwj>
   bf9a2:	4605      	mov	r5, r0
   bf9a4:	b118      	cbz	r0, bf9ae <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x3a>
   bf9a6:	463a      	mov	r2, r7
   bf9a8:	4631      	mov	r1, r6
   bf9aa:	f000 f996 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   bf9ae:	4f0e      	ldr	r7, [pc, #56]	; (bf9e8 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x74>)
   bf9b0:	6125      	str	r5, [r4, #16]
  if (!i2c_dev->begin()) {
   bf9b2:	2101      	movs	r1, #1
   bf9b4:	4628      	mov	r0, r5
  g_i2c_dev = i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   bf9b6:	603d      	str	r5, [r7, #0]
  if (!i2c_dev->begin()) {
   bf9b8:	f000 f9ab 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   bf9bc:	b190      	cbz	r0, bf9e4 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x70>
  the_sensor.intf = BMP3_I2C_INTF;
   bf9be:	2301      	movs	r3, #1
   bf9c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  the_sensor.read = &i2c_read;
   bf9c4:	4b09      	ldr	r3, [pc, #36]	; (bf9ec <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x78>)
   bf9c6:	63e3      	str	r3, [r4, #60]	; 0x3c
  the_sensor.write = &i2c_write;
   bf9c8:	4b09      	ldr	r3, [pc, #36]	; (bf9f0 <_ZN15Adafruit_BMP3XX9begin_I2CEhP7TwoWire+0x7c>)
   bf9ca:	6423      	str	r3, [r4, #64]	; 0x40
  the_sensor.intf_ptr = g_i2c_dev;
   bf9cc:	683b      	ldr	r3, [r7, #0]
   bf9ce:	6363      	str	r3, [r4, #52]	; 0x34
  the_sensor.dummy_byte = 0;
   bf9d0:	2300      	movs	r3, #0
  the_sensor.chip_id = addr;
   bf9d2:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  the_sensor.dummy_byte = 0;
   bf9d6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return _init();
   bf9da:	4620      	mov	r0, r4
}
   bf9dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return _init();
   bf9e0:	f7ff bf68 	b.w	bf8b4 <_ZN15Adafruit_BMP3XX5_initEv>
}
   bf9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf9e6:	bf00      	nop
   bf9e8:	2003e5e0 	.word	0x2003e5e0
   bf9ec:	000bf875 	.word	0x000bf875
   bf9f0:	000bf84d 	.word	0x000bf84d

000bf9f4 <_ZN15Adafruit_BMP3XX14performReadingEv>:
bool Adafruit_BMP3XX::performReading(void) {
   bf9f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  g_i2c_dev = i2c_dev;
   bf9f6:	4b21      	ldr	r3, [pc, #132]	; (bfa7c <_ZN15Adafruit_BMP3XX14performReadingEv+0x88>)
   bf9f8:	6902      	ldr	r2, [r0, #16]
   bf9fa:	601a      	str	r2, [r3, #0]
  g_spi_dev = spi_dev;
   bf9fc:	4b20      	ldr	r3, [pc, #128]	; (bfa80 <_ZN15Adafruit_BMP3XX14performReadingEv+0x8c>)
   bf9fe:	6942      	ldr	r2, [r0, #20]
   bfa00:	601a      	str	r2, [r3, #0]
bool Adafruit_BMP3XX::performReading(void) {
   bfa02:	4604      	mov	r4, r0
  the_sensor.settings.temp_en = BMP3_ENABLE;
   bfa04:	2301      	movs	r3, #1
  if (_tempOSEnabled) {
   bfa06:	7e42      	ldrb	r2, [r0, #25]
  the_sensor.settings.temp_en = BMP3_ENABLE;
   bfa08:	f880 30e2 	strb.w	r3, [r0, #226]	; 0xe2
  the_sensor.settings.press_en = BMP3_ENABLE;
   bfa0c:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
  if (_presOSEnabled) {
   bfa10:	7ea3      	ldrb	r3, [r4, #26]
    settings_sel |= BMP3_SEL_TEMP_OS;
   bfa12:	2a00      	cmp	r2, #0
   bfa14:	bf0c      	ite	eq
   bfa16:	2004      	moveq	r0, #4
   bfa18:	2024      	movne	r0, #36	; 0x24
  if (_presOSEnabled) {
   bfa1a:	b993      	cbnz	r3, bfa42 <_ZN15Adafruit_BMP3XX14performReadingEv+0x4e>
  settings_sel |= BMP3_SEL_PRESS_EN;
   bfa1c:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled) {
   bfa20:	7e23      	ldrb	r3, [r4, #24]
   bfa22:	b10b      	cbz	r3, bfa28 <_ZN15Adafruit_BMP3XX14performReadingEv+0x34>
    settings_sel |= BMP3_SEL_IIR_FILTER;
   bfa24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  if (_ODREnabled) {
   bfa28:	7ee3      	ldrb	r3, [r4, #27]
   bfa2a:	b10b      	cbz	r3, bfa30 <_ZN15Adafruit_BMP3XX14performReadingEv+0x3c>
    settings_sel |= BMP3_SEL_ODR;
   bfa2c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
   bfa30:	f104 0630 	add.w	r6, r4, #48	; 0x30
   bfa34:	4631      	mov	r1, r6
   bfa36:	f7f5 fd35 	bl	b54a4 <bmp3_set_sensor_settings>
  if (rslt != BMP3_OK)
   bfa3a:	b128      	cbz	r0, bfa48 <_ZN15Adafruit_BMP3XX14performReadingEv+0x54>
    return false;
   bfa3c:	2000      	movs	r0, #0
}
   bfa3e:	b004      	add	sp, #16
   bfa40:	bd70      	pop	{r4, r5, r6, pc}
    settings_sel |= BMP3_SEL_PRESS_OS;
   bfa42:	f040 0012 	orr.w	r0, r0, #18
   bfa46:	e7eb      	b.n	bfa20 <_ZN15Adafruit_BMP3XX14performReadingEv+0x2c>
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
   bfa48:	2501      	movs	r5, #1
   bfa4a:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
  rslt = bmp3_set_op_mode(&the_sensor);
   bfa4e:	4630      	mov	r0, r6
   bfa50:	f7f5 ffab 	bl	b59aa <bmp3_set_op_mode>
  if (rslt != BMP3_OK)
   bfa54:	2800      	cmp	r0, #0
   bfa56:	d1f1      	bne.n	bfa3c <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
   bfa58:	4632      	mov	r2, r6
   bfa5a:	4669      	mov	r1, sp
   bfa5c:	2003      	movs	r0, #3
   bfa5e:	f7f6 f819 	bl	b5a94 <bmp3_get_sensor_data>
  if (rslt != BMP3_OK)
   bfa62:	2800      	cmp	r0, #0
   bfa64:	d1ea      	bne.n	bfa3c <_ZN15Adafruit_BMP3XX14performReadingEv+0x48>
  temperature = data.temperature;
   bfa66:	e9dd 2300 	ldrd	r2, r3, [sp]
   bfa6a:	e9c4 2300 	strd	r2, r3, [r4]
  pressure = data.pressure;
   bfa6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  return true;
   bfa72:	4628      	mov	r0, r5
  pressure = data.pressure;
   bfa74:	e9c4 2302 	strd	r2, r3, [r4, #8]
  return true;
   bfa78:	e7e1      	b.n	bfa3e <_ZN15Adafruit_BMP3XX14performReadingEv+0x4a>
   bfa7a:	bf00      	nop
   bfa7c:	2003e5e0 	.word	0x2003e5e0
   bfa80:	2003e5e4 	.word	0x2003e5e4

000bfa84 <_ZN15Adafruit_BMP3XX15readTemperatureEv>:
float Adafruit_BMP3XX::readTemperature(void) {
   bfa84:	b510      	push	{r4, lr}
   bfa86:	4604      	mov	r4, r0
  performReading();
   bfa88:	f7ff ffb4 	bl	bf9f4 <_ZN15Adafruit_BMP3XX14performReadingEv>
  return temperature;
   bfa8c:	e9d4 0100 	ldrd	r0, r1, [r4]
   bfa90:	f7f4 ff7a 	bl	b4988 <__aeabi_d2f>
}
   bfa94:	ee00 0a10 	vmov	s0, r0
   bfa98:	bd10      	pop	{r4, pc}

000bfa9a <_ZN15Adafruit_BMP3XX12readPressureEv>:
float Adafruit_BMP3XX::readPressure(void) {
   bfa9a:	b510      	push	{r4, lr}
   bfa9c:	4604      	mov	r4, r0
  performReading();
   bfa9e:	f7ff ffa9 	bl	bf9f4 <_ZN15Adafruit_BMP3XX14performReadingEv>
  return pressure;
   bfaa2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   bfaa6:	f7f4 ff6f 	bl	b4988 <__aeabi_d2f>
}
   bfaaa:	ee00 0a10 	vmov	s0, r0
   bfaae:	bd10      	pop	{r4, pc}

000bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   bfab0:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   bfab2:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   bfab4:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   bfab8:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   bfaba:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   bfabe:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   bfac2:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   bfac4:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   bfac6:	7382      	strb	r2, [r0, #14]
  _width = width;
   bfac8:	7303      	strb	r3, [r0, #12]
}
   bfaca:	bd30      	pop	{r4, r5, pc}

000bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(
   bfacc:	b530      	push	{r4, r5, lr}
    Adafruit_I2CDevice *i2cdevice, Adafruit_SPIDevice *spidevice,
    Adafruit_BusIO_SPIRegType type, uint16_t reg_addr, uint8_t width,
    uint8_t byteorder, uint8_t address_width) {
  _spidevice = spidevice;
  _i2cdevice = i2cdevice;
  _spiregtype = type;
   bface:	7203      	strb	r3, [r0, #8]
  _addrwidth = address_width;
   bfad0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   bfad4:	7343      	strb	r3, [r0, #13]
  _address = reg_addr;
   bfad6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   bfada:	8143      	strh	r3, [r0, #10]
  _byteorder = byteorder;
   bfadc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   bfae0:	7383      	strb	r3, [r0, #14]
    uint8_t byteorder, uint8_t address_width) {
   bfae2:	2500      	movs	r5, #0
  _width = width;
   bfae4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    uint8_t byteorder, uint8_t address_width) {
   bfae8:	6145      	str	r5, [r0, #20]
  _i2cdevice = i2cdevice;
   bfaea:	e9c0 1200 	strd	r1, r2, [r0]
  _width = width;
   bfaee:	7303      	strb	r3, [r0, #12]
}
   bfaf0:	bd30      	pop	{r4, r5, pc}

000bfaf2 <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bfaf2:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bfaf4:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bfaf6:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bfaf8:	b085      	sub	sp, #20
   bfafa:	4603      	mov	r3, r0

  if (_i2cdevice) {
   bfafc:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bfafe:	f88d 400c 	strb.w	r4, [sp, #12]
   bfb02:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   bfb04:	460e      	mov	r6, r1
   bfb06:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   bfb08:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   bfb0c:	b140      	cbz	r0, bfb20 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bfb0e:	7b5b      	ldrb	r3, [r3, #13]
   bfb10:	9301      	str	r3, [sp, #4]
   bfb12:	ab03      	add	r3, sp, #12
   bfb14:	9300      	str	r3, [sp, #0]
   bfb16:	2301      	movs	r3, #1
   bfb18:	f000 f90a 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   bfb1c:	b005      	add	sp, #20
   bfb1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   bfb20:	6858      	ldr	r0, [r3, #4]
   bfb22:	2800      	cmp	r0, #0
   bfb24:	d0fa      	beq.n	bfb1c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bfb26:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   bfb2a:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bfb2e:	f1be 0f03 	cmp.w	lr, #3
   bfb32:	d10c      	bne.n	bfb4e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bfb34:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   bfb38:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bfb3c:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   bfb3e:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bfb42:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   bfb46:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bfb48:	f000 fa17 	bl	bff7a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   bfb4c:	e7e6      	b.n	bfb1c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bfb4e:	f1be 0f00 	cmp.w	lr, #0
   bfb52:	d109      	bne.n	bfb68 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   bfb54:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   bfb58:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   bfb5c:	f8cd c000 	str.w	ip, [sp]
   bfb60:	ab03      	add	r3, sp, #12
   bfb62:	463a      	mov	r2, r7
   bfb64:	4631      	mov	r1, r6
   bfb66:	e7ef      	b.n	bfb48 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bfb68:	f1be 0f02 	cmp.w	lr, #2
   bfb6c:	d102      	bne.n	bfb74 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   bfb6e:	f064 047f 	orn	r4, r4, #127	; 0x7f
   bfb72:	e7f1      	b.n	bfb58 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bfb74:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   bfb78:	bf01      	itttt	eq
   bfb7a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   bfb7e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   bfb82:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   bfb86:	f88d 300c 	strbeq.w	r3, [sp, #12]
   bfb8a:	e7e7      	b.n	bfb5c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000bfb8c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   bfb8c:	b4f0      	push	{r4, r5, r6, r7}
   bfb8e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   bfb90:	b902      	cbnz	r2, bfb94 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   bfb92:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   bfb94:	2a04      	cmp	r2, #4
   bfb96:	d814      	bhi.n	bfbc2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   bfb98:	f100 050f 	add.w	r5, r0, #15
   bfb9c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   bfb9e:	1884      	adds	r4, r0, r2
   bfba0:	4629      	mov	r1, r5
   bfba2:	4284      	cmp	r4, r0
   bfba4:	d009      	beq.n	bfbba <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   bfba6:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   bfba8:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   bfbaa:	b927      	cbnz	r7, bfbb6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   bfbac:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   bfbae:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   bfbb0:	3501      	adds	r5, #1
   bfbb2:	3c01      	subs	r4, #1
   bfbb4:	e7f5      	b.n	bfba2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   bfbb6:	73a6      	strb	r6, [r4, #14]
   bfbb8:	e7f9      	b.n	bfbae <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   bfbba:	4620      	mov	r0, r4
}
   bfbbc:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   bfbbe:	f7ff bf98 	b.w	bfaf2 <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   bfbc2:	2000      	movs	r0, #0
   bfbc4:	bcf0      	pop	{r4, r5, r6, r7}
   bfbc6:	4770      	bx	lr

000bfbc8 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bfbc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   bfbca:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   bfbcc:	7a85      	ldrb	r5, [r0, #10]
   bfbce:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bfbd2:	4604      	mov	r4, r0

  if (_i2cdevice) {
   bfbd4:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   bfbd6:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   bfbd8:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   bfbda:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   bfbde:	b140      	cbz	r0, bfbf2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bfbe0:	2100      	movs	r1, #0
   bfbe2:	e9cd 2100 	strd	r2, r1, [sp]
   bfbe6:	a903      	add	r1, sp, #12
   bfbe8:	7b62      	ldrb	r2, [r4, #13]
   bfbea:	f000 f8f3 	bl	bfdd4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   bfbee:	b004      	add	sp, #16
   bfbf0:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   bfbf2:	6860      	ldr	r0, [r4, #4]
   bfbf4:	2800      	cmp	r0, #0
   bfbf6:	d0fa      	beq.n	bfbee <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bfbf8:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bfbfa:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   bfbfc:	2903      	cmp	r1, #3
   bfbfe:	d10d      	bne.n	bfc1c <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   bfc00:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bfc04:	21ff      	movs	r1, #255	; 0xff
   bfc06:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   bfc0a:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   bfc0e:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   bfc12:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bfc14:	a903      	add	r1, sp, #12
   bfc16:	f000 f9e2 	bl	bffde <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   bfc1a:	e7e8      	b.n	bfbee <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   bfc1c:	b941      	cbnz	r1, bfc30 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   bfc1e:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   bfc22:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   bfc26:	21ff      	movs	r1, #255	; 0xff
   bfc28:	e9cd 2100 	strd	r2, r1, [sp]
   bfc2c:	4622      	mov	r2, r4
   bfc2e:	e7f1      	b.n	bfc14 <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   bfc30:	2902      	cmp	r1, #2
   bfc32:	d102      	bne.n	bfc3a <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   bfc34:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   bfc38:	e7f3      	b.n	bfc22 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   bfc3a:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   bfc3c:	bf02      	ittt	eq
   bfc3e:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   bfc42:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   bfc46:	f88d 100c 	strbeq.w	r1, [sp, #12]
   bfc4a:	e7ec      	b.n	bfc26 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000bfc4c <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   bfc4c:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   bfc4e:	f100 050f 	add.w	r5, r0, #15
   bfc52:	7b02      	ldrb	r2, [r0, #12]
   bfc54:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   bfc56:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   bfc58:	f7ff ffb6 	bl	bfbc8 <_ZN23Adafruit_BusIO_Register4readEPhh>
   bfc5c:	b178      	cbz	r0, bfc7e <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   bfc5e:	7b22      	ldrb	r2, [r4, #12]
   bfc60:	4629      	mov	r1, r5
   bfc62:	4422      	add	r2, r4
  uint32_t value = 0;
   bfc64:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   bfc66:	42a2      	cmp	r2, r4
   bfc68:	d00b      	beq.n	bfc82 <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   bfc6a:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   bfc6c:	7ba0      	ldrb	r0, [r4, #14]
   bfc6e:	b920      	cbnz	r0, bfc7a <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   bfc70:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   bfc72:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   bfc74:	3a01      	subs	r2, #1
   bfc76:	3101      	adds	r1, #1
   bfc78:	e7f5      	b.n	bfc66 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   bfc7a:	7808      	ldrb	r0, [r1, #0]
   bfc7c:	e7f9      	b.n	bfc72 <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   bfc7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   bfc82:	bd38      	pop	{r3, r4, r5, pc}

000bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   bfc84:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   bfc86:	6001      	str	r1, [r0, #0]
  _bits = bits;
   bfc88:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   bfc8a:	7143      	strb	r3, [r0, #5]
}
   bfc8c:	bd10      	pop	{r4, pc}

000bfc8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   bfc8e:	b510      	push	{r4, lr}
   bfc90:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bfc92:	6800      	ldr	r0, [r0, #0]
   bfc94:	f7ff ffda 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   bfc98:	7922      	ldrb	r2, [r4, #4]
   bfc9a:	2301      	movs	r3, #1
   bfc9c:	4093      	lsls	r3, r2
  val >>= _shift;
   bfc9e:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   bfca0:	3b01      	subs	r3, #1
  val >>= _shift;
   bfca2:	40d0      	lsrs	r0, r2
}
   bfca4:	4018      	ands	r0, r3
   bfca6:	bd10      	pop	{r4, pc}

000bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bfca8:	b570      	push	{r4, r5, r6, lr}
   bfcaa:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   bfcac:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   bfcae:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   bfcb0:	f7ff ffcc 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   bfcb4:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   bfcb6:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   bfcb8:	2201      	movs	r2, #1
   bfcba:	409a      	lsls	r2, r3
   bfcbc:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   bfcbe:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   bfcc2:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   bfcc6:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   bfcc8:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   bfcca:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   bfcce:	4329      	orrs	r1, r5
   bfcd0:	7b02      	ldrb	r2, [r0, #12]
}
   bfcd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   bfcd6:	f7ff bf59 	b.w	bfb8c <_ZN23Adafruit_BusIO_Register5writeEmh>

000bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   bfcda:	6042      	str	r2, [r0, #4]
  _begun = false;
   bfcdc:	2200      	movs	r2, #0
   bfcde:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   bfce0:	2220      	movs	r2, #32
  _addr = addr;
   bfce2:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   bfce4:	60c2      	str	r2, [r0, #12]
#endif
}
   bfce6:	4770      	bx	lr

000bfce8 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   bfce8:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   bfcea:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   bfcec:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   bfcee:	b153      	cbz	r3, bfd06 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   bfcf0:	7821      	ldrb	r1, [r4, #0]
   bfcf2:	6860      	ldr	r0, [r4, #4]
   bfcf4:	f006 fb08 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   bfcf8:	6860      	ldr	r0, [r4, #4]
   bfcfa:	f006 fb2a 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
   bfcfe:	fab0 f080 	clz	r0, r0
   bfd02:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   bfd04:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   bfd06:	2101      	movs	r1, #1
   bfd08:	f000 f803 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   bfd0c:	2800      	cmp	r0, #0
   bfd0e:	d1ef      	bne.n	bfcf0 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   bfd10:	e7f8      	b.n	bfd04 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000bfd12 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bfd12:	b538      	push	{r3, r4, r5, lr}
   bfd14:	4604      	mov	r4, r0
  _wire->begin();
   bfd16:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   bfd18:	460d      	mov	r5, r1
  _wire->begin();
   bfd1a:	f006 fabf 	bl	c629c <_ZN7TwoWire5beginEv>
  _begun = true;
   bfd1e:	2001      	movs	r0, #1
   bfd20:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   bfd22:	b125      	cbz	r5, bfd2e <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   bfd24:	4620      	mov	r0, r4
}
   bfd26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   bfd2a:	f7ff bfdd 	b.w	bfce8 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   bfd2e:	bd38      	pop	{r3, r4, r5, pc}

000bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   bfd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bfd34:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   bfd38:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   bfd3a:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   bfd3c:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   bfd3e:	4432      	add	r2, r6
   bfd40:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   bfd42:	4604      	mov	r4, r0
   bfd44:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   bfd46:	d902      	bls.n	bfd4e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   bfd48:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("Failed to send!");
#endif
    return false;
  }
}
   bfd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   bfd4e:	7801      	ldrb	r1, [r0, #0]
   bfd50:	6840      	ldr	r0, [r0, #4]
   bfd52:	f006 fad9 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bfd56:	b97e      	cbnz	r6, bfd78 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   bfd58:	6860      	ldr	r0, [r4, #4]
   bfd5a:	6803      	ldr	r3, [r0, #0]
   bfd5c:	462a      	mov	r2, r5
   bfd5e:	68db      	ldr	r3, [r3, #12]
   bfd60:	4641      	mov	r1, r8
   bfd62:	4798      	blx	r3
   bfd64:	4285      	cmp	r5, r0
   bfd66:	d1ef      	bne.n	bfd48 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   bfd68:	6860      	ldr	r0, [r4, #4]
   bfd6a:	4639      	mov	r1, r7
   bfd6c:	f006 faed 	bl	c634a <_ZN7TwoWire15endTransmissionEh>
   bfd70:	fab0 f080 	clz	r0, r0
   bfd74:	0940      	lsrs	r0, r0, #5
   bfd76:	e7e8      	b.n	bfd4a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   bfd78:	f1b9 0f00 	cmp.w	r9, #0
   bfd7c:	d0ec      	beq.n	bfd58 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   bfd7e:	6860      	ldr	r0, [r4, #4]
   bfd80:	6803      	ldr	r3, [r0, #0]
   bfd82:	4632      	mov	r2, r6
   bfd84:	68db      	ldr	r3, [r3, #12]
   bfd86:	4649      	mov	r1, r9
   bfd88:	4798      	blx	r3
   bfd8a:	4286      	cmp	r6, r0
   bfd8c:	d1dc      	bne.n	bfd48 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   bfd8e:	e7e3      	b.n	bfd58 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>:
 *    @param  buffer Pointer to buffer of data to read into
 *    @param  len Number of bytes from buffer to read.
 *    @param  stop Whether to send an I2C STOP signal on read
 *    @return True if read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bfd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bfd94:	4615      	mov	r5, r2
  if (len > maxBufferSize()) {
   bfd96:	68c2      	ldr	r2, [r0, #12]
   bfd98:	42aa      	cmp	r2, r5
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   bfd9a:	4604      	mov	r4, r0
   bfd9c:	460e      	mov	r6, r1
  if (len > maxBufferSize()) {
   bfd9e:	d314      	bcc.n	bfdca <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
  }

#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   bfda0:	7801      	ldrb	r1, [r0, #0]
   bfda2:	6840      	ldr	r0, [r0, #4]
   bfda4:	b2ea      	uxtb	r2, r5
   bfda6:	f006 fa98 	bl	c62da <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   bfdaa:	4285      	cmp	r5, r0
   bfdac:	d10d      	bne.n	bfdca <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
   bfdae:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   bfdb0:	fa1f f887 	uxth.w	r8, r7
   bfdb4:	4545      	cmp	r5, r8
   bfdb6:	f107 0701 	add.w	r7, r7, #1
   bfdba:	d909      	bls.n	bfdd0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x40>
    buffer[i] = _wire->read();
   bfdbc:	6860      	ldr	r0, [r4, #4]
   bfdbe:	6803      	ldr	r3, [r0, #0]
   bfdc0:	695b      	ldr	r3, [r3, #20]
   bfdc2:	4798      	blx	r3
   bfdc4:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   bfdc8:	e7f2      	b.n	bfdb0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x20>
    return false;
   bfdca:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bfdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfdd0:	2001      	movs	r0, #1
   bfdd2:	e7fb      	b.n	bfdcc <_ZN18Adafruit_I2CDevice4readEPhjb+0x3c>

000bfdd4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   bfdd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bfdd6:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   bfdd8:	2300      	movs	r3, #0
   bfdda:	e9cd 3300 	strd	r3, r3, [sp]
   bfdde:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   bfde2:	9e06      	ldr	r6, [sp, #24]
   bfde4:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   bfde6:	f7ff ffa3 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   bfdea:	b140      	cbz	r0, bfdfe <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   bfdec:	2301      	movs	r3, #1
   bfdee:	4632      	mov	r2, r6
   bfdf0:	4629      	mov	r1, r5
   bfdf2:	4620      	mov	r0, r4
}
   bfdf4:	b002      	add	sp, #8
   bfdf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   bfdfa:	f7ff bfc9 	b.w	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   bfdfe:	b002      	add	sp, #8
   bfe00:	bd70      	pop	{r4, r5, r6, pc}

000bfe02 <_ZN18Adafruit_SPIDeviceD1Ev>:
}

/*!
 *    @brief  Release memory allocated in constructors
 */
Adafruit_SPIDevice::~Adafruit_SPIDevice() {
   bfe02:	b510      	push	{r4, lr}
   bfe04:	4604      	mov	r4, r0
  if (_spiSetting) {
   bfe06:	6840      	ldr	r0, [r0, #4]
   bfe08:	b110      	cbz	r0, bfe10 <_ZN18Adafruit_SPIDeviceD1Ev+0xe>
    delete _spiSetting;
   bfe0a:	6803      	ldr	r3, [r0, #0]
   bfe0c:	689b      	ldr	r3, [r3, #8]
   bfe0e:	4798      	blx	r3
    _spiSetting = nullptr;
  }
}
   bfe10:	4620      	mov	r0, r4
   bfe12:	bd10      	pop	{r4, pc}

000bfe14 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bfe14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bfe18:	4604      	mov	r4, r0
  if (_spi) {
   bfe1a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   bfe1c:	b085      	sub	sp, #20
   bfe1e:	460d      	mov	r5, r1
  if (_spi) {
   bfe20:	b140      	cbz	r0, bfe34 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   bfe22:	2300      	movs	r3, #0
   bfe24:	9300      	str	r3, [sp, #0]
   bfe26:	4613      	mov	r3, r2
   bfe28:	460a      	mov	r2, r1
   bfe2a:	f006 ffb1 	bl	c6d90 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   bfe2e:	b005      	add	sp, #20
   bfe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   bfe34:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bfe36:	68a0      	ldr	r0, [r4, #8]
   bfe38:	4f48      	ldr	r7, [pc, #288]	; (bff5c <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   bfe3a:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   bfe3e:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bfe40:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   bfe42:	bf0c      	ite	eq
   bfe44:	f04f 0b01 	moveq.w	fp, #1
   bfe48:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   bfe4c:	ea1b 0f03 	tst.w	fp, r3
   bfe50:	eb01 0302 	add.w	r3, r1, r2
   bfe54:	bf0c      	ite	eq
   bfe56:	f04f 0901 	moveq.w	r9, #1
   bfe5a:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   bfe5e:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   bfe60:	9303      	str	r3, [sp, #12]
   bfe62:	9b03      	ldr	r3, [sp, #12]
   bfe64:	42ab      	cmp	r3, r5
   bfe66:	d0e2      	beq.n	bfe2e <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   bfe68:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   bfe6c:	465e      	mov	r6, fp
    uint8_t reply = 0;
   bfe6e:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   bfe72:	b117      	cbz	r7, bfe7a <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
   bfe74:	4638      	mov	r0, r7
   bfe76:	f005 f8bb 	bl	c4ff0 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   bfe7a:	7b63      	ldrb	r3, [r4, #13]
   bfe7c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   bfe80:	d141      	bne.n	bff06 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bfe82:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bfe86:	1c5a      	adds	r2, r3, #1
   bfe88:	d00f      	beq.n	bfeaa <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   bfe8a:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   bfe8e:	bf14      	ite	ne
   bfe90:	2301      	movne	r3, #1
   bfe92:	2300      	moveq	r3, #0
   bfe94:	454b      	cmp	r3, r9
   bfe96:	d008      	beq.n	bfeaa <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   bfe98:	6963      	ldr	r3, [r4, #20]
   bfe9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   bfe9c:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   bfe9e:	2900      	cmp	r1, #0
   bfea0:	d02c      	beq.n	bfefc <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   bfea2:	4302      	orrs	r2, r0
   bfea4:	601a      	str	r2, [r3, #0]
   bfea6:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   bfeaa:	69a1      	ldr	r1, [r4, #24]
   bfeac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bfeae:	680a      	ldr	r2, [r1, #0]
   bfeb0:	4313      	orrs	r3, r2
   bfeb2:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bfeb4:	b117      	cbz	r7, bfebc <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   bfeb6:	4638      	mov	r0, r7
   bfeb8:	f005 f89a 	bl	c4ff0 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   bfebc:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bfec0:	3301      	adds	r3, #1
   bfec2:	d006      	beq.n	bfed2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   bfec4:	69e3      	ldr	r3, [r4, #28]
   bfec6:	681a      	ldr	r2, [r3, #0]
   bfec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bfeca:	421a      	tst	r2, r3
            reply |= b;
   bfecc:	bf18      	it	ne
   bfece:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   bfed2:	69a1      	ldr	r1, [r4, #24]
   bfed4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bfed6:	680a      	ldr	r2, [r1, #0]
   bfed8:	ea22 0303 	bic.w	r3, r2, r3
   bfedc:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   bfede:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bfee2:	3301      	adds	r3, #1
        buffer[i] = reply;
   bfee4:	bf18      	it	ne
   bfee6:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   bfeea:	7b23      	ldrb	r3, [r4, #12]
   bfeec:	2b00      	cmp	r3, #0
   bfeee:	d132      	bne.n	bff56 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   bfef0:	0076      	lsls	r6, r6, #1
   bfef2:	b2f6      	uxtb	r6, r6
   bfef4:	2e00      	cmp	r6, #0
   bfef6:	d1bc      	bne.n	bfe72 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   bfef8:	3501      	adds	r5, #1
   bfefa:	e7b2      	b.n	bfe62 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   bfefc:	ea22 0200 	bic.w	r2, r2, r0
   bff00:	601a      	str	r2, [r3, #0]
   bff02:	4689      	mov	r9, r1
   bff04:	e7d1      	b.n	bfeaa <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   bff06:	69a1      	ldr	r1, [r4, #24]
   bff08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bff0a:	680a      	ldr	r2, [r1, #0]
   bff0c:	4313      	orrs	r3, r2
   bff0e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   bff10:	b117      	cbz	r7, bff18 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   bff12:	4638      	mov	r0, r7
   bff14:	f005 f86c 	bl	c4ff0 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   bff18:	f994 3010 	ldrsb.w	r3, [r4, #16]
   bff1c:	3301      	adds	r3, #1
   bff1e:	d008      	beq.n	bff32 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   bff20:	6963      	ldr	r3, [r4, #20]
   bff22:	6a61      	ldr	r1, [r4, #36]	; 0x24
   bff24:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   bff26:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   bff2a:	bf14      	ite	ne
   bff2c:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   bff2e:	438a      	biceq	r2, r1
   bff30:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   bff32:	69a1      	ldr	r1, [r4, #24]
   bff34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bff36:	680a      	ldr	r2, [r1, #0]
   bff38:	ea22 0303 	bic.w	r3, r2, r3
   bff3c:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   bff3e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   bff42:	3301      	adds	r3, #1
   bff44:	d0cb      	beq.n	bfede <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   bff46:	69e3      	ldr	r3, [r4, #28]
   bff48:	681a      	ldr	r2, [r3, #0]
   bff4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   bff4c:	421a      	tst	r2, r3
            reply |= b;
   bff4e:	bf18      	it	ne
   bff50:	ea46 0808 	orrne.w	r8, r6, r8
   bff54:	e7c3      	b.n	bfede <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   bff56:	0876      	lsrs	r6, r6, #1
   bff58:	e7cc      	b.n	bfef4 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   bff5a:	bf00      	nop
   bff5c:	0007a120 	.word	0x0007a120

000bff60 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   bff60:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   bff62:	2201      	movs	r2, #1
  uint8_t data = send;
   bff64:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   bff68:	f10d 0107 	add.w	r1, sp, #7
   bff6c:	f7ff ff52 	bl	bfe14 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   bff70:	f89d 0007 	ldrb.w	r0, [sp, #7]
   bff74:	b003      	add	sp, #12
   bff76:	f85d fb04 	ldr.w	pc, [sp], #4

000bff7a <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bff7e:	4604      	mov	r4, r0
  if (_spi) {
   bff80:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   bff82:	460e      	mov	r6, r1
   bff84:	4617      	mov	r7, r2
   bff86:	461d      	mov	r5, r3
  if (_spi) {
   bff88:	b110      	cbz	r0, bff90 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   bff8a:	6861      	ldr	r1, [r4, #4]
   bff8c:	f006 fe8c 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bff90:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bff94:	2100      	movs	r1, #0
   bff96:	b280      	uxth	r0, r0
   bff98:	f007 fb1f 	bl	c75da <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   bff9c:	9b06      	ldr	r3, [sp, #24]
   bff9e:	eb05 0803 	add.w	r8, r5, r3
   bffa2:	4545      	cmp	r5, r8
   bffa4:	d108      	bne.n	bffb8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   bffa6:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   bffa8:	42b7      	cmp	r7, r6
   bffaa:	d00b      	beq.n	bffc4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   bffac:	f816 1b01 	ldrb.w	r1, [r6], #1
   bffb0:	4620      	mov	r0, r4
   bffb2:	f7ff ffd5 	bl	bff60 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   bffb6:	e7f7      	b.n	bffa8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   bffb8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bffbc:	4620      	mov	r0, r4
   bffbe:	f7ff ffcf 	bl	bff60 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   bffc2:	e7ee      	b.n	bffa2 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   bffc4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bffc8:	2101      	movs	r1, #1
   bffca:	b280      	uxth	r0, r0
   bffcc:	f007 fb05 	bl	c75da <digitalWrite>

  if (_spi) {
   bffd0:	6820      	ldr	r0, [r4, #0]
   bffd2:	b108      	cbz	r0, bffd8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   bffd4:	f006 fe4e 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   bffd8:	2001      	movs	r0, #1
   bffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bffde <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   bffde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bffe2:	4604      	mov	r4, r0
  if (_spi) {
   bffe4:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   bffe6:	f89d 801c 	ldrb.w	r8, [sp, #28]
   bffea:	460e      	mov	r6, r1
   bffec:	4617      	mov	r7, r2
   bffee:	461d      	mov	r5, r3
  if (_spi) {
   bfff0:	b110      	cbz	r0, bfff8 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   bfff2:	6861      	ldr	r1, [r4, #4]
   bfff4:	f006 fe58 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   bfff8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   bfffc:	2100      	movs	r1, #0
   bfffe:	b280      	uxth	r0, r0
   c0000:	f007 faeb 	bl	c75da <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   c0004:	4437      	add	r7, r6
   c0006:	42be      	cmp	r6, r7
   c0008:	d10a      	bne.n	c0020 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   c000a:	9b06      	ldr	r3, [sp, #24]
   c000c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   c000e:	42ae      	cmp	r6, r5
   c0010:	d00c      	beq.n	c002c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   c0012:	4641      	mov	r1, r8
   c0014:	4620      	mov	r0, r4
   c0016:	f7ff ffa3 	bl	bff60 <_ZN18Adafruit_SPIDevice8transferEh>
   c001a:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   c001e:	e7f6      	b.n	c000e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   c0020:	f816 1b01 	ldrb.w	r1, [r6], #1
   c0024:	4620      	mov	r0, r4
   c0026:	f7ff ff9b 	bl	bff60 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   c002a:	e7ec      	b.n	c0006 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   c002c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   c0030:	2101      	movs	r1, #1
   c0032:	b280      	uxth	r0, r0
   c0034:	f007 fad1 	bl	c75da <digitalWrite>

  if (_spi) {
   c0038:	6820      	ldr	r0, [r4, #0]
   c003a:	b108      	cbz	r0, c0040 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   c003c:	f006 fe1a 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   c0040:	2001      	movs	r0, #1
   c0042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c0046 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
   c0046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c004a:	b085      	sub	sp, #20
   c004c:	461f      	mov	r7, r3
   c004e:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   c0052:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   c0056:	eba8 0902 	sub.w	r9, r8, r2
   c005a:	eba7 0a01 	sub.w	sl, r7, r1
   c005e:	f1b9 0f00 	cmp.w	r9, #0
   c0062:	bfb8      	it	lt
   c0064:	f1c9 0900 	rsblt	r9, r9, #0
   c0068:	f1ba 0f00 	cmp.w	sl, #0
   c006c:	bfb8      	it	lt
   c006e:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   c0072:	45d1      	cmp	r9, sl
                             uint16_t color) {
   c0074:	4683      	mov	fp, r0
   c0076:	460c      	mov	r4, r1
   c0078:	4615      	mov	r5, r2
  if (steep) {
   c007a:	dd04      	ble.n	c0086 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   c007c:	463a      	mov	r2, r7
    _swap_int16_t(x0, y0);
   c007e:	462c      	mov	r4, r5
    _swap_int16_t(x1, y1);
   c0080:	4647      	mov	r7, r8
    _swap_int16_t(x0, y0);
   c0082:	460d      	mov	r5, r1
    _swap_int16_t(x1, y1);
   c0084:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   c0086:	42bc      	cmp	r4, r7
   c0088:	dd05      	ble.n	c0096 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   c008a:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
   c008c:	4645      	mov	r5, r8
   c008e:	4690      	mov	r8, r2
  if (x0 > x1) {
   c0090:	4622      	mov	r2, r4
   c0092:	463c      	mov	r4, r7
   c0094:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   c0096:	1b3e      	subs	r6, r7, r4
   c0098:	b2b2      	uxth	r2, r6
   c009a:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   c009c:	eba8 0205 	sub.w	r2, r8, r5
   c00a0:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   c00a4:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   c00a8:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   c00ac:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   c00b0:	4545      	cmp	r5, r8
   c00b2:	bfb4      	ite	lt
   c00b4:	2201      	movlt	r2, #1
   c00b6:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   c00ba:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   c00bc:	1076      	asrs	r6, r6, #1
    ystep = -1;
   c00be:	9202      	str	r2, [sp, #8]
  }

  for (; x0 <= x1; x0++) {
   c00c0:	42bc      	cmp	r4, r7
   c00c2:	dc1c      	bgt.n	c00fe <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
    if (steep) {
      writePixel(y0, x0, color);
   c00c4:	f8db 2000 	ldr.w	r2, [fp]
   c00c8:	9303      	str	r3, [sp, #12]
    if (steep) {
   c00ca:	45d1      	cmp	r9, sl
      writePixel(y0, x0, color);
   c00cc:	f8d2 8018 	ldr.w	r8, [r2, #24]
   c00d0:	bfc7      	ittee	gt
   c00d2:	4629      	movgt	r1, r5
   c00d4:	4622      	movgt	r2, r4
    } else {
      writePixel(x0, y0, color);
   c00d6:	462a      	movle	r2, r5
   c00d8:	4621      	movle	r1, r4
   c00da:	4658      	mov	r0, fp
   c00dc:	47c0      	blx	r8
    }
    err -= dy;
   c00de:	9a01      	ldr	r2, [sp, #4]
      writePixel(x0, y0, color);
   c00e0:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   c00e2:	1ab6      	subs	r6, r6, r2
   c00e4:	b2b1      	uxth	r1, r6
   c00e6:	b236      	sxth	r6, r6
    if (err < 0) {
   c00e8:	2e00      	cmp	r6, #0
   c00ea:	da05      	bge.n	c00f8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
      y0 += ystep;
   c00ec:	9a02      	ldr	r2, [sp, #8]
   c00ee:	4415      	add	r5, r2
      err += dx;
   c00f0:	9a00      	ldr	r2, [sp, #0]
   c00f2:	1856      	adds	r6, r2, r1
      y0 += ystep;
   c00f4:	b22d      	sxth	r5, r5
      err += dx;
   c00f6:	b236      	sxth	r6, r6
  for (; x0 <= x1; x0++) {
   c00f8:	3401      	adds	r4, #1
   c00fa:	b224      	sxth	r4, r4
   c00fc:	e7e0      	b.n	c00c0 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
    }
  }
}
   c00fe:	b005      	add	sp, #20
   c0100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c0104 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
   c0104:	4770      	bx	lr

000c0106 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
   c0106:	b410      	push	{r4}
  drawPixel(x, y, color);
   c0108:	6804      	ldr	r4, [r0, #0]
   c010a:	6924      	ldr	r4, [r4, #16]
   c010c:	46a4      	mov	ip, r4
}
   c010e:	f85d 4b04 	ldr.w	r4, [sp], #4
  drawPixel(x, y, color);
   c0112:	4760      	bx	ip

000c0114 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
   c0114:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
   c0116:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   c0118:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastVLine(x, y, h, color);
   c011c:	9502      	str	r5, [sp, #8]
   c011e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c0120:	46a4      	mov	ip, r4
}
   c0122:	bc30      	pop	{r4, r5}
  drawFastVLine(x, y, h, color);
   c0124:	4760      	bx	ip

000c0126 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
   c0126:	b430      	push	{r4, r5}
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
   c0128:	6804      	ldr	r4, [r0, #0]
                                  uint16_t color) {
   c012a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  drawFastHLine(x, y, w, color);
   c012e:	9502      	str	r5, [sp, #8]
   c0130:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   c0132:	46a4      	mov	ip, r4
}
   c0134:	bc30      	pop	{r4, r5}
  drawFastHLine(x, y, w, color);
   c0136:	4760      	bx	ip

000c0138 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
   c0138:	b470      	push	{r4, r5, r6}
   c013a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   c013e:	f8bd 6010 	ldrh.w	r6, [sp, #16]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
   c0142:	6804      	ldr	r4, [r0, #0]
   c0144:	e9cd 5603 	strd	r5, r6, [sp, #12]
   c0148:	6c24      	ldr	r4, [r4, #64]	; 0x40
   c014a:	46a4      	mov	ip, r4
}
   c014c:	bc70      	pop	{r4, r5, r6}
  fillRect(x, y, w, h, color);
   c014e:	4760      	bx	ip

000c0150 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
   c0150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c0154:	461c      	mov	r4, r3
  startWrite();
   c0156:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   c0158:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   c015c:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   c015e:	4605      	mov	r5, r0
   c0160:	4616      	mov	r6, r2
  writeLine(x, y, x, y + h - 1, color);
   c0162:	3c01      	subs	r4, #1
   c0164:	4434      	add	r4, r6
                                 uint16_t color) {
   c0166:	460f      	mov	r7, r1
  writeLine(x, y, x, y + h - 1, color);
   c0168:	b224      	sxth	r4, r4
  startWrite();
   c016a:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
   c016c:	682b      	ldr	r3, [r5, #0]
   c016e:	f8cd 8004 	str.w	r8, [sp, #4]
   c0172:	9400      	str	r4, [sp, #0]
   c0174:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   c0176:	4628      	mov	r0, r5
   c0178:	463b      	mov	r3, r7
   c017a:	4632      	mov	r2, r6
   c017c:	4639      	mov	r1, r7
   c017e:	47a0      	blx	r4
  endWrite();
   c0180:	682b      	ldr	r3, [r5, #0]
   c0182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c0184:	4628      	mov	r0, r5
}
   c0186:	b002      	add	sp, #8
   c0188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   c018c:	4718      	bx	r3

000c018e <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
   c018e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c0192:	461d      	mov	r5, r3
  startWrite();
   c0194:	6803      	ldr	r3, [r0, #0]
                                 uint16_t color) {
   c0196:	f8bd 8020 	ldrh.w	r8, [sp, #32]
  startWrite();
   c019a:	695b      	ldr	r3, [r3, #20]
                                 uint16_t color) {
   c019c:	4604      	mov	r4, r0
   c019e:	4617      	mov	r7, r2
   c01a0:	460e      	mov	r6, r1
  startWrite();
   c01a2:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
   c01a4:	e9cd 7800 	strd	r7, r8, [sp]
   c01a8:	6822      	ldr	r2, [r4, #0]
   c01aa:	1e6b      	subs	r3, r5, #1
   c01ac:	4433      	add	r3, r6
   c01ae:	6a95      	ldr	r5, [r2, #40]	; 0x28
   c01b0:	4620      	mov	r0, r4
   c01b2:	b21b      	sxth	r3, r3
   c01b4:	463a      	mov	r2, r7
   c01b6:	4631      	mov	r1, r6
   c01b8:	47a8      	blx	r5
  endWrite();
   c01ba:	6823      	ldr	r3, [r4, #0]
   c01bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c01be:	4620      	mov	r0, r4
}
   c01c0:	b002      	add	sp, #8
   c01c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  endWrite();
   c01c6:	4718      	bx	r3

000c01c8 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   c01c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   c01cc:	461e      	mov	r6, r3
  startWrite();
   c01ce:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   c01d0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  startWrite();
   c01d4:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   c01d6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   c01da:	460c      	mov	r4, r1
   c01dc:	4605      	mov	r5, r0
   c01de:	4617      	mov	r7, r2
  startWrite();
   c01e0:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
   c01e2:	4426      	add	r6, r4
   c01e4:	42b4      	cmp	r4, r6
    writeFastVLine(i, y, h, color);
   c01e6:	682b      	ldr	r3, [r5, #0]
  for (int16_t i = x; i < x + w; i++) {
   c01e8:	da0b      	bge.n	c0202 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
    writeFastVLine(i, y, h, color);
   c01ea:	f8cd 8000 	str.w	r8, [sp]
   c01ee:	f8d3 a020 	ldr.w	sl, [r3, #32]
   c01f2:	4621      	mov	r1, r4
   c01f4:	464b      	mov	r3, r9
   c01f6:	463a      	mov	r2, r7
   c01f8:	4628      	mov	r0, r5
   c01fa:	3401      	adds	r4, #1
   c01fc:	47d0      	blx	sl
  for (int16_t i = x; i < x + w; i++) {
   c01fe:	b224      	sxth	r4, r4
   c0200:	e7f0      	b.n	c01e4 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
  }
  endWrite();
   c0202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c0204:	4628      	mov	r0, r5
}
   c0206:	b002      	add	sp, #8
   c0208:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   c020c:	4718      	bx	r3

000c020e <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   c020e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   c0210:	6802      	ldr	r2, [r0, #0]
   c0212:	9101      	str	r1, [sp, #4]
   c0214:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   c0218:	9100      	str	r1, [sp, #0]
   c021a:	6c14      	ldr	r4, [r2, #64]	; 0x40
   c021c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c0220:	2200      	movs	r2, #0
   c0222:	4611      	mov	r1, r2
   c0224:	47a0      	blx	r4
}
   c0226:	b002      	add	sp, #8
   c0228:	bd10      	pop	{r4, pc}

000c022a <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
   c022a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  // Update in subclasses if desired!
  if (x0 == x1) {
   c022e:	4299      	cmp	r1, r3
                            uint16_t color) {
   c0230:	4616      	mov	r6, r2
   c0232:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   c0236:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if (y0 > y1)
      _swap_int16_t(y0, y1);
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   c023a:	6802      	ldr	r2, [r0, #0]
                            uint16_t color) {
   c023c:	4680      	mov	r8, r0
   c023e:	460d      	mov	r5, r1
   c0240:	461c      	mov	r4, r3
  if (x0 == x1) {
   c0242:	d113      	bne.n	c026c <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
    if (y0 > y1)
   c0244:	42be      	cmp	r6, r7
   c0246:	bfc8      	it	gt
   c0248:	4633      	movgt	r3, r6
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   c024a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    if (y0 > y1)
   c024e:	bfc4      	itt	gt
   c0250:	463e      	movgt	r6, r7
   c0252:	461f      	movgt	r7, r3
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
   c0254:	1c7b      	adds	r3, r7, #1
   c0256:	6b94      	ldr	r4, [r2, #56]	; 0x38
   c0258:	1b9b      	subs	r3, r3, r6
  } else if (y0 == y1) {
    if (x0 > x1)
      _swap_int16_t(x0, x1);
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   c025a:	b21b      	sxth	r3, r3
   c025c:	4632      	mov	r2, r6
   c025e:	4629      	mov	r1, r5
   c0260:	4640      	mov	r0, r8
   c0262:	46a4      	mov	ip, r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
   c0264:	b003      	add	sp, #12
   c0266:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   c026a:	4760      	bx	ip
  } else if (y0 == y1) {
   c026c:	42be      	cmp	r6, r7
   c026e:	d10a      	bne.n	c0286 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
    if (x0 > x1)
   c0270:	4299      	cmp	r1, r3
   c0272:	bfc2      	ittt	gt
   c0274:	460b      	movgt	r3, r1
   c0276:	4625      	movgt	r5, r4
   c0278:	461c      	movgt	r4, r3
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
   c027a:	1c63      	adds	r3, r4, #1
   c027c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   c0280:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   c0282:	1b5b      	subs	r3, r3, r5
   c0284:	e7e9      	b.n	c025a <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
    startWrite();
   c0286:	6953      	ldr	r3, [r2, #20]
   c0288:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
   c028a:	e9cd 7900 	strd	r7, r9, [sp]
   c028e:	f8d8 3000 	ldr.w	r3, [r8]
   c0292:	4640      	mov	r0, r8
   c0294:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   c0296:	4632      	mov	r2, r6
   c0298:	4623      	mov	r3, r4
   c029a:	4629      	mov	r1, r5
   c029c:	47b8      	blx	r7
    endWrite();
   c029e:	f8d8 3000 	ldr.w	r3, [r8]
   c02a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c02a4:	4640      	mov	r0, r8
}
   c02a6:	b003      	add	sp, #12
   c02a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    endWrite();
   c02ac:	4718      	bx	r3

000c02ae <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
   c02ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   c02b2:	461d      	mov	r5, r3
  startWrite();
   c02b4:	6803      	ldr	r3, [r0, #0]
                            uint16_t color) {
   c02b6:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  startWrite();
   c02ba:	695b      	ldr	r3, [r3, #20]
                            uint16_t color) {
   c02bc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   c02c0:	4604      	mov	r4, r0
   c02c2:	460f      	mov	r7, r1
   c02c4:	4616      	mov	r6, r2
  startWrite();
   c02c6:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
   c02c8:	6823      	ldr	r3, [r4, #0]
   c02ca:	f8cd 8000 	str.w	r8, [sp]
   c02ce:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   c02d2:	4632      	mov	r2, r6
   c02d4:	462b      	mov	r3, r5
   c02d6:	4639      	mov	r1, r7
   c02d8:	4620      	mov	r0, r4
   c02da:	47d0      	blx	sl
  writeFastHLine(x, y + h - 1, w, color);
   c02dc:	6823      	ldr	r3, [r4, #0]
   c02de:	f8cd 8000 	str.w	r8, [sp]
   c02e2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   c02e6:	4432      	add	r2, r6
   c02e8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   c02ec:	4639      	mov	r1, r7
   c02ee:	462b      	mov	r3, r5
   c02f0:	4620      	mov	r0, r4
   c02f2:	b212      	sxth	r2, r2
   c02f4:	47d0      	blx	sl
  writeFastVLine(x, y, h, color);
   c02f6:	6823      	ldr	r3, [r4, #0]
   c02f8:	f8cd 8000 	str.w	r8, [sp]
   c02fc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   c0300:	4632      	mov	r2, r6
   c0302:	464b      	mov	r3, r9
   c0304:	4639      	mov	r1, r7
   c0306:	4620      	mov	r0, r4
   c0308:	47d0      	blx	sl
  writeFastVLine(x + w - 1, y, h, color);
   c030a:	1e6b      	subs	r3, r5, #1
   c030c:	19d9      	adds	r1, r3, r7
   c030e:	6823      	ldr	r3, [r4, #0]
   c0310:	f8cd 8000 	str.w	r8, [sp]
   c0314:	6a1d      	ldr	r5, [r3, #32]
   c0316:	4620      	mov	r0, r4
   c0318:	464b      	mov	r3, r9
   c031a:	4632      	mov	r2, r6
   c031c:	b209      	sxth	r1, r1
   c031e:	47a8      	blx	r5
  endWrite();
   c0320:	6823      	ldr	r3, [r4, #0]
   c0322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c0324:	4620      	mov	r0, r4
}
   c0326:	b002      	add	sp, #8
   c0328:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
   c032c:	4718      	bx	r3

000c032e <_ZN12Adafruit_GFX13invertDisplayEb>:
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
   c032e:	4770      	bx	lr

000c0330 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   c0330:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   c0334:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   c0338:	7683      	strb	r3, [r0, #26]
  switch (rotation) {
   c033a:	07c9      	lsls	r1, r1, #31
    _width = WIDTH;
   c033c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   c0340:	bf59      	ittee	pl
   c0342:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   c0344:	81c2      	strhpl	r2, [r0, #14]
    _width = HEIGHT;
   c0346:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   c0348:	81c3      	strhmi	r3, [r0, #14]
}
   c034a:	4770      	bx	lr

000c034c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   c034c:	b530      	push	{r4, r5, lr}
   c034e:	8142      	strh	r2, [r0, #10]
  _height = HEIGHT;
   c0350:	81c2      	strh	r2, [r0, #14]
  textsize_x = textsize_y = 1;
   c0352:	4a07      	ldr	r2, [pc, #28]	; (c0370 <_ZN12Adafruit_GFXC1Ess+0x24>)
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   c0354:	4d07      	ldr	r5, [pc, #28]	; (c0374 <_ZN12Adafruit_GFXC1Ess+0x28>)
   c0356:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   c0358:	2400      	movs	r4, #0
  _width = WIDTH;
   c035a:	8181      	strh	r1, [r0, #12]
  textsize_x = textsize_y = 1;
   c035c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   c0360:	e9c0 1205 	strd	r1, r2, [r0, #20]
   c0364:	6044      	str	r4, [r0, #4]
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
   c0366:	6005      	str	r5, [r0, #0]
  cursor_y = cursor_x = 0;
   c0368:	6104      	str	r4, [r0, #16]
  _cp437 = false;
   c036a:	7704      	strb	r4, [r0, #28]
  gfxFont = NULL;
   c036c:	6204      	str	r4, [r0, #32]
}
   c036e:	bd30      	pop	{r4, r5, pc}
   c0370:	01000101 	.word	0x01000101
   c0374:	000cc604 	.word	0x000cc604

000c0378 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
                              int16_t w, int16_t h, uint16_t color) {
   c0378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c037c:	b089      	sub	sp, #36	; 0x24
   c037e:	e9cd 1202 	strd	r1, r2, [sp, #8]
  startWrite();
   c0382:	6802      	ldr	r2, [r0, #0]
                              int16_t w, int16_t h, uint16_t color) {
   c0384:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   c0388:	9304      	str	r3, [sp, #16]
   c038a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  startWrite();
   c038e:	6952      	ldr	r2, [r2, #20]
                              int16_t w, int16_t h, uint16_t color) {
   c0390:	9305      	str	r3, [sp, #20]
   c0392:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   c0396:	4604      	mov	r4, r0
  startWrite();
   c0398:	4790      	blx	r2
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   c039a:	f118 0207 	adds.w	r2, r8, #7
  startWrite();
   c039e:	f04f 0600 	mov.w	r6, #0
  int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   c03a2:	bf48      	it	mi
   c03a4:	f108 020e 	addmi.w	r2, r8, #14
   c03a8:	ea4f 0be2 	mov.w	fp, r2, asr #3
  startWrite();
   c03ac:	9601      	str	r6, [sp, #4]
  uint8_t byte = 0;
   c03ae:	4635      	mov	r5, r6
   c03b0:	9b03      	ldr	r3, [sp, #12]
   c03b2:	9a01      	ldr	r2, [sp, #4]
  for (int16_t j = 0; j < h; j++, y++) {
   c03b4:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   c03b8:	189a      	adds	r2, r3, r2
   c03ba:	9b05      	ldr	r3, [sp, #20]
   c03bc:	428b      	cmp	r3, r1
   c03be:	b212      	sxth	r2, r2
   c03c0:	dd27      	ble.n	c0412 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   c03c2:	9b04      	ldr	r3, [sp, #16]
   c03c4:	4433      	add	r3, r6
  for (int16_t j = 0; j < h; j++, y++) {
   c03c6:	f04f 0900 	mov.w	r9, #0
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   c03ca:	9306      	str	r3, [sp, #24]
   c03cc:	fa0f f089 	sxth.w	r0, r9
    for (int16_t i = 0; i < w; i++) {
   c03d0:	4580      	cmp	r8, r0
   c03d2:	fa1f f189 	uxth.w	r1, r9
   c03d6:	dd17      	ble.n	c0408 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
      if (i & 7)
   c03d8:	074f      	lsls	r7, r1, #29
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   c03da:	bf05      	ittet	eq
   c03dc:	9b06      	ldreq	r3, [sp, #24]
   c03de:	10c0      	asreq	r0, r0, #3
        byte <<= 1;
   c03e0:	006d      	lslne	r5, r5, #1
        byte = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   c03e2:	5c1d      	ldrbeq	r5, [r3, r0]
        byte <<= 1;
   c03e4:	bf18      	it	ne
   c03e6:	b2ed      	uxtbne	r5, r5
      if (byte & 0x80)
   c03e8:	062b      	lsls	r3, r5, #24
   c03ea:	d50a      	bpl.n	c0402 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
        writePixel(x + i, y, color);
   c03ec:	9b02      	ldr	r3, [sp, #8]
   c03ee:	6820      	ldr	r0, [r4, #0]
   c03f0:	9207      	str	r2, [sp, #28]
   c03f2:	4419      	add	r1, r3
   c03f4:	6983      	ldr	r3, [r0, #24]
   c03f6:	b209      	sxth	r1, r1
   c03f8:	461f      	mov	r7, r3
   c03fa:	4620      	mov	r0, r4
   c03fc:	4653      	mov	r3, sl
   c03fe:	47b8      	blx	r7
   c0400:	9a07      	ldr	r2, [sp, #28]
    for (int16_t i = 0; i < w; i++) {
   c0402:	f109 0901 	add.w	r9, r9, #1
   c0406:	e7e1      	b.n	c03cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
  for (int16_t j = 0; j < h; j++, y++) {
   c0408:	9b01      	ldr	r3, [sp, #4]
   c040a:	3301      	adds	r3, #1
   c040c:	9301      	str	r3, [sp, #4]
   c040e:	445e      	add	r6, fp
   c0410:	e7ce      	b.n	c03b0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
  endWrite();
   c0412:	6823      	ldr	r3, [r4, #0]
   c0414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c0416:	4620      	mov	r0, r4
}
   c0418:	b009      	add	sp, #36	; 0x24
   c041a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  endWrite();
   c041e:	4718      	bx	r3

000c0420 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
                            uint8_t size_y) {
   c0420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c0424:	ed2d 8b02 	vpush	{d8}
   c0428:	b091      	sub	sp, #68	; 0x44
   c042a:	4616      	mov	r6, r2
  if (!gfxFont) { // 'Classic' built-in font
   c042c:	6a02      	ldr	r2, [r0, #32]
                            uint8_t size_y) {
   c042e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   c0432:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   c0436:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   c043a:	9103      	str	r1, [sp, #12]
   c043c:	461f      	mov	r7, r3
   c043e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   c0442:	9304      	str	r3, [sp, #16]
   c0444:	4683      	mov	fp, r0
  if (!gfxFont) { // 'Classic' built-in font
   c0446:	2a00      	cmp	r2, #0
   c0448:	f040 80c5 	bne.w	c05d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
    if ((x >= _width) ||              // Clip right
   c044c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   c0450:	428b      	cmp	r3, r1
   c0452:	f340 814c 	ble.w	c06ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   c0456:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   c045a:	42b3      	cmp	r3, r6
   c045c:	f340 8147 	ble.w	c06ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((x + 6 * size_x - 1) < 0) || // Clip left
   c0460:	2306      	movs	r3, #6
   c0462:	fb13 1305 	smlabb	r3, r3, r5, r1
        (y >= _height) ||             // Clip bottom
   c0466:	2b00      	cmp	r3, #0
   c0468:	f340 8141 	ble.w	c06ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        ((y + 8 * size_y - 1) < 0))   // Clip top
   c046c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
        ((x + 6 * size_x - 1) < 0) || // Clip left
   c0470:	2b00      	cmp	r3, #0
   c0472:	f340 813c 	ble.w	c06ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
    if (!_cp437 && (c >= 176))
   c0476:	7f03      	ldrb	r3, [r0, #28]
   c0478:	b91b      	cbnz	r3, c0482 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   c047a:	2faf      	cmp	r7, #175	; 0xaf
      c++; // Handle 'classic' charset behavior
   c047c:	bf84      	itt	hi
   c047e:	3701      	addhi	r7, #1
   c0480:	b2ff      	uxtbhi	r7, r7
    startWrite();
   c0482:	f8db 3000 	ldr.w	r3, [fp]
   c0486:	4658      	mov	r0, fp
   c0488:	695b      	ldr	r3, [r3, #20]
   c048a:	4798      	blx	r3
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   c048c:	2205      	movs	r2, #5
   c048e:	9209      	str	r2, [sp, #36]	; 0x24
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   c0490:	2200      	movs	r2, #0
   c0492:	9205      	str	r2, [sp, #20]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   c0494:	4a98      	ldr	r2, [pc, #608]	; (c06f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   c0496:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   c049a:	18d3      	adds	r3, r2, r3
   c049c:	930c      	str	r3, [sp, #48]	; 0x30
            writePixel(x + i, y + j, color);
   c049e:	b2b3      	uxth	r3, r6
   c04a0:	9306      	str	r3, [sp, #24]
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   c04a2:	9a05      	ldr	r2, [sp, #20]
   c04a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c04a6:	5c9b      	ldrb	r3, [r3, r2]
   c04a8:	9307      	str	r3, [sp, #28]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   c04aa:	b2ab      	uxth	r3, r5
   c04ac:	930b      	str	r3, [sp, #44]	; 0x2c
   c04ae:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   c04b2:	9308      	str	r3, [sp, #32]
   c04b4:	9b03      	ldr	r3, [sp, #12]
   c04b6:	fb02 f905 	mul.w	r9, r2, r5
   c04ba:	fa19 f983 	uxtah	r9, r9, r3
   c04be:	fa0f f389 	sxth.w	r3, r9
   c04c2:	ee08 3a10 	vmov	s16, r3
   c04c6:	2308      	movs	r3, #8
   c04c8:	930a      	str	r3, [sp, #40]	; 0x28
            writePixel(x + i, y + j, bg);
   c04ca:	9b03      	ldr	r3, [sp, #12]
   c04cc:	eb02 0a03 	add.w	sl, r2, r3
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   c04d0:	f04f 0900 	mov.w	r9, #0
            writePixel(x + i, y + j, bg);
   c04d4:	fa0f fa8a 	sxth.w	sl, sl
        if (line & 1) {
   c04d8:	9a07      	ldr	r2, [sp, #28]
            writePixel(x + i, y + j, color);
   c04da:	f8db 3000 	ldr.w	r3, [fp]
        if (line & 1) {
   c04de:	07d2      	lsls	r2, r2, #31
   c04e0:	d552      	bpl.n	c0588 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
          if (size_x == 1 && size_y == 1)
   c04e2:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
   c04e4:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
   c04e8:	d13e      	bne.n	c0568 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   c04ea:	2c01      	cmp	r4, #1
   c04ec:	d13c      	bne.n	c0568 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
            writePixel(x + i, y + j, color);
   c04ee:	699b      	ldr	r3, [r3, #24]
   c04f0:	9906      	ldr	r1, [sp, #24]
   c04f2:	461f      	mov	r7, r3
   c04f4:	9b04      	ldr	r3, [sp, #16]
   c04f6:	440a      	add	r2, r1
            writePixel(x + i, y + j, bg);
   c04f8:	b212      	sxth	r2, r2
   c04fa:	4651      	mov	r1, sl
   c04fc:	4658      	mov	r0, fp
   c04fe:	47b8      	blx	r7
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
   c0500:	f109 0301 	add.w	r3, r9, #1
   c0504:	fa4f f983 	sxtb.w	r9, r3
   c0508:	9b07      	ldr	r3, [sp, #28]
   c050a:	085b      	lsrs	r3, r3, #1
   c050c:	9307      	str	r3, [sp, #28]
   c050e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c0510:	3b01      	subs	r3, #1
   c0512:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   c0516:	930a      	str	r3, [sp, #40]	; 0x28
   c0518:	d1de      	bne.n	c04d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
   c051a:	9f05      	ldr	r7, [sp, #20]
   c051c:	3701      	adds	r7, #1
   c051e:	b27b      	sxtb	r3, r7
   c0520:	9305      	str	r3, [sp, #20]
   c0522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c0524:	3b01      	subs	r3, #1
   c0526:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   c052a:	9309      	str	r3, [sp, #36]	; 0x24
   c052c:	d1b9      	bne.n	c04a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
    if (bg != color) { // If opaque, draw vertical line for last column
   c052e:	9b04      	ldr	r3, [sp, #16]
   c0530:	4543      	cmp	r3, r8
   c0532:	d00f      	beq.n	c0554 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
      if (size_x == 1 && size_y == 1)
   c0534:	2d01      	cmp	r5, #1
        writeFastVLine(x + 5, y, 8, bg);
   c0536:	f8db 3000 	ldr.w	r3, [fp]
      if (size_x == 1 && size_y == 1)
   c053a:	d13b      	bne.n	c05b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   c053c:	2c01      	cmp	r4, #1
   c053e:	d139      	bne.n	c05b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
        writeFastVLine(x + 5, y, 8, bg);
   c0540:	9908      	ldr	r1, [sp, #32]
   c0542:	f8cd 8000 	str.w	r8, [sp]
   c0546:	3105      	adds	r1, #5
   c0548:	6a1c      	ldr	r4, [r3, #32]
   c054a:	4632      	mov	r2, r6
   c054c:	2308      	movs	r3, #8
   c054e:	b209      	sxth	r1, r1
   c0550:	4658      	mov	r0, fp
   c0552:	47a0      	blx	r4
    endWrite();
   c0554:	f8db 3000 	ldr.w	r3, [fp]
   c0558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c055a:	4658      	mov	r0, fp
}
   c055c:	b011      	add	sp, #68	; 0x44
   c055e:	ecbd 8b02 	vpop	{d8}
   c0562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   c0566:	4718      	bx	r3
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
   c0568:	9906      	ldr	r1, [sp, #24]
   c056a:	fb14 f202 	smulbb	r2, r4, r2
   c056e:	440a      	add	r2, r1
   c0570:	9904      	ldr	r1, [sp, #16]
   c0572:	9101      	str	r1, [sp, #4]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   c0574:	9400      	str	r4, [sp, #0]
   c0576:	69db      	ldr	r3, [r3, #28]
   c0578:	ee18 1a10 	vmov	r1, s16
   c057c:	461f      	mov	r7, r3
   c057e:	b212      	sxth	r2, r2
   c0580:	462b      	mov	r3, r5
   c0582:	4658      	mov	r0, fp
   c0584:	47b8      	blx	r7
   c0586:	e7bb      	b.n	c0500 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
        } else if (bg != color) {
   c0588:	9a04      	ldr	r2, [sp, #16]
   c058a:	4542      	cmp	r2, r8
   c058c:	d0b8      	beq.n	c0500 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
          if (size_x == 1 && size_y == 1)
   c058e:	2d01      	cmp	r5, #1
            writePixel(x + i, y + j, color);
   c0590:	fa1f f289 	uxth.w	r2, r9
          if (size_x == 1 && size_y == 1)
   c0594:	d107      	bne.n	c05a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   c0596:	2c01      	cmp	r4, #1
   c0598:	d105      	bne.n	c05a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
            writePixel(x + i, y + j, bg);
   c059a:	699b      	ldr	r3, [r3, #24]
   c059c:	9906      	ldr	r1, [sp, #24]
   c059e:	461f      	mov	r7, r3
   c05a0:	440a      	add	r2, r1
   c05a2:	4643      	mov	r3, r8
   c05a4:	e7a8      	b.n	c04f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   c05a6:	9906      	ldr	r1, [sp, #24]
   c05a8:	f8cd 8004 	str.w	r8, [sp, #4]
   c05ac:	fb14 f202 	smulbb	r2, r4, r2
   c05b0:	440a      	add	r2, r1
   c05b2:	e7df      	b.n	c0574 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
   c05b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c05b6:	f8cd 8004 	str.w	r8, [sp, #4]
   c05ba:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   c05be:	9a08      	ldr	r2, [sp, #32]
   c05c0:	00e4      	lsls	r4, r4, #3
   c05c2:	440a      	add	r2, r1
   c05c4:	4611      	mov	r1, r2
   c05c6:	9400      	str	r4, [sp, #0]
   c05c8:	69dc      	ldr	r4, [r3, #28]
   c05ca:	4632      	mov	r2, r6
   c05cc:	462b      	mov	r3, r5
   c05ce:	b209      	sxth	r1, r1
   c05d0:	4658      	mov	r0, fp
   c05d2:	47a0      	blx	r4
    endWrite();
   c05d4:	e7be      	b.n	c0554 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   c05d6:	7a13      	ldrb	r3, [r2, #8]
  return gfxFont->glyph + c;
   c05d8:	6851      	ldr	r1, [r2, #4]
  return gfxFont->bitmap;
   c05da:	6812      	ldr	r2, [r2, #0]
   c05dc:	920b      	str	r2, [sp, #44]	; 0x2c
    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   c05de:	1aff      	subs	r7, r7, r3
  return gfxFont->glyph + c;
   c05e0:	b2ff      	uxtb	r7, r7
   c05e2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   c05e6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   c05ea:	9206      	str	r2, [sp, #24]
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
   c05ec:	789a      	ldrb	r2, [r3, #2]
   c05ee:	9209      	str	r2, [sp, #36]	; 0x24
   c05f0:	78da      	ldrb	r2, [r3, #3]
   c05f2:	920c      	str	r2, [sp, #48]	; 0x30
    if (size_x > 1 || size_y > 1) {
   c05f4:	2d01      	cmp	r5, #1
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   c05f6:	f993 2005 	ldrsb.w	r2, [r3, #5]
           yo = pgm_read_byte(&glyph->yOffset);
   c05fa:	f993 a006 	ldrsb.w	sl, [r3, #6]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
   c05fe:	920a      	str	r2, [sp, #40]	; 0x28
    if (size_x > 1 || size_y > 1) {
   c0600:	d801      	bhi.n	c0606 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   c0602:	2c01      	cmp	r4, #1
   c0604:	d957      	bls.n	c06b6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
      xo16 = xo;
   c0606:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   c060a:	9308      	str	r3, [sp, #32]
      yo16 = yo;
   c060c:	fa0f f38a 	sxth.w	r3, sl
   c0610:	9307      	str	r3, [sp, #28]
    startWrite();
   c0612:	f8db 3000 	ldr.w	r3, [fp]
   c0616:	4658      	mov	r0, fp
   c0618:	695b      	ldr	r3, [r3, #20]
   c061a:	4798      	blx	r3
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c061c:	b2b3      	uxth	r3, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   c061e:	f04f 0800 	mov.w	r8, #0
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c0622:	930e      	str	r3, [sp, #56]	; 0x38
            writePixel(x + xo + xx, y + yo + yy, color);
   c0624:	fa1a f386 	uxtah	r3, sl, r6
    uint8_t xx, yy, bits = 0, bit = 0;
   c0628:	46c1      	mov	r9, r8
    for (yy = 0; yy < h; yy++) {
   c062a:	4647      	mov	r7, r8
            writePixel(x + xo + xx, y + yo + yy, color);
   c062c:	930f      	str	r3, [sp, #60]	; 0x3c
    for (yy = 0; yy < h; yy++) {
   c062e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c0630:	429f      	cmp	r7, r3
   c0632:	d28f      	bcs.n	c0554 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c0634:	9b07      	ldr	r3, [sp, #28]
   c0636:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   c0638:	443b      	add	r3, r7
   c063a:	fb03 2304 	mla	r3, r3, r4, r2
      for (xx = 0; xx < w; xx++) {
   c063e:	2200      	movs	r2, #0
   c0640:	9205      	str	r2, [sp, #20]
            writePixel(x + xo + xx, y + yo + yy, color);
   c0642:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c0644:	b21b      	sxth	r3, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   c0646:	eb02 0a07 	add.w	sl, r2, r7
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c064a:	ee08 3a10 	vmov	s16, r3
            writePixel(x + xo + xx, y + yo + yy, color);
   c064e:	fa0f fa8a 	sxth.w	sl, sl
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c0652:	4643      	mov	r3, r8
      for (xx = 0; xx < w; xx++) {
   c0654:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c0656:	9905      	ldr	r1, [sp, #20]
   c0658:	4291      	cmp	r1, r2
   c065a:	d241      	bcs.n	c06e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
        if (!(bit++ & 7)) {
   c065c:	1c5a      	adds	r2, r3, #1
   c065e:	b2d2      	uxtb	r2, r2
   c0660:	075b      	lsls	r3, r3, #29
   c0662:	920d      	str	r2, [sp, #52]	; 0x34
   c0664:	d107      	bne.n	c0676 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
          bits = pgm_read_byte(&bitmap[bo++]);
   c0666:	9b06      	ldr	r3, [sp, #24]
   c0668:	9906      	ldr	r1, [sp, #24]
   c066a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c066c:	3301      	adds	r3, #1
   c066e:	b29b      	uxth	r3, r3
   c0670:	f812 9001 	ldrb.w	r9, [r2, r1]
   c0674:	9306      	str	r3, [sp, #24]
        if (bits & 0x80) {
   c0676:	f019 0f80 	tst.w	r9, #128	; 0x80
   c067a:	d012      	beq.n	c06a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
          if (size_x == 1 && size_y == 1) {
   c067c:	2d01      	cmp	r5, #1
            writePixel(x + xo + xx, y + yo + yy, color);
   c067e:	f8db 3000 	ldr.w	r3, [fp]
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
   c0682:	f8bd 100c 	ldrh.w	r1, [sp, #12]
          if (size_x == 1 && size_y == 1) {
   c0686:	d11a      	bne.n	c06be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   c0688:	2c01      	cmp	r4, #1
   c068a:	d118      	bne.n	c06be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
            writePixel(x + xo + xx, y + yo + yy, color);
   c068c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   c068e:	699b      	ldr	r3, [r3, #24]
   c0690:	4411      	add	r1, r2
   c0692:	9a05      	ldr	r2, [sp, #20]
   c0694:	4411      	add	r1, r2
   c0696:	461e      	mov	r6, r3
   c0698:	4652      	mov	r2, sl
   c069a:	9b04      	ldr	r3, [sp, #16]
   c069c:	b209      	sxth	r1, r1
   c069e:	4658      	mov	r0, fp
   c06a0:	47b0      	blx	r6
      for (xx = 0; xx < w; xx++) {
   c06a2:	9e05      	ldr	r6, [sp, #20]
   c06a4:	3601      	adds	r6, #1
   c06a6:	b2f3      	uxtb	r3, r6
        bits <<= 1;
   c06a8:	ea4f 0949 	mov.w	r9, r9, lsl #1
      for (xx = 0; xx < w; xx++) {
   c06ac:	9305      	str	r3, [sp, #20]
        bits <<= 1;
   c06ae:	fa5f f989 	uxtb.w	r9, r9
        if (!(bit++ & 7)) {
   c06b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (xx = 0; xx < w; xx++) {
   c06b4:	e7ce      	b.n	c0654 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
    int16_t xo16 = 0, yo16 = 0;
   c06b6:	2300      	movs	r3, #0
   c06b8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   c06bc:	e7a9      	b.n	c0612 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
   c06be:	9805      	ldr	r0, [sp, #20]
   c06c0:	9a08      	ldr	r2, [sp, #32]
   c06c2:	4402      	add	r2, r0
   c06c4:	fb02 1105 	mla	r1, r2, r5, r1
   c06c8:	9a04      	ldr	r2, [sp, #16]
   c06ca:	e9cd 4200 	strd	r4, r2, [sp]
   c06ce:	69db      	ldr	r3, [r3, #28]
   c06d0:	ee18 2a10 	vmov	r2, s16
   c06d4:	461e      	mov	r6, r3
   c06d6:	b209      	sxth	r1, r1
   c06d8:	462b      	mov	r3, r5
   c06da:	4658      	mov	r0, fp
   c06dc:	47b0      	blx	r6
   c06de:	e7e0      	b.n	c06a2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   c06e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    for (yy = 0; yy < h; yy++) {
   c06e2:	3701      	adds	r7, #1
   c06e4:	4498      	add	r8, r3
   c06e6:	fa5f f888 	uxtb.w	r8, r8
   c06ea:	b2ff      	uxtb	r7, r7
   c06ec:	e79f      	b.n	c062e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   c06ee:	b011      	add	sp, #68	; 0x44
   c06f0:	ecbd 8b02 	vpop	{d8}
   c06f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c06f8:	000cc0fc 	.word	0x000cc0fc

000c06fc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   c06fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!gfxFont) { // 'Classic' built-in font
   c06fe:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   c0700:	b085      	sub	sp, #20
   c0702:	4604      	mov	r4, r0
   c0704:	460b      	mov	r3, r1
  if (!gfxFont) { // 'Classic' built-in font
   c0706:	2a00      	cmp	r2, #0
   c0708:	d134      	bne.n	c0774 <_ZN12Adafruit_GFX5writeEh+0x78>
    if (c == '\n') {              // Newline?
   c070a:	290a      	cmp	r1, #10
   c070c:	d108      	bne.n	c0720 <_ZN12Adafruit_GFX5writeEh+0x24>
      cursor_y += textsize_y * 8; // advance y one line
   c070e:	8a43      	ldrh	r3, [r0, #18]
      cursor_x = 0;               // Reset x to zero,
   c0710:	8202      	strh	r2, [r0, #16]
      cursor_y += textsize_y * 8; // advance y one line
   c0712:	7e42      	ldrb	r2, [r0, #25]
   c0714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
      cursor_y +=
   c0718:	8263      	strh	r3, [r4, #18]
}
   c071a:	2001      	movs	r0, #1
   c071c:	b005      	add	sp, #20
   c071e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (c != '\r') {       // Ignore carriage returns
   c0720:	290d      	cmp	r1, #13
   c0722:	d0fa      	beq.n	c071a <_ZN12Adafruit_GFX5writeEh+0x1e>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   c0724:	7ee1      	ldrb	r1, [r4, #27]
   c0726:	7e00      	ldrb	r0, [r0, #24]
      cursor_y += textsize_y * 8; // advance y one line
   c0728:	7e65      	ldrb	r5, [r4, #25]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   c072a:	b171      	cbz	r1, c074a <_ZN12Adafruit_GFX5writeEh+0x4e>
   c072c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   c0730:	2106      	movs	r1, #6
   c0732:	fb11 6100 	smlabb	r1, r1, r0, r6
   c0736:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   c073a:	42b1      	cmp	r1, r6
      cursor_y += textsize_y * 8; // advance y one line
   c073c:	bfc1      	itttt	gt
   c073e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
        cursor_x = 0;                                       // Reset x to zero,
   c0742:	8222      	strhgt	r2, [r4, #16]
        cursor_y += textsize_y * 8; // advance y one line
   c0744:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   c0748:	8262      	strhgt	r2, [r4, #18]
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   c074a:	8ae2      	ldrh	r2, [r4, #22]
   c074c:	9201      	str	r2, [sp, #4]
   c074e:	8aa2      	ldrh	r2, [r4, #20]
   c0750:	9200      	str	r2, [sp, #0]
   c0752:	e9cd 0502 	strd	r0, r5, [sp, #8]
   c0756:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   c075a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   c075e:	4620      	mov	r0, r4
   c0760:	f7ff fe5e 	bl	c0420 <_ZN12Adafruit_GFX8drawCharEsshtthh>
      cursor_x += textsize_x * 6; // Advance x one char
   c0764:	7e23      	ldrb	r3, [r4, #24]
   c0766:	8a22      	ldrh	r2, [r4, #16]
   c0768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c076c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
        cursor_x +=
   c0770:	8223      	strh	r3, [r4, #16]
   c0772:	e7d2      	b.n	c071a <_ZN12Adafruit_GFX5writeEh+0x1e>
    if (c == '\n') {
   c0774:	290a      	cmp	r1, #10
   c0776:	d107      	bne.n	c0788 <_ZN12Adafruit_GFX5writeEh+0x8c>
      cursor_x = 0;
   c0778:	2300      	movs	r3, #0
   c077a:	8203      	strh	r3, [r0, #16]
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   c077c:	7e41      	ldrb	r1, [r0, #25]
   c077e:	7b12      	ldrb	r2, [r2, #12]
      cursor_y +=
   c0780:	8a43      	ldrh	r3, [r0, #18]
   c0782:	fb01 3302 	mla	r3, r1, r2, r3
   c0786:	e7c7      	b.n	c0718 <_ZN12Adafruit_GFX5writeEh+0x1c>
    } else if (c != '\r') {
   c0788:	290d      	cmp	r1, #13
   c078a:	d0c6      	beq.n	c071a <_ZN12Adafruit_GFX5writeEh+0x1e>
      uint8_t first = pgm_read_byte(&gfxFont->first);
   c078c:	7a15      	ldrb	r5, [r2, #8]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   c078e:	42a9      	cmp	r1, r5
   c0790:	d3c3      	bcc.n	c071a <_ZN12Adafruit_GFX5writeEh+0x1e>
   c0792:	7a91      	ldrb	r1, [r2, #10]
   c0794:	4299      	cmp	r1, r3
   c0796:	d3c0      	bcc.n	c071a <_ZN12Adafruit_GFX5writeEh+0x1e>
  return gfxFont->glyph + c;
   c0798:	6851      	ldr	r1, [r2, #4]
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
   c079a:	1b5d      	subs	r5, r3, r5
  return gfxFont->glyph + c;
   c079c:	b2ed      	uxtb	r5, r5
   c079e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t w = pgm_read_byte(&glyph->width),
   c07a2:	78a8      	ldrb	r0, [r5, #2]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
   c07a4:	b328      	cbz	r0, c07f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   c07a6:	78e9      	ldrb	r1, [r5, #3]
   c07a8:	b319      	cbz	r1, c07f2 <_ZN12Adafruit_GFX5writeEh+0xf6>
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   c07aa:	7ee1      	ldrb	r1, [r4, #27]
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   c07ac:	7e26      	ldrb	r6, [r4, #24]
      cursor_y += textsize_y * 8; // advance y one line
   c07ae:	7e67      	ldrb	r7, [r4, #25]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   c07b0:	b191      	cbz	r1, c07d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   c07b2:	f995 1005 	ldrsb.w	r1, [r5, #5]
   c07b6:	4408      	add	r0, r1
   c07b8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   c07bc:	fb06 1100 	mla	r1, r6, r0, r1
   c07c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   c07c4:	4281      	cmp	r1, r0
   c07c6:	dd07      	ble.n	c07d8 <_ZN12Adafruit_GFX5writeEh+0xdc>
            cursor_x = 0;
   c07c8:	2000      	movs	r0, #0
   c07ca:	8220      	strh	r0, [r4, #16]
      cursor_y += textsize_y * 8; // advance y one line
   c07cc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   c07d0:	7b12      	ldrb	r2, [r2, #12]
            cursor_y += (int16_t)textsize_y *
   c07d2:	fb02 1207 	mla	r2, r2, r7, r1
   c07d6:	8262      	strh	r2, [r4, #18]
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
   c07d8:	8ae2      	ldrh	r2, [r4, #22]
   c07da:	9201      	str	r2, [sp, #4]
   c07dc:	8aa2      	ldrh	r2, [r4, #20]
   c07de:	9200      	str	r2, [sp, #0]
   c07e0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   c07e4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   c07e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   c07ec:	4620      	mov	r0, r4
   c07ee:	f7ff fe17 	bl	c0420 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   c07f2:	7929      	ldrb	r1, [r5, #4]
   c07f4:	7e22      	ldrb	r2, [r4, #24]
        cursor_x +=
   c07f6:	8a23      	ldrh	r3, [r4, #16]
   c07f8:	fb01 3302 	mla	r3, r1, r2, r3
   c07fc:	e7b8      	b.n	c0770 <_ZN12Adafruit_GFX5writeEh+0x74>

000c07fe <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize_x = (s_x > 0) ? s_x : 1;
   c07fe:	2901      	cmp	r1, #1
   c0800:	bf38      	it	cc
   c0802:	2101      	movcc	r1, #1
   c0804:	7601      	strb	r1, [r0, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
   c0806:	7641      	strb	r1, [r0, #25]
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
   c0808:	4770      	bx	lr

000c080a <_ZN16Adafruit_HDC302xC1Ev>:
#include "Adafruit_HDC302x.h"

/**
 * Constructor for the HDC302x sensor driver.
 */
Adafruit_HDC302x::Adafruit_HDC302x() { currentAutoMode = EXIT_AUTO_MODE; }
   c080a:	2200      	movs	r2, #0
   c080c:	6002      	str	r2, [r0, #0]
   c080e:	f243 0293 	movw	r2, #12435	; 0x3093
   c0812:	8082      	strh	r2, [r0, #4]
   c0814:	4770      	bx	lr

000c0816 <_ZN16Adafruit_HDC302x12writeCommandEt>:
 * Writes a command to the HDC302x sensor.
 *
 * @param command The command to write.
 * @return true if the command was written successfully, otherwise false.
 */
bool Adafruit_HDC302x::writeCommand(uint16_t command) {
   c0816:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[2];
  buffer[0] = (uint8_t)(command >> 8);   // High byte
   c0818:	0a0b      	lsrs	r3, r1, #8
   c081a:	f88d 300c 	strb.w	r3, [sp, #12]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte

  return i2c_dev->write(buffer, 2);
   c081e:	2300      	movs	r3, #0
   c0820:	e9cd 3300 	strd	r3, r3, [sp]
  buffer[1] = (uint8_t)(command & 0xFF); // Low byte
   c0824:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(buffer, 2);
   c0828:	2301      	movs	r3, #1
   c082a:	2202      	movs	r2, #2
   c082c:	a903      	add	r1, sp, #12
   c082e:	6800      	ldr	r0, [r0, #0]
   c0830:	f7ff fa7e 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   c0834:	b005      	add	sp, #20
   c0836:	f85d fb04 	ldr.w	pc, [sp], #4

000c083a <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>:
  currentAutoMode = mode;
   c083a:	8081      	strh	r1, [r0, #4]
  writeCommand(mode);
   c083c:	f7ff bfeb 	b.w	c0816 <_ZN16Adafruit_HDC302x12writeCommandEt>

000c0840 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>:
  return writeCommand(HDC302x_Commands::CLEAR_STATUS_REGISTER);
   c0840:	f243 0141 	movw	r1, #12353	; 0x3041
   c0844:	f7ff bfe7 	b.w	c0816 <_ZN16Adafruit_HDC302x12writeCommandEt>

000c0848 <_ZN16Adafruit_HDC302x5resetEv>:
  return writeCommand(HDC302x_Commands::SOFT_RESET);
   c0848:	f243 01a2 	movw	r1, #12450	; 0x30a2
   c084c:	f7ff bfe3 	b.w	c0816 <_ZN16Adafruit_HDC302x12writeCommandEt>

000c0850 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>:
 *
 * @param data Pointer to the data array.
 * @param len Length of the data array.
 * @return uint8_t The calculated CRC-8 value.
 */
uint8_t Adafruit_HDC302x::calculateCRC8(const uint8_t *data, int len) {
   c0850:	b510      	push	{r4, lr}
  uint8_t crc = 0xFF; // Typical initial value
  for (int i = 0; i < len; i++) {
   c0852:	2300      	movs	r3, #0
  uint8_t crc = 0xFF; // Typical initial value
   c0854:	20ff      	movs	r0, #255	; 0xff
  for (int i = 0; i < len; i++) {
   c0856:	4293      	cmp	r3, r2
   c0858:	da0e      	bge.n	c0878 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x28>
    crc ^= data[i];               // XOR byte into least sig. byte of crc
   c085a:	5ccc      	ldrb	r4, [r1, r3]
   c085c:	4060      	eors	r0, r4
   c085e:	2408      	movs	r4, #8
    for (int j = 8; j > 0; j--) { // Loop over each bit
      if (crc & 0x80) {           // If the uppermost bit is 1...
   c0860:	f010 0f80 	tst.w	r0, #128	; 0x80
   c0864:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (crc << 1) ^ 0x31;  // Polynomial used by HDC302x
   c0868:	bf18      	it	ne
   c086a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (int j = 8; j > 0; j--) { // Loop over each bit
   c086e:	3c01      	subs	r4, #1
      } else {
        crc = (crc << 1);
   c0870:	b2c0      	uxtb	r0, r0
    for (int j = 8; j > 0; j--) { // Loop over each bit
   c0872:	d1f5      	bne.n	c0860 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x10>
  for (int i = 0; i < len; i++) {
   c0874:	3301      	adds	r3, #1
   c0876:	e7ee      	b.n	c0856 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi+0x6>
      }
    }
  }
  return crc; // Final XOR value can also be applied if specified by device
}
   c0878:	bd10      	pop	{r4, pc}
   c087a:	0000      	movs	r0, r0
   c087c:	0000      	movs	r0, r0
	...

000c0880 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>:
                                          double &RH) {
   c0880:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   c0884:	4605      	mov	r5, r0
   c0886:	4617      	mov	r7, r2
   c0888:	461e      	mov	r6, r3
  if (!writeCommand(command)) {
   c088a:	f7ff ffc4 	bl	c0816 <_ZN16Adafruit_HDC302x12writeCommandEt>
   c088e:	4604      	mov	r4, r0
   c0890:	2800      	cmp	r0, #0
   c0892:	d04a      	beq.n	c092a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
   c0894:	f04f 080a 	mov.w	r8, #10
  while (!i2c_dev->read(buffer, 6)) {
   c0898:	6828      	ldr	r0, [r5, #0]
   c089a:	2301      	movs	r3, #1
   c089c:	2206      	movs	r2, #6
   c089e:	4669      	mov	r1, sp
   c08a0:	f7ff fa76 	bl	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
   c08a4:	4604      	mov	r4, r0
   c08a6:	b930      	cbnz	r0, c08b6 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x36>
    if (++retries >= MAX_RETRIES) {
   c08a8:	f1b8 0801 	subs.w	r8, r8, #1
   c08ac:	d03d      	beq.n	c092a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
    delay(1); // Wait and retry if NAK received
   c08ae:	2001      	movs	r0, #1
   c08b0:	f004 ff3e 	bl	c5730 <delay>
  while (!i2c_dev->read(buffer, 6)) {
   c08b4:	e7f0      	b.n	c0898 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0x18>
  if (calculateCRC8(buffer, 2) != buffer[2]) {
   c08b6:	2202      	movs	r2, #2
   c08b8:	4669      	mov	r1, sp
   c08ba:	4628      	mov	r0, r5
   c08bc:	f7ff ffc8 	bl	c0850 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
   c08c0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   c08c4:	4283      	cmp	r3, r0
   c08c6:	d134      	bne.n	c0932 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  if (calculateCRC8(buffer + 3, 2) != buffer[5]) {
   c08c8:	f10d 0103 	add.w	r1, sp, #3
   c08cc:	4628      	mov	r0, r5
   c08ce:	f7ff ffbf 	bl	c0850 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
   c08d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   c08d6:	4283      	cmp	r3, r0
   c08d8:	d12b      	bne.n	c0932 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb2>
  temp = ((rawTemperature / 65535.0) * 175.0) - 45.0;
   c08da:	f8bd 0000 	ldrh.w	r0, [sp]
   c08de:	f8bd 5003 	ldrh.w	r5, [sp, #3]
   c08e2:	ba40      	rev16	r0, r0
   c08e4:	b280      	uxth	r0, r0
   c08e6:	f7f3 fced 	bl	b42c4 <__aeabi_i2d>
   c08ea:	a313      	add	r3, pc, #76	; (adr r3, c0938 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
   c08ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   c08f0:	f7f3 fe7c 	bl	b45ec <__aeabi_ddiv>
   c08f4:	a314      	add	r3, pc, #80	; (adr r3, c0948 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc8>)
   c08f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c08fa:	f7f3 fd4d 	bl	b4398 <__aeabi_dmul>
   c08fe:	4b10      	ldr	r3, [pc, #64]	; (c0940 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc0>)
   c0900:	2200      	movs	r2, #0
   c0902:	f7f3 fb91 	bl	b4028 <__aeabi_dsub>
   c0906:	ba6d      	rev16	r5, r5
   c0908:	b2ad      	uxth	r5, r5
   c090a:	e9c7 0100 	strd	r0, r1, [r7]
  RH = (rawHumidity / 65535.0) * 100.0;
   c090e:	4628      	mov	r0, r5
   c0910:	f7f3 fcd8 	bl	b42c4 <__aeabi_i2d>
   c0914:	a308      	add	r3, pc, #32	; (adr r3, c0938 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xb8>)
   c0916:	e9d3 2300 	ldrd	r2, r3, [r3]
   c091a:	f7f3 fe67 	bl	b45ec <__aeabi_ddiv>
   c091e:	4b09      	ldr	r3, [pc, #36]	; (c0944 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xc4>)
   c0920:	2200      	movs	r2, #0
   c0922:	f7f3 fd39 	bl	b4398 <__aeabi_dmul>
   c0926:	e9c6 0100 	strd	r0, r1, [r6]
}
   c092a:	4620      	mov	r0, r4
   c092c:	b002      	add	sp, #8
   c092e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false; // CRC check failed
   c0932:	2400      	movs	r4, #0
   c0934:	e7f9      	b.n	c092a <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_+0xaa>
   c0936:	bf00      	nop
   c0938:	00000000 	.word	0x00000000
   c093c:	40efffe0 	.word	0x40efffe0
   c0940:	40468000 	.word	0x40468000
   c0944:	40590000 	.word	0x40590000
   c0948:	00000000 	.word	0x00000000
   c094c:	4065e000 	.word	0x4065e000

000c0950 <_ZN16Adafruit_HDC302x31readTemperatureHumidityOnDemandERdS0_16hdcTriggerMode_t>:
    double &temp, double &RH, hdcTriggerMode_t mode = TRIGGERMODE_LP0) {
   c0950:	b410      	push	{r4}
   c0952:	460c      	mov	r4, r1
   c0954:	4619      	mov	r1, r3
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
   c0956:	4613      	mov	r3, r2
   c0958:	4622      	mov	r2, r4
}
   c095a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return sendCommandReadTRH(static_cast<uint16_t>(mode), temp, RH);
   c095e:	f7ff bf8f 	b.w	c0880 <_ZN16Adafruit_HDC302x18sendCommandReadTRHEtRdS0_>

000c0962 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>:
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
   c0962:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0964:	b085      	sub	sp, #20
  cmd_buffer[0] = (uint8_t)(command >> 8);   // High byte of the command
   c0966:	0a0b      	lsrs	r3, r1, #8
   c0968:	f88d 3008 	strb.w	r3, [sp, #8]
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
   c096c:	2700      	movs	r7, #0
   c096e:	2303      	movs	r3, #3
   c0970:	e9cd 3700 	strd	r3, r7, [sp]
  cmd_buffer[1] = (uint8_t)(command & 0xFF); // Low byte of the command
   c0974:	f88d 1009 	strb.w	r1, [sp, #9]
bool Adafruit_HDC302x::writeCommandReadData(uint16_t command, uint16_t &data) {
   c0978:	4605      	mov	r5, r0
   c097a:	4616      	mov	r6, r2
  if (!i2c_dev->write_then_read(cmd_buffer, 2, data_buffer, 3)) {
   c097c:	6800      	ldr	r0, [r0, #0]
   c097e:	ab03      	add	r3, sp, #12
   c0980:	2202      	movs	r2, #2
   c0982:	a902      	add	r1, sp, #8
   c0984:	f7ff fa26 	bl	bfdd4 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
   c0988:	4604      	mov	r4, r0
   c098a:	b160      	cbz	r0, c09a6 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>
  uint8_t calculated_crc = calculateCRC8(data_buffer, 2);
   c098c:	2202      	movs	r2, #2
   c098e:	a903      	add	r1, sp, #12
   c0990:	4628      	mov	r0, r5
   c0992:	f7ff ff5d 	bl	c0850 <_ZN16Adafruit_HDC302x13calculateCRC8EPKhi>
  if (calculated_crc != data_buffer[2]) {
   c0996:	f89d 300e 	ldrb.w	r3, [sp, #14]
   c099a:	4283      	cmp	r3, r0
   c099c:	d106      	bne.n	c09ac <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x4a>
  data = (uint16_t)(data_buffer[0] << 8 | data_buffer[1]);
   c099e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   c09a2:	ba5b      	rev16	r3, r3
   c09a4:	8033      	strh	r3, [r6, #0]
}
   c09a6:	4620      	mov	r0, r4
   c09a8:	b005      	add	sp, #20
   c09aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false; // Communication failed
   c09ac:	463c      	mov	r4, r7
   c09ae:	e7fa      	b.n	c09a6 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt+0x44>

000c09b0 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire>:
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
   c09b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   c09b2:	4604      	mov	r4, r0
  delay(5); // wait for device to be ready
   c09b4:	2005      	movs	r0, #5
bool Adafruit_HDC302x::begin(uint8_t i2cAddr, TwoWire *wire) {
   c09b6:	460e      	mov	r6, r1
   c09b8:	4617      	mov	r7, r2
  delay(5); // wait for device to be ready
   c09ba:	f004 feb9 	bl	c5730 <delay>
  if (i2c_dev) {
   c09be:	6820      	ldr	r0, [r4, #0]
   c09c0:	b110      	cbz	r0, c09c8 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x18>
    delete i2c_dev;
   c09c2:	2110      	movs	r1, #16
   c09c4:	f7f4 fb61 	bl	b508a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2cAddr, wire);
   c09c8:	2010      	movs	r0, #16
   c09ca:	f7f4 fb5a 	bl	b5082 <_Znwj>
   c09ce:	4605      	mov	r5, r0
   c09d0:	b118      	cbz	r0, c09da <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x2a>
   c09d2:	463a      	mov	r2, r7
   c09d4:	4631      	mov	r1, r6
   c09d6:	f7ff f980 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c09da:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   c09dc:	2101      	movs	r1, #1
   c09de:	4628      	mov	r0, r5
   c09e0:	f7ff f997 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   c09e4:	b918      	cbnz	r0, c09ee <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x3e>
    return false;
   c09e6:	2500      	movs	r5, #0
}
   c09e8:	4628      	mov	r0, r5
   c09ea:	b003      	add	sp, #12
   c09ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   c09ee:	4620      	mov	r0, r4
   c09f0:	f7ff ff2a 	bl	c0848 <_ZN16Adafruit_HDC302x5resetEv>
   c09f4:	2800      	cmp	r0, #0
   c09f6:	d0f6      	beq.n	c09e6 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  clearStatusRegister();
   c09f8:	4620      	mov	r0, r4
   c09fa:	f7ff ff21 	bl	c0840 <_ZN16Adafruit_HDC302x19clearStatusRegisterEv>
  if (!writeCommandReadData(HDC302x_Commands::READ_MANUFACTURER_ID,
   c09fe:	f10d 0206 	add.w	r2, sp, #6
   c0a02:	f243 7181 	movw	r1, #14209	; 0x3781
   c0a06:	4620      	mov	r0, r4
   c0a08:	f7ff ffab 	bl	c0962 <_ZN16Adafruit_HDC302x20writeCommandReadDataEtRt>
                            manufacturerID) ||
   c0a0c:	4605      	mov	r5, r0
   c0a0e:	2800      	cmp	r0, #0
   c0a10:	d0e9      	beq.n	c09e6 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
   c0a12:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   c0a16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
   c0a1a:	d1e4      	bne.n	c09e6 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x36>
  setAutoMode(EXIT_AUTO_MODE);
   c0a1c:	f243 0193 	movw	r1, #12435	; 0x3093
   c0a20:	4620      	mov	r0, r4
   c0a22:	f7ff ff0a 	bl	c083a <_ZN16Adafruit_HDC302x11setAutoModeE13hdcAutoMode_t>
  return true;
   c0a26:	e7df      	b.n	c09e8 <_ZN16Adafruit_HDC302x5beginEhP7TwoWire+0x38>

000c0a28 <_ZN16Adafruit_HTU21DFC1Ev>:
#include "Adafruit_HTU21DF.h"

/**
 * Constructor for the HTU21DF driver.
 */
Adafruit_HTU21DF::Adafruit_HTU21DF() {
   c0a28:	2200      	movs	r2, #0
   c0a2a:	6002      	str	r2, [r0, #0]
  /* Assign default values to internal tracking variables. */
  _last_humidity = 0.0f;
   c0a2c:	2200      	movs	r2, #0
   c0a2e:	6042      	str	r2, [r0, #4]
  _last_temp = 0.0f;
   c0a30:	6082      	str	r2, [r0, #8]
}
   c0a32:	4770      	bx	lr

000c0a34 <_ZN16Adafruit_HTU21DF5resetEv>:
}

/**
 * Sends a 'reset' request to the HTU21DF, followed by a 15ms delay.
 */
void Adafruit_HTU21DF::reset(void) {
   c0a34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd = HTU21DF_RESET;
   c0a36:	23fe      	movs	r3, #254	; 0xfe
   c0a38:	f88d 300f 	strb.w	r3, [sp, #15]
  i2c_dev->write(&cmd, 1);
   c0a3c:	2300      	movs	r3, #0
   c0a3e:	e9cd 3300 	strd	r3, r3, [sp]
   c0a42:	2301      	movs	r3, #1
   c0a44:	461a      	mov	r2, r3
   c0a46:	f10d 010f 	add.w	r1, sp, #15
   c0a4a:	6800      	ldr	r0, [r0, #0]
   c0a4c:	f7ff f970 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>

  delay(15);
   c0a50:	200f      	movs	r0, #15
   c0a52:	f004 fe6d 	bl	c5730 <delay>
}
   c0a56:	b005      	add	sp, #20
   c0a58:	f85d fb04 	ldr.w	pc, [sp], #4

000c0a5c <_ZN16Adafruit_HTU21DF5beginEP7TwoWire>:
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
   c0a5c:	b570      	push	{r4, r5, r6, lr}
   c0a5e:	4604      	mov	r4, r0
  if (i2c_dev) {
   c0a60:	6800      	ldr	r0, [r0, #0]
bool Adafruit_HTU21DF::begin(TwoWire *theWire) {
   c0a62:	b088      	sub	sp, #32
   c0a64:	460e      	mov	r6, r1
  if (i2c_dev) {
   c0a66:	b110      	cbz	r0, c0a6e <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x12>
    delete i2c_dev;
   c0a68:	2110      	movs	r1, #16
   c0a6a:	f7f4 fb0e 	bl	b508a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(HTU21DF_I2CADDR, theWire);
   c0a6e:	2010      	movs	r0, #16
   c0a70:	f7f4 fb07 	bl	b5082 <_Znwj>
   c0a74:	4605      	mov	r5, r0
   c0a76:	b118      	cbz	r0, c0a80 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x24>
   c0a78:	4632      	mov	r2, r6
   c0a7a:	2140      	movs	r1, #64	; 0x40
   c0a7c:	f7ff f92d 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c0a80:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   c0a82:	2101      	movs	r1, #1
   c0a84:	4628      	mov	r0, r5
   c0a86:	f7ff f944 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   c0a8a:	b188      	cbz	r0, c0ab0 <_ZN16Adafruit_HTU21DF5beginEP7TwoWire+0x54>
  reset();
   c0a8c:	4620      	mov	r0, r4
   c0a8e:	f7ff ffd1 	bl	c0a34 <_ZN16Adafruit_HTU21DF5resetEv>
      Adafruit_BusIO_Register(i2c_dev, HTU21DF_READREG);
   c0a92:	2301      	movs	r3, #1
   c0a94:	2200      	movs	r2, #0
   c0a96:	e9cd 2300 	strd	r2, r3, [sp]
   c0a9a:	6821      	ldr	r1, [r4, #0]
   c0a9c:	22e7      	movs	r2, #231	; 0xe7
   c0a9e:	a802      	add	r0, sp, #8
   c0aa0:	f7ff f806 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (reg.read() == 0x2); // after reset should be 0x2
   c0aa4:	a802      	add	r0, sp, #8
   c0aa6:	f7ff f8d1 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
   c0aaa:	1e83      	subs	r3, r0, #2
   c0aac:	4258      	negs	r0, r3
   c0aae:	4158      	adcs	r0, r3
}
   c0ab0:	b008      	add	sp, #32
   c0ab2:	bd70      	pop	{r4, r5, r6, pc}

000c0ab4 <_ZN16Adafruit_HTU21DF15readTemperatureEv>:
 * Performs a single temperature conversion in degrees Celsius.
 *
 * @return a single-precision (32-bit) float value indicating the measured
 *         temperature in degrees Celsius or NAN on failure.
 */
float Adafruit_HTU21DF::readTemperature(void) {
   c0ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  // OK lets ready!
  uint8_t cmd = HTU21DF_READTEMP;
   c0ab6:	23e3      	movs	r3, #227	; 0xe3
   c0ab8:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
   c0abc:	2300      	movs	r3, #0
   c0abe:	e9cd 3300 	strd	r3, r3, [sp]
   c0ac2:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readTemperature(void) {
   c0ac4:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
   c0ac6:	461a      	mov	r2, r3
   c0ac8:	6800      	ldr	r0, [r0, #0]
   c0aca:	f10d 010b 	add.w	r1, sp, #11
   c0ace:	f7ff f92f 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   c0ad2:	b318      	cbz	r0, c0b1c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
    return NAN;
  }

  delay(50); // add delay between request and actual read!
   c0ad4:	2032      	movs	r0, #50	; 0x32
   c0ad6:	f004 fe2b 	bl	c5730 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
   c0ada:	6820      	ldr	r0, [r4, #0]
   c0adc:	2301      	movs	r3, #1
   c0ade:	2203      	movs	r2, #3
   c0ae0:	a903      	add	r1, sp, #12
   c0ae2:	f7ff f955 	bl	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
   c0ae6:	b1c8      	cbz	r0, c0b1c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t t = buf[0];
  t <<= 8;
  t |= buf[1] & 0b11111100;
   c0ae8:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t t = buf[0];
   c0aec:	f89d 200c 	ldrb.w	r2, [sp, #12]

  // 3rd byte is the CRC

  float temp = t;
  temp *= 175.72f;
   c0af0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; c0b24 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x70>
  temp /= 65536.0f;
  temp -= 46.85f;
   c0af4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; c0b28 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x74>
  t |= buf[1] & 0b11111100;
   c0af8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
  float temp = t;
   c0afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   c0b00:	ee07 3a90 	vmov	s15, r3
   c0b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
  temp *= 175.72f;
   c0b08:	ee67 7a87 	vmul.f32	s15, s15, s14
  temp -= 46.85f;
   c0b0c:	ed9f 7a07 	vldr	s14, [pc, #28]	; c0b2c <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x78>
   c0b10:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_temp = temp;
   c0b14:	ed84 0a02 	vstr	s0, [r4, #8]

  return temp;
}
   c0b18:	b004      	add	sp, #16
   c0b1a:	bd10      	pop	{r4, pc}
    return NAN;
   c0b1c:	ed9f 0a04 	vldr	s0, [pc, #16]	; c0b30 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x7c>
   c0b20:	e7fa      	b.n	c0b18 <_ZN16Adafruit_HTU21DF15readTemperatureEv+0x64>
   c0b22:	bf00      	nop
   c0b24:	432fb852 	.word	0x432fb852
   c0b28:	c23b6666 	.word	0xc23b6666
   c0b2c:	37800000 	.word	0x37800000
   c0b30:	7fc00000 	.word	0x7fc00000

000c0b34 <_ZN16Adafruit_HTU21DF12readHumidityEv>:
 * Performs a single relative humidity conversion.
 *
 * @return A single-precision (32-bit) float value indicating the relative
 *         humidity in percent (0..100.0%).
 */
float Adafruit_HTU21DF::readHumidity(void) {
   c0b34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* Prepare the I2C request. */
  uint8_t cmd = HTU21DF_READHUM;
   c0b36:	23e5      	movs	r3, #229	; 0xe5
   c0b38:	f88d 300b 	strb.w	r3, [sp, #11]
  if (!i2c_dev->write(&cmd, 1)) {
   c0b3c:	2300      	movs	r3, #0
   c0b3e:	e9cd 3300 	strd	r3, r3, [sp]
   c0b42:	2301      	movs	r3, #1
float Adafruit_HTU21DF::readHumidity(void) {
   c0b44:	4604      	mov	r4, r0
  if (!i2c_dev->write(&cmd, 1)) {
   c0b46:	461a      	mov	r2, r3
   c0b48:	6800      	ldr	r0, [r0, #0]
   c0b4a:	f10d 010b 	add.w	r1, sp, #11
   c0b4e:	f7ff f8ef 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   c0b52:	b318      	cbz	r0, c0b9c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
    return NAN;
  }

  /* Wait a bit for the conversion to complete. */
  delay(50);
   c0b54:	2032      	movs	r0, #50	; 0x32
   c0b56:	f004 fdeb 	bl	c5730 <delay>

  uint8_t buf[3];
  if (!i2c_dev->read(buf, 3)) {
   c0b5a:	6820      	ldr	r0, [r4, #0]
   c0b5c:	2301      	movs	r3, #1
   c0b5e:	2203      	movs	r2, #3
   c0b60:	a903      	add	r1, sp, #12
   c0b62:	f7ff f915 	bl	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
   c0b66:	b1c8      	cbz	r0, c0b9c <_ZN16Adafruit_HTU21DF12readHumidityEv+0x68>
  }

  /* Read 16 bits of data, dropping the last two status bits. */
  uint16_t h = buf[0];
  h <<= 8;
  h |= buf[1] & 0b11111100;
   c0b68:	f89d 300d 	ldrb.w	r3, [sp, #13]
  uint16_t h = buf[0];
   c0b6c:	f89d 200c 	ldrb.w	r2, [sp, #12]

  // 3rd byte is the CRC

  float hum = h;
  hum *= 125.0f;
   c0b70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; c0ba4 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x70>
  h |= buf[1] & 0b11111100;
   c0b74:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
  float hum = h;
   c0b78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   c0b7c:	ee07 3a90 	vmov	s15, r3
   c0b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
  hum /= 65536.0f;
  hum -= 6.0f;
   c0b84:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum *= 125.0f;
   c0b88:	ee67 7a87 	vmul.f32	s15, s15, s14
  hum -= 6.0f;
   c0b8c:	ed9f 7a06 	vldr	s14, [pc, #24]	; c0ba8 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x74>
   c0b90:	eea7 0a87 	vfma.f32	s0, s15, s14

  /* Track the value internally in case we need to access it later. */
  _last_humidity = hum;
   c0b94:	ed84 0a01 	vstr	s0, [r4, #4]

  return hum;
}
   c0b98:	b004      	add	sp, #16
   c0b9a:	bd10      	pop	{r4, pc}
    return NAN;
   c0b9c:	ed9f 0a03 	vldr	s0, [pc, #12]	; c0bac <_ZN16Adafruit_HTU21DF12readHumidityEv+0x78>
   c0ba0:	e7fa      	b.n	c0b98 <_ZN16Adafruit_HTU21DF12readHumidityEv+0x64>
   c0ba2:	bf00      	nop
   c0ba4:	42fa0000 	.word	0x42fa0000
   c0ba8:	37800000 	.word	0x37800000
   c0bac:	7fc00000 	.word	0x7fc00000

000c0bb0 <_ZN16Adafruit_LPS35HWC1Ev>:
#include "Adafruit_LPS35HW.h"

/*!
 *    @brief  Instantiates a new LPS35HW class
 */
Adafruit_LPS35HW::Adafruit_LPS35HW(void) {}
   c0bb0:	4770      	bx	lr

000c0bb2 <_ZN16Adafruit_LPS35HW5resetEv>:
/*!
    @brief Resets the hardware. All configuration registers are set to
            default values, the same as a power-on reset.
*/
/**************************************************************************/
void Adafruit_LPS35HW::reset(void) {
   c0bb2:	b507      	push	{r0, r1, r2, lr}
  Adafruit_BusIO_RegisterBits reset =
      Adafruit_BusIO_RegisterBits(Config2, 1, 2);
   c0bb4:	2302      	movs	r3, #2
   c0bb6:	6841      	ldr	r1, [r0, #4]
   c0bb8:	2201      	movs	r2, #1
   c0bba:	4668      	mov	r0, sp
   c0bbc:	f7ff f862 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  reset.write(1);
   c0bc0:	2101      	movs	r1, #1
   c0bc2:	4668      	mov	r0, sp
   c0bc4:	f7ff f870 	bl	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  while (reset.read() == true) {
   c0bc8:	4668      	mov	r0, sp
   c0bca:	f7ff f860 	bl	bfc8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   c0bce:	2801      	cmp	r0, #1
   c0bd0:	d102      	bne.n	c0bd8 <_ZN16Adafruit_LPS35HW5resetEv+0x26>
    delay(1);
   c0bd2:	f004 fdad 	bl	c5730 <delay>
  while (reset.read() == true) {
   c0bd6:	e7f7      	b.n	c0bc8 <_ZN16Adafruit_LPS35HW5resetEv+0x16>
  }
}
   c0bd8:	b003      	add	sp, #12
   c0bda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0be0 <_ZN16Adafruit_LPS35HW15readTemperatureEv>:
/*!
    @brief Reads and scales the current value of the temperature register.
    @return The current temperature in degrees C
*/
/**************************************************************************/
float Adafruit_LPS35HW::readTemperature(void) {
   c0be0:	b500      	push	{lr}
  Adafruit_BusIO_Register temp = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
   c0be2:	2300      	movs	r3, #0
float Adafruit_LPS35HW::readTemperature(void) {
   c0be4:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_TEMP_OUT_L, 2);
   c0be6:	2201      	movs	r2, #1
   c0be8:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0bec:	2102      	movs	r1, #2
   c0bee:	222b      	movs	r2, #43	; 0x2b
   c0bf0:	e9cd 2100 	strd	r2, r1, [sp]
   c0bf4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
   c0bf8:	a804      	add	r0, sp, #16
   c0bfa:	f7fe ff67 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  return (int16_t)temp.read() / 100.0;
   c0bfe:	a804      	add	r0, sp, #16
   c0c00:	f7ff f824 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
   c0c04:	b200      	sxth	r0, r0
   c0c06:	f7f3 fb5d 	bl	b42c4 <__aeabi_i2d>
   c0c0a:	4b05      	ldr	r3, [pc, #20]	; (c0c20 <_ZN16Adafruit_LPS35HW15readTemperatureEv+0x40>)
   c0c0c:	2200      	movs	r2, #0
   c0c0e:	f7f3 fced 	bl	b45ec <__aeabi_ddiv>
   c0c12:	f7f3 feb9 	bl	b4988 <__aeabi_d2f>
}
   c0c16:	ee00 0a10 	vmov	s0, r0
   c0c1a:	b00b      	add	sp, #44	; 0x2c
   c0c1c:	f85d fb04 	ldr.w	pc, [sp], #4
   c0c20:	40590000 	.word	0x40590000

000c0c24 <_ZN16Adafruit_LPS35HW12readPressureEv>:
/*!
    @brief Reads and scales the value of the pressure register.
    @return The current pressure in hPa, relative to the reference temperature
*/
/**************************************************************************/
float Adafruit_LPS35HW::readPressure(void) {
   c0c24:	b500      	push	{lr}
  Adafruit_BusIO_Register pressure = Adafruit_BusIO_Register(
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
   c0c26:	2300      	movs	r3, #0
float Adafruit_LPS35HW::readPressure(void) {
   c0c28:	b08b      	sub	sp, #44	; 0x2c
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_PRESS_OUT_XL, 3);
   c0c2a:	2201      	movs	r2, #1
   c0c2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0c30:	2103      	movs	r1, #3
   c0c32:	2228      	movs	r2, #40	; 0x28
   c0c34:	e9cd 2100 	strd	r2, r1, [sp]
   c0c38:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
   c0c3c:	a804      	add	r0, sp, #16
   c0c3e:	f7fe ff45 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  int32_t raw_pressure = pressure.read();
   c0c42:	a804      	add	r0, sp, #16
   c0c44:	f7ff f802 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
  // perform sign extension for 24 bit number if needed
  if (raw_pressure & 0x800000) {
   c0c48:	0203      	lsls	r3, r0, #8
    raw_pressure = (0xff000000 | raw_pressure);
   c0c4a:	bf48      	it	mi
   c0c4c:	f040 407f 	orrmi.w	r0, r0, #4278190080	; 0xff000000
  }

  return (raw_pressure / 4096.0);
   c0c50:	f7f3 fb38 	bl	b42c4 <__aeabi_i2d>
   c0c54:	4b05      	ldr	r3, [pc, #20]	; (c0c6c <_ZN16Adafruit_LPS35HW12readPressureEv+0x48>)
   c0c56:	2200      	movs	r2, #0
   c0c58:	f7f3 fb9e 	bl	b4398 <__aeabi_dmul>
   c0c5c:	f7f3 fe94 	bl	b4988 <__aeabi_d2f>
}
   c0c60:	ee00 0a10 	vmov	s0, r0
   c0c64:	b00b      	add	sp, #44	; 0x2c
   c0c66:	f85d fb04 	ldr.w	pc, [sp], #4
   c0c6a:	bf00      	nop
   c0c6c:	3f300000 	.word	0x3f300000

000c0c70 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>:
    @brief Sets a new measurement rate
    @param new_rate
          The new output data rate to be set (ODR)
*/
/**************************************************************************/
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
   c0c70:	b513      	push	{r0, r1, r4, lr}
  Adafruit_BusIO_RegisterBits data_rate =
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
   c0c72:	2304      	movs	r3, #4
void Adafruit_LPS35HW::setDataRate(LPS35HW_DataRate new_rate) {
   c0c74:	460c      	mov	r4, r1
      Adafruit_BusIO_RegisterBits(Config1, 3, 4);
   c0c76:	2203      	movs	r2, #3
   c0c78:	6801      	ldr	r1, [r0, #0]
   c0c7a:	4668      	mov	r0, sp
   c0c7c:	f7ff f802 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  data_rate.write(new_rate);
   c0c80:	4621      	mov	r1, r4
   c0c82:	4668      	mov	r0, sp
   c0c84:	f7ff f810 	bl	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   c0c88:	b002      	add	sp, #8
   c0c8a:	bd10      	pop	{r4, pc}

000c0c8c <_ZN16Adafruit_LPS35HW5_initEv>:
boolean Adafruit_LPS35HW::_init(void) {
   c0c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
   c0c8e:	2500      	movs	r5, #0
boolean Adafruit_LPS35HW::_init(void) {
   c0c90:	b08d      	sub	sp, #52	; 0x34
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
   c0c92:	2701      	movs	r7, #1
   c0c94:	e9cd 5702 	strd	r5, r7, [sp, #8]
   c0c98:	230f      	movs	r3, #15
   c0c9a:	9300      	str	r3, [sp, #0]
   c0c9c:	9701      	str	r7, [sp, #4]
   c0c9e:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
   c0ca2:	462b      	mov	r3, r5
boolean Adafruit_LPS35HW::_init(void) {
   c0ca4:	4604      	mov	r4, r0
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_WHO_AM_I, 1);
   c0ca6:	a806      	add	r0, sp, #24
   c0ca8:	f7fe ff10 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  if (chip_id.read() != 0xB1) {
   c0cac:	a806      	add	r0, sp, #24
   c0cae:	f7fe ffcd 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
   c0cb2:	28b1      	cmp	r0, #177	; 0xb1
   c0cb4:	d167      	bne.n	c0d86 <_ZN16Adafruit_LPS35HW5_initEv+0xfa>
                                        LPS35HW_CTRL_REG1, 1);
   c0cb6:	2018      	movs	r0, #24
   c0cb8:	f7f4 f9e3 	bl	b5082 <_Znwj>
   c0cbc:	4606      	mov	r6, r0
   c0cbe:	b148      	cbz	r0, c0cd4 <_ZN16Adafruit_LPS35HW5_initEv+0x48>
   c0cc0:	2310      	movs	r3, #16
   c0cc2:	9300      	str	r3, [sp, #0]
   c0cc4:	e9cd 5702 	strd	r5, r7, [sp, #8]
   c0cc8:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   c0ccc:	9701      	str	r7, [sp, #4]
   c0cce:	462b      	mov	r3, r5
   c0cd0:	f7fe fefc 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config1 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
   c0cd4:	6026      	str	r6, [r4, #0]
                                        LPS35HW_CTRL_REG2, 1);
   c0cd6:	2018      	movs	r0, #24
   c0cd8:	f7f4 f9d3 	bl	b5082 <_Znwj>
   c0cdc:	4605      	mov	r5, r0
   c0cde:	b150      	cbz	r0, c0cf6 <_ZN16Adafruit_LPS35HW5_initEv+0x6a>
   c0ce0:	2201      	movs	r2, #1
   c0ce2:	2300      	movs	r3, #0
   c0ce4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0ce8:	9201      	str	r2, [sp, #4]
   c0cea:	2211      	movs	r2, #17
   c0cec:	9200      	str	r2, [sp, #0]
   c0cee:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   c0cf2:	f7fe feeb 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config2 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
   c0cf6:	6065      	str	r5, [r4, #4]
                                        LPS35HW_CTRL_REG3, 1);
   c0cf8:	2018      	movs	r0, #24
   c0cfa:	f7f4 f9c2 	bl	b5082 <_Znwj>
   c0cfe:	4605      	mov	r5, r0
   c0d00:	b150      	cbz	r0, c0d18 <_ZN16Adafruit_LPS35HW5_initEv+0x8c>
   c0d02:	2201      	movs	r2, #1
   c0d04:	2300      	movs	r3, #0
   c0d06:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0d0a:	9201      	str	r2, [sp, #4]
   c0d0c:	2212      	movs	r2, #18
   c0d0e:	9200      	str	r2, [sp, #0]
   c0d10:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   c0d14:	f7fe feda 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  Config3 = new Adafruit_BusIO_Register(i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD,
   c0d18:	60a5      	str	r5, [r4, #8]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INTERRUPT_CFG, 1);
   c0d1a:	2018      	movs	r0, #24
   c0d1c:	f7f4 f9b1 	bl	b5082 <_Znwj>
   c0d20:	4605      	mov	r5, r0
   c0d22:	b150      	cbz	r0, c0d3a <_ZN16Adafruit_LPS35HW5_initEv+0xae>
   c0d24:	2201      	movs	r2, #1
   c0d26:	2300      	movs	r3, #0
   c0d28:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0d2c:	9201      	str	r2, [sp, #4]
   c0d2e:	220b      	movs	r2, #11
   c0d30:	9200      	str	r2, [sp, #0]
   c0d32:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   c0d36:	f7fe fec9 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  InterruptCfg = new Adafruit_BusIO_Register(
   c0d3a:	60e5      	str	r5, [r4, #12]
      i2c_dev, spi_dev, ADDRBIT8_HIGH_TOREAD, LPS35HW_INT_SOURCE, 1);
   c0d3c:	2018      	movs	r0, #24
   c0d3e:	f7f4 f9a0 	bl	b5082 <_Znwj>
   c0d42:	4605      	mov	r5, r0
   c0d44:	b150      	cbz	r0, c0d5c <_ZN16Adafruit_LPS35HW5_initEv+0xd0>
   c0d46:	2201      	movs	r2, #1
   c0d48:	2300      	movs	r3, #0
   c0d4a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   c0d4e:	9201      	str	r2, [sp, #4]
   c0d50:	2225      	movs	r2, #37	; 0x25
   c0d52:	9200      	str	r2, [sp, #0]
   c0d54:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   c0d58:	f7fe feb8 	bl	bfacc <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDeviceP18Adafruit_SPIDevice26_Adafruit_BusIO_SPIRegTypethhh>
  reset();
   c0d5c:	4620      	mov	r0, r4
  InterruptStatus = new Adafruit_BusIO_Register(
   c0d5e:	6125      	str	r5, [r4, #16]
  reset();
   c0d60:	f7ff ff27 	bl	c0bb2 <_ZN16Adafruit_LPS35HW5resetEv>
  setDataRate(LPS35HW_RATE_10_HZ); // default in continuous at 10 hz
   c0d64:	2102      	movs	r1, #2
   c0d66:	4620      	mov	r0, r4
   c0d68:	f7ff ff82 	bl	c0c70 <_ZN16Adafruit_LPS35HW11setDataRateE10_data_rate>
      Adafruit_BusIO_RegisterBits(Config1, 1, 1);
   c0d6c:	2301      	movs	r3, #1
   c0d6e:	6821      	ldr	r1, [r4, #0]
   c0d70:	461a      	mov	r2, r3
   c0d72:	a804      	add	r0, sp, #16
   c0d74:	f7fe ff86 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  block_reads.write(0x1);
   c0d78:	2101      	movs	r1, #1
   c0d7a:	a804      	add	r0, sp, #16
   c0d7c:	f7fe ff94 	bl	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  return true;
   c0d80:	2001      	movs	r0, #1
}
   c0d82:	b00d      	add	sp, #52	; 0x34
   c0d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return false;
   c0d86:	4628      	mov	r0, r5
   c0d88:	e7fb      	b.n	c0d82 <_ZN16Adafruit_LPS35HW5_initEv+0xf6>

000c0d8a <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire>:
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   c0d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  spi_dev = NULL;
   c0d8c:	2300      	movs	r3, #0
   c0d8e:	6183      	str	r3, [r0, #24]
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   c0d90:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   c0d92:	2010      	movs	r0, #16
boolean Adafruit_LPS35HW::begin_I2C(uint8_t i2c_address, TwoWire *wire) {
   c0d94:	e9cd 2100 	strd	r2, r1, [sp]
  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   c0d98:	f7f4 f973 	bl	b5082 <_Znwj>
   c0d9c:	4605      	mov	r5, r0
   c0d9e:	b118      	cbz	r0, c0da8 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x1e>
   c0da0:	e9dd 2100 	ldrd	r2, r1, [sp]
   c0da4:	f7fe ff99 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c0da8:	6165      	str	r5, [r4, #20]
  if (!i2c_dev->begin()) {
   c0daa:	2101      	movs	r1, #1
   c0dac:	4628      	mov	r0, r5
   c0dae:	f7fe ffb0 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   c0db2:	b128      	cbz	r0, c0dc0 <_ZN16Adafruit_LPS35HW9begin_I2CEhP7TwoWire+0x36>
  return _init();
   c0db4:	4620      	mov	r0, r4
}
   c0db6:	b003      	add	sp, #12
   c0db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return _init();
   c0dbc:	f7ff bf66 	b.w	c0c8c <_ZN16Adafruit_LPS35HW5_initEv>
}
   c0dc0:	b003      	add	sp, #12
   c0dc2:	bd30      	pop	{r4, r5, pc}

000c0dc4 <_ZN16Adafruit_MCP9808D1Ev>:
   c0dc4:	4770      	bx	lr

000c0dc6 <_ZN16Adafruit_MCP9808D0Ev>:
   c0dc6:	b510      	push	{r4, lr}
   c0dc8:	210c      	movs	r1, #12
   c0dca:	4604      	mov	r4, r0
   c0dcc:	f7f4 f95d 	bl	b508a <_ZdlPvj>
   c0dd0:	4620      	mov	r0, r4
   c0dd2:	bd10      	pop	{r4, pc}

000c0dd4 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t>:
   resulution
    @param  sensor Pointer to Adafruit_Sensor sensor_t object that will be
   filled with sensor type data
*/
/**************************************************************************/
void Adafruit_MCP9808::getSensor(sensor_t *sensor) {
   c0dd4:	b538      	push	{r3, r4, r5, lr}
   c0dd6:	460c      	mov	r4, r1
   c0dd8:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   c0dda:	2220      	movs	r2, #32
   c0ddc:	2100      	movs	r1, #0
   c0dde:	f104 0008 	add.w	r0, r4, #8
   c0de2:	f009 f9ef 	bl	ca1c4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy(sensor->name, "MCP9808", sizeof(sensor->name) - 1);
   c0de6:	4909      	ldr	r1, [pc, #36]	; (c0e0c <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x38>)
   c0de8:	220b      	movs	r2, #11
   c0dea:	4620      	mov	r0, r4
   c0dec:	f009 fa83 	bl	ca2f6 <strncpy>
  sensor->name[sizeof(sensor->name) - 1] = 0;
  sensor->version = 1;
   c0df0:	2301      	movs	r3, #1
   c0df2:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id = _sensorID;
   c0df4:	88eb      	ldrh	r3, [r5, #6]
   c0df6:	6123      	str	r3, [r4, #16]
  sensor->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   c0df8:	230d      	movs	r3, #13
   c0dfa:	6163      	str	r3, [r4, #20]
  sensor->min_delay = 0;
  sensor->max_value = 100.0;
   c0dfc:	4b04      	ldr	r3, [pc, #16]	; (c0e10 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x3c>)
   c0dfe:	61a3      	str	r3, [r4, #24]
  sensor->min_value = -20.0;
   c0e00:	4b04      	ldr	r3, [pc, #16]	; (c0e14 <_ZN16Adafruit_MCP98089getSensorEP8sensor_t+0x40>)
   c0e02:	61e3      	str	r3, [r4, #28]
  sensor->resolution = 0.0625;
   c0e04:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
   c0e08:	6223      	str	r3, [r4, #32]
}
   c0e0a:	bd38      	pop	{r3, r4, r5, pc}
   c0e0c:	000cc654 	.word	0x000cc654
   c0e10:	42c80000 	.word	0x42c80000
   c0e14:	c1a00000 	.word	0xc1a00000

000c0e18 <_ZN16Adafruit_MCP9808C1Ev>:
Adafruit_MCP9808::Adafruit_MCP9808() {}
   c0e18:	4a03      	ldr	r2, [pc, #12]	; (c0e28 <_ZN16Adafruit_MCP9808C1Ev+0x10>)
   c0e1a:	6002      	str	r2, [r0, #0]
   c0e1c:	f242 6250 	movw	r2, #9808	; 0x2650
   c0e20:	80c2      	strh	r2, [r0, #6]
   c0e22:	2200      	movs	r2, #0
   c0e24:	6082      	str	r2, [r0, #8]
   c0e26:	4770      	bx	lr
   c0e28:	000cc664 	.word	0x000cc664

000c0e2c <_ZN16Adafruit_MCP98087write16Eht>:
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
   c0e2c:	b510      	push	{r4, lr}
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
   c0e2e:	2301      	movs	r3, #1
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
   c0e30:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
   c0e32:	e9cd 3300 	strd	r3, r3, [sp]
void Adafruit_MCP9808::write16(uint8_t reg, uint16_t value) {
   c0e36:	4614      	mov	r4, r2
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
   c0e38:	2302      	movs	r3, #2
   c0e3a:	460a      	mov	r2, r1
   c0e3c:	6881      	ldr	r1, [r0, #8]
   c0e3e:	a802      	add	r0, sp, #8
   c0e40:	f7fe fe36 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg16.write(value);
   c0e44:	2200      	movs	r2, #0
   c0e46:	4621      	mov	r1, r4
   c0e48:	a802      	add	r0, sp, #8
   c0e4a:	f7fe fe9f 	bl	bfb8c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   c0e4e:	b008      	add	sp, #32
   c0e50:	bd10      	pop	{r4, pc}

000c0e52 <_ZN16Adafruit_MCP98086read16Eh>:
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
   c0e52:	b500      	push	{lr}
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
   c0e54:	2301      	movs	r3, #1
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
   c0e56:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
   c0e58:	e9cd 3300 	strd	r3, r3, [sp]
uint16_t Adafruit_MCP9808::read16(uint8_t reg) {
   c0e5c:	460a      	mov	r2, r1
      Adafruit_BusIO_Register(i2c_dev, reg, 2, MSBFIRST);
   c0e5e:	2302      	movs	r3, #2
   c0e60:	6881      	ldr	r1, [r0, #8]
   c0e62:	a802      	add	r0, sp, #8
   c0e64:	f7fe fe24 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return reg16.read();
   c0e68:	a802      	add	r0, sp, #8
   c0e6a:	f7fe feef 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
}
   c0e6e:	b280      	uxth	r0, r0
   c0e70:	b009      	add	sp, #36	; 0x24
   c0e72:	f85d fb04 	ldr.w	pc, [sp], #4

000c0e76 <_ZN16Adafruit_MCP98084initEv>:
bool Adafruit_MCP9808::init() {
   c0e76:	b538      	push	{r3, r4, r5, lr}
  if (!i2c_dev->begin()) {
   c0e78:	2101      	movs	r1, #1
bool Adafruit_MCP9808::init() {
   c0e7a:	4604      	mov	r4, r0
  if (!i2c_dev->begin()) {
   c0e7c:	6880      	ldr	r0, [r0, #8]
   c0e7e:	f7fe ff48 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   c0e82:	4605      	mov	r5, r0
   c0e84:	b910      	cbnz	r0, c0e8c <_ZN16Adafruit_MCP98084initEv+0x16>
    return false;
   c0e86:	2500      	movs	r5, #0
}
   c0e88:	4628      	mov	r0, r5
   c0e8a:	bd38      	pop	{r3, r4, r5, pc}
  if (read16(MCP9808_REG_MANUF_ID) != 0x0054)
   c0e8c:	2106      	movs	r1, #6
   c0e8e:	4620      	mov	r0, r4
   c0e90:	f7ff ffdf 	bl	c0e52 <_ZN16Adafruit_MCP98086read16Eh>
   c0e94:	2854      	cmp	r0, #84	; 0x54
   c0e96:	d1f6      	bne.n	c0e86 <_ZN16Adafruit_MCP98084initEv+0x10>
  if (read16(MCP9808_REG_DEVICE_ID) != 0x0400)
   c0e98:	2107      	movs	r1, #7
   c0e9a:	4620      	mov	r0, r4
   c0e9c:	f7ff ffd9 	bl	c0e52 <_ZN16Adafruit_MCP98086read16Eh>
   c0ea0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   c0ea4:	d1ef      	bne.n	c0e86 <_ZN16Adafruit_MCP98084initEv+0x10>
  write16(MCP9808_REG_CONFIG, 0x0);
   c0ea6:	2200      	movs	r2, #0
   c0ea8:	2101      	movs	r1, #1
   c0eaa:	4620      	mov	r0, r4
   c0eac:	f7ff ffbe 	bl	c0e2c <_ZN16Adafruit_MCP98087write16Eht>
  return true;
   c0eb0:	e7ea      	b.n	c0e88 <_ZN16Adafruit_MCP98084initEv+0x12>

000c0eb2 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>:
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
   c0eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c0eb4:	4604      	mov	r4, r0
  if (i2c_dev) {
   c0eb6:	6880      	ldr	r0, [r0, #8]
bool Adafruit_MCP9808::begin(uint8_t addr, TwoWire *theWire) {
   c0eb8:	460e      	mov	r6, r1
   c0eba:	4617      	mov	r7, r2
  if (i2c_dev) {
   c0ebc:	b110      	cbz	r0, c0ec4 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x12>
    delete i2c_dev;
   c0ebe:	2110      	movs	r1, #16
   c0ec0:	f7f4 f8e3 	bl	b508a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, theWire);
   c0ec4:	2010      	movs	r0, #16
   c0ec6:	f7f4 f8dc 	bl	b5082 <_Znwj>
   c0eca:	4605      	mov	r5, r0
   c0ecc:	b118      	cbz	r0, c0ed6 <_ZN16Adafruit_MCP98085beginEhP7TwoWire+0x24>
   c0ece:	463a      	mov	r2, r7
   c0ed0:	4631      	mov	r1, r6
   c0ed2:	f7fe ff02 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c0ed6:	60a5      	str	r5, [r4, #8]
  return init();
   c0ed8:	4620      	mov	r0, r4
}
   c0eda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return init();
   c0ede:	f7ff bfca 	b.w	c0e76 <_ZN16Adafruit_MCP98084initEv>

000c0ee2 <_ZN16Adafruit_MCP98085beginEh>:
bool Adafruit_MCP9808::begin(uint8_t addr) { return begin(addr, &Wire); }
   c0ee2:	b513      	push	{r0, r1, r4, lr}
   c0ee4:	4604      	mov	r4, r0
   c0ee6:	9101      	str	r1, [sp, #4]
   c0ee8:	f006 fc06 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c0eec:	9901      	ldr	r1, [sp, #4]
   c0eee:	4602      	mov	r2, r0
   c0ef0:	4620      	mov	r0, r4
   c0ef2:	b002      	add	sp, #8
   c0ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c0ef8:	f7ff bfdb 	b.w	c0eb2 <_ZN16Adafruit_MCP98085beginEhP7TwoWire>

000c0efc <_ZN16Adafruit_MCP98089readTempCEv>:
float Adafruit_MCP9808::readTempC() {
   c0efc:	b508      	push	{r3, lr}
  uint16_t t = read16(MCP9808_REG_AMBIENT_TEMP);
   c0efe:	2105      	movs	r1, #5
   c0f00:	f7ff ffa7 	bl	c0e52 <_ZN16Adafruit_MCP98086read16Eh>
  if (t != 0xFFFF) {
   c0f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c0f08:	4298      	cmp	r0, r3
   c0f0a:	d00c      	beq.n	c0f26 <_ZN16Adafruit_MCP98089readTempCEv+0x2a>
    temp = t & 0x0FFF;
   c0f0c:	f3c0 030b 	ubfx	r3, r0, #0, #12
   c0f10:	ee00 3a10 	vmov	s0, r3
    if (t & 0x1000)
   c0f14:	04c3      	lsls	r3, r0, #19
    temp /= 16.0;
   c0f16:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
    if (t & 0x1000)
   c0f1a:	d503      	bpl.n	c0f24 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
      temp -= 256;
   c0f1c:	eddf 7a03 	vldr	s15, [pc, #12]	; c0f2c <_ZN16Adafruit_MCP98089readTempCEv+0x30>
   c0f20:	ee30 0a67 	vsub.f32	s0, s0, s15
}
   c0f24:	bd08      	pop	{r3, pc}
  float temp = NAN;
   c0f26:	ed9f 0a02 	vldr	s0, [pc, #8]	; c0f30 <_ZN16Adafruit_MCP98089readTempCEv+0x34>
  return temp;
   c0f2a:	e7fb      	b.n	c0f24 <_ZN16Adafruit_MCP98089readTempCEv+0x28>
   c0f2c:	43800000 	.word	0x43800000
   c0f30:	7fc00000 	.word	0x7fc00000

000c0f34 <_ZN16Adafruit_MCP98088getEventEP15sensors_event_t>:
bool Adafruit_MCP9808::getEvent(sensors_event_t *temp) {
   c0f34:	b570      	push	{r4, r5, r6, lr}
   c0f36:	460c      	mov	r4, r1
   c0f38:	4605      	mov	r5, r0
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c0f3a:	f004 f869 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  memset(temp, 0, sizeof(sensors_event_t));
   c0f3e:	2220      	movs	r2, #32
   c0f40:	4606      	mov	r6, r0
   c0f42:	2100      	movs	r1, #0
   c0f44:	1d20      	adds	r0, r4, #4
   c0f46:	f009 f93d 	bl	ca1c4 <memset>
  temp->version = sizeof(sensors_event_t);
   c0f4a:	2324      	movs	r3, #36	; 0x24
   c0f4c:	6023      	str	r3, [r4, #0]
  temp->sensor_id = _sensorID;
   c0f4e:	88eb      	ldrh	r3, [r5, #6]
   c0f50:	6063      	str	r3, [r4, #4]
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   c0f52:	230d      	movs	r3, #13
  temp->temperature = readTempC();
   c0f54:	4628      	mov	r0, r5
  temp->type = SENSOR_TYPE_AMBIENT_TEMPERATURE;
   c0f56:	60a3      	str	r3, [r4, #8]
  temp->timestamp = t;
   c0f58:	6126      	str	r6, [r4, #16]
  temp->temperature = readTempC();
   c0f5a:	f7ff ffcf 	bl	c0efc <_ZN16Adafruit_MCP98089readTempCEv>
}
   c0f5e:	2001      	movs	r0, #1
  temp->temperature = readTempC();
   c0f60:	ed84 0a05 	vstr	s0, [r4, #20]
}
   c0f64:	bd70      	pop	{r4, r5, r6, pc}

000c0f66 <_ZN16Adafruit_PM25AQIC1Ev>:
#include "Adafruit_PM25AQI.h"

/*!
 *  @brief  Instantiates a new PM25AQI class
 */
Adafruit_PM25AQI::Adafruit_PM25AQI() {}
   c0f66:	2200      	movs	r2, #0
   c0f68:	e9c0 2200 	strd	r2, r2, [r0]
   c0f6c:	4770      	bx	lr

000c0f6e <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire>:
 *  @brief  Setups the hardware and detects a valid PMSA003I. Initializes I2C.
 *  @param  theWire
 *          Optional pointer to I2C interface, otherwise use Wire
 *  @return True if PMSA003I found on I2C, False if something went wrong!
 */
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   c0f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (!i2c_dev) {
   c0f70:	6803      	ldr	r3, [r0, #0]
bool Adafruit_PM25AQI::begin_I2C(TwoWire *theWire) {
   c0f72:	4604      	mov	r4, r0
  if (!i2c_dev) {
   c0f74:	b953      	cbnz	r3, c0f8c <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1e>
    i2c_dev = new Adafruit_I2CDevice(PMSA003I_I2CADDR_DEFAULT, theWire);
   c0f76:	2010      	movs	r0, #16
   c0f78:	9101      	str	r1, [sp, #4]
   c0f7a:	f7f4 f882 	bl	b5082 <_Znwj>
   c0f7e:	4605      	mov	r5, r0
   c0f80:	b118      	cbz	r0, c0f8a <_ZN16Adafruit_PM25AQI9begin_I2CEP7TwoWire+0x1c>
   c0f82:	9a01      	ldr	r2, [sp, #4]
   c0f84:	2112      	movs	r1, #18
   c0f86:	f7fe fea8 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c0f8a:	6025      	str	r5, [r4, #0]
  }

  if (!i2c_dev->begin()) {
   c0f8c:	6820      	ldr	r0, [r4, #0]
   c0f8e:	2101      	movs	r1, #1
    return false;
  }

  return true;
}
   c0f90:	b003      	add	sp, #12
   c0f92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  if (!i2c_dev->begin()) {
   c0f96:	f7fe bebc 	b.w	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>

000c0f9a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata>:
 *  @brief  Setups the hardware and detects a valid UART PM2.5
 *  @param  data
 *          Pointer to PM25_AQI_Data that will be filled by read()ing
 *  @return True on successful read, false if timed out or bad data
 */
bool Adafruit_PM25AQI::read(PM25_AQI_Data *data) {
   c0f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0f9c:	4604      	mov	r4, r0
   c0f9e:	b091      	sub	sp, #68	; 0x44
  uint8_t buffer[32];
  uint16_t sum = 0;

  if (!data) {
   c0fa0:	460d      	mov	r5, r1
   c0fa2:	b911      	cbnz	r1, c0faa <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x10>
        return false;
      }
    }
    if (serial_dev->peek() != 0x42) {
      serial_dev->read();
      return false;
   c0fa4:	2000      	movs	r0, #0
    return false;
  }

  // success!
  return true;
}
   c0fa6:	b011      	add	sp, #68	; 0x44
   c0fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (i2c_dev) { // ok using i2c?
   c0faa:	6800      	ldr	r0, [r0, #0]
   c0fac:	2800      	cmp	r0, #0
   c0fae:	d039      	beq.n	c1024 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x8a>
    if (!i2c_dev->read(buffer, 32)) {
   c0fb0:	2220      	movs	r2, #32
   c0fb2:	2301      	movs	r3, #1
   c0fb4:	eb0d 0102 	add.w	r1, sp, r2
   c0fb8:	f7fe feea 	bl	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
   c0fbc:	2800      	cmp	r0, #0
   c0fbe:	d0f1      	beq.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
  if (buffer[0] != 0x42) {
   c0fc0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   c0fc4:	2b42      	cmp	r3, #66	; 0x42
   c0fc6:	d1ed      	bne.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
   c0fc8:	aa08      	add	r2, sp, #32
   c0fca:	4611      	mov	r1, r2
   c0fcc:	231e      	movs	r3, #30
  uint16_t sum = 0;
   c0fce:	2600      	movs	r6, #0
    sum += buffer[i];
   c0fd0:	f811 0b01 	ldrb.w	r0, [r1], #1
  for (uint8_t i = 0; i < 30; i++) {
   c0fd4:	3b01      	subs	r3, #1
    sum += buffer[i];
   c0fd6:	4430      	add	r0, r6
  for (uint8_t i = 0; i < 30; i++) {
   c0fd8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    sum += buffer[i];
   c0fdc:	b286      	uxth	r6, r0
  for (uint8_t i = 0; i < 30; i++) {
   c0fde:	d1f7      	bne.n	c0fd0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x36>
   c0fe0:	4668      	mov	r0, sp
   c0fe2:	2101      	movs	r1, #1
   c0fe4:	4603      	mov	r3, r0
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
   c0fe6:	7897      	ldrb	r7, [r2, #2]
    buffer_u16[i] = buffer[2 + i * 2 + 1];
   c0fe8:	78d4      	ldrb	r4, [r2, #3]
  for (uint8_t i = 0; i < 15; i++) {
   c0fea:	3101      	adds	r1, #1
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
   c0fec:	eb04 2407 	add.w	r4, r4, r7, lsl #8
  for (uint8_t i = 0; i < 15; i++) {
   c0ff0:	2910      	cmp	r1, #16
    buffer_u16[i] += (buffer[2 + i * 2] << 8);
   c0ff2:	f820 4b02 	strh.w	r4, [r0], #2
  for (uint8_t i = 0; i < 15; i++) {
   c0ff6:	f102 0202 	add.w	r2, r2, #2
   c0ffa:	d1f4      	bne.n	c0fe6 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x4c>
  memcpy((void *)data, (void *)buffer_u16, 30);
   c0ffc:	462a      	mov	r2, r5
   c0ffe:	af06      	add	r7, sp, #24
   c1000:	461c      	mov	r4, r3
   c1002:	cc03      	ldmia	r4!, {r0, r1}
   c1004:	42bc      	cmp	r4, r7
   c1006:	6010      	str	r0, [r2, #0]
   c1008:	6051      	str	r1, [r2, #4]
   c100a:	4623      	mov	r3, r4
   c100c:	f102 0208 	add.w	r2, r2, #8
   c1010:	d1f6      	bne.n	c1000 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x66>
   c1012:	6820      	ldr	r0, [r4, #0]
   c1014:	6010      	str	r0, [r2, #0]
   c1016:	88a3      	ldrh	r3, [r4, #4]
   c1018:	8093      	strh	r3, [r2, #4]
  if (sum != data->checksum) {
   c101a:	8ba8      	ldrh	r0, [r5, #28]
   c101c:	1b83      	subs	r3, r0, r6
   c101e:	4258      	negs	r0, r3
   c1020:	4158      	adcs	r0, r3
   c1022:	e7c0      	b.n	c0fa6 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc>
  } else if (serial_dev) { // ok using uart
   c1024:	6860      	ldr	r0, [r4, #4]
   c1026:	2800      	cmp	r0, #0
   c1028:	d0bc      	beq.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (!serial_dev->available()) {
   c102a:	6803      	ldr	r3, [r0, #0]
   c102c:	691b      	ldr	r3, [r3, #16]
   c102e:	4798      	blx	r3
   c1030:	2800      	cmp	r0, #0
   c1032:	d0b7      	beq.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
   c1034:	2620      	movs	r6, #32
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
   c1036:	6860      	ldr	r0, [r4, #4]
   c1038:	6803      	ldr	r3, [r0, #0]
   c103a:	699b      	ldr	r3, [r3, #24]
   c103c:	4798      	blx	r3
   c103e:	2842      	cmp	r0, #66	; 0x42
   c1040:	d00b      	beq.n	c105a <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xc0>
      serial_dev->read();
   c1042:	6860      	ldr	r0, [r4, #4]
   c1044:	6803      	ldr	r3, [r0, #0]
   c1046:	695b      	ldr	r3, [r3, #20]
   c1048:	4798      	blx	r3
      if (!serial_dev->available()) {
   c104a:	6860      	ldr	r0, [r4, #4]
   c104c:	6803      	ldr	r3, [r0, #0]
   c104e:	691b      	ldr	r3, [r3, #16]
   c1050:	4798      	blx	r3
   c1052:	2800      	cmp	r0, #0
   c1054:	d0a6      	beq.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    while ((skipped < 32) && (serial_dev->peek() != 0x42)) {
   c1056:	3e01      	subs	r6, #1
   c1058:	d1ed      	bne.n	c1036 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x9c>
    if (serial_dev->peek() != 0x42) {
   c105a:	6860      	ldr	r0, [r4, #4]
   c105c:	6803      	ldr	r3, [r0, #0]
   c105e:	699b      	ldr	r3, [r3, #24]
   c1060:	4798      	blx	r3
   c1062:	2842      	cmp	r0, #66	; 0x42
   c1064:	6860      	ldr	r0, [r4, #4]
      serial_dev->read();
   c1066:	6803      	ldr	r3, [r0, #0]
    if (serial_dev->peek() != 0x42) {
   c1068:	d002      	beq.n	c1070 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xd6>
      serial_dev->read();
   c106a:	695b      	ldr	r3, [r3, #20]
   c106c:	4798      	blx	r3
   c106e:	e799      	b.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    if (serial_dev->available() < 32) {
   c1070:	691b      	ldr	r3, [r3, #16]
   c1072:	4798      	blx	r3
   c1074:	281f      	cmp	r0, #31
   c1076:	dd95      	ble.n	c0fa4 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0xa>
    serial_dev->readBytes((char *)buffer, 32);
   c1078:	6860      	ldr	r0, [r4, #4]
   c107a:	6803      	ldr	r3, [r0, #0]
   c107c:	2220      	movs	r2, #32
   c107e:	6a1b      	ldr	r3, [r3, #32]
   c1080:	eb0d 0102 	add.w	r1, sp, r2
   c1084:	4798      	blx	r3
   c1086:	e79b      	b.n	c0fc0 <_ZN16Adafruit_PM25AQI4readEP10PMSAQIdata+0x26>

000c1088 <_ZL4crc8PKhi.constprop.0>:

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);

  for (int j = len; j; --j) {
    crc ^= *data++;
   c1088:	7803      	ldrb	r3, [r0, #0]
   c108a:	43db      	mvns	r3, r3
   c108c:	b2db      	uxtb	r3, r3
   c108e:	2208      	movs	r2, #8

    for (int i = 8; i; --i) {
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
   c1090:	f013 0f80 	tst.w	r3, #128	; 0x80
   c1094:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c1098:	d001      	beq.n	c109e <_ZL4crc8PKhi.constprop.0+0x16>
   c109a:	f083 0331 	eor.w	r3, r3, #49	; 0x31
    for (int i = 8; i; --i) {
   c109e:	3a01      	subs	r2, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
   c10a0:	b2db      	uxtb	r3, r3
    for (int i = 8; i; --i) {
   c10a2:	d1f5      	bne.n	c1090 <_ZL4crc8PKhi.constprop.0+0x8>
    crc ^= *data++;
   c10a4:	7840      	ldrb	r0, [r0, #1]
   c10a6:	4058      	eors	r0, r3
   c10a8:	2308      	movs	r3, #8
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
   c10aa:	f010 0f80 	tst.w	r0, #128	; 0x80
   c10ae:	ea4f 0040 	mov.w	r0, r0, lsl #1
   c10b2:	d001      	beq.n	c10b8 <_ZL4crc8PKhi.constprop.0+0x30>
   c10b4:	f080 0031 	eor.w	r0, r0, #49	; 0x31
    for (int i = 8; i; --i) {
   c10b8:	3b01      	subs	r3, #1
      crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc << 1);
   c10ba:	b2c0      	uxtb	r0, r0
    for (int i = 8; i; --i) {
   c10bc:	d1f5      	bne.n	c10aa <_ZL4crc8PKhi.constprop.0+0x22>
   c10be:	4770      	bx	lr

000c10c0 <_ZN14Adafruit_SHT31C1EP7TwoWire>:
Adafruit_SHT31::Adafruit_SHT31(TwoWire *theWire) {
   c10c0:	2200      	movs	r2, #0
  _wire = theWire;
   c10c2:	e9c0 1202 	strd	r1, r2, [r0, #8]
  humidity = NAN;
   c10c6:	4a02      	ldr	r2, [pc, #8]	; (c10d0 <_ZN14Adafruit_SHT31C1EP7TwoWire+0x10>)
   c10c8:	6002      	str	r2, [r0, #0]
  temp = NAN;
   c10ca:	6042      	str	r2, [r0, #4]
}
   c10cc:	4770      	bx	lr
   c10ce:	bf00      	nop
   c10d0:	7fc00000 	.word	0x7fc00000

000c10d4 <_ZN14Adafruit_SHT31D1Ev>:
Adafruit_SHT31::~Adafruit_SHT31() {
   c10d4:	b510      	push	{r4, lr}
   c10d6:	4604      	mov	r4, r0
  if (i2c_dev) {
   c10d8:	68c0      	ldr	r0, [r0, #12]
   c10da:	b110      	cbz	r0, c10e2 <_ZN14Adafruit_SHT31D1Ev+0xe>
    delete i2c_dev; // remove old interface
   c10dc:	2110      	movs	r1, #16
   c10de:	f7f3 ffd4 	bl	b508a <_ZdlPvj>
}
   c10e2:	4620      	mov	r0, r4
   c10e4:	bd10      	pop	{r4, pc}

000c10e6 <_ZN14Adafruit_SHT3112writeCommandEt>:
/**
 * Internal function to perform and I2C write.
 *
 * @param cmd   The 16-bit command ID to send.
 */
bool Adafruit_SHT31::writeCommand(uint16_t command) {
   c10e6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t cmd[2];

  cmd[0] = command >> 8;
   c10e8:	0a0b      	lsrs	r3, r1, #8
   c10ea:	f88d 300c 	strb.w	r3, [sp, #12]
  cmd[1] = command & 0xFF;

  return i2c_dev->write(cmd, 2);
   c10ee:	2300      	movs	r3, #0
   c10f0:	e9cd 3300 	strd	r3, r3, [sp]
  cmd[1] = command & 0xFF;
   c10f4:	f88d 100d 	strb.w	r1, [sp, #13]
  return i2c_dev->write(cmd, 2);
   c10f8:	2301      	movs	r3, #1
   c10fa:	2202      	movs	r2, #2
   c10fc:	a903      	add	r1, sp, #12
   c10fe:	68c0      	ldr	r0, [r0, #12]
   c1100:	f7fe fe16 	bl	bfd30 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
}
   c1104:	b005      	add	sp, #20
   c1106:	f85d fb04 	ldr.w	pc, [sp], #4

000c110a <_ZN14Adafruit_SHT3110readStatusEv>:
uint16_t Adafruit_SHT31::readStatus(void) {
   c110a:	b513      	push	{r0, r1, r4, lr}
   c110c:	4604      	mov	r4, r0
  writeCommand(SHT31_READSTATUS);
   c110e:	f24f 312d 	movw	r1, #62253	; 0xf32d
   c1112:	f7ff ffe8 	bl	c10e6 <_ZN14Adafruit_SHT3112writeCommandEt>
  i2c_dev->read(data, 3);
   c1116:	68e0      	ldr	r0, [r4, #12]
   c1118:	2301      	movs	r3, #1
   c111a:	2203      	movs	r2, #3
   c111c:	a901      	add	r1, sp, #4
   c111e:	f7fe fe37 	bl	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
  return stat;
   c1122:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   c1126:	ba40      	rev16	r0, r0
}
   c1128:	b280      	uxth	r0, r0
   c112a:	b002      	add	sp, #8
   c112c:	bd10      	pop	{r4, pc}

000c112e <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   c112e:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   c1130:	f243 01a2 	movw	r1, #12450	; 0x30a2
   c1134:	f7ff ffd7 	bl	c10e6 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   c1138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   c113c:	200a      	movs	r0, #10
   c113e:	f004 baf7 	b.w	c5730 <delay>

000c1142 <_ZN14Adafruit_SHT315beginEh>:
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
   c1142:	b570      	push	{r4, r5, r6, lr}
   c1144:	4604      	mov	r4, r0
  if (i2c_dev) {
   c1146:	68c0      	ldr	r0, [r0, #12]
bool Adafruit_SHT31::begin(uint8_t i2caddr) {
   c1148:	460e      	mov	r6, r1
  if (i2c_dev) {
   c114a:	b110      	cbz	r0, c1152 <_ZN14Adafruit_SHT315beginEh+0x10>
    delete i2c_dev; // remove old interface
   c114c:	2110      	movs	r1, #16
   c114e:	f7f3 ff9c 	bl	b508a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, _wire);
   c1152:	2010      	movs	r0, #16
   c1154:	f7f3 ff95 	bl	b5082 <_Znwj>
   c1158:	4605      	mov	r5, r0
   c115a:	b118      	cbz	r0, c1164 <_ZN14Adafruit_SHT315beginEh+0x22>
   c115c:	68a2      	ldr	r2, [r4, #8]
   c115e:	4631      	mov	r1, r6
   c1160:	f7fe fdbb 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c1164:	60e5      	str	r5, [r4, #12]
  if (!i2c_dev->begin()) {
   c1166:	2101      	movs	r1, #1
   c1168:	4628      	mov	r0, r5
   c116a:	f7fe fdd2 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   c116e:	b150      	cbz	r0, c1186 <_ZN14Adafruit_SHT315beginEh+0x44>
  reset();
   c1170:	4620      	mov	r0, r4
   c1172:	f7ff ffdc 	bl	c112e <_ZN14Adafruit_SHT315resetEv>
  return readStatus() != 0xFFFF;
   c1176:	4620      	mov	r0, r4
   c1178:	f7ff ffc7 	bl	c110a <_ZN14Adafruit_SHT3110readStatusEv>
   c117c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   c1180:	1ac0      	subs	r0, r0, r3
   c1182:	bf18      	it	ne
   c1184:	2001      	movne	r0, #1
}
   c1186:	bd70      	pop	{r4, r5, r6, pc}

000c1188 <_ZN14Adafruit_SHT3111readTempHumEv>:
bool Adafruit_SHT31::readTempHum(void) {
   c1188:	b513      	push	{r0, r1, r4, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   c118a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
bool Adafruit_SHT31::readTempHum(void) {
   c118e:	4604      	mov	r4, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   c1190:	f7ff ffa9 	bl	c10e6 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(20);
   c1194:	2014      	movs	r0, #20
   c1196:	f004 facb 	bl	c5730 <delay>
  i2c_dev->read(readbuffer, sizeof(readbuffer));
   c119a:	2301      	movs	r3, #1
   c119c:	2206      	movs	r2, #6
   c119e:	4669      	mov	r1, sp
   c11a0:	68e0      	ldr	r0, [r4, #12]
   c11a2:	f7fe fdf5 	bl	bfd90 <_ZN18Adafruit_I2CDevice4readEPhjb>
  if (readbuffer[2] != crc8(readbuffer, 2) ||
   c11a6:	4668      	mov	r0, sp
   c11a8:	f7ff ff6e 	bl	c1088 <_ZL4crc8PKhi.constprop.0>
   c11ac:	f89d 1002 	ldrb.w	r1, [sp, #2]
   c11b0:	4281      	cmp	r1, r0
   c11b2:	d12f      	bne.n	c1214 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
      readbuffer[5] != crc8(readbuffer + 3, 2))
   c11b4:	f10d 0003 	add.w	r0, sp, #3
   c11b8:	f7ff ff66 	bl	c1088 <_ZL4crc8PKhi.constprop.0>
   c11bc:	f89d 1005 	ldrb.w	r1, [sp, #5]
  if (readbuffer[2] != crc8(readbuffer, 2) ||
   c11c0:	4281      	cmp	r1, r0
   c11c2:	d127      	bne.n	c1214 <_ZN14Adafruit_SHT3111readTempHumEv+0x8c>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
   c11c4:	f8bd 3000 	ldrh.w	r3, [sp]
  temp = (float)stemp / 100.0f;
   c11c8:	ed9f 7a13 	vldr	s14, [pc, #76]	; c1218 <_ZN14Adafruit_SHT3111readTempHumEv+0x90>
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
   c11cc:	ba5b      	rev16	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
   c11ce:	f241 1217 	movw	r2, #4375	; 0x1117
  int32_t stemp = (int32_t)(((uint32_t)readbuffer[0] << 8) | readbuffer[1]);
   c11d2:	b29b      	uxth	r3, r3
  stemp = ((4375 * stemp) >> 14) - 4500;
   c11d4:	4353      	muls	r3, r2
   c11d6:	139b      	asrs	r3, r3, #14
   c11d8:	f5a3 538c 	sub.w	r3, r3, #4480	; 0x1180
   c11dc:	3b14      	subs	r3, #20
  temp = (float)stemp / 100.0f;
   c11de:	ee07 3a90 	vmov	s15, r3
   c11e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  shum = (625 * shum) >> 12;
   c11e6:	f8bd 3003 	ldrh.w	r3, [sp, #3]
  temp = (float)stemp / 100.0f;
   c11ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
  shum = (625 * shum) >> 12;
   c11ee:	ba5b      	rev16	r3, r3
   c11f0:	b29b      	uxth	r3, r3
   c11f2:	f240 2271 	movw	r2, #625	; 0x271
   c11f6:	4353      	muls	r3, r2
   c11f8:	0b1b      	lsrs	r3, r3, #12
  return true;
   c11fa:	2001      	movs	r0, #1
  humidity = (float)shum / 100.0f;
   c11fc:	ee07 3a90 	vmov	s15, r3
   c1200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  temp = (float)stemp / 100.0f;
   c1204:	edc4 6a01 	vstr	s13, [r4, #4]
  humidity = (float)shum / 100.0f;
   c1208:	eec7 6a87 	vdiv.f32	s13, s15, s14
   c120c:	edc4 6a00 	vstr	s13, [r4]
}
   c1210:	b002      	add	sp, #8
   c1212:	bd10      	pop	{r4, pc}
    return false;
   c1214:	2000      	movs	r0, #0
   c1216:	e7fb      	b.n	c1210 <_ZN14Adafruit_SHT3111readTempHumEv+0x88>
   c1218:	42c80000 	.word	0x42c80000

000c121c <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   c121c:	b510      	push	{r4, lr}
   c121e:	4604      	mov	r4, r0
  if (!readTempHum())
   c1220:	f7ff ffb2 	bl	c1188 <_ZN14Adafruit_SHT3111readTempHumEv>
   c1224:	b110      	cbz	r0, c122c <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   c1226:	ed94 0a01 	vldr	s0, [r4, #4]
}
   c122a:	bd10      	pop	{r4, pc}
    return NAN;
   c122c:	ed9f 0a01 	vldr	s0, [pc, #4]	; c1234 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   c1230:	e7fb      	b.n	c122a <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   c1232:	bf00      	nop
   c1234:	7fc00000 	.word	0x7fc00000

000c1238 <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   c1238:	b510      	push	{r4, lr}
   c123a:	4604      	mov	r4, r0
  if (!readTempHum())
   c123c:	f7ff ffa4 	bl	c1188 <_ZN14Adafruit_SHT3111readTempHumEv>
   c1240:	b110      	cbz	r0, c1248 <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   c1242:	ed94 0a00 	vldr	s0, [r4]
}
   c1246:	bd10      	pop	{r4, pc}
    return NAN;
   c1248:	ed9f 0a01 	vldr	s0, [pc, #4]	; c1250 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   c124c:	e7fb      	b.n	c1246 <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   c124e:	bf00      	nop
   c1250:	7fc00000 	.word	0x7fc00000

000c1254 <_ZN15Adafruit_SI1145C1Ev>:
#include "Adafruit_SI1145.h"
/**
 * @brief Construct a new Adafruit_SI1145::Adafruit_SI1145 object
 *
 */
Adafruit_SI1145::Adafruit_SI1145() : m_pBus(&Wire), _addr(SI1145_ADDR) {}
   c1254:	b510      	push	{r4, lr}
   c1256:	4604      	mov	r4, r0
   c1258:	f006 fa4e 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c125c:	2360      	movs	r3, #96	; 0x60
   c125e:	6020      	str	r0, [r4, #0]
   c1260:	7123      	strb	r3, [r4, #4]
   c1262:	4620      	mov	r0, r4
   c1264:	bd10      	pop	{r4, pc}

000c1266 <_ZN15Adafruit_SI11455read8Eh>:
  return read8(SI1145_REG_PARAMRD);
}

/*********************************************************************/

uint8_t Adafruit_SI1145::read8(uint8_t reg) {
   c1266:	b538      	push	{r3, r4, r5, lr}
   c1268:	4604      	mov	r4, r0
   c126a:	460d      	mov	r5, r1
  m_pBus->beginTransmission(_addr);
   c126c:	7901      	ldrb	r1, [r0, #4]
   c126e:	6800      	ldr	r0, [r0, #0]
   c1270:	f005 f84a 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write((uint8_t)reg);
   c1274:	6820      	ldr	r0, [r4, #0]
   c1276:	6803      	ldr	r3, [r0, #0]
   c1278:	4629      	mov	r1, r5
   c127a:	689b      	ldr	r3, [r3, #8]
   c127c:	4798      	blx	r3
  m_pBus->endTransmission();
   c127e:	6820      	ldr	r0, [r4, #0]
   c1280:	f005 f867 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom((uint8_t)_addr, (uint8_t)1);
   c1284:	7921      	ldrb	r1, [r4, #4]
   c1286:	6820      	ldr	r0, [r4, #0]
   c1288:	2201      	movs	r2, #1
   c128a:	f005 f83a 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
  return m_pBus->read();
   c128e:	6820      	ldr	r0, [r4, #0]
   c1290:	6803      	ldr	r3, [r0, #0]
   c1292:	695b      	ldr	r3, [r3, #20]
   c1294:	4798      	blx	r3
}
   c1296:	b2c0      	uxtb	r0, r0
   c1298:	bd38      	pop	{r3, r4, r5, pc}

000c129a <_ZN15Adafruit_SI11456read16Eh>:

uint16_t Adafruit_SI1145::read16(uint8_t a) {
   c129a:	b538      	push	{r3, r4, r5, lr}
   c129c:	4604      	mov	r4, r0
   c129e:	460d      	mov	r5, r1
  uint16_t ret;

  m_pBus->beginTransmission(_addr); // start transmission to device
   c12a0:	7901      	ldrb	r1, [r0, #4]
   c12a2:	6800      	ldr	r0, [r0, #0]
   c12a4:	f005 f830 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(a);                 // sends register address to read from
   c12a8:	6820      	ldr	r0, [r4, #0]
   c12aa:	6803      	ldr	r3, [r0, #0]
   c12ac:	4629      	mov	r1, r5
   c12ae:	689b      	ldr	r3, [r3, #8]
   c12b0:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
   c12b2:	6820      	ldr	r0, [r4, #0]
   c12b4:	f005 f84d 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>

  m_pBus->requestFrom(_addr, (uint8_t)2); // send data n-bytes read
   c12b8:	7921      	ldrb	r1, [r4, #4]
   c12ba:	6820      	ldr	r0, [r4, #0]
   c12bc:	2202      	movs	r2, #2
   c12be:	f005 f820 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
  ret = m_pBus->read();                   // receive DATA
   c12c2:	6820      	ldr	r0, [r4, #0]
   c12c4:	6803      	ldr	r3, [r0, #0]
   c12c6:	695b      	ldr	r3, [r3, #20]
   c12c8:	4798      	blx	r3
   c12ca:	4605      	mov	r5, r0
  ret |= (uint16_t)m_pBus->read() << 8;   // receive DATA
   c12cc:	6820      	ldr	r0, [r4, #0]
   c12ce:	6803      	ldr	r3, [r0, #0]
   c12d0:	695b      	ldr	r3, [r3, #20]
   c12d2:	4798      	blx	r3
   c12d4:	ea45 2000 	orr.w	r0, r5, r0, lsl #8

  return ret;
}
   c12d8:	b280      	uxth	r0, r0
   c12da:	bd38      	pop	{r3, r4, r5, pc}

000c12dc <_ZN15Adafruit_SI11456readUVEv>:
uint16_t Adafruit_SI1145::readUV(void) { return read16(0x2C); }
   c12dc:	212c      	movs	r1, #44	; 0x2c
   c12de:	f7ff bfdc 	b.w	c129a <_ZN15Adafruit_SI11456read16Eh>

000c12e2 <_ZN15Adafruit_SI114511readVisibleEv>:
uint16_t Adafruit_SI1145::readVisible(void) { return read16(0x22); }
   c12e2:	2122      	movs	r1, #34	; 0x22
   c12e4:	f7ff bfd9 	b.w	c129a <_ZN15Adafruit_SI11456read16Eh>

000c12e8 <_ZN15Adafruit_SI11456readIREv>:
uint16_t Adafruit_SI1145::readIR(void) { return read16(0x24); }
   c12e8:	2124      	movs	r1, #36	; 0x24
   c12ea:	f7ff bfd6 	b.w	c129a <_ZN15Adafruit_SI11456read16Eh>

000c12ee <_ZN15Adafruit_SI11456write8Ehh>:

void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
   c12ee:	b570      	push	{r4, r5, r6, lr}
   c12f0:	4604      	mov	r4, r0
   c12f2:	460e      	mov	r6, r1

  m_pBus->beginTransmission(_addr); // start transmission to device
   c12f4:	7901      	ldrb	r1, [r0, #4]
   c12f6:	6800      	ldr	r0, [r0, #0]
void Adafruit_SI1145::write8(uint8_t reg, uint8_t val) {
   c12f8:	4615      	mov	r5, r2
  m_pBus->beginTransmission(_addr); // start transmission to device
   c12fa:	f005 f805 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  m_pBus->write(reg);               // sends register address to write
   c12fe:	6820      	ldr	r0, [r4, #0]
   c1300:	6803      	ldr	r3, [r0, #0]
   c1302:	4631      	mov	r1, r6
   c1304:	689b      	ldr	r3, [r3, #8]
   c1306:	4798      	blx	r3
  m_pBus->write(val);               // sends value
   c1308:	6820      	ldr	r0, [r4, #0]
   c130a:	6803      	ldr	r3, [r0, #0]
   c130c:	4629      	mov	r1, r5
   c130e:	689b      	ldr	r3, [r3, #8]
   c1310:	4798      	blx	r3
  m_pBus->endTransmission();        // end transmission
   c1312:	6820      	ldr	r0, [r4, #0]
}
   c1314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  m_pBus->endTransmission();        // end transmission
   c1318:	f005 b81b 	b.w	c6352 <_ZN7TwoWire15endTransmissionEv>

000c131c <_ZN15Adafruit_SI11455resetEv>:
void Adafruit_SI1145::reset() {
   c131c:	b510      	push	{r4, lr}
  write8(SI1145_REG_MEASRATE0, 0);
   c131e:	2200      	movs	r2, #0
void Adafruit_SI1145::reset() {
   c1320:	4604      	mov	r4, r0
  write8(SI1145_REG_MEASRATE0, 0);
   c1322:	2108      	movs	r1, #8
   c1324:	f7ff ffe3 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_MEASRATE1, 0);
   c1328:	4620      	mov	r0, r4
   c132a:	2200      	movs	r2, #0
   c132c:	2109      	movs	r1, #9
   c132e:	f7ff ffde 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, 0);
   c1332:	4620      	mov	r0, r4
   c1334:	2200      	movs	r2, #0
   c1336:	2104      	movs	r1, #4
   c1338:	f7ff ffd9 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE1, 0);
   c133c:	4620      	mov	r0, r4
   c133e:	2200      	movs	r2, #0
   c1340:	2105      	movs	r1, #5
   c1342:	f7ff ffd4 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQMODE2, 0);
   c1346:	4620      	mov	r0, r4
   c1348:	2200      	movs	r2, #0
   c134a:	2106      	movs	r1, #6
   c134c:	f7ff ffcf 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_INTCFG, 0);
   c1350:	4620      	mov	r0, r4
   c1352:	2200      	movs	r2, #0
   c1354:	2103      	movs	r1, #3
   c1356:	f7ff ffca 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQSTAT, 0xFF);
   c135a:	4620      	mov	r0, r4
   c135c:	22ff      	movs	r2, #255	; 0xff
   c135e:	2121      	movs	r1, #33	; 0x21
   c1360:	f7ff ffc5 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_RESET);
   c1364:	2201      	movs	r2, #1
   c1366:	2118      	movs	r1, #24
   c1368:	4620      	mov	r0, r4
   c136a:	f7ff ffc0 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  delay(10);
   c136e:	200a      	movs	r0, #10
   c1370:	f004 f9de 	bl	c5730 <delay>
  write8(SI1145_REG_HWKEY, 0x17);
   c1374:	4620      	mov	r0, r4
   c1376:	2217      	movs	r2, #23
   c1378:	2107      	movs	r1, #7
   c137a:	f7ff ffb8 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
}
   c137e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(10);
   c1382:	200a      	movs	r0, #10
   c1384:	f004 b9d4 	b.w	c5730 <delay>

000c1388 <_ZN15Adafruit_SI114510writeParamEhh>:
uint8_t Adafruit_SI1145::writeParam(uint8_t p, uint8_t v) {
   c1388:	b538      	push	{r3, r4, r5, lr}
   c138a:	4604      	mov	r4, r0
   c138c:	460d      	mov	r5, r1
  write8(SI1145_REG_PARAMWR, v);
   c138e:	2117      	movs	r1, #23
   c1390:	f7ff ffad 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, p | SI1145_PARAM_SET);
   c1394:	4620      	mov	r0, r4
   c1396:	f045 02a0 	orr.w	r2, r5, #160	; 0xa0
   c139a:	2118      	movs	r1, #24
   c139c:	f7ff ffa7 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  return read8(SI1145_REG_PARAMRD);
   c13a0:	4620      	mov	r0, r4
   c13a2:	212e      	movs	r1, #46	; 0x2e
}
   c13a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return read8(SI1145_REG_PARAMRD);
   c13a8:	f7ff bf5d 	b.w	c1266 <_ZN15Adafruit_SI11455read8Eh>

000c13ac <_ZN15Adafruit_SI11455beginEhP7TwoWire>:
boolean Adafruit_SI1145::begin(uint8_t addr, TwoWire *pBus) {
   c13ac:	b510      	push	{r4, lr}
   c13ae:	4604      	mov	r4, r0
   c13b0:	4610      	mov	r0, r2
  _addr = addr;
   c13b2:	7121      	strb	r1, [r4, #4]
  m_pBus = pBus;
   c13b4:	6022      	str	r2, [r4, #0]
  m_pBus->begin();
   c13b6:	f004 ff71 	bl	c629c <_ZN7TwoWire5beginEv>
  uint8_t id = read8(SI1145_REG_PARTID);
   c13ba:	2100      	movs	r1, #0
   c13bc:	4620      	mov	r0, r4
   c13be:	f7ff ff52 	bl	c1266 <_ZN15Adafruit_SI11455read8Eh>
  if (id != 0x45)
   c13c2:	2845      	cmp	r0, #69	; 0x45
   c13c4:	d172      	bne.n	c14ac <_ZN15Adafruit_SI11455beginEhP7TwoWire+0x100>
  reset();
   c13c6:	4620      	mov	r0, r4
   c13c8:	f7ff ffa8 	bl	c131c <_ZN15Adafruit_SI11455resetEv>
  write8(SI1145_REG_UCOEFF0, 0x29);
   c13cc:	2229      	movs	r2, #41	; 0x29
   c13ce:	2113      	movs	r1, #19
   c13d0:	4620      	mov	r0, r4
   c13d2:	f7ff ff8c 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF1, 0x89);
   c13d6:	2289      	movs	r2, #137	; 0x89
   c13d8:	2114      	movs	r1, #20
   c13da:	4620      	mov	r0, r4
   c13dc:	f7ff ff87 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF2, 0x02);
   c13e0:	2202      	movs	r2, #2
   c13e2:	2115      	movs	r1, #21
   c13e4:	4620      	mov	r0, r4
   c13e6:	f7ff ff82 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_UCOEFF3, 0x00);
   c13ea:	2200      	movs	r2, #0
   c13ec:	2116      	movs	r1, #22
   c13ee:	4620      	mov	r0, r4
   c13f0:	f7ff ff7d 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_CHLIST,
   c13f4:	22b1      	movs	r2, #177	; 0xb1
   c13f6:	2101      	movs	r1, #1
   c13f8:	4620      	mov	r0, r4
   c13fa:	f7ff ffc5 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_INTCFG, SI1145_REG_INTCFG_INTOE);
   c13fe:	2201      	movs	r2, #1
   c1400:	2103      	movs	r1, #3
   c1402:	4620      	mov	r0, r4
   c1404:	f7ff ff73 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_IRQEN, SI1145_REG_IRQEN_ALSEVERYSAMPLE);
   c1408:	2201      	movs	r2, #1
   c140a:	2104      	movs	r1, #4
   c140c:	4620      	mov	r0, r4
   c140e:	f7ff ff6e 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_PSLED21, 0x03); // 20mA for LED 1 only
   c1412:	2203      	movs	r2, #3
   c1414:	210f      	movs	r1, #15
   c1416:	4620      	mov	r0, r4
   c1418:	f7ff ff69 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  writeParam(SI1145_PARAM_PS1ADCMUX, SI1145_PARAM_ADCMUX_LARGEIR);
   c141c:	2203      	movs	r2, #3
   c141e:	2107      	movs	r1, #7
   c1420:	4620      	mov	r0, r4
   c1422:	f7ff ffb1 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSLED12SEL, SI1145_PARAM_PSLED12SEL_PS1LED1);
   c1426:	2201      	movs	r2, #1
   c1428:	2102      	movs	r1, #2
   c142a:	4620      	mov	r0, r4
   c142c:	f7ff ffac 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCGAIN, 0);
   c1430:	2200      	movs	r2, #0
   c1432:	210b      	movs	r1, #11
   c1434:	4620      	mov	r0, r4
   c1436:	f7ff ffa7 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   c143a:	2270      	movs	r2, #112	; 0x70
   c143c:	210a      	movs	r1, #10
   c143e:	4620      	mov	r0, r4
   c1440:	f7ff ffa2 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_PSADCMISC,
   c1444:	2224      	movs	r2, #36	; 0x24
   c1446:	210c      	movs	r1, #12
   c1448:	4620      	mov	r0, r4
   c144a:	f7ff ff9d 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMUX, SI1145_PARAM_ADCMUX_SMALLIR);
   c144e:	2200      	movs	r2, #0
   c1450:	210e      	movs	r1, #14
   c1452:	4620      	mov	r0, r4
   c1454:	f7ff ff98 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCGAIN, 0);
   c1458:	2200      	movs	r2, #0
   c145a:	211e      	movs	r1, #30
   c145c:	4620      	mov	r0, r4
   c145e:	f7ff ff93 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   c1462:	2270      	movs	r2, #112	; 0x70
   c1464:	211d      	movs	r1, #29
   c1466:	4620      	mov	r0, r4
   c1468:	f7ff ff8e 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSIRADCMISC, SI1145_PARAM_ALSIRADCMISC_RANGE);
   c146c:	2220      	movs	r2, #32
   c146e:	211f      	movs	r1, #31
   c1470:	4620      	mov	r0, r4
   c1472:	f7ff ff89 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCGAIN, 0);
   c1476:	2200      	movs	r2, #0
   c1478:	2111      	movs	r1, #17
   c147a:	4620      	mov	r0, r4
   c147c:	f7ff ff84 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCOUNTER, SI1145_PARAM_ADCCOUNTER_511CLK);
   c1480:	2270      	movs	r2, #112	; 0x70
   c1482:	2110      	movs	r1, #16
   c1484:	4620      	mov	r0, r4
   c1486:	f7ff ff7f 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  writeParam(SI1145_PARAM_ALSVISADCMISC, SI1145_PARAM_ALSVISADCMISC_VISRANGE);
   c148a:	2220      	movs	r2, #32
   c148c:	2112      	movs	r1, #18
   c148e:	4620      	mov	r0, r4
   c1490:	f7ff ff7a 	bl	c1388 <_ZN15Adafruit_SI114510writeParamEhh>
  write8(SI1145_REG_MEASRATE0, 0xFF); // 255 * 31.25uS = 8ms
   c1494:	22ff      	movs	r2, #255	; 0xff
   c1496:	2108      	movs	r1, #8
   c1498:	4620      	mov	r0, r4
   c149a:	f7ff ff28 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
  write8(SI1145_REG_COMMAND, SI1145_PSALS_AUTO);
   c149e:	4620      	mov	r0, r4
   c14a0:	220f      	movs	r2, #15
   c14a2:	2118      	movs	r1, #24
   c14a4:	f7ff ff23 	bl	c12ee <_ZN15Adafruit_SI11456write8Ehh>
   c14a8:	2001      	movs	r0, #1
}
   c14aa:	bd10      	pop	{r4, pc}
    return false; // look for SI1145
   c14ac:	2000      	movs	r0, #0
   c14ae:	e7fc      	b.n	c14aa <_ZN15Adafruit_SI11455beginEhP7TwoWire+0xfe>

000c14b0 <_ZN15Adafruit_SI11455beginEP7TwoWire>:
boolean Adafruit_SI1145::begin(TwoWire *pBus) {
   c14b0:	460a      	mov	r2, r1
  return begin(SI1145_ADDR, pBus);
   c14b2:	2160      	movs	r1, #96	; 0x60
   c14b4:	f7ff bf7a 	b.w	c13ac <_ZN15Adafruit_SI11455beginEhP7TwoWire>

000c14b8 <_ZN16Adafruit_SSD1306D1Ev>:
      rstPin(rst_pin) {}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   c14b8:	b510      	push	{r4, lr}
   c14ba:	4b04      	ldr	r3, [pc, #16]	; (c14cc <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   c14bc:	6003      	str	r3, [r0, #0]
   c14be:	4604      	mov	r4, r0
  if (buffer) {
   c14c0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   c14c2:	b108      	cbz	r0, c14c8 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   c14c4:	f004 f8dc 	bl	c5680 <free>
    buffer = NULL;
  }
}
   c14c8:	4620      	mov	r0, r4
   c14ca:	bd10      	pop	{r4, pc}
   c14cc:	000ccb20 	.word	0x000ccb20

000c14d0 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   c14d0:	b510      	push	{r4, lr}
   c14d2:	4604      	mov	r4, r0
}
   c14d4:	f7ff fff0 	bl	c14b8 <_ZN16Adafruit_SSD1306D1Ev>
   c14d8:	4620      	mov	r0, r4
   c14da:	2174      	movs	r1, #116	; 0x74
   c14dc:	f7f3 fdd5 	bl	b508a <_ZdlPvj>
   c14e0:	4620      	mov	r0, r4
   c14e2:	bd10      	pop	{r4, pc}

000c14e4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   c14e4:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   c14e6:	b510      	push	{r4, lr}
  if ((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   c14e8:	db4b      	blt.n	c1582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   c14ea:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   c14ee:	428c      	cmp	r4, r1
   c14f0:	dd47      	ble.n	c1582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   c14f2:	2a00      	cmp	r2, #0
   c14f4:	db45      	blt.n	c1582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   c14f6:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   c14fa:	4294      	cmp	r4, r2
   c14fc:	dd41      	ble.n	c1582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   c14fe:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch (getRotation()) {
   c1500:	2c02      	cmp	r4, #2
   c1502:	d01f      	beq.n	c1544 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   c1504:	2c03      	cmp	r4, #3
   c1506:	d026      	beq.n	c1556 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   c1508:	2c01      	cmp	r4, #1
   c150a:	d104      	bne.n	c1516 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
    case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   c150c:	8904      	ldrh	r4, [r0, #8]
   c150e:	43d2      	mvns	r2, r2
   c1510:	4414      	add	r4, r2
      break;
   c1512:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   c1514:	b221      	sxth	r1, r4
    case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch (color) {
   c1516:	2b01      	cmp	r3, #1
   c1518:	d023      	beq.n	c1562 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   c151a:	2b02      	cmp	r3, #2
   c151c:	d032      	beq.n	c1584 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   c151e:	bb83      	cbnz	r3, c1582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    case SSD1306_WHITE:
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
      break;
    case SSD1306_BLACK:
      buffer[x + (y / 8) * WIDTH] &= ~(1 << (y & 7));
   c1520:	2a00      	cmp	r2, #0
   c1522:	4613      	mov	r3, r2
   c1524:	8904      	ldrh	r4, [r0, #8]
   c1526:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   c1528:	bfb8      	it	lt
   c152a:	1dd3      	addlt	r3, r2, #7
   c152c:	10db      	asrs	r3, r3, #3
   c152e:	fb13 1104 	smlabb	r1, r3, r4, r1
   c1532:	f002 0207 	and.w	r2, r2, #7
   c1536:	2301      	movs	r3, #1
   c1538:	4093      	lsls	r3, r2
   c153a:	5c42      	ldrb	r2, [r0, r1]
   c153c:	ea22 0203 	bic.w	r2, r2, r3
      break;
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   c1540:	5442      	strb	r2, [r0, r1]
      break;
    }
  }
}
   c1542:	e01e      	b.n	c1582 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH - x - 1;
   c1544:	8904      	ldrh	r4, [r0, #8]
   c1546:	3c01      	subs	r4, #1
   c1548:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   c154a:	8944      	ldrh	r4, [r0, #10]
   c154c:	43d2      	mvns	r2, r2
   c154e:	4422      	add	r2, r4
      x = WIDTH - x - 1;
   c1550:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   c1552:	b212      	sxth	r2, r2
      break;
   c1554:	e7df      	b.n	c1516 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   c1556:	8944      	ldrh	r4, [r0, #10]
   c1558:	3c01      	subs	r4, #1
   c155a:	1a64      	subs	r4, r4, r1
      break;
   c155c:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   c155e:	b222      	sxth	r2, r4
      break;
   c1560:	e7d9      	b.n	c1516 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      buffer[x + (y / 8) * WIDTH] |= (1 << (y & 7));
   c1562:	2a00      	cmp	r2, #0
   c1564:	8904      	ldrh	r4, [r0, #8]
   c1566:	4613      	mov	r3, r2
   c1568:	bfb8      	it	lt
   c156a:	1dd3      	addlt	r3, r2, #7
   c156c:	10db      	asrs	r3, r3, #3
   c156e:	fb13 1104 	smlabb	r1, r3, r4, r1
   c1572:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   c1574:	f002 0007 	and.w	r0, r2, #7
   c1578:	2201      	movs	r2, #1
   c157a:	4082      	lsls	r2, r0
   c157c:	5c58      	ldrb	r0, [r3, r1]
   c157e:	4302      	orrs	r2, r0
   c1580:	545a      	strb	r2, [r3, r1]
}
   c1582:	bd10      	pop	{r4, pc}
      buffer[x + (y / 8) * WIDTH] ^= (1 << (y & 7));
   c1584:	2a00      	cmp	r2, #0
   c1586:	4613      	mov	r3, r2
   c1588:	8904      	ldrh	r4, [r0, #8]
   c158a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   c158c:	bfb8      	it	lt
   c158e:	1dd3      	addlt	r3, r2, #7
   c1590:	10db      	asrs	r3, r3, #3
   c1592:	fb13 1104 	smlabb	r1, r3, r4, r1
   c1596:	f002 0207 	and.w	r2, r2, #7
   c159a:	2301      	movs	r3, #1
   c159c:	fa03 f202 	lsl.w	r2, r3, r2
   c15a0:	5c43      	ldrb	r3, [r0, r1]
   c15a2:	405a      	eors	r2, r3
   c15a4:	e7cc      	b.n	c1540 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000c15a8 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   c15a8:	b570      	push	{r4, r5, r6, lr}
   c15aa:	4604      	mov	r4, r0
   c15ac:	461d      	mov	r5, r3
      wireClk(clkDuring), restoreClk(clkAfter)
   c15ae:	2600      	movs	r6, #0
   c15b0:	f7fe fecc 	bl	c034c <_ZN12Adafruit_GFXC1Ess>
   c15b4:	4b11      	ldr	r3, [pc, #68]	; (c15fc <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   c15b6:	6023      	str	r3, [r4, #0]
   c15b8:	6266      	str	r6, [r4, #36]	; 0x24
    : Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   c15ba:	b915      	cbnz	r5, c15c2 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   c15bc:	f006 f89c 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c15c0:	4605      	mov	r5, r0
      wireClk(clkDuring), restoreClk(clkAfter)
   c15c2:	23ff      	movs	r3, #255	; 0xff
   c15c4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   c15c8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   c15cc:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   c15d0:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   c15d4:	9b05      	ldr	r3, [sp, #20]
   c15d6:	65a3      	str	r3, [r4, #88]	; 0x58
   c15d8:	9b06      	ldr	r3, [sp, #24]
   c15da:	65e3      	str	r3, [r4, #92]	; 0x5c
  {
   c15dc:	4b08      	ldr	r3, [pc, #32]	; (c1600 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   c15de:	6663      	str	r3, [r4, #100]	; 0x64
   c15e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   c15e4:	2301      	movs	r3, #1
   c15e6:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   c15ea:	86a2      	strh	r2, [r4, #52]	; 0x34
   c15ec:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   c15f0:	66e6      	str	r6, [r4, #108]	; 0x6c
   c15f2:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
}
   c15f6:	4620      	mov	r0, r4
   c15f8:	bd70      	pop	{r4, r5, r6, pc}
   c15fa:	bf00      	nop
   c15fc:	000ccb20 	.word	0x000ccb20
   c1600:	000cbe8c 	.word	0x000cbe8c

000c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   c1604:	b570      	push	{r4, r5, r6, lr}
   c1606:	4604      	mov	r4, r0
  if (wire) { // I2C
   c1608:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   c160a:	460d      	mov	r5, r1
  if (wire) { // I2C
   c160c:	b190      	cbz	r0, c1634 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   c160e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   c1612:	f004 fe7d 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   c1616:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1618:	6803      	ldr	r3, [r0, #0]
   c161a:	2100      	movs	r1, #0
   c161c:	689b      	ldr	r3, [r3, #8]
   c161e:	4798      	blx	r3
    WIRE_WRITE(c);
   c1620:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1622:	6803      	ldr	r3, [r0, #0]
   c1624:	4629      	mov	r1, r5
   c1626:	689b      	ldr	r3, [r3, #8]
   c1628:	4798      	blx	r3
    wire->endTransmission();
   c162a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   c162c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    wire->endTransmission();
   c1630:	f004 be8f 	b.w	c6352 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   c1634:	6c22      	ldr	r2, [r4, #64]	; 0x40
   c1636:	6d20      	ldr	r0, [r4, #80]	; 0x50
   c1638:	6813      	ldr	r3, [r2, #0]
   c163a:	ea23 0300 	bic.w	r3, r3, r0
   c163e:	6013      	str	r3, [r2, #0]
  if (spi) {
   c1640:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c1642:	b118      	cbz	r0, c164c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x48>
}
   c1644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)spi->transfer(d);
   c1648:	f005 bb9c 	b.w	c6d84 <_ZN8SPIClass8transferEh>
   c164c:	2208      	movs	r2, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c164e:	2180      	movs	r1, #128	; 0x80
        *mosiPort |= mosiPinMask;
   c1650:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c1652:	6ca6      	ldr	r6, [r4, #72]	; 0x48
   c1654:	6818      	ldr	r0, [r3, #0]
      if (d & bit)
   c1656:	420d      	tst	r5, r1
        *mosiPort |= mosiPinMask;
   c1658:	bf14      	ite	ne
   c165a:	4330      	orrne	r0, r6
        *mosiPort &= ~mosiPinMask;
   c165c:	43b0      	biceq	r0, r6
   c165e:	6018      	str	r0, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
   c1660:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   c1662:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   c1664:	6803      	ldr	r3, [r0, #0]
   c1666:	4333      	orrs	r3, r6
   c1668:	6003      	str	r3, [r0, #0]
      *clkPort &= ~clkPinMask; // Clock low
   c166a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   c166c:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
   c166e:	6803      	ldr	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1670:	3a01      	subs	r2, #1
      *clkPort &= ~clkPinMask; // Clock low
   c1672:	ea23 0306 	bic.w	r3, r3, r6
   c1676:	6003      	str	r3, [r0, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1678:	ea4f 0151 	mov.w	r1, r1, lsr #1
   c167c:	d1e8      	bne.n	c1650 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4c>
}
   c167e:	bd70      	pop	{r4, r5, r6, pc}

000c1680 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing SSD1306_BLACK (value 0) pixels will actually draw
   white, SSD1306_WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(bool i) {
   c1680:	b538      	push	{r3, r4, r5, lr}
   c1682:	4604      	mov	r4, r0
  TRANSACTION_START
   c1684:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(bool i) {
   c1686:	460d      	mov	r5, r1
  TRANSACTION_START
   c1688:	b180      	cbz	r0, c16ac <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
   c168a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   c168c:	f004 fe02 	bl	c6294 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   c1690:	2d00      	cmp	r5, #0
   c1692:	4620      	mov	r0, r4
   c1694:	bf14      	ite	ne
   c1696:	21a7      	movne	r1, #167	; 0xa7
   c1698:	21a6      	moveq	r1, #166	; 0xa6
   c169a:	f7ff ffb3 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   c169e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c16a0:	b188      	cbz	r0, c16c6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   c16a2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
   c16a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c16a8:	f004 bdf4 	b.w	c6294 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   c16ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c16ae:	b118      	cbz	r0, c16b8 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   c16b0:	f104 0164 	add.w	r1, r4, #100	; 0x64
   c16b4:	f005 faf8 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   c16b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c16ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c16bc:	6813      	ldr	r3, [r2, #0]
   c16be:	ea23 0301 	bic.w	r3, r3, r1
   c16c2:	6013      	str	r3, [r2, #0]
   c16c4:	e7e4      	b.n	c1690 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   c16c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c16c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c16ca:	6813      	ldr	r3, [r2, #0]
   c16cc:	430b      	orrs	r3, r1
   c16ce:	6013      	str	r3, [r2, #0]
   c16d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c16d2:	b118      	cbz	r0, c16dc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5c>
}
   c16d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   c16d8:	f005 bacc 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>
}
   c16dc:	bd38      	pop	{r3, r4, r5, pc}

000c16de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   c16de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c16e0:	4604      	mov	r4, r0
  if (wire) { // I2C
   c16e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   c16e4:	460d      	mov	r5, r1
  if (wire) { // I2C
   c16e6:	188f      	adds	r7, r1, r2
   c16e8:	b340      	cbz	r0, c173c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x5e>
    wire->beginTransmission(i2caddr);
   c16ea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   c16ee:	f004 fe0f 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   c16f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c16f4:	6803      	ldr	r3, [r0, #0]
   c16f6:	2100      	movs	r1, #0
   c16f8:	689b      	ldr	r3, [r3, #8]
   c16fa:	4798      	blx	r3
    uint16_t bytesOut = 1;
   c16fc:	2601      	movs	r6, #1
    while (n--) {
   c16fe:	42bd      	cmp	r5, r7
        wire->endTransmission();
   c1700:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (n--) {
   c1702:	d017      	beq.n	c1734 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x56>
      if (bytesOut >= WIRE_MAX) {
   c1704:	2e1f      	cmp	r6, #31
   c1706:	d90c      	bls.n	c1722 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x44>
        wire->endTransmission();
   c1708:	f004 fe23 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   c170c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   c1710:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1712:	f004 fdfd 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   c1716:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1718:	6803      	ldr	r3, [r0, #0]
   c171a:	2100      	movs	r1, #0
   c171c:	689b      	ldr	r3, [r3, #8]
   c171e:	4798      	blx	r3
        bytesOut = 1;
   c1720:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   c1722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1724:	f815 1b01 	ldrb.w	r1, [r5], #1
   c1728:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   c172a:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   c172c:	689b      	ldr	r3, [r3, #8]
   c172e:	4798      	blx	r3
      bytesOut++;
   c1730:	b2b6      	uxth	r6, r6
    while (n--) {
   c1732:	e7e4      	b.n	c16fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x20>
}
   c1734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   c1738:	f004 be0b 	b.w	c6352 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   c173c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   c173e:	6d21      	ldr	r1, [r4, #80]	; 0x50
   c1740:	6813      	ldr	r3, [r2, #0]
   c1742:	ea23 0301 	bic.w	r3, r3, r1
   c1746:	6013      	str	r3, [r2, #0]
    while (n--)
   c1748:	42bd      	cmp	r5, r7
   c174a:	d025      	beq.n	c1798 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xba>
  if (spi) {
   c174c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(pgm_read_byte(c++));
   c174e:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
   c1752:	b110      	cbz	r0, c175a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x7c>
    (void)spi->transfer(d);
   c1754:	f005 fb16 	bl	c6d84 <_ZN8SPIClass8transferEh>
   c1758:	e7f6      	b.n	c1748 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
   c175a:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c175e:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
   c1760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c1762:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
   c1766:	681e      	ldr	r6, [r3, #0]
      if (d & bit)
   c1768:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
   c176a:	bf14      	ite	ne
   c176c:	ea46 060c 	orrne.w	r6, r6, ip
        *mosiPort &= ~mosiPinMask;
   c1770:	ea26 060c 	biceq.w	r6, r6, ip
   c1774:	601e      	str	r6, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
   c1776:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   c1778:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   c177a:	6833      	ldr	r3, [r6, #0]
   c177c:	4313      	orrs	r3, r2
   c177e:	6033      	str	r3, [r6, #0]
      *clkPort &= ~clkPinMask; // Clock low
   c1780:	6be6      	ldr	r6, [r4, #60]	; 0x3c
   c1782:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   c1784:	6833      	ldr	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1786:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort &= ~clkPinMask; // Clock low
   c178a:	ea23 0302 	bic.w	r3, r3, r2
   c178e:	6033      	str	r3, [r6, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1790:	ea4f 0050 	mov.w	r0, r0, lsr #1
   c1794:	d1e4      	bne.n	c1760 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x82>
   c1796:	e7d7      	b.n	c1748 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6a>
}
   c1798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c179a <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   c179a:	b538      	push	{r3, r4, r5, lr}
   c179c:	4604      	mov	r4, r0
  TRANSACTION_START
   c179e:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command(uint8_t c) {
   c17a0:	460d      	mov	r5, r1
  TRANSACTION_START
   c17a2:	b168      	cbz	r0, c17c0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x26>
   c17a4:	6da1      	ldr	r1, [r4, #88]	; 0x58
   c17a6:	f004 fd75 	bl	c6294 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(c);
   c17aa:	4620      	mov	r0, r4
   c17ac:	4629      	mov	r1, r5
   c17ae:	f7ff ff29 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   c17b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c17b4:	b188      	cbz	r0, c17da <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x40>
   c17b6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
   c17b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c17bc:	f004 bd6a 	b.w	c6294 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   c17c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c17c2:	b118      	cbz	r0, c17cc <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x32>
   c17c4:	f104 0164 	add.w	r1, r4, #100	; 0x64
   c17c8:	f005 fa6e 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   c17cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c17ce:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c17d0:	6813      	ldr	r3, [r2, #0]
   c17d2:	ea23 0301 	bic.w	r3, r3, r1
   c17d6:	6013      	str	r3, [r2, #0]
   c17d8:	e7e7      	b.n	c17aa <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x10>
  TRANSACTION_END
   c17da:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c17dc:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c17de:	6813      	ldr	r3, [r2, #0]
   c17e0:	430b      	orrs	r3, r1
   c17e2:	6013      	str	r3, [r2, #0]
   c17e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c17e6:	b118      	cbz	r0, c17f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x56>
}
   c17e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   c17ec:	f005 ba42 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>
}
   c17f0:	bd38      	pop	{r3, r4, r5, pc}

000c17f2 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   c17f2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c17f6:	1dda      	adds	r2, r3, #7
   c17f8:	bf48      	it	mi
   c17fa:	f103 020e 	addmi.w	r2, r3, #14
   c17fe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   c1802:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   c1804:	10d2      	asrs	r2, r2, #3
   c1806:	435a      	muls	r2, r3
   c1808:	2100      	movs	r1, #0
   c180a:	f008 bcdb 	b.w	ca1c4 <memset>
	...

000c1810 <_ZN16Adafruit_SSD13065beginEhhbb>:
                             bool periphBegin) {
   c1810:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   c1814:	461e      	mov	r6, r3
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   c1816:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
                             bool periphBegin) {
   c1818:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   c181c:	4604      	mov	r4, r0
   c181e:	460f      	mov	r7, r1
   c1820:	4615      	mov	r5, r2
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   c1822:	b1c3      	cbz	r3, c1856 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   c1824:	4620      	mov	r0, r4
   c1826:	f7ff ffe4 	bl	c17f2 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (HEIGHT > 32) {
   c182a:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   c182e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   c1832:	2820      	cmp	r0, #32
   c1834:	dc21      	bgt.n	c187a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   c1836:	2320      	movs	r3, #32
   c1838:	2201      	movs	r2, #1
   c183a:	3820      	subs	r0, #32
   c183c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   c1840:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   c1844:	2373      	movs	r3, #115	; 0x73
   c1846:	3973      	subs	r1, #115	; 0x73
   c1848:	9300      	str	r3, [sp, #0]
   c184a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   c184e:	4bba      	ldr	r3, [pc, #744]	; (c1b38 <_ZN16Adafruit_SSD13065beginEhhbb+0x328>)
   c1850:	f340 024f 	sbfx	r2, r0, #1, #16
   c1854:	e021      	b.n	c189a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if ((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   c1856:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   c185a:	1dd8      	adds	r0, r3, #7
   c185c:	bf48      	it	mi
   c185e:	f103 000e 	addmi.w	r0, r3, #14
   c1862:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   c1866:	10c0      	asrs	r0, r0, #3
   c1868:	4358      	muls	r0, r3
   c186a:	f003 ff01 	bl	c5670 <malloc>
   c186e:	62e0      	str	r0, [r4, #44]	; 0x2c
   c1870:	2800      	cmp	r0, #0
   c1872:	d1d7      	bne.n	c1824 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   c1874:	b004      	add	sp, #16
   c1876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   c187a:	3840      	subs	r0, #64	; 0x40
   c187c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   c1880:	fa02 f280 	sxtah	r2, r2, r0
   c1884:	2340      	movs	r3, #64	; 0x40
   c1886:	2001      	movs	r0, #1
   c1888:	e9cd 3001 	strd	r3, r0, [sp, #4]
   c188c:	2352      	movs	r3, #82	; 0x52
   c188e:	3952      	subs	r1, #82	; 0x52
   c1890:	9300      	str	r3, [sp, #0]
   c1892:	4baa      	ldr	r3, [pc, #680]	; (c1b3c <_ZN16Adafruit_SSD13065beginEhhbb+0x32c>)
   c1894:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   c1898:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   c189a:	4620      	mov	r0, r4
   c189c:	f341 014f 	sbfx	r1, r1, #1, #16
   c18a0:	f7fe fd6a 	bl	c0378 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if (wire) { // Using I2C
   c18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   c18a6:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if (wire) { // Using I2C
   c18aa:	2800      	cmp	r0, #0
   c18ac:	f000 809a 	beq.w	c19e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d4>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   c18b0:	2d00      	cmp	r5, #0
   c18b2:	f040 8095 	bne.w	c19e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1d0>
   c18b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   c18ba:	2b20      	cmp	r3, #32
   c18bc:	bf0c      	ite	eq
   c18be:	253c      	moveq	r5, #60	; 0x3c
   c18c0:	253d      	movne	r5, #61	; 0x3d
   c18c2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if (periphBegin)
   c18c6:	f1b8 0f00 	cmp.w	r8, #0
   c18ca:	d001      	beq.n	c18d0 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      wire->begin();
   c18cc:	f004 fce6 	bl	c629c <_ZN7TwoWire5beginEv>
  if (reset && (rstPin >= 0)) {
   c18d0:	b1fe      	cbz	r6, c1912 <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
   c18d2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   c18d6:	2800      	cmp	r0, #0
   c18d8:	db1b      	blt.n	c1912 <_ZN16Adafruit_SSD13065beginEhhbb+0x102>
    pinMode(rstPin, OUTPUT);
   c18da:	2101      	movs	r1, #1
   c18dc:	b280      	uxth	r0, r0
   c18de:	f005 fe6b 	bl	c75b8 <pinMode>
    digitalWrite(rstPin, HIGH);
   c18e2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   c18e6:	2101      	movs	r1, #1
   c18e8:	b280      	uxth	r0, r0
   c18ea:	f005 fe76 	bl	c75da <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   c18ee:	2001      	movs	r0, #1
   c18f0:	f003 ff1e 	bl	c5730 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   c18f4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   c18f8:	2100      	movs	r1, #0
   c18fa:	b280      	uxth	r0, r0
   c18fc:	f005 fe6d 	bl	c75da <digitalWrite>
    delay(10);                  // Wait 10 ms
   c1900:	200a      	movs	r0, #10
   c1902:	f003 ff15 	bl	c5730 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   c1906:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   c190a:	2101      	movs	r1, #1
   c190c:	b280      	uxth	r0, r0
   c190e:	f005 fe64 	bl	c75da <digitalWrite>
  TRANSACTION_START
   c1912:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1914:	2800      	cmp	r0, #0
   c1916:	f000 80e8 	beq.w	c1aea <_ZN16Adafruit_SSD13065beginEhhbb+0x2da>
   c191a:	6da1      	ldr	r1, [r4, #88]	; 0x58
   c191c:	f004 fcba 	bl	c6294 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   c1920:	2204      	movs	r2, #4
   c1922:	4987      	ldr	r1, [pc, #540]	; (c1b40 <_ZN16Adafruit_SSD13065beginEhhbb+0x330>)
   c1924:	4620      	mov	r0, r4
   c1926:	f7ff feda 	bl	c16de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   c192a:	8961      	ldrh	r1, [r4, #10]
   c192c:	3901      	subs	r1, #1
   c192e:	b2c9      	uxtb	r1, r1
   c1930:	4620      	mov	r0, r4
   c1932:	f7ff fe67 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   c1936:	4983      	ldr	r1, [pc, #524]	; (c1b44 <_ZN16Adafruit_SSD13065beginEhhbb+0x334>)
   c1938:	2204      	movs	r2, #4
   c193a:	4620      	mov	r0, r4
   c193c:	f7ff fecf 	bl	c16de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   c1940:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   c1944:	2b01      	cmp	r3, #1
   c1946:	bf0c      	ite	eq
   c1948:	2110      	moveq	r1, #16
   c194a:	2114      	movne	r1, #20
   c194c:	4620      	mov	r0, r4
   c194e:	f7ff fe59 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   c1952:	2204      	movs	r2, #4
   c1954:	497c      	ldr	r1, [pc, #496]	; (c1b48 <_ZN16Adafruit_SSD13065beginEhhbb+0x338>)
   c1956:	4620      	mov	r0, r4
   c1958:	f7ff fec1 	bl	c16de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  contrast = 0x8F;
   c195c:	238f      	movs	r3, #143	; 0x8f
  if ((WIDTH == 128) && (HEIGHT == 32)) {
   c195e:	4a7b      	ldr	r2, [pc, #492]	; (c1b4c <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>)
  contrast = 0x8F;
   c1960:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  if ((WIDTH == 128) && (HEIGHT == 32)) {
   c1964:	68a3      	ldr	r3, [r4, #8]
   c1966:	4293      	cmp	r3, r2
   c1968:	f000 80d7 	beq.w	c1b1a <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
  } else if ((WIDTH == 128) && (HEIGHT == 64)) {
   c196c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
   c1970:	4293      	cmp	r3, r2
   c1972:	f040 80c7 	bne.w	c1b04 <_ZN16Adafruit_SSD13065beginEhhbb+0x2f4>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF;
   c1976:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   c197a:	2b01      	cmp	r3, #1
   c197c:	bf0c      	ite	eq
   c197e:	239f      	moveq	r3, #159	; 0x9f
   c1980:	23cf      	movne	r3, #207	; 0xcf
   c1982:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x12;
   c1986:	2512      	movs	r5, #18
  ssd1306_command1(SSD1306_SETCOMPINS);
   c1988:	21da      	movs	r1, #218	; 0xda
   c198a:	4620      	mov	r0, r4
   c198c:	f7ff fe3a 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(comPins);
   c1990:	4629      	mov	r1, r5
   c1992:	4620      	mov	r0, r4
   c1994:	f7ff fe36 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETCONTRAST);
   c1998:	2181      	movs	r1, #129	; 0x81
   c199a:	4620      	mov	r0, r4
   c199c:	f7ff fe32 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(contrast);
   c19a0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   c19a4:	4620      	mov	r0, r4
   c19a6:	f7ff fe2d 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   c19aa:	21d9      	movs	r1, #217	; 0xd9
   c19ac:	4620      	mov	r0, r4
   c19ae:	f7ff fe29 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   c19b2:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   c19b6:	2b01      	cmp	r3, #1
   c19b8:	bf0c      	ite	eq
   c19ba:	2122      	moveq	r1, #34	; 0x22
   c19bc:	21f1      	movne	r1, #241	; 0xf1
   c19be:	4620      	mov	r0, r4
   c19c0:	f7ff fe20 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   c19c4:	4620      	mov	r0, r4
   c19c6:	4962      	ldr	r1, [pc, #392]	; (c1b50 <_ZN16Adafruit_SSD13065beginEhhbb+0x340>)
   c19c8:	2206      	movs	r2, #6
   c19ca:	f7ff fe88 	bl	c16de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   c19ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c19d0:	2800      	cmp	r0, #0
   c19d2:	f000 80a4 	beq.w	c1b1e <_ZN16Adafruit_SSD13065beginEhhbb+0x30e>
   c19d6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   c19d8:	f004 fc5c 	bl	c6294 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   c19dc:	2001      	movs	r0, #1
   c19de:	e749      	b.n	c1874 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   c19e0:	b26d      	sxtb	r5, r5
   c19e2:	e76e      	b.n	c18c2 <_ZN16Adafruit_SSD13065beginEhhbb+0xb2>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   c19e4:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
   c19e8:	4d5a      	ldr	r5, [pc, #360]	; (c1b54 <_ZN16Adafruit_SSD13065beginEhhbb+0x344>)
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   c19ea:	2101      	movs	r1, #1
   c19ec:	b280      	uxth	r0, r0
   c19ee:	f005 fde3 	bl	c75b8 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   c19f2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   c19f6:	2101      	movs	r1, #1
   c19f8:	b280      	uxth	r0, r0
   c19fa:	f005 fddd 	bl	c75b8 <pinMode>
    dcPort = (PortReg *)portOutputRegister(digitalPinToPort(dcPin));
   c19fe:	f003 fb4f 	bl	c50a0 <hal_pin_map>
   c1a02:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   c1a06:	011b      	lsls	r3, r3, #4
   c1a08:	5cc3      	ldrb	r3, [r0, r3]
   c1a0a:	2b00      	cmp	r3, #0
   c1a0c:	bf14      	ite	ne
   c1a0e:	462b      	movne	r3, r5
   c1a10:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   c1a14:	f203 5304 	addw	r3, r3, #1284	; 0x504
   c1a18:	6423      	str	r3, [r4, #64]	; 0x40
    dcPinMask = digitalPinToBitMask(dcPin);
   c1a1a:	f003 fb41 	bl	c50a0 <hal_pin_map>
   c1a1e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   c1a22:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   c1a26:	7843      	ldrb	r3, [r0, #1]
   c1a28:	6523      	str	r3, [r4, #80]	; 0x50
    csPort = (PortReg *)portOutputRegister(digitalPinToPort(csPin));
   c1a2a:	f003 fb39 	bl	c50a0 <hal_pin_map>
   c1a2e:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   c1a32:	011b      	lsls	r3, r3, #4
   c1a34:	5cc3      	ldrb	r3, [r0, r3]
   c1a36:	2b00      	cmp	r3, #0
   c1a38:	bf14      	ite	ne
   c1a3a:	462b      	movne	r3, r5
   c1a3c:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   c1a40:	f203 5304 	addw	r3, r3, #1284	; 0x504
   c1a44:	6463      	str	r3, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
   c1a46:	f003 fb2b 	bl	c50a0 <hal_pin_map>
   c1a4a:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
    SSD1306_DESELECT
   c1a4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    csPinMask = digitalPinToBitMask(csPin);
   c1a50:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   c1a54:	7843      	ldrb	r3, [r0, #1]
   c1a56:	6563      	str	r3, [r4, #84]	; 0x54
    SSD1306_DESELECT
   c1a58:	6811      	ldr	r1, [r2, #0]
   c1a5a:	430b      	orrs	r3, r1
   c1a5c:	6013      	str	r3, [r2, #0]
    if (spi) { // Hardware SPI
   c1a5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c1a60:	b130      	cbz	r0, c1a70 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>
      if (periphBegin)
   c1a62:	f1b8 0f00 	cmp.w	r8, #0
   c1a66:	f43f af33 	beq.w	c18d0 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
        spi->begin();
   c1a6a:	f005 f8c9 	bl	c6c00 <_ZN8SPIClass5beginEv>
   c1a6e:	e72f      	b.n	c18d0 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   c1a70:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   c1a74:	2101      	movs	r1, #1
   c1a76:	b280      	uxth	r0, r0
   c1a78:	f005 fd9e 	bl	c75b8 <pinMode>
      pinMode(clkPin, OUTPUT);
   c1a7c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   c1a80:	2101      	movs	r1, #1
   c1a82:	b280      	uxth	r0, r0
   c1a84:	f005 fd98 	bl	c75b8 <pinMode>
      mosiPort = (PortReg *)portOutputRegister(digitalPinToPort(mosiPin));
   c1a88:	f003 fb0a 	bl	c50a0 <hal_pin_map>
   c1a8c:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
   c1a90:	011b      	lsls	r3, r3, #4
   c1a92:	5cc3      	ldrb	r3, [r0, r3]
   c1a94:	2b00      	cmp	r3, #0
   c1a96:	bf14      	ite	ne
   c1a98:	462b      	movne	r3, r5
   c1a9a:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
   c1a9e:	f203 5304 	addw	r3, r3, #1284	; 0x504
   c1aa2:	63a3      	str	r3, [r4, #56]	; 0x38
      mosiPinMask = digitalPinToBitMask(mosiPin);
   c1aa4:	f003 fafc 	bl	c50a0 <hal_pin_map>
   c1aa8:	f994 3033 	ldrsb.w	r3, [r4, #51]	; 0x33
   c1aac:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   c1ab0:	7843      	ldrb	r3, [r0, #1]
   c1ab2:	64a3      	str	r3, [r4, #72]	; 0x48
      clkPort = (PortReg *)portOutputRegister(digitalPinToPort(clkPin));
   c1ab4:	f003 faf4 	bl	c50a0 <hal_pin_map>
   c1ab8:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
   c1abc:	011b      	lsls	r3, r3, #4
   c1abe:	5cc3      	ldrb	r3, [r0, r3]
   c1ac0:	2b00      	cmp	r3, #0
   c1ac2:	bf08      	it	eq
   c1ac4:	f04f 45a0 	moveq.w	r5, #1342177280	; 0x50000000
   c1ac8:	f205 5504 	addw	r5, r5, #1284	; 0x504
   c1acc:	63e5      	str	r5, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
   c1ace:	f003 fae7 	bl	c50a0 <hal_pin_map>
   c1ad2:	f994 3034 	ldrsb.w	r3, [r4, #52]	; 0x34
      *clkPort &= ~clkPinMask; // Clock low
   c1ad6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      clkPinMask = digitalPinToBitMask(clkPin);
   c1ad8:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   c1adc:	7841      	ldrb	r1, [r0, #1]
   c1ade:	64e1      	str	r1, [r4, #76]	; 0x4c
      *clkPort &= ~clkPinMask; // Clock low
   c1ae0:	6813      	ldr	r3, [r2, #0]
   c1ae2:	ea23 0301 	bic.w	r3, r3, r1
   c1ae6:	6013      	str	r3, [r2, #0]
   c1ae8:	e6f2      	b.n	c18d0 <_ZN16Adafruit_SSD13065beginEhhbb+0xc0>
  TRANSACTION_START
   c1aea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c1aec:	b118      	cbz	r0, c1af6 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
   c1aee:	f104 0164 	add.w	r1, r4, #100	; 0x64
   c1af2:	f005 f8d9 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   c1af6:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c1af8:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c1afa:	6813      	ldr	r3, [r2, #0]
   c1afc:	ea23 0301 	bic.w	r3, r3, r1
   c1b00:	6013      	str	r3, [r2, #0]
   c1b02:	e70d      	b.n	c1920 <_ZN16Adafruit_SSD13065beginEhhbb+0x110>
  } else if ((WIDTH == 96) && (HEIGHT == 16)) {
   c1b04:	4a14      	ldr	r2, [pc, #80]	; (c1b58 <_ZN16Adafruit_SSD13065beginEhhbb+0x348>)
   c1b06:	4293      	cmp	r3, r2
   c1b08:	d107      	bne.n	c1b1a <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    contrast = (vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF;
   c1b0a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   c1b0e:	2b01      	cmp	r3, #1
   c1b10:	bf0c      	ite	eq
   c1b12:	2310      	moveq	r3, #16
   c1b14:	23af      	movne	r3, #175	; 0xaf
   c1b16:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    comPins = 0x02;
   c1b1a:	2502      	movs	r5, #2
   c1b1c:	e734      	b.n	c1988 <_ZN16Adafruit_SSD13065beginEhhbb+0x178>
  TRANSACTION_END
   c1b1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c1b20:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c1b22:	6813      	ldr	r3, [r2, #0]
   c1b24:	430b      	orrs	r3, r1
   c1b26:	6013      	str	r3, [r2, #0]
   c1b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c1b2a:	2800      	cmp	r0, #0
   c1b2c:	f43f af56 	beq.w	c19dc <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
   c1b30:	f005 f8a0 	bl	c6c74 <_ZN8SPIClass14endTransactionEv>
   c1b34:	e752      	b.n	c19dc <_ZN16Adafruit_SSD13065beginEhhbb+0x1cc>
   c1b36:	bf00      	nop
   c1b38:	000cc938 	.word	0x000cc938
   c1b3c:	000cc678 	.word	0x000cc678
   c1b40:	000ccb80 	.word	0x000ccb80
   c1b44:	000ccb84 	.word	0x000ccb84
   c1b48:	000ccb88 	.word	0x000ccb88
   c1b4c:	00200080 	.word	0x00200080
   c1b50:	000ccb8c 	.word	0x000ccb8c
   c1b54:	50000300 	.word	0x50000300
   c1b58:	00100060 	.word	0x00100060

000c1b5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
                                             uint16_t color) {
   c1b5c:	b570      	push	{r4, r5, r6, lr}
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   c1b5e:	2a00      	cmp	r2, #0
                                             uint16_t color) {
   c1b60:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if ((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   c1b64:	db3d      	blt.n	c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   c1b66:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   c1b6a:	4294      	cmp	r4, r2
   c1b6c:	dd39      	ble.n	c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if (x < 0) {                  // Clip left
   c1b6e:	2900      	cmp	r1, #0
      w += x;
   c1b70:	bfbe      	ittt	lt
   c1b72:	185b      	addlt	r3, r3, r1
   c1b74:	b21b      	sxthlt	r3, r3
      x = 0;
   c1b76:	2100      	movlt	r1, #0
    if ((x + w) > WIDTH) { // Clip right
   c1b78:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   c1b7c:	18ce      	adds	r6, r1, r3
   c1b7e:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   c1b80:	bfc4      	itt	gt
   c1b82:	1a63      	subgt	r3, r4, r1
   c1b84:	b21b      	sxthgt	r3, r3
    if (w > 0) { // Proceed only if width is positive
   c1b86:	2b00      	cmp	r3, #0
   c1b88:	dd2b      	ble.n	c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
   c1b8a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   c1b8c:	10d6      	asrs	r6, r2, #3
   c1b8e:	fb14 1106 	smlabb	r1, r4, r6, r1
   c1b92:	4401      	add	r1, r0
   c1b94:	f002 0007 	and.w	r0, r2, #7
   c1b98:	2201      	movs	r2, #1
   c1b9a:	4082      	lsls	r2, r0
      switch (color) {
   c1b9c:	2d01      	cmp	r5, #1
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x], mask = 1 << (y & 7);
   c1b9e:	b2d2      	uxtb	r2, r2
      switch (color) {
   c1ba0:	d016      	beq.n	c1bd0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   c1ba2:	2d02      	cmp	r5, #2
   c1ba4:	d00b      	beq.n	c1bbe <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   c1ba6:	b9e5      	cbnz	r5, c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
        mask = ~mask;
   c1ba8:	43d2      	mvns	r2, r2
   c1baa:	b2d2      	uxtb	r2, r2
   c1bac:	440b      	add	r3, r1
        while (w--) {
   c1bae:	4299      	cmp	r1, r3
   c1bb0:	d017      	beq.n	c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ &= mask;
   c1bb2:	f811 0b01 	ldrb.w	r0, [r1], #1
   c1bb6:	4010      	ands	r0, r2
   c1bb8:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
   c1bbc:	e7f7      	b.n	c1bae <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   c1bbe:	440b      	add	r3, r1
        while (w--) {
   c1bc0:	4299      	cmp	r1, r3
   c1bc2:	d00e      	beq.n	c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ ^= mask;
   c1bc4:	f811 0b01 	ldrb.w	r0, [r1], #1
   c1bc8:	4050      	eors	r0, r2
   c1bca:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
   c1bce:	e7f7      	b.n	c1bc0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   c1bd0:	440b      	add	r3, r1
        while (w--) {
   c1bd2:	4299      	cmp	r1, r3
   c1bd4:	d005      	beq.n	c1be2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
          *pBuf++ |= mask;
   c1bd6:	f811 0b01 	ldrb.w	r0, [r1], #1
   c1bda:	4310      	orrs	r0, r2
   c1bdc:	f801 0c01 	strb.w	r0, [r1, #-1]
        while (w--) {
   c1be0:	e7f7      	b.n	c1bd2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   c1be2:	bd70      	pop	{r4, r5, r6, pc}

000c1be4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
                                             int16_t __h, uint16_t color) {
   c1be4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   c1be6:	2900      	cmp	r1, #0
                                             int16_t __h, uint16_t color) {
   c1be8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if ((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   c1bec:	db76      	blt.n	c1cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   c1bee:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   c1bf2:	42b1      	cmp	r1, r6
   c1bf4:	da72      	bge.n	c1cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if (__y < 0) {               // Clip top
   c1bf6:	2a00      	cmp	r2, #0
      __h += __y;
   c1bf8:	bfbe      	ittt	lt
   c1bfa:	189b      	addlt	r3, r3, r2
   c1bfc:	b21b      	sxthlt	r3, r3
      __y = 0;
   c1bfe:	2200      	movlt	r2, #0
    if ((__y + __h) > HEIGHT) { // Clip bottom
   c1c00:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   c1c04:	18d7      	adds	r7, r2, r3
   c1c06:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   c1c08:	bfc4      	itt	gt
   c1c0a:	1aa3      	subgt	r3, r4, r2
   c1c0c:	b21b      	sxthgt	r3, r3
    if (__h > 0) { // Proceed only if height is now positive
   c1c0e:	2b00      	cmp	r3, #0
   c1c10:	dd64      	ble.n	c1cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   c1c12:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   c1c16:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   c1c18:	fb16 1604 	smlabb	r6, r6, r4, r1
      if (mod) {
   c1c1c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t y = __y, h = __h;
   c1c20:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   c1c22:	eb07 0406 	add.w	r4, r7, r6
      if (mod) {
   c1c26:	d023      	beq.n	c1c70 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   c1c28:	f1c2 0208 	rsb	r2, r2, #8
   c1c2c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   c1c2e:	492d      	ldr	r1, [pc, #180]	; (c1ce4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if (h < mod)
   c1c30:	4293      	cmp	r3, r2
          mask &= (0XFF >> (mod - h));
   c1c32:	bf3c      	itt	cc
   c1c34:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   c1c38:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   c1c3c:	5c89      	ldrb	r1, [r1, r2]
          mask &= (0XFF >> (mod - h));
   c1c3e:	bf3c      	itt	cc
   c1c40:	fa4c fc0e 	asrcc.w	ip, ip, lr
   c1c44:	ea0c 0101 	andcc.w	r1, ip, r1
        switch (color) {
   c1c48:	2d01      	cmp	r5, #1
   c1c4a:	d007      	beq.n	c1c5c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   c1c4c:	2d02      	cmp	r5, #2
   c1c4e:	d02e      	beq.n	c1cae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   c1c50:	b94d      	cbnz	r5, c1c66 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
          *pBuf &= ~mask;
   c1c52:	f817 c006 	ldrb.w	ip, [r7, r6]
   c1c56:	ea2c 0101 	bic.w	r1, ip, r1
   c1c5a:	e003      	b.n	c1c64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
          *pBuf |= mask;
   c1c5c:	f817 c006 	ldrb.w	ip, [r7, r6]
   c1c60:	ea41 010c 	orr.w	r1, r1, ip
          *pBuf ^= mask;
   c1c64:	55b9      	strb	r1, [r7, r6]
      if (h >= mod) { // More to go?
   c1c66:	4293      	cmp	r3, r2
   c1c68:	d338      	bcc.n	c1cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   c1c6a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   c1c6e:	440c      	add	r4, r1
        h -= mod;
   c1c70:	1a9a      	subs	r2, r3, r2
   c1c72:	b2d2      	uxtb	r2, r2
        if (h >= 8) {
   c1c74:	2a07      	cmp	r2, #7
   c1c76:	d90e      	bls.n	c1c96 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if (color == SSD1306_INVERSE) {
   c1c78:	2d02      	cmp	r5, #2
   c1c7a:	d11d      	bne.n	c1cb8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   c1c7c:	4613      	mov	r3, r2
              *pBuf ^= 0xFF; // Invert byte
   c1c7e:	7821      	ldrb	r1, [r4, #0]
   c1c80:	43c9      	mvns	r1, r1
   c1c82:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   c1c84:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   c1c86:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   c1c8a:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   c1c8c:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   c1c8e:	440c      	add	r4, r1
            } while (h >= 8);
   c1c90:	d8f5      	bhi.n	c1c7e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h -= 8;        // Subtract 8 rows from height
   c1c92:	f002 0207 	and.w	r2, r2, #7
        if (h) { // Do the final partial byte, if necessary
   c1c96:	b30a      	cbz	r2, c1cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   c1c98:	4b13      	ldr	r3, [pc, #76]	; (c1ce8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch (color) {
   c1c9a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   c1c9c:	5c9b      	ldrb	r3, [r3, r2]
          switch (color) {
   c1c9e:	d01a      	beq.n	c1cd6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   c1ca0:	2d02      	cmp	r5, #2
   c1ca2:	d01c      	beq.n	c1cde <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   c1ca4:	b9d5      	cbnz	r5, c1cdc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
            *pBuf &= ~mask;
   c1ca6:	7822      	ldrb	r2, [r4, #0]
   c1ca8:	ea22 0303 	bic.w	r3, r2, r3
   c1cac:	e015      	b.n	c1cda <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
          *pBuf ^= mask;
   c1cae:	f817 c006 	ldrb.w	ip, [r7, r6]
   c1cb2:	ea81 010c 	eor.w	r1, r1, ip
   c1cb6:	e7d5      	b.n	c1c64 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != SSD1306_BLACK) ? 255 : 0;
   c1cb8:	1e29      	subs	r1, r5, #0
   c1cba:	bf18      	it	ne
   c1cbc:	2101      	movne	r1, #1
   c1cbe:	4249      	negs	r1, r1
   c1cc0:	b2c9      	uxtb	r1, r1
   c1cc2:	4613      	mov	r3, r2
              *pBuf = val;   // Set byte
   c1cc4:	7021      	strb	r1, [r4, #0]
              h -= 8;        // Subtract 8 rows from height
   c1cc6:	3b08      	subs	r3, #8
              pBuf += WIDTH; // Advance pointer 8 rows
   c1cc8:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h -= 8;        // Subtract 8 rows from height
   c1ccc:	b2db      	uxtb	r3, r3
            } while (h >= 8);
   c1cce:	2b07      	cmp	r3, #7
              pBuf += WIDTH; // Advance pointer 8 rows
   c1cd0:	4434      	add	r4, r6
            } while (h >= 8);
   c1cd2:	d8f7      	bhi.n	c1cc4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   c1cd4:	e7dd      	b.n	c1c92 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
            *pBuf |= mask;
   c1cd6:	7822      	ldrb	r2, [r4, #0]
   c1cd8:	4313      	orrs	r3, r2
            *pBuf ^= mask;
   c1cda:	7023      	strb	r3, [r4, #0]
}
   c1cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *pBuf ^= mask;
   c1cde:	7822      	ldrb	r2, [r4, #0]
   c1ce0:	4053      	eors	r3, r2
   c1ce2:	e7fa      	b.n	c1cda <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   c1ce4:	000ccb70 	.word	0x000ccb70
   c1ce8:	000ccb78 	.word	0x000ccb78

000c1cec <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
                                     uint16_t color) {
   c1cec:	b470      	push	{r4, r5, r6}
   c1cee:	4614      	mov	r4, r2
  switch (rotation) {
   c1cf0:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
   c1cf2:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch (rotation) {
   c1cf6:	2a02      	cmp	r2, #2
   c1cf8:	d00d      	beq.n	c1d16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   c1cfa:	2a03      	cmp	r2, #3
   c1cfc:	d018      	beq.n	c1d30 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   c1cfe:	2a01      	cmp	r2, #1
   c1d00:	d111      	bne.n	c1d26 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   c1d02:	8902      	ldrh	r2, [r0, #8]
   c1d04:	43e4      	mvns	r4, r4
   c1d06:	4414      	add	r4, r2
   c1d08:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, w, color);
   c1d0a:	9603      	str	r6, [sp, #12]
   c1d0c:	460a      	mov	r2, r1
   c1d0e:	4621      	mov	r1, r4
}
   c1d10:	bc70      	pop	{r4, r5, r6}
    drawFastVLineInternal(x, y, w, color);
   c1d12:	f7ff bf67 	b.w	c1be4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   c1d16:	8942      	ldrh	r2, [r0, #10]
    x -= (w - 1);
   c1d18:	8905      	ldrh	r5, [r0, #8]
    y = HEIGHT - y - 1;
   c1d1a:	43e4      	mvns	r4, r4
    x -= (w - 1);
   c1d1c:	4419      	add	r1, r3
    y = HEIGHT - y - 1;
   c1d1e:	4414      	add	r4, r2
    x -= (w - 1);
   c1d20:	1a69      	subs	r1, r5, r1
    y = HEIGHT - y - 1;
   c1d22:	b224      	sxth	r4, r4
    x -= (w - 1);
   c1d24:	b209      	sxth	r1, r1
    drawFastHLineInternal(x, y, w, color);
   c1d26:	9603      	str	r6, [sp, #12]
   c1d28:	4622      	mov	r2, r4
}
   c1d2a:	bc70      	pop	{r4, r5, r6}
    drawFastHLineInternal(x, y, w, color);
   c1d2c:	f7ff bf16 	b.w	c1b5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w - 1);
   c1d30:	8945      	ldrh	r5, [r0, #10]
   c1d32:	4419      	add	r1, r3
   c1d34:	1a69      	subs	r1, r5, r1
   c1d36:	b209      	sxth	r1, r1
    break;
   c1d38:	e7e7      	b.n	c1d0a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000c1d3a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
                                     uint16_t color) {
   c1d3a:	b430      	push	{r4, r5}
   c1d3c:	4614      	mov	r4, r2
  switch (rotation) {
   c1d3e:	7e82      	ldrb	r2, [r0, #26]
                                     uint16_t color) {
   c1d40:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch (rotation) {
   c1d44:	2a02      	cmp	r2, #2
   c1d46:	d00d      	beq.n	c1d64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   c1d48:	2a03      	cmp	r2, #3
   c1d4a:	d018      	beq.n	c1d7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   c1d4c:	2a01      	cmp	r2, #1
   c1d4e:	d111      	bne.n	c1d74 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h - 1);
   c1d50:	18e2      	adds	r2, r4, r3
   c1d52:	8904      	ldrh	r4, [r0, #8]
   c1d54:	1aa4      	subs	r4, r4, r2
   c1d56:	b224      	sxth	r4, r4
    drawFastHLineInternal(x, y, h, color);
   c1d58:	9502      	str	r5, [sp, #8]
   c1d5a:	460a      	mov	r2, r1
   c1d5c:	4621      	mov	r1, r4
}
   c1d5e:	bc30      	pop	{r4, r5}
    drawFastHLineInternal(x, y, h, color);
   c1d60:	f7ff befc 	b.w	c1b5c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH - x - 1;
   c1d64:	8902      	ldrh	r2, [r0, #8]
   c1d66:	43c9      	mvns	r1, r1
   c1d68:	4411      	add	r1, r2
    y -= (h - 1);
   c1d6a:	18e2      	adds	r2, r4, r3
   c1d6c:	8944      	ldrh	r4, [r0, #10]
   c1d6e:	1aa4      	subs	r4, r4, r2
    x = WIDTH - x - 1;
   c1d70:	b209      	sxth	r1, r1
    y -= (h - 1);
   c1d72:	b224      	sxth	r4, r4
    drawFastVLineInternal(x, y, h, color);
   c1d74:	9502      	str	r5, [sp, #8]
   c1d76:	4622      	mov	r2, r4
}
   c1d78:	bc30      	pop	{r4, r5}
    drawFastVLineInternal(x, y, h, color);
   c1d7a:	f7ff bf33 	b.w	c1be4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   c1d7e:	8942      	ldrh	r2, [r0, #10]
   c1d80:	43c9      	mvns	r1, r1
   c1d82:	4411      	add	r1, r2
   c1d84:	b209      	sxth	r1, r1
    break;
   c1d86:	e7e7      	b.n	c1d58 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000c1d88 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   c1d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c1d8a:	4604      	mov	r4, r0
  TRANSACTION_START
   c1d8c:	6a80      	ldr	r0, [r0, #40]	; 0x28
   c1d8e:	2800      	cmp	r0, #0
   c1d90:	d042      	beq.n	c1e18 <_ZN16Adafruit_SSD13067displayEv+0x90>
   c1d92:	6da1      	ldr	r1, [r4, #88]	; 0x58
   c1d94:	f004 fa7e 	bl	c6294 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   c1d98:	4947      	ldr	r1, [pc, #284]	; (c1eb8 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   c1d9a:	2205      	movs	r2, #5
   c1d9c:	4620      	mov	r0, r4
   c1d9e:	f7ff fc9e 	bl	c16de <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   c1da2:	8921      	ldrh	r1, [r4, #8]
   c1da4:	3901      	subs	r1, #1
   c1da6:	4620      	mov	r0, r4
   c1da8:	b2c9      	uxtb	r1, r1
   c1daa:	f7ff fc2b 	bl	c1604 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   c1dae:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   c1db2:	1dde      	adds	r6, r3, #7
   c1db4:	bf48      	it	mi
   c1db6:	f103 060e 	addmi.w	r6, r3, #14
  if (wire) { // I2C
   c1dba:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   c1dbe:	8923      	ldrh	r3, [r4, #8]
   c1dc0:	10f6      	asrs	r6, r6, #3
   c1dc2:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr = buffer;
   c1dc6:	fa15 f686 	uxtah	r6, r5, r6
  if (wire) { // I2C
   c1dca:	2800      	cmp	r0, #0
   c1dcc:	d03b      	beq.n	c1e46 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   c1dce:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   c1dd2:	f004 fa9d 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   c1dd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1dd8:	6803      	ldr	r3, [r0, #0]
   c1dda:	2140      	movs	r1, #64	; 0x40
   c1ddc:	689b      	ldr	r3, [r3, #8]
   c1dde:	4798      	blx	r3
    uint16_t bytesOut = 1;
   c1de0:	2701      	movs	r7, #1
    while (count--) {
   c1de2:	42ae      	cmp	r6, r5
        wire->endTransmission();
   c1de4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while (count--) {
   c1de6:	d024      	beq.n	c1e32 <_ZN16Adafruit_SSD13067displayEv+0xaa>
      if (bytesOut >= WIRE_MAX) {
   c1de8:	2f1f      	cmp	r7, #31
   c1dea:	d90c      	bls.n	c1e06 <_ZN16Adafruit_SSD13067displayEv+0x7e>
        wire->endTransmission();
   c1dec:	f004 fab1 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   c1df0:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   c1df4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1df6:	f004 fa8b 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   c1dfa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1dfc:	6803      	ldr	r3, [r0, #0]
   c1dfe:	2140      	movs	r1, #64	; 0x40
   c1e00:	689b      	ldr	r3, [r3, #8]
   c1e02:	4798      	blx	r3
        bytesOut = 1;
   c1e04:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   c1e06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1e08:	f815 1b01 	ldrb.w	r1, [r5], #1
   c1e0c:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   c1e0e:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   c1e10:	689b      	ldr	r3, [r3, #8]
   c1e12:	4798      	blx	r3
      bytesOut++;
   c1e14:	b2bf      	uxth	r7, r7
    while (count--) {
   c1e16:	e7e4      	b.n	c1de2 <_ZN16Adafruit_SSD13067displayEv+0x5a>
  TRANSACTION_START
   c1e18:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c1e1a:	b118      	cbz	r0, c1e24 <_ZN16Adafruit_SSD13067displayEv+0x9c>
   c1e1c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   c1e20:	f004 ff42 	bl	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   c1e24:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c1e26:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c1e28:	6813      	ldr	r3, [r2, #0]
   c1e2a:	ea23 0301 	bic.w	r3, r3, r1
   c1e2e:	6013      	str	r3, [r2, #0]
   c1e30:	e7b2      	b.n	c1d98 <_ZN16Adafruit_SSD13067displayEv+0x10>
    wire->endTransmission();
   c1e32:	f004 fa8e 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   c1e36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   c1e38:	2800      	cmp	r0, #0
   c1e3a:	d031      	beq.n	c1ea0 <_ZN16Adafruit_SSD13067displayEv+0x118>
   c1e3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
}
   c1e3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   c1e42:	f004 ba27 	b.w	c6294 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   c1e46:	6c22      	ldr	r2, [r4, #64]	; 0x40
   c1e48:	6d21      	ldr	r1, [r4, #80]	; 0x50
   c1e4a:	6813      	ldr	r3, [r2, #0]
   c1e4c:	430b      	orrs	r3, r1
   c1e4e:	6013      	str	r3, [r2, #0]
    while (count--)
   c1e50:	42b5      	cmp	r5, r6
   c1e52:	d0f0      	beq.n	c1e36 <_ZN16Adafruit_SSD13067displayEv+0xae>
  if (spi) {
   c1e54:	6a60      	ldr	r0, [r4, #36]	; 0x24
      SPIwrite(*ptr++);
   c1e56:	f815 1b01 	ldrb.w	r1, [r5], #1
  if (spi) {
   c1e5a:	b110      	cbz	r0, c1e62 <_ZN16Adafruit_SSD13067displayEv+0xda>
    (void)spi->transfer(d);
   c1e5c:	f004 ff92 	bl	c6d84 <_ZN8SPIClass8transferEh>
   c1e60:	e7f6      	b.n	c1e50 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   c1e62:	f04f 0e08 	mov.w	lr, #8
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1e66:	2080      	movs	r0, #128	; 0x80
        *mosiPort |= mosiPinMask;
   c1e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c1e6a:	f8d4 c048 	ldr.w	ip, [r4, #72]	; 0x48
   c1e6e:	681f      	ldr	r7, [r3, #0]
      if (d & bit)
   c1e70:	4201      	tst	r1, r0
        *mosiPort |= mosiPinMask;
   c1e72:	bf14      	ite	ne
   c1e74:	ea47 070c 	orrne.w	r7, r7, ip
        *mosiPort &= ~mosiPinMask;
   c1e78:	ea27 070c 	biceq.w	r7, r7, ip
   c1e7c:	601f      	str	r7, [r3, #0]
      *clkPort |= clkPinMask;  // Clock high
   c1e7e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
   c1e80:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   c1e82:	683b      	ldr	r3, [r7, #0]
   c1e84:	4313      	orrs	r3, r2
   c1e86:	603b      	str	r3, [r7, #0]
      *clkPort &= ~clkPinMask; // Clock low
   c1e88:	6be7      	ldr	r7, [r4, #60]	; 0x3c
   c1e8a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
   c1e8c:	683b      	ldr	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1e8e:	f1be 0e01 	subs.w	lr, lr, #1
      *clkPort &= ~clkPinMask; // Clock low
   c1e92:	ea23 0302 	bic.w	r3, r3, r2
   c1e96:	603b      	str	r3, [r7, #0]
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
   c1e98:	ea4f 0050 	mov.w	r0, r0, lsr #1
   c1e9c:	d1e4      	bne.n	c1e68 <_ZN16Adafruit_SSD13067displayEv+0xe0>
   c1e9e:	e7d7      	b.n	c1e50 <_ZN16Adafruit_SSD13067displayEv+0xc8>
  TRANSACTION_END
   c1ea0:	6c62      	ldr	r2, [r4, #68]	; 0x44
   c1ea2:	6d61      	ldr	r1, [r4, #84]	; 0x54
   c1ea4:	6813      	ldr	r3, [r2, #0]
   c1ea6:	430b      	orrs	r3, r1
   c1ea8:	6013      	str	r3, [r2, #0]
   c1eaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   c1eac:	b118      	cbz	r0, c1eb6 <_ZN16Adafruit_SSD13067displayEv+0x12e>
}
   c1eae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TRANSACTION_END
   c1eb2:	f004 bedf 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>
}
   c1eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c1eb8:	000ccb92 	.word	0x000ccb92

000c1ebc <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   c1ebc:	4a03      	ldr	r2, [pc, #12]	; (c1ecc <_ZN17Adafruit_VEML7700C1Ev+0x10>)
   c1ebe:	6002      	str	r2, [r0, #0]
   c1ec0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   c1ec4:	6042      	str	r2, [r0, #4]
   c1ec6:	4a02      	ldr	r2, [pc, #8]	; (c1ed0 <_ZN17Adafruit_VEML7700C1Ev+0x14>)
   c1ec8:	6082      	str	r2, [r0, #8]
   c1eca:	4770      	bx	lr
   c1ecc:	3b6bedfa 	.word	0x3b6bedfa
   c1ed0:	44480000 	.word	0x44480000

000c1ed4 <_ZN17Adafruit_VEML77006enableEb>:

/*!
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable) {
   c1ed4:	b510      	push	{r4, lr}
   c1ed6:	460c      	mov	r4, r1
  ALS_Shutdown->write(!enable);
   c1ed8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   c1eda:	f081 0101 	eor.w	r1, r1, #1
   c1ede:	f7fd fee3 	bl	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  //   When activating the sensor, set bit 0 of the command register
  //   to “0” with a wait time of 2.5 ms before the first measurement
  //   is needed, allowing for the correct start of the signal
  //   processor and oscillator.
  //   '''
  if (enable)
   c1ee2:	b124      	cbz	r4, c1eee <_ZN17Adafruit_VEML77006enableEb+0x1a>
    delay(5); // doubling 2.5ms spec to be sure
}
   c1ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(5); // doubling 2.5ms spec to be sure
   c1ee8:	2005      	movs	r0, #5
   c1eea:	f003 bc21 	b.w	c5730 <delay>
}
   c1eee:	bd10      	pop	{r4, pc}

000c1ef0 <_ZN17Adafruit_VEML770015interruptEnableEb>:
/*!
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable) {
  ALS_Interrupt_Enable->write(enable);
   c1ef0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   c1ef2:	f7fd bed9 	b.w	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

000c1ef6 <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @brief Set the ALS IRQ persistence setting
 *    @param pers Persistence constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers) {
  ALS_Persistence->write(pers);
   c1ef6:	6b40      	ldr	r0, [r0, #52]	; 0x34
   c1ef8:	f7fd bed6 	b.w	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

000c1efc <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
/*!
 *    @brief Get ALS integration time setting
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS,
 * VEML7700_IT_400MS, VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void) {
   c1efc:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   c1efe:	6b80      	ldr	r0, [r0, #56]	; 0x38
   c1f00:	f7fd fec5 	bl	bfc8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   c1f04:	b2c0      	uxtb	r0, r0
   c1f06:	bd08      	pop	{r3, pc}

000c1f08 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>:

/*!
 *    @brief Get ALS integration time value
 *    @returns ALS integration time in milliseconds
 */
int Adafruit_VEML7700::getIntegrationTimeValue(void) {
   c1f08:	b508      	push	{r3, lr}
  switch (getIntegrationTime()) {
   c1f0a:	f7ff fff7 	bl	c1efc <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   c1f0e:	280c      	cmp	r0, #12
   c1f10:	bf96      	itet	ls
   c1f12:	4b03      	ldrls	r3, [pc, #12]	; (c1f20 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv+0x18>)
   c1f14:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c1f18:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
  case VEML7700_IT_800MS:
    return 800;
  default:
    return -1;
  }
}
   c1f1c:	bd08      	pop	{r3, pc}
   c1f1e:	bf00      	nop
   c1f20:	000ccb98 	.word	0x000ccb98

000c1f24 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>:
void Adafruit_VEML7700::setIntegrationTime(uint8_t it, bool wait) {
   c1f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c1f26:	4605      	mov	r5, r0
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
   c1f28:	b17a      	cbz	r2, c1f4a <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x26>
   c1f2a:	9101      	str	r1, [sp, #4]
   c1f2c:	f7ff ffec 	bl	c1f08 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
   c1f30:	9901      	ldr	r1, [sp, #4]
   c1f32:	4604      	mov	r4, r0
  ALS_Integration_Time->write(it);
   c1f34:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   c1f36:	f7fd feb7 	bl	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  delay(flushDelay);
   c1f3a:	4620      	mov	r0, r4
   c1f3c:	f003 fbf8 	bl	c5730 <delay>
   c1f40:	f003 f866 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
   c1f44:	60e8      	str	r0, [r5, #12]
}
   c1f46:	b003      	add	sp, #12
   c1f48:	bd30      	pop	{r4, r5, pc}
  int flushDelay = wait ? getIntegrationTimeValue() : 0;
   c1f4a:	4614      	mov	r4, r2
   c1f4c:	e7f2      	b.n	c1f34 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb+0x10>

000c1f4e <_ZN17Adafruit_VEML77007setGainEh>:
/*!
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or
 * VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain) {
   c1f4e:	b510      	push	{r4, lr}
   c1f50:	4604      	mov	r4, r0
  ALS_Gain->write(gain);
   c1f52:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   c1f54:	f7fd fea8 	bl	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   c1f58:	f003 f85a 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis(); // reset
   c1f5c:	60e0      	str	r0, [r4, #12]
}
   c1f5e:	bd10      	pop	{r4, pc}

000c1f60 <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain setting
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2,
 * VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void) { return ALS_Gain->read(); }
   c1f60:	b508      	push	{r3, lr}
   c1f62:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   c1f64:	f7fd fe93 	bl	bfc8e <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   c1f68:	b2c0      	uxtb	r0, r0
   c1f6a:	bd08      	pop	{r3, pc}

000c1f6c <_ZN17Adafruit_VEML770012getGainValueEv>:

/*!
 *    @brief Get ALS gain value
 *    @returns Actual gain value as float
 */
float Adafruit_VEML7700::getGainValue(void) {
   c1f6c:	b508      	push	{r3, lr}
  switch (getGain()) {
   c1f6e:	f7ff fff7 	bl	c1f60 <_ZN17Adafruit_VEML77007getGainEv>
   c1f72:	2803      	cmp	r0, #3
   c1f74:	bf9d      	ittte	ls
   c1f76:	4b04      	ldrls	r3, [pc, #16]	; (c1f88 <_ZN17Adafruit_VEML770012getGainValueEv+0x1c>)
   c1f78:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   c1f7c:	ed90 0a00 	vldrls	s0, [r0]
   c1f80:	eebf 0a00 	vmovhi.f32	s0, #240	; 0xbf800000 -1.0
  case VEML7700_GAIN_2:
    return 2;
  default:
    return -1;
  }
}
   c1f84:	bd08      	pop	{r3, pc}
   c1f86:	bf00      	nop
   c1f88:	000ccbb4 	.word	0x000ccbb4

000c1f8c <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
/*!
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable) {
  PowerSave_Enable->write(enable);
   c1f8c:	6c00      	ldr	r0, [r0, #64]	; 0x40
   c1f8e:	f7fd be8b 	b.w	bfca8 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>

000c1f92 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
   c1f92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c1f94:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   c1f96:	2010      	movs	r0, #16
bool Adafruit_VEML7700::begin(TwoWire *theWire) {
   c1f98:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   c1f9a:	f7f3 f872 	bl	b5082 <_Znwj>
   c1f9e:	4605      	mov	r5, r0
   c1fa0:	b118      	cbz	r0, c1faa <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   c1fa2:	9a03      	ldr	r2, [sp, #12]
   c1fa4:	2110      	movs	r1, #16
   c1fa6:	f7fd fe98 	bl	bfcda <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   c1faa:	64a5      	str	r5, [r4, #72]	; 0x48
  if (!i2c_dev->begin()) {
   c1fac:	4628      	mov	r0, r5
   c1fae:	2101      	movs	r1, #1
   c1fb0:	f7fd feaf 	bl	bfd12 <_ZN18Adafruit_I2CDevice5beginEb>
   c1fb4:	4605      	mov	r5, r0
   c1fb6:	2800      	cmp	r0, #0
   c1fb8:	f000 80d6 	beq.w	c2168 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1d6>
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   c1fbc:	2018      	movs	r0, #24
   c1fbe:	f7f3 f860 	bl	b5082 <_Znwj>
   c1fc2:	4606      	mov	r6, r0
   c1fc4:	b138      	cbz	r0, c1fd6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x44>
   c1fc6:	2301      	movs	r3, #1
   c1fc8:	2200      	movs	r2, #0
   c1fca:	e9cd 2300 	strd	r2, r3, [sp]
   c1fce:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c1fd0:	2302      	movs	r3, #2
   c1fd2:	f7fd fd6d 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_Config =
   c1fd6:	6126      	str	r6, [r4, #16]
      i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   c1fd8:	2018      	movs	r0, #24
   c1fda:	f7f3 f852 	bl	b5082 <_Znwj>
   c1fde:	4606      	mov	r6, r0
   c1fe0:	b138      	cbz	r0, c1ff2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x60>
   c1fe2:	2300      	movs	r3, #0
   c1fe4:	2201      	movs	r2, #1
   c1fe6:	e9cd 3200 	strd	r3, r2, [sp]
   c1fea:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c1fec:	2302      	movs	r3, #2
   c1fee:	f7fd fd5f 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_HighThreshold = new Adafruit_I2CRegister(
   c1ff2:	61e6      	str	r6, [r4, #28]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   c1ff4:	2018      	movs	r0, #24
   c1ff6:	f7f3 f844 	bl	b5082 <_Znwj>
   c1ffa:	4606      	mov	r6, r0
   c1ffc:	b140      	cbz	r0, c2010 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7e>
   c1ffe:	2300      	movs	r3, #0
   c2000:	2201      	movs	r2, #1
   c2002:	e9cd 3200 	strd	r3, r2, [sp]
   c2006:	2302      	movs	r3, #2
   c2008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c200a:	461a      	mov	r2, r3
   c200c:	f7fd fd50 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  ALS_LowThreshold =
   c2010:	6226      	str	r6, [r4, #32]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   c2012:	2018      	movs	r0, #24
   c2014:	f7f3 f835 	bl	b5082 <_Znwj>
   c2018:	4606      	mov	r6, r0
   c201a:	b148      	cbz	r0, c2030 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9e>
   c201c:	2300      	movs	r3, #0
   c201e:	f04f 0e01 	mov.w	lr, #1
   c2022:	e9cd 3e00 	strd	r3, lr, [sp]
   c2026:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c2028:	2302      	movs	r3, #2
   c202a:	2203      	movs	r2, #3
   c202c:	f7fd fd40 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Power_Saving =
   c2030:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   c2032:	2018      	movs	r0, #24
   c2034:	f7f3 f825 	bl	b5082 <_Znwj>
   c2038:	4606      	mov	r6, r0
   c203a:	b148      	cbz	r0, c2050 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbe>
   c203c:	2300      	movs	r3, #0
   c203e:	f04f 0c01 	mov.w	ip, #1
   c2042:	e9cd 3c00 	strd	r3, ip, [sp]
   c2046:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c2048:	2302      	movs	r3, #2
   c204a:	2204      	movs	r2, #4
   c204c:	f7fd fd30 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
   c2050:	6166      	str	r6, [r4, #20]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   c2052:	2018      	movs	r0, #24
   c2054:	f7f3 f815 	bl	b5082 <_Znwj>
   c2058:	4606      	mov	r6, r0
   c205a:	b140      	cbz	r0, c206e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xdc>
   c205c:	2300      	movs	r3, #0
   c205e:	2101      	movs	r1, #1
   c2060:	e9cd 3100 	strd	r3, r1, [sp]
   c2064:	2205      	movs	r2, #5
   c2066:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c2068:	2302      	movs	r3, #2
   c206a:	f7fd fd21 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  White_Data =
   c206e:	61a6      	str	r6, [r4, #24]
      new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   c2070:	2018      	movs	r0, #24
   c2072:	f7f3 f806 	bl	b5082 <_Znwj>
   c2076:	4606      	mov	r6, r0
   c2078:	b140      	cbz	r0, c208c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xfa>
   c207a:	2300      	movs	r3, #0
   c207c:	2201      	movs	r2, #1
   c207e:	e9cd 3200 	strd	r3, r2, [sp]
   c2082:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   c2084:	2302      	movs	r3, #2
   c2086:	2206      	movs	r2, #6
   c2088:	f7fd fd12 	bl	bfab0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Interrupt_Status =
   c208c:	62a6      	str	r6, [r4, #40]	; 0x28
      new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   c208e:	2008      	movs	r0, #8
   c2090:	f7f2 fff7 	bl	b5082 <_Znwj>
   c2094:	4606      	mov	r6, r0
   c2096:	b120      	cbz	r0, c20a2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x110>
   c2098:	6921      	ldr	r1, [r4, #16]
   c209a:	2300      	movs	r3, #0
   c209c:	2201      	movs	r2, #1
   c209e:	f7fd fdf1 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  ALS_Shutdown =
   c20a2:	62e6      	str	r6, [r4, #44]	; 0x2c
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   c20a4:	2008      	movs	r0, #8
   c20a6:	f7f2 ffec 	bl	b5082 <_Znwj>
   c20aa:	4606      	mov	r6, r0
   c20ac:	b120      	cbz	r0, c20b8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x126>
   c20ae:	2301      	movs	r3, #1
   c20b0:	6921      	ldr	r1, [r4, #16]
   c20b2:	461a      	mov	r2, r3
   c20b4:	f7fd fde6 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
   c20b8:	6326      	str	r6, [r4, #48]	; 0x30
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   c20ba:	2008      	movs	r0, #8
   c20bc:	f7f2 ffe1 	bl	b5082 <_Znwj>
   c20c0:	4606      	mov	r6, r0
   c20c2:	b120      	cbz	r0, c20ce <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13c>
   c20c4:	6921      	ldr	r1, [r4, #16]
   c20c6:	2304      	movs	r3, #4
   c20c8:	2202      	movs	r2, #2
   c20ca:	f7fd fddb 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
   c20ce:	6366      	str	r6, [r4, #52]	; 0x34
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   c20d0:	2008      	movs	r0, #8
   c20d2:	f7f2 ffd6 	bl	b5082 <_Znwj>
   c20d6:	4606      	mov	r6, r0
   c20d8:	b120      	cbz	r0, c20e4 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x152>
   c20da:	6921      	ldr	r1, [r4, #16]
   c20dc:	2306      	movs	r3, #6
   c20de:	2204      	movs	r2, #4
   c20e0:	f7fd fdd0 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
   c20e4:	63a6      	str	r6, [r4, #56]	; 0x38
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   c20e6:	2008      	movs	r0, #8
   c20e8:	f7f2 ffcb 	bl	b5082 <_Znwj>
   c20ec:	4606      	mov	r6, r0
   c20ee:	b120      	cbz	r0, c20fa <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x168>
   c20f0:	6921      	ldr	r1, [r4, #16]
   c20f2:	230b      	movs	r3, #11
   c20f4:	2202      	movs	r2, #2
   c20f6:	f7fd fdc5 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
   c20fa:	63e6      	str	r6, [r4, #60]	; 0x3c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   c20fc:	2008      	movs	r0, #8
   c20fe:	f7f2 ffc0 	bl	b5082 <_Znwj>
   c2102:	4606      	mov	r6, r0
   c2104:	b120      	cbz	r0, c2110 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17e>
   c2106:	6a61      	ldr	r1, [r4, #36]	; 0x24
   c2108:	2300      	movs	r3, #0
   c210a:	2201      	movs	r2, #1
   c210c:	f7fd fdba 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
   c2110:	6426      	str	r6, [r4, #64]	; 0x40
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   c2112:	2008      	movs	r0, #8
   c2114:	f7f2 ffb5 	bl	b5082 <_Znwj>
   c2118:	4606      	mov	r6, r0
   c211a:	b120      	cbz	r0, c2126 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x194>
   c211c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   c211e:	2301      	movs	r3, #1
   c2120:	2202      	movs	r2, #2
   c2122:	f7fd fdaf 	bl	bfc84 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  enable(false);
   c2126:	2100      	movs	r1, #0
   c2128:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   c212a:	6466      	str	r6, [r4, #68]	; 0x44
  enable(false);
   c212c:	f7ff fed2 	bl	c1ed4 <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   c2130:	2100      	movs	r1, #0
   c2132:	4620      	mov	r0, r4
   c2134:	f7ff fedc 	bl	c1ef0 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   c2138:	2100      	movs	r1, #0
   c213a:	4620      	mov	r0, r4
   c213c:	f7ff fedb 	bl	c1ef6 <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1_8);
   c2140:	2102      	movs	r1, #2
   c2142:	4620      	mov	r0, r4
   c2144:	f7ff ff03 	bl	c1f4e <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   c2148:	2201      	movs	r2, #1
   c214a:	2100      	movs	r1, #0
   c214c:	4620      	mov	r0, r4
   c214e:	f7ff fee9 	bl	c1f24 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
  powerSaveEnable(false);
   c2152:	2100      	movs	r1, #0
   c2154:	4620      	mov	r0, r4
   c2156:	f7ff ff19 	bl	c1f8c <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   c215a:	2101      	movs	r1, #1
   c215c:	4620      	mov	r0, r4
   c215e:	f7ff feb9 	bl	c1ed4 <_ZN17Adafruit_VEML77006enableEb>
   c2162:	f002 ff55 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
   c2166:	60e0      	str	r0, [r4, #12]
}
   c2168:	4628      	mov	r0, r5
   c216a:	b004      	add	sp, #16
   c216c:	bd70      	pop	{r4, r5, r6, pc}

000c216e <_ZN17Adafruit_VEML770013getResolutionEv>:

/*!
 *    @brief Determines resolution for current gain and integration time
 * settings.
 */
float Adafruit_VEML7700::getResolution(void) {
   c216e:	b510      	push	{r4, lr}
   c2170:	ed2d 8b04 	vpush	{d8-d9}
   c2174:	4604      	mov	r4, r0
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
   c2176:	edd0 8a00 	vldr	s17, [r0]
   c217a:	ed90 9a02 	vldr	s18, [r0, #8]
   c217e:	f7ff fec3 	bl	c1f08 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
   c2182:	ee07 0a90 	vmov	s15, r0
   c2186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
         (GAIN_MAX / getGainValue());
   c218a:	4620      	mov	r0, r4
  return MAX_RES * (IT_MAX / getIntegrationTimeValue()) *
   c218c:	ee89 8a27 	vdiv.f32	s16, s18, s15
   c2190:	ee28 8a28 	vmul.f32	s16, s16, s17
         (GAIN_MAX / getGainValue());
   c2194:	edd4 8a01 	vldr	s17, [r4, #4]
   c2198:	f7ff fee8 	bl	c1f6c <_ZN17Adafruit_VEML770012getGainValueEv>
   c219c:	eec8 7a80 	vdiv.f32	s15, s17, s0
}
   c21a0:	ee27 0a88 	vmul.f32	s0, s15, s16
   c21a4:	ecbd 8b04 	vpop	{d8-d9}
   c21a8:	bd10      	pop	{r4, pc}
   c21aa:	0000      	movs	r0, r0
   c21ac:	0000      	movs	r0, r0
	...

000c21b0 <_ZN17Adafruit_VEML770010computeLuxEtb>:
 *    @brief Copmute lux from ALS reading.
 *    @param rawALS raw ALS register value
 *    @param corrected if true, apply non-linear correction
 *    @return lux value
 */
float Adafruit_VEML7700::computeLux(uint16_t rawALS, bool corrected) {
   c21b0:	b538      	push	{r3, r4, r5, lr}
   c21b2:	ed2d 8b02 	vpush	{d8}
   c21b6:	ee08 1a10 	vmov	s16, r1
   c21ba:	4614      	mov	r4, r2
  float lux = getResolution() * rawALS;
   c21bc:	f7ff ffd7 	bl	c216e <_ZN17Adafruit_VEML770013getResolutionEv>
   c21c0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   c21c4:	ee28 0a00 	vmul.f32	s0, s16, s0
  if (corrected)
   c21c8:	b34c      	cbz	r4, c221e <_ZN17Adafruit_VEML770010computeLuxEtb+0x6e>
    lux = (((6.0135e-13 * lux - 9.3924e-9) * lux + 8.1488e-5) * lux + 1.0023) *
   c21ca:	ee10 0a10 	vmov	r0, s0
   c21ce:	f7f2 f88b 	bl	b42e8 <__aeabi_f2d>
   c21d2:	a315      	add	r3, pc, #84	; (adr r3, c2228 <_ZN17Adafruit_VEML770010computeLuxEtb+0x78>)
   c21d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c21d8:	4604      	mov	r4, r0
   c21da:	460d      	mov	r5, r1
   c21dc:	f7f2 f8dc 	bl	b4398 <__aeabi_dmul>
   c21e0:	a313      	add	r3, pc, #76	; (adr r3, c2230 <_ZN17Adafruit_VEML770010computeLuxEtb+0x80>)
   c21e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c21e6:	f7f1 ff1f 	bl	b4028 <__aeabi_dsub>
   c21ea:	4622      	mov	r2, r4
   c21ec:	462b      	mov	r3, r5
   c21ee:	f7f2 f8d3 	bl	b4398 <__aeabi_dmul>
   c21f2:	a311      	add	r3, pc, #68	; (adr r3, c2238 <_ZN17Adafruit_VEML770010computeLuxEtb+0x88>)
   c21f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c21f8:	f7f1 ff18 	bl	b402c <__adddf3>
   c21fc:	4622      	mov	r2, r4
   c21fe:	462b      	mov	r3, r5
   c2200:	f7f2 f8ca 	bl	b4398 <__aeabi_dmul>
   c2204:	a30e      	add	r3, pc, #56	; (adr r3, c2240 <_ZN17Adafruit_VEML770010computeLuxEtb+0x90>)
   c2206:	e9d3 2300 	ldrd	r2, r3, [r3]
   c220a:	f7f1 ff0f 	bl	b402c <__adddf3>
   c220e:	4622      	mov	r2, r4
   c2210:	462b      	mov	r3, r5
   c2212:	f7f2 f8c1 	bl	b4398 <__aeabi_dmul>
   c2216:	f7f2 fbb7 	bl	b4988 <__aeabi_d2f>
   c221a:	ee00 0a10 	vmov	s0, r0
          lux;
  return lux;
}
   c221e:	ecbd 8b02 	vpop	{d8}
   c2222:	bd38      	pop	{r3, r4, r5, pc}
   c2224:	f3af 8000 	nop.w
   c2228:	b18f283b 	.word	0xb18f283b
   c222c:	3d65287a 	.word	0x3d65287a
   c2230:	c91ef46e 	.word	0xc91ef46e
   c2234:	3e442b86 	.word	0x3e442b86
   c2238:	2e18cab0 	.word	0x2e18cab0
   c223c:	3f155c91 	.word	0x3f155c91
   c2240:	b98c7e28 	.word	0xb98c7e28
   c2244:	3ff0096b 	.word	0x3ff0096b

000c2248 <_ZN17Adafruit_VEML77008readWaitEv>:

void Adafruit_VEML7700::readWait(void) {
   c2248:	b538      	push	{r3, r4, r5, lr}
   c224a:	4605      	mov	r5, r0
  //   at least for the programmed integration time. For example,
  //   for ALS_IT = 100 ms a wait time of ≥ 100 ms is needed.
  //   '''
  // Based on testing, it needs more. So doubling to be sure.

  unsigned long timeToWait = 2 * getIntegrationTimeValue(); // see above
   c224c:	f7ff fe5c 	bl	c1f08 <_ZN17Adafruit_VEML770023getIntegrationTimeValueEv>
   c2250:	0044      	lsls	r4, r0, #1
   c2252:	f002 fedd 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  unsigned long timeWaited = millis() - lastRead;
   c2256:	68eb      	ldr	r3, [r5, #12]
   c2258:	1ac2      	subs	r2, r0, r3

  if (timeWaited < timeToWait)
   c225a:	4294      	cmp	r4, r2
   c225c:	d905      	bls.n	c226a <_ZN17Adafruit_VEML77008readWaitEv+0x22>
    delay(timeToWait - timeWaited);
   c225e:	1a18      	subs	r0, r3, r0
   c2260:	4420      	add	r0, r4
}
   c2262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    delay(timeToWait - timeWaited);
   c2266:	f003 ba63 	b.w	c5730 <delay>
}
   c226a:	bd38      	pop	{r3, r4, r5, pc}

000c226c <_ZN17Adafruit_VEML77007readALSEb>:
uint16_t Adafruit_VEML7700::readALS(bool wait) {
   c226c:	b510      	push	{r4, lr}
   c226e:	4604      	mov	r4, r0
  if (wait)
   c2270:	b109      	cbz	r1, c2276 <_ZN17Adafruit_VEML77007readALSEb+0xa>
    readWait();
   c2272:	f7ff ffe9 	bl	c2248 <_ZN17Adafruit_VEML77008readWaitEv>
   c2276:	f002 fecb 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  lastRead = millis();
   c227a:	60e0      	str	r0, [r4, #12]
  return ALS_Data->read();
   c227c:	6960      	ldr	r0, [r4, #20]
   c227e:	f7fd fce5 	bl	bfc4c <_ZN23Adafruit_BusIO_Register4readEv>
}
   c2282:	b280      	uxth	r0, r0
   c2284:	bd10      	pop	{r4, pc}
	...

000c2288 <_ZN17Adafruit_VEML77007autoLuxEv>:
 *  @brief Implemenation of App Note "Designing the VEML7700 Into an
 * Application", Vishay Document Number: 84323, Fig. 24 Flow Chart. This will
 * automatically adjust gain and integration time as needed to obtain a good raw
 * count value. Additionally, a non-linear correction is applied if needed.
 */
float Adafruit_VEML7700::autoLux(void) {
   c2288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const uint8_t gains[] = {VEML7700_GAIN_1_8, VEML7700_GAIN_1_4,
   c228a:	4b2f      	ldr	r3, [pc, #188]	; (c2348 <_ZN17Adafruit_VEML77007autoLuxEv+0xc0>)
   c228c:	9301      	str	r3, [sp, #4]
                           VEML7700_GAIN_1, VEML7700_GAIN_2};
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
   c228e:	4b2f      	ldr	r3, [pc, #188]	; (c234c <_ZN17Adafruit_VEML77007autoLuxEv+0xc4>)
float Adafruit_VEML7700::autoLux(void) {
   c2290:	4604      	mov	r4, r0
  const uint8_t intTimes[] = {VEML7700_IT_25MS,  VEML7700_IT_50MS,
   c2292:	6818      	ldr	r0, [r3, #0]
   c2294:	9002      	str	r0, [sp, #8]
   c2296:	889b      	ldrh	r3, [r3, #4]
   c2298:	f8ad 300c 	strh.w	r3, [sp, #12]

  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
  bool useCorrection = false; // flag for non-linear correction

  setGain(gains[gainIndex]);
   c229c:	2102      	movs	r1, #2
   c229e:	4620      	mov	r0, r4
   c22a0:	f7ff fe55 	bl	c1f4e <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(intTimes[itIndex]);
   c22a4:	2201      	movs	r2, #1
   c22a6:	2100      	movs	r1, #0
   c22a8:	4620      	mov	r0, r4
   c22aa:	f7ff fe3b 	bl	c1f24 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>

  uint16_t ALS = readALS(true);
   c22ae:	2101      	movs	r1, #1
   c22b0:	4620      	mov	r0, r4
   c22b2:	f7ff ffdb 	bl	c226c <_ZN17Adafruit_VEML77007readALSEb>
  // Serial.println("** AUTO LUX DEBUG **");
  // Serial.print("ALS initial = "); Serial.println(ALS);

  if (ALS <= 100) {
   c22b6:	2864      	cmp	r0, #100	; 0x64
   c22b8:	d82e      	bhi.n	c2318 <_ZN17Adafruit_VEML77007autoLuxEv+0x90>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
   c22ba:	2602      	movs	r6, #2
  uint8_t gainIndex = 0;      // start with ALS gain = 1/8
   c22bc:	2500      	movs	r5, #0

    // increase first gain and then integration time as needed
    // compute lux using simple linear formula
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
   c22be:	2d03      	cmp	r5, #3
   c22c0:	d109      	bne.n	c22d6 <_ZN17Adafruit_VEML77007autoLuxEv+0x4e>
   c22c2:	2e05      	cmp	r6, #5
   c22c4:	d11a      	bne.n	c22fc <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
  bool useCorrection = false; // flag for non-linear correction
   c22c6:	2200      	movs	r2, #0
      // Serial.print("ALS  hi lux = "); Serial.println(ALS);
    }
  }
  // Serial.println("** AUTO LUX DEBUG **");

  return computeLux(ALS, useCorrection);
   c22c8:	4601      	mov	r1, r0
   c22ca:	4620      	mov	r0, r4
   c22cc:	b004      	add	sp, #16
   c22ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return computeLux(ALS, useCorrection);
   c22d2:	f7ff bf6d 	b.w	c21b0 <_ZN17Adafruit_VEML770010computeLuxEtb>
      if (gainIndex < 3) {
   c22d6:	2d02      	cmp	r5, #2
   c22d8:	d810      	bhi.n	c22fc <_ZN17Adafruit_VEML77007autoLuxEv+0x74>
        setGain(gains[++gainIndex]);
   c22da:	1c6b      	adds	r3, r5, #1
   c22dc:	aa04      	add	r2, sp, #16
   c22de:	b2dd      	uxtb	r5, r3
   c22e0:	fa52 f383 	uxtab	r3, r2, r3
   c22e4:	4620      	mov	r0, r4
   c22e6:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
   c22ea:	f7ff fe30 	bl	c1f4e <_ZN17Adafruit_VEML77007setGainEh>
      ALS = readALS(true);
   c22ee:	2101      	movs	r1, #1
   c22f0:	4620      	mov	r0, r4
   c22f2:	f7ff ffbb 	bl	c226c <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS <= 100) && !((gainIndex == 3) && (itIndex == 5))) {
   c22f6:	2864      	cmp	r0, #100	; 0x64
   c22f8:	d9e1      	bls.n	c22be <_ZN17Adafruit_VEML77007autoLuxEv+0x36>
   c22fa:	e7e4      	b.n	c22c6 <_ZN17Adafruit_VEML77007autoLuxEv+0x3e>
      } else if (itIndex < 5) {
   c22fc:	2e04      	cmp	r6, #4
   c22fe:	d8f6      	bhi.n	c22ee <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
        setIntegrationTime(intTimes[++itIndex]);
   c2300:	aa04      	add	r2, sp, #16
   c2302:	1c73      	adds	r3, r6, #1
   c2304:	b2de      	uxtb	r6, r3
   c2306:	fa52 f383 	uxtab	r3, r2, r3
   c230a:	4620      	mov	r0, r4
   c230c:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   c2310:	2201      	movs	r2, #1
   c2312:	f7ff fe07 	bl	c1f24 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
   c2316:	e7ea      	b.n	c22ee <_ZN17Adafruit_VEML77007autoLuxEv+0x66>
  uint8_t itIndex = 2;        // start with ALS integration time = 100ms
   c2318:	2502      	movs	r5, #2
    while ((ALS > 10000) && (itIndex > 0)) {
   c231a:	f242 7610 	movw	r6, #10000	; 0x2710
   c231e:	42b0      	cmp	r0, r6
   c2320:	d910      	bls.n	c2344 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
   c2322:	b17d      	cbz	r5, c2344 <_ZN17Adafruit_VEML77007autoLuxEv+0xbc>
      setIntegrationTime(intTimes[--itIndex]);
   c2324:	aa04      	add	r2, sp, #16
   c2326:	1e6b      	subs	r3, r5, #1
   c2328:	b2dd      	uxtb	r5, r3
   c232a:	fa52 f383 	uxtab	r3, r2, r3
   c232e:	4620      	mov	r0, r4
   c2330:	f813 1c08 	ldrb.w	r1, [r3, #-8]
   c2334:	2201      	movs	r2, #1
   c2336:	f7ff fdf5 	bl	c1f24 <_ZN17Adafruit_VEML770018setIntegrationTimeEhb>
      ALS = readALS(true);
   c233a:	2101      	movs	r1, #1
   c233c:	4620      	mov	r0, r4
   c233e:	f7ff ff95 	bl	c226c <_ZN17Adafruit_VEML77007readALSEb>
    while ((ALS > 10000) && (itIndex > 0)) {
   c2342:	e7ec      	b.n	c231e <_ZN17Adafruit_VEML77007autoLuxEv+0x96>
    useCorrection = true;
   c2344:	2201      	movs	r2, #1
   c2346:	e7bf      	b.n	c22c8 <_ZN17Adafruit_VEML77007autoLuxEv+0x40>
   c2348:	01000302 	.word	0x01000302
   c234c:	000ca5f0 	.word	0x000ca5f0

000c2350 <_ZN17Adafruit_VEML77007readLuxE9luxMethod>:
float Adafruit_VEML7700::readLux(luxMethod method) {
   c2350:	b510      	push	{r4, lr}
   c2352:	4604      	mov	r4, r0
   c2354:	ed2d 8b02 	vpush	{d8}
   c2358:	2904      	cmp	r1, #4
   c235a:	d82b      	bhi.n	c23b4 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x64>
   c235c:	e8df f001 	tbb	[pc, r1]
   c2360:	03242213 	.word	0x03242213
   c2364:	15          	.byte	0x15
   c2365:	00          	.byte	0x00
  bool wait = true;
   c2366:	2100      	movs	r1, #0
    return computeLux(readALS(wait));
   c2368:	4620      	mov	r0, r4
   c236a:	f7ff ff7f 	bl	c226c <_ZN17Adafruit_VEML77007readALSEb>
   c236e:	ee08 0a10 	vmov	s16, r0
  float lux = getResolution() * rawALS;
   c2372:	4620      	mov	r0, r4
   c2374:	f7ff fefb 	bl	c216e <_ZN17Adafruit_VEML770013getResolutionEv>
   c2378:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   c237c:	ee28 0a00 	vmul.f32	s0, s16, s0
}
   c2380:	ecbd 8b02 	vpop	{d8}
   c2384:	bd10      	pop	{r4, pc}
  bool wait = true;
   c2386:	2101      	movs	r1, #1
   c2388:	e7ee      	b.n	c2368 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x18>
   c238a:	2100      	movs	r1, #0
    return computeLux(readALS(wait), true);
   c238c:	4620      	mov	r0, r4
   c238e:	f7ff ff6d 	bl	c226c <_ZN17Adafruit_VEML77007readALSEb>
}
   c2392:	ecbd 8b02 	vpop	{d8}
    return computeLux(readALS(wait), true);
   c2396:	4601      	mov	r1, r0
   c2398:	2201      	movs	r2, #1
   c239a:	4620      	mov	r0, r4
}
   c239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return computeLux(readALS(wait), true);
   c23a0:	f7ff bf06 	b.w	c21b0 <_ZN17Adafruit_VEML770010computeLuxEtb>
  bool wait = true;
   c23a4:	2101      	movs	r1, #1
   c23a6:	e7f1      	b.n	c238c <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x3c>
}
   c23a8:	ecbd 8b02 	vpop	{d8}
   c23ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return autoLux();
   c23b0:	f7ff bf6a 	b.w	c2288 <_ZN17Adafruit_VEML77007autoLuxEv>
  bool wait = true;
   c23b4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   c23b8:	e7e2      	b.n	c2380 <_ZN17Adafruit_VEML77007readLuxE9luxMethod+0x30>

000c23ba <_ZN7TwoWire5writeEi.isra.0>:
  inline size_t write(int n) { return write((uint8_t)n); }
   c23ba:	6803      	ldr	r3, [r0, #0]
   c23bc:	b2c9      	uxtb	r1, r1
   c23be:	689b      	ldr	r3, [r3, #8]
   c23c0:	4718      	bx	r3

000c23c2 <_ZN8LeafSensC1Ev>:
 */
#include "LeafSens.h"


LeafSens::LeafSens(){
  addr=0x61;
   c23c2:	2361      	movs	r3, #97	; 0x61
   c23c4:	7103      	strb	r3, [r0, #4]
}
   c23c6:	4770      	bx	lr

000c23c8 <_ZN8LeafSens4initEh>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int LeafSens::init(uint8_t address){
   c23c8:	b538      	push	{r3, r4, r5, lr}
   c23ca:	4604      	mov	r4, r0
   c23cc:	460d      	mov	r5, r1
  _wire = &Wire;
   c23ce:	f005 f993 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c23d2:	6020      	str	r0, [r4, #0]
  _wire->begin();
   c23d4:	f003 ff62 	bl	c629c <_ZN7TwoWire5beginEv>
  // _wire->setClock(100000L);
  addr = address;
   c23d8:	7125      	strb	r5, [r4, #4]
  return 0;
}
   c23da:	2000      	movs	r0, #0
   c23dc:	bd38      	pop	{r3, r4, r5, pc}

000c23de <_ZN8LeafSens8i2cdelayEi>:


bool LeafSens::i2cdelay(int size){
   c23de:	b570      	push	{r4, r5, r6, lr}
   c23e0:	4606      	mov	r6, r0
  delay(1);
   c23e2:	2001      	movs	r0, #1
bool LeafSens::i2cdelay(int size){
   c23e4:	460d      	mov	r5, r1
  delay(1);
   c23e6:	f003 f9a3 	bl	c5730 <delay>
  int i=0;
   c23ea:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
   c23ec:	6830      	ldr	r0, [r6, #0]
   c23ee:	6803      	ldr	r3, [r0, #0]
   c23f0:	691b      	ldr	r3, [r3, #16]
   c23f2:	4798      	blx	r3
   c23f4:	42a8      	cmp	r0, r5
   c23f6:	da06      	bge.n	c2406 <_ZN8LeafSens8i2cdelayEi+0x28>
   c23f8:	42ac      	cmp	r4, r5
   c23fa:	dc09      	bgt.n	c2410 <_ZN8LeafSens8i2cdelayEi+0x32>
	  delay(2);
   c23fc:	2002      	movs	r0, #2
   c23fe:	f003 f997 	bl	c5730 <delay>
  for (;_wire->available() < size && i<=size;i++) {
   c2402:	3401      	adds	r4, #1
   c2404:	e7f2      	b.n	c23ec <_ZN8LeafSens8i2cdelayEi+0xe>
  }
  if(i>=size){
   c2406:	42ac      	cmp	r4, r5
   c2408:	bfac      	ite	ge
   c240a:	2000      	movge	r0, #0
   c240c:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
   c240e:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
   c2410:	2000      	movs	r0, #0
   c2412:	e7fc      	b.n	c240e <_ZN8LeafSens8i2cdelayEi+0x30>

000c2414 <_ZN8LeafSens8getStateEv>:

int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
   c2414:	b510      	push	{r4, lr}
  _wire->requestFrom(addr, (uint8_t)1);
   c2416:	2201      	movs	r2, #1
   c2418:	7901      	ldrb	r1, [r0, #4]
int LeafSens::getState(){ //-1:no data, 0:err, 1:ok
   c241a:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
   c241c:	6800      	ldr	r0, [r0, #0]
   c241e:	f003 ff70 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
   c2422:	2101      	movs	r1, #1
   c2424:	4620      	mov	r0, r4
   c2426:	f7ff ffda 	bl	c23de <_ZN8LeafSens8i2cdelayEi>
   c242a:	b128      	cbz	r0, c2438 <_ZN8LeafSens8getStateEv+0x24>
    return _wire->read();
   c242c:	6820      	ldr	r0, [r4, #0]
   c242e:	6803      	ldr	r3, [r0, #0]
  }else{
    return -1;
  }
}
   c2430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
   c2434:	695b      	ldr	r3, [r3, #20]
   c2436:	4718      	bx	r3
}
   c2438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c243c:	bd10      	pop	{r4, pc}

000c243e <_ZN8LeafSens6getValEh>:

int16_t LeafSens::getVal(byte reg){
   c243e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c2440:	4604      	mov	r4, r0
   c2442:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
   c2444:	7901      	ldrb	r1, [r0, #4]
   c2446:	6800      	ldr	r0, [r0, #0]
   c2448:	f003 ff5e 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
   c244c:	6820      	ldr	r0, [r4, #0]
   c244e:	6803      	ldr	r3, [r0, #0]
   c2450:	4629      	mov	r1, r5
   c2452:	689b      	ldr	r3, [r3, #8]
   c2454:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
   c2456:	6820      	ldr	r0, [r4, #0]
   c2458:	f003 ff7b 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  delay(10);
   c245c:	200a      	movs	r0, #10
   c245e:	f003 f967 	bl	c5730 <delay>
  _wire->requestFrom(addr, (uint8_t)2);
   c2462:	7921      	ldrb	r1, [r4, #4]
   c2464:	6820      	ldr	r0, [r4, #0]
   c2466:	2202      	movs	r2, #2
   c2468:	f003 ff4b 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
   c246c:	2300      	movs	r3, #0
  if(i2cdelay(2)){
   c246e:	2102      	movs	r1, #2
   c2470:	4620      	mov	r0, r4
  int16_t ret=0;
   c2472:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
   c2476:	f7ff ffb2 	bl	c23de <_ZN8LeafSens8i2cdelayEi>
   c247a:	b158      	cbz	r0, c2494 <_ZN8LeafSens6getValEh+0x56>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
   c247c:	6820      	ldr	r0, [r4, #0]
   c247e:	6803      	ldr	r3, [r0, #0]
   c2480:	695b      	ldr	r3, [r3, #20]
   c2482:	4798      	blx	r3
   c2484:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
   c2488:	6820      	ldr	r0, [r4, #0]
   c248a:	6803      	ldr	r3, [r0, #0]
   c248c:	695b      	ldr	r3, [r3, #20]
   c248e:	4798      	blx	r3
   c2490:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
   c2494:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   c2498:	b003      	add	sp, #12
   c249a:	bd30      	pop	{r4, r5, pc}

000c249c <_ZN8LeafSens10newReadingEv>:
    return 0;
  }
  return 1;
}

int LeafSens::newReading(){
   c249c:	b510      	push	{r4, lr}
   c249e:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
   c24a0:	7901      	ldrb	r1, [r0, #4]
   c24a2:	6800      	ldr	r0, [r0, #0]
   c24a4:	f003 ff30 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_ST);              // sends one byte
   c24a8:	6820      	ldr	r0, [r4, #0]
   c24aa:	2101      	movs	r1, #1
   c24ac:	f7ff ff85 	bl	c23ba <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
   c24b0:	6820      	ldr	r0, [r4, #0]
   c24b2:	f003 ff4e 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  delay(200); // let sensor read the data
   c24b6:	20c8      	movs	r0, #200	; 0xc8
   c24b8:	f003 f93a 	bl	c5730 <delay>
  return getState();
   c24bc:	4620      	mov	r0, r4
}
   c24be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
   c24c2:	f7ff bfa7 	b.w	c2414 <_ZN8LeafSens8getStateEv>
	...

000c24c8 <_ZN8LeafSens6getWetEv>:

float LeafSens::getWet()
{
   c24c8:	b508      	push	{r3, lr}
  return getVal(REG_WET)/100.0;
   c24ca:	2105      	movs	r1, #5
   c24cc:	f7ff ffb7 	bl	c243e <_ZN8LeafSens6getValEh>
   c24d0:	f7f1 fef8 	bl	b42c4 <__aeabi_i2d>
   c24d4:	4b04      	ldr	r3, [pc, #16]	; (c24e8 <_ZN8LeafSens6getWetEv+0x20>)
   c24d6:	2200      	movs	r2, #0
   c24d8:	f7f2 f888 	bl	b45ec <__aeabi_ddiv>
   c24dc:	f7f2 fa54 	bl	b4988 <__aeabi_d2f>
}
   c24e0:	ee00 0a10 	vmov	s0, r0
   c24e4:	bd08      	pop	{r3, pc}
   c24e6:	bf00      	nop
   c24e8:	40590000 	.word	0x40590000

000c24ec <_ZN8LeafSens7getTempEv>:

float LeafSens::getTemp()
{
   c24ec:	b508      	push	{r3, lr}
  return getVal(REG_TEMP)/100.0;
   c24ee:	2104      	movs	r1, #4
   c24f0:	f7ff ffa5 	bl	c243e <_ZN8LeafSens6getValEh>
   c24f4:	f7f1 fee6 	bl	b42c4 <__aeabi_i2d>
   c24f8:	4b04      	ldr	r3, [pc, #16]	; (c250c <_ZN8LeafSens7getTempEv+0x20>)
   c24fa:	2200      	movs	r2, #0
   c24fc:	f7f2 f876 	bl	b45ec <__aeabi_ddiv>
   c2500:	f7f2 fa42 	bl	b4988 <__aeabi_d2f>
}
   c2504:	ee00 0a10 	vmov	s0, r0
   c2508:	bd08      	pop	{r3, pc}
   c250a:	bf00      	nop
   c250c:	40590000 	.word	0x40590000

000c2510 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   c2510:	2001      	movs	r0, #1
   c2512:	4770      	bx	lr

000c2514 <_ZN15RHGenericDriver13waitAvailableEv>:

// Blocks until a valid message is received
void RHGenericDriver::waitAvailable()
{
   c2514:	b510      	push	{r4, lr}
   c2516:	4604      	mov	r4, r0
    while (!available())
   c2518:	6823      	ldr	r3, [r4, #0]
   c251a:	4620      	mov	r0, r4
   c251c:	685b      	ldr	r3, [r3, #4]
   c251e:	4798      	blx	r3
   c2520:	2800      	cmp	r0, #0
   c2522:	d0f9      	beq.n	c2518 <_ZN15RHGenericDriver13waitAvailableEv+0x4>
	YIELD;
}
   c2524:	bd10      	pop	{r4, pc}

000c2526 <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   c2526:	7903      	ldrb	r3, [r0, #4]
   c2528:	2b03      	cmp	r3, #3
   c252a:	d0fc      	beq.n	c2526 <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   c252c:	2001      	movs	r0, #1
   c252e:	4770      	bx	lr

000c2530 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   c2530:	2000      	movs	r0, #0
   c2532:	4770      	bx	lr

000c2534 <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   c2534:	7181      	strb	r1, [r0, #6]
}
   c2536:	4770      	bx	lr

000c2538 <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   c2538:	7141      	strb	r1, [r0, #5]
}
   c253a:	4770      	bx	lr

000c253c <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   c253c:	72c1      	strb	r1, [r0, #11]
}
   c253e:	4770      	bx	lr

000c2540 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   c2540:	7301      	strb	r1, [r0, #12]
}
   c2542:	4770      	bx	lr

000c2544 <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   c2544:	7341      	strb	r1, [r0, #13]
}
   c2546:	4770      	bx	lr

000c2548 <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   c2548:	7b83      	ldrb	r3, [r0, #14]
   c254a:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   c254e:	4311      	orrs	r1, r2
   c2550:	7381      	strb	r1, [r0, #14]
}
   c2552:	4770      	bx	lr

000c2554 <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   c2554:	79c0      	ldrb	r0, [r0, #7]
}
   c2556:	4770      	bx	lr

000c2558 <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   c2558:	7a00      	ldrb	r0, [r0, #8]
}
   c255a:	4770      	bx	lr

000c255c <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   c255c:	7a40      	ldrb	r0, [r0, #9]
}
   c255e:	4770      	bx	lr

000c2560 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   c2560:	7a80      	ldrb	r0, [r0, #10]
}
   c2562:	4770      	bx	lr

000c2564 <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   c2564:	8a00      	ldrh	r0, [r0, #16]
}
   c2566:	b200      	sxth	r0, r0
   c2568:	4770      	bx	lr

000c256a <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   c256a:	7900      	ldrb	r0, [r0, #4]
}
   c256c:	4770      	bx	lr

000c256e <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   c256e:	7101      	strb	r1, [r0, #4]
}
   c2570:	4770      	bx	lr

000c2572 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   c2572:	8a40      	ldrh	r0, [r0, #18]
}
   c2574:	b280      	uxth	r0, r0
   c2576:	4770      	bx	lr

000c2578 <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   c2578:	8a80      	ldrh	r0, [r0, #20]
}
   c257a:	b280      	uxth	r0, r0
   c257c:	4770      	bx	lr

000c257e <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   c257e:	8ac0      	ldrh	r0, [r0, #22]
}
   c2580:	b280      	uxth	r0, r0
   c2582:	4770      	bx	lr

000c2584 <_ZN15RHGenericDriver20waitAvailableTimeoutEt>:
{
   c2584:	b570      	push	{r4, r5, r6, lr}
   c2586:	4604      	mov	r4, r0
   c2588:	460e      	mov	r6, r1
   c258a:	f002 fd41 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
   c258e:	4605      	mov	r5, r0
   c2590:	f002 fd3e 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   c2594:	1b40      	subs	r0, r0, r5
   c2596:	42b0      	cmp	r0, r6
   c2598:	d206      	bcs.n	c25a8 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x24>
        if (available())
   c259a:	6823      	ldr	r3, [r4, #0]
   c259c:	4620      	mov	r0, r4
   c259e:	685b      	ldr	r3, [r3, #4]
   c25a0:	4798      	blx	r3
   c25a2:	2800      	cmp	r0, #0
   c25a4:	d0f4      	beq.n	c2590 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0xc>
}
   c25a6:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   c25a8:	2000      	movs	r0, #0
   c25aa:	e7fc      	b.n	c25a6 <_ZN15RHGenericDriver20waitAvailableTimeoutEt+0x22>

000c25ac <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   c25ac:	b570      	push	{r4, r5, r6, lr}
   c25ae:	4604      	mov	r4, r0
   c25b0:	460e      	mov	r6, r1
   c25b2:	f002 fd2d 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
   c25b6:	4605      	mov	r5, r0
   c25b8:	f002 fd2a 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   c25bc:	1b40      	subs	r0, r0, r5
   c25be:	42b0      	cmp	r0, r6
   c25c0:	d204      	bcs.n	c25cc <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   c25c2:	7923      	ldrb	r3, [r4, #4]
   c25c4:	2b03      	cmp	r3, #3
   c25c6:	d0f7      	beq.n	c25b8 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   c25c8:	2001      	movs	r0, #1
}
   c25ca:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   c25cc:	2000      	movs	r0, #0
   c25ce:	e7fc      	b.n	c25ca <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000c25d0 <_ZN15RHGenericDriver7waitCADEv>:
{
   c25d0:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   c25d2:	69c3      	ldr	r3, [r0, #28]
{
   c25d4:	4604      	mov	r4, r0
    if (!_cad_timeout)
   c25d6:	b1b3      	cbz	r3, c2606 <_ZN15RHGenericDriver7waitCADEv+0x36>
   c25d8:	f002 fd1a 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   c25dc:	2664      	movs	r6, #100	; 0x64
   c25de:	4605      	mov	r5, r0
    while (isChannelActive())
   c25e0:	6823      	ldr	r3, [r4, #0]
   c25e2:	4620      	mov	r0, r4
   c25e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c25e6:	4798      	blx	r3
   c25e8:	b168      	cbz	r0, c2606 <_ZN15RHGenericDriver7waitCADEv+0x36>
   c25ea:	f002 fd11 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   c25ee:	69e3      	ldr	r3, [r4, #28]
   c25f0:	1b40      	subs	r0, r0, r5
   c25f2:	4298      	cmp	r0, r3
   c25f4:	d809      	bhi.n	c260a <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   c25f6:	210a      	movs	r1, #10
   c25f8:	2001      	movs	r0, #1
   c25fa:	f004 fae0 	bl	c6bbe <_Z6randomii>
   c25fe:	4370      	muls	r0, r6
   c2600:	f003 f896 	bl	c5730 <delay>
    while (isChannelActive())
   c2604:	e7ec      	b.n	c25e0 <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   c2606:	2001      	movs	r0, #1
}
   c2608:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   c260a:	2000      	movs	r0, #0
   c260c:	e7fc      	b.n	c2608 <_ZN15RHGenericDriver7waitCADEv+0x38>
	...

000c2610 <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   c2610:	4a06      	ldr	r2, [pc, #24]	; (c262c <_ZN15RHGenericDriverC1Ev+0x1c>)
   c2612:	6002      	str	r2, [r0, #0]
   c2614:	21ff      	movs	r1, #255	; 0xff
   c2616:	2200      	movs	r2, #0
   c2618:	7102      	strb	r2, [r0, #4]
   c261a:	7141      	strb	r1, [r0, #5]
   c261c:	8242      	strh	r2, [r0, #18]
   c261e:	72c1      	strb	r1, [r0, #11]
   c2620:	8282      	strh	r2, [r0, #20]
   c2622:	8181      	strh	r1, [r0, #12]
   c2624:	7382      	strb	r2, [r0, #14]
   c2626:	82c2      	strh	r2, [r0, #22]
   c2628:	61c2      	str	r2, [r0, #28]
}
   c262a:	4770      	bx	lr
   c262c:	000ccbcc 	.word	0x000ccbcc

000c2630 <_ZN12RHGenericSPI15attachInterruptEv>:
    virtual uint8_t transfer(uint8_t data) = 0;

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   c2630:	4770      	bx	lr

000c2632 <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   c2632:	4770      	bx	lr

000c2634 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   c2634:	4770      	bx	lr

000c2636 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   c2636:	4770      	bx	lr

000c2638 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Tells the SPI support software that SPI transactions will occur with the interrupt
    /// handler assocated with interruptNumber
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){}
   c2638:	4770      	bx	lr

000c263a <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   c263a:	7141      	strb	r1, [r0, #5]
}
   c263c:	4770      	bx	lr

000c263e <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   c263e:	7181      	strb	r1, [r0, #6]
}
   c2640:	4770      	bx	lr

000c2642 <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   c2642:	7101      	strb	r1, [r0, #4]
}
   c2644:	4770      	bx	lr
	...

000c2648 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   c2648:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   c264a:	4d03      	ldr	r5, [pc, #12]	; (c2658 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   c264c:	6005      	str	r5, [r0, #0]
   c264e:	7101      	strb	r1, [r0, #4]
   c2650:	7142      	strb	r2, [r0, #5]
   c2652:	7183      	strb	r3, [r0, #6]
}
   c2654:	bd30      	pop	{r4, r5, pc}
   c2656:	bf00      	nop
   c2658:	000ccc44 	.word	0x000ccc44

000c265c <_ZN13RHHardwareSPI14usingInterruptEh>:
void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
#if defined(SPI_HAS_TRANSACTION)

#endif
}
   c265c:	4770      	bx	lr
	...

000c2660 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   c2660:	b510      	push	{r4, lr}
   c2662:	4604      	mov	r4, r0
    RHGenericSPI(frequency, bitOrder, dataMode)
   c2664:	f7ff fff0 	bl	c2648 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   c2668:	4b05      	ldr	r3, [pc, #20]	; (c2680 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   c266a:	6023      	str	r3, [r4, #0]
   c266c:	4b05      	ldr	r3, [pc, #20]	; (c2684 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   c266e:	60a3      	str	r3, [r4, #8]
   c2670:	2301      	movs	r3, #1
   c2672:	7323      	strb	r3, [r4, #12]
   c2674:	2300      	movs	r3, #0
   c2676:	6123      	str	r3, [r4, #16]
   c2678:	82a3      	strh	r3, [r4, #20]
}
   c267a:	4620      	mov	r0, r4
   c267c:	bd10      	pop	{r4, pc}
   c267e:	bf00      	nop
   c2680:	000ccc78 	.word	0x000ccc78
   c2684:	000cbe8c 	.word	0x000cbe8c

000c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>:
    static SPIClass& instance() {
   c2688:	b510      	push	{r4, lr}
        static SPIClass instance(Interface);
   c268a:	4c09      	ldr	r4, [pc, #36]	; (c26b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x28>)
   c268c:	7823      	ldrb	r3, [r4, #0]
   c268e:	f3bf 8f5b 	dmb	ish
   c2692:	07db      	lsls	r3, r3, #31
   c2694:	d40a      	bmi.n	c26ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x24>
   c2696:	4620      	mov	r0, r4
   c2698:	f7f2 fd06 	bl	b50a8 <__cxa_guard_acquire>
   c269c:	b130      	cbz	r0, c26ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x24>
   c269e:	4805      	ldr	r0, [pc, #20]	; (c26b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
   c26a0:	2101      	movs	r1, #1
   c26a2:	f004 faa3 	bl	c6bec <_ZN8SPIClassC1E19hal_spi_interface_t>
   c26a6:	4620      	mov	r0, r4
   c26a8:	f7f2 fd03 	bl	b50b2 <__cxa_guard_release>
        return instance;
    }
   c26ac:	4801      	ldr	r0, [pc, #4]	; (c26b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv+0x2c>)
   c26ae:	bd10      	pop	{r4, pc}
   c26b0:	2003e5e8 	.word	0x2003e5e8
   c26b4:	2003e5ec 	.word	0x2003e5ec

000c26b8 <_ZN13RHHardwareSPI8transferEh>:
{
   c26b8:	b507      	push	{r0, r1, r2, lr}
   c26ba:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   c26bc:	f7ff ffe4 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   c26c0:	9901      	ldr	r1, [sp, #4]
}
   c26c2:	b003      	add	sp, #12
   c26c4:	f85d eb04 	ldr.w	lr, [sp], #4
   c26c8:	f004 bb5c 	b.w	c6d84 <_ZN8SPIClass8transferEh>

000c26cc <_ZN13RHHardwareSPI15attachInterruptEv>:
{
   c26cc:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   c26ce:	f7ff ffdb 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
   c26d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c26d6:	f004 bb6e 	b.w	c6db6 <_ZN8SPIClass15attachInterruptEv>

000c26da <_ZN13RHHardwareSPI15detachInterruptEv>:
{
   c26da:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   c26dc:	f7ff ffd4 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
   c26e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c26e4:	f004 bb68 	b.w	c6db8 <_ZN8SPIClass15detachInterruptEv>

000c26e8 <_ZN13RHHardwareSPI5beginEv>:
{
   c26e8:	b510      	push	{r4, lr}
   if (_frequency == Frequency16MHz)
   c26ea:	7903      	ldrb	r3, [r0, #4]
   c26ec:	2b04      	cmp	r3, #4
   c26ee:	d021      	beq.n	c2734 <_ZN13RHHardwareSPI5beginEv+0x4c>
   else if (_frequency == Frequency8MHz)
   c26f0:	2b03      	cmp	r3, #3
   c26f2:	d021      	beq.n	c2738 <_ZN13RHHardwareSPI5beginEv+0x50>
   else if (_frequency == Frequency4MHz)
   c26f4:	2b02      	cmp	r3, #2
   c26f6:	d021      	beq.n	c273c <_ZN13RHHardwareSPI5beginEv+0x54>
       frequency = 1000000;
   c26f8:	4a11      	ldr	r2, [pc, #68]	; (c2740 <_ZN13RHHardwareSPI5beginEv+0x58>)
   c26fa:	4912      	ldr	r1, [pc, #72]	; (c2744 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   c26fc:	2b01      	cmp	r3, #1
   c26fe:	bf18      	it	ne
   c2700:	460a      	movne	r2, r1
   if (_bitOrder == BitOrderLSBFirst)
   c2702:	7941      	ldrb	r1, [r0, #5]
    if (_dataMode == DataMode0)
   c2704:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   c2706:	3901      	subs	r1, #1
   c2708:	bf18      	it	ne
   c270a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   c270c:	b133      	cbz	r3, c271c <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode1)
   c270e:	2b01      	cmp	r3, #1
   c2710:	d004      	beq.n	c271c <_ZN13RHHardwareSPI5beginEv+0x34>
    else if (_dataMode == DataMode2)
   c2712:	2b02      	cmp	r3, #2
   c2714:	d002      	beq.n	c271c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
   c2716:	2b03      	cmp	r3, #3
   c2718:	bf18      	it	ne
   c271a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   c271c:	2400      	movs	r4, #0
   c271e:	7304      	strb	r4, [r0, #12]
   c2720:	7501      	strb	r1, [r0, #20]
   c2722:	6102      	str	r2, [r0, #16]
   c2724:	7543      	strb	r3, [r0, #21]
        instance().begin(ss_pin);
   c2726:	f7ff ffaf 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
   c272a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c272e:	21ff      	movs	r1, #255	; 0xff
   c2730:	f004 ba7a 	b.w	c6c28 <_ZN8SPIClass5beginEt>
       frequency = 16000000;
   c2734:	4a04      	ldr	r2, [pc, #16]	; (c2748 <_ZN13RHHardwareSPI5beginEv+0x60>)
   c2736:	e7e4      	b.n	c2702 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   c2738:	4a04      	ldr	r2, [pc, #16]	; (c274c <_ZN13RHHardwareSPI5beginEv+0x64>)
   c273a:	e7e2      	b.n	c2702 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   c273c:	4a04      	ldr	r2, [pc, #16]	; (c2750 <_ZN13RHHardwareSPI5beginEv+0x68>)
   c273e:	e7e0      	b.n	c2702 <_ZN13RHHardwareSPI5beginEv+0x1a>
   c2740:	001e8480 	.word	0x001e8480
   c2744:	000f4240 	.word	0x000f4240
   c2748:	00f42400 	.word	0x00f42400
   c274c:	007a1200 	.word	0x007a1200
   c2750:	003d0900 	.word	0x003d0900

000c2754 <_ZN13RHHardwareSPI3endEv>:
{
   c2754:	b508      	push	{r3, lr}
        instance().end();
   c2756:	f7ff ff97 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
   c275a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c275e:	f004 ba77 	b.w	c6c50 <_ZN8SPIClass3endEv>

000c2762 <_ZN13RHHardwareSPI16beginTransactionEv>:
{
   c2762:	b510      	push	{r4, lr}
   c2764:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   c2766:	f7ff ff8f 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
   c276a:	f104 0108 	add.w	r1, r4, #8
}
   c276e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c2772:	f004 ba99 	b.w	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000c2776 <_ZN13RHHardwareSPI14endTransactionEv>:
{
   c2776:	b508      	push	{r3, lr}
        instance().endTransaction();
   c2778:	f7ff ff86 	bl	c2688 <_ZN8particle8SpiProxyIL19hal_spi_interface_t1EE8instanceEv>
}
   c277c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   c2780:	f004 ba78 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>

000c2784 <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   c2784:	2300      	movs	r3, #0
   c2786:	4802      	ldr	r0, [pc, #8]	; (c2790 <_GLOBAL__sub_I_hardware_spi+0xc>)
   c2788:	461a      	mov	r2, r3
   c278a:	4619      	mov	r1, r3
   c278c:	f7ff bf68 	b.w	c2660 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   c2790:	2003e5f4 	.word	0x2003e5f4

000c2794 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   c2794:	b510      	push	{r4, lr}
   c2796:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   c2798:	6a00      	ldr	r0, [r0, #32]
   c279a:	6803      	ldr	r3, [r0, #0]
   c279c:	68db      	ldr	r3, [r3, #12]
   c279e:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin
    pinMode(_slaveSelectPin, OUTPUT);
   c27a0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c27a4:	2101      	movs	r1, #1
   c27a6:	f004 ff07 	bl	c75b8 <pinMode>
    digitalWrite(_slaveSelectPin, HIGH);
   c27aa:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c27ae:	2101      	movs	r1, #1
   c27b0:	f004 ff13 	bl	c75da <digitalWrite>

    delay(100);
   c27b4:	2064      	movs	r0, #100	; 0x64
   c27b6:	f002 ffbb 	bl	c5730 <delay>
    return true;
}
   c27ba:	2001      	movs	r0, #1
   c27bc:	bd10      	pop	{r4, pc}
	...

000c27c0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   c27c0:	b570      	push	{r4, r5, r6, lr}
   c27c2:	4604      	mov	r4, r0
   c27c4:	460d      	mov	r5, r1
   c27c6:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   c27c8:	f7ff ff22 	bl	c2610 <_ZN15RHGenericDriverC1Ev>
   c27cc:	4b03      	ldr	r3, [pc, #12]	; (c27dc <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   c27ce:	6023      	str	r3, [r4, #0]
   c27d0:	6226      	str	r6, [r4, #32]
   c27d2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   c27d6:	4620      	mov	r0, r4
   c27d8:	bd70      	pop	{r4, r5, r6, pc}
   c27da:	bf00      	nop
   c27dc:	000cccac 	.word	0x000cccac

000c27e0 <_ZN11RHSPIDriver7spiReadEh>:

uint8_t RHSPIDriver::spiRead(uint8_t reg)
{
   c27e0:	b538      	push	{r3, r4, r5, lr}
   c27e2:	4604      	mov	r4, r0
   c27e4:	460d      	mov	r5, r1
    uint8_t val;
    ATOMIC_BLOCK_START;
    digitalWrite(_slaveSelectPin, LOW);
   c27e6:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   c27ea:	2100      	movs	r1, #0
   c27ec:	f004 fef5 	bl	c75da <digitalWrite>
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   c27f0:	6a20      	ldr	r0, [r4, #32]
   c27f2:	6803      	ldr	r3, [r0, #0]
   c27f4:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   c27f8:	681b      	ldr	r3, [r3, #0]
   c27fa:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   c27fc:	6a20      	ldr	r0, [r4, #32]
   c27fe:	6803      	ldr	r3, [r0, #0]
   c2800:	2100      	movs	r1, #0
   c2802:	681b      	ldr	r3, [r3, #0]
   c2804:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
   c2806:	2101      	movs	r1, #1
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   c2808:	4605      	mov	r5, r0
    digitalWrite(_slaveSelectPin, HIGH);
   c280a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c280e:	f004 fee4 	bl	c75da <digitalWrite>
    ATOMIC_BLOCK_END;
    return val;
}
   c2812:	4628      	mov	r0, r5
   c2814:	bd38      	pop	{r3, r4, r5, pc}

000c2816 <_ZN11RHSPIDriver8spiWriteEhh>:

uint8_t RHSPIDriver::spiWrite(uint8_t reg, uint8_t val)
{
   c2816:	b570      	push	{r4, r5, r6, lr}
   c2818:	4604      	mov	r4, r0
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
   c281a:	6a00      	ldr	r0, [r0, #32]
   c281c:	6803      	ldr	r3, [r0, #0]
   c281e:	6a1b      	ldr	r3, [r3, #32]
{
   c2820:	4616      	mov	r6, r2
   c2822:	460d      	mov	r5, r1
    _spi.beginTransaction();
   c2824:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
   c2826:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c282a:	2100      	movs	r1, #0
   c282c:	f004 fed5 	bl	c75da <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   c2830:	6a20      	ldr	r0, [r4, #32]
   c2832:	6803      	ldr	r3, [r0, #0]
   c2834:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   c2838:	681b      	ldr	r3, [r3, #0]
   c283a:	4798      	blx	r3
   c283c:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   c283e:	6a20      	ldr	r0, [r4, #32]
   c2840:	6803      	ldr	r3, [r0, #0]
   c2842:	4631      	mov	r1, r6
   c2844:	681b      	ldr	r3, [r3, #0]
   c2846:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, HIGH);
   c2848:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c284c:	2101      	movs	r1, #1
   c284e:	f004 fec4 	bl	c75da <digitalWrite>
    _spi.endTransaction();
   c2852:	6a20      	ldr	r0, [r4, #32]
   c2854:	6803      	ldr	r3, [r0, #0]
   c2856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c2858:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
   c285a:	4628      	mov	r0, r5
   c285c:	bd70      	pop	{r4, r5, r6, pc}

000c285e <_ZN11RHSPIDriver12spiBurstReadEhPhh>:

uint8_t RHSPIDriver::spiBurstRead(uint8_t reg, uint8_t* dest, uint8_t len)
{
   c285e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c2860:	4604      	mov	r4, r0
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
   c2862:	6a00      	ldr	r0, [r0, #32]
{
   c2864:	461e      	mov	r6, r3
    _spi.beginTransaction();
   c2866:	6803      	ldr	r3, [r0, #0]
   c2868:	6a1b      	ldr	r3, [r3, #32]
{
   c286a:	460f      	mov	r7, r1
   c286c:	4615      	mov	r5, r2
    _spi.beginTransaction();
   c286e:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
   c2870:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c2874:	2100      	movs	r1, #0
   c2876:	f004 feb0 	bl	c75da <digitalWrite>
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   c287a:	6a20      	ldr	r0, [r4, #32]
   c287c:	6803      	ldr	r3, [r0, #0]
   c287e:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   c2882:	681b      	ldr	r3, [r3, #0]
   c2884:	4798      	blx	r3
   c2886:	442e      	add	r6, r5
   c2888:	4607      	mov	r7, r0
    while (len--)
   c288a:	42b5      	cmp	r5, r6
   c288c:	d007      	beq.n	c289e <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x40>
	*dest++ = _spi.transfer(0);
   c288e:	6a20      	ldr	r0, [r4, #32]
   c2890:	6803      	ldr	r3, [r0, #0]
   c2892:	2100      	movs	r1, #0
   c2894:	681b      	ldr	r3, [r3, #0]
   c2896:	4798      	blx	r3
   c2898:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   c289c:	e7f5      	b.n	c288a <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
   c289e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c28a2:	2101      	movs	r1, #1
   c28a4:	f004 fe99 	bl	c75da <digitalWrite>
    _spi.endTransaction();
   c28a8:	6a20      	ldr	r0, [r4, #32]
   c28aa:	6803      	ldr	r3, [r0, #0]
   c28ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c28ae:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
   c28b0:	4638      	mov	r0, r7
   c28b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c28b4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:

uint8_t RHSPIDriver::spiBurstWrite(uint8_t reg, const uint8_t* src, uint8_t len)
{
   c28b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c28b6:	4604      	mov	r4, r0
    uint8_t status = 0;
    ATOMIC_BLOCK_START;
    _spi.beginTransaction();
   c28b8:	6a00      	ldr	r0, [r0, #32]
{
   c28ba:	461e      	mov	r6, r3
    _spi.beginTransaction();
   c28bc:	6803      	ldr	r3, [r0, #0]
   c28be:	6a1b      	ldr	r3, [r3, #32]
{
   c28c0:	460f      	mov	r7, r1
   c28c2:	4615      	mov	r5, r2
    _spi.beginTransaction();
   c28c4:	4798      	blx	r3
    digitalWrite(_slaveSelectPin, LOW);
   c28c6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c28ca:	2100      	movs	r1, #0
   c28cc:	f004 fe85 	bl	c75da <digitalWrite>
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   c28d0:	6a20      	ldr	r0, [r4, #32]
   c28d2:	6803      	ldr	r3, [r0, #0]
   c28d4:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   c28d8:	681b      	ldr	r3, [r3, #0]
   c28da:	4798      	blx	r3
   c28dc:	442e      	add	r6, r5
   c28de:	4607      	mov	r7, r0
    while (len--)
   c28e0:	42b5      	cmp	r5, r6
   c28e2:	d006      	beq.n	c28f2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3e>
	_spi.transfer(*src++);
   c28e4:	6a20      	ldr	r0, [r4, #32]
   c28e6:	f815 1b01 	ldrb.w	r1, [r5], #1
   c28ea:	6803      	ldr	r3, [r0, #0]
   c28ec:	681b      	ldr	r3, [r3, #0]
   c28ee:	4798      	blx	r3
    while (len--)
   c28f0:	e7f6      	b.n	c28e0 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2c>
    digitalWrite(_slaveSelectPin, HIGH);
   c28f2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   c28f6:	2101      	movs	r1, #1
   c28f8:	f004 fe6f 	bl	c75da <digitalWrite>
    _spi.endTransaction();
   c28fc:	6a20      	ldr	r0, [r4, #32]
   c28fe:	6803      	ldr	r3, [r0, #0]
   c2900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c2902:	4798      	blx	r3
    ATOMIC_BLOCK_END;
    return status;
}
   c2904:	4638      	mov	r0, r7
   c2906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c2908 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _slaveSelectPin = slaveSelectPin;
}

void RHSPIDriver::spiUsingInterrupt(uint8_t interruptNumber)
{
    _spi.usingInterrupt(interruptNumber);
   c2908:	6a00      	ldr	r0, [r0, #32]
   c290a:	6803      	ldr	r3, [r0, #0]
   c290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c290e:	4718      	bx	r3

000c2910 <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   c2910:	20fb      	movs	r0, #251	; 0xfb
   c2912:	4770      	bx	lr

000c2914 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   c2914:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   c2916:	7903      	ldrb	r3, [r0, #4]
   c2918:	2b05      	cmp	r3, #5
{
   c291a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   c291c:	d00a      	beq.n	c2934 <_ZN7RH_RF9515isChannelActiveEv+0x20>
    {
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   c291e:	2207      	movs	r2, #7
   c2920:	2101      	movs	r1, #1
   c2922:	f7ff ff78 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   c2926:	2280      	movs	r2, #128	; 0x80
   c2928:	2140      	movs	r1, #64	; 0x40
   c292a:	4620      	mov	r0, r4
   c292c:	f7ff ff73 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   c2930:	2305      	movs	r3, #5
   c2932:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   c2934:	7923      	ldrb	r3, [r4, #4]
   c2936:	2b05      	cmp	r3, #5
   c2938:	d0fc      	beq.n	c2934 <_ZN7RH_RF9515isChannelActiveEv+0x20>
        YIELD;

    return _cad;
   c293a:	7e20      	ldrb	r0, [r4, #24]
}
   c293c:	bd10      	pop	{r4, pc}

000c293e <_ZN7RH_RF955sleepEv>:
{
   c293e:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   c2940:	7903      	ldrb	r3, [r0, #4]
   c2942:	2b01      	cmp	r3, #1
{
   c2944:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   c2946:	d005      	beq.n	c2954 <_ZN7RH_RF955sleepEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   c2948:	2200      	movs	r2, #0
   c294a:	2101      	movs	r1, #1
   c294c:	f7ff ff63 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   c2950:	2301      	movs	r3, #1
   c2952:	7123      	strb	r3, [r4, #4]
}
   c2954:	2001      	movs	r0, #1
   c2956:	bd10      	pop	{r4, pc}

000c2958 <_ZN7RH_RF954recvEPhS0_>:
{
   c2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   c295a:	6803      	ldr	r3, [r0, #0]
   c295c:	685b      	ldr	r3, [r3, #4]
{
   c295e:	4604      	mov	r4, r0
   c2960:	460f      	mov	r7, r1
   c2962:	4615      	mov	r5, r2
    if (!available())
   c2964:	4798      	blx	r3
   c2966:	4606      	mov	r6, r0
   c2968:	b1b0      	cbz	r0, c2998 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   c296a:	b187      	cbz	r7, c298e <_ZN7RH_RF954recvEPhS0_+0x36>
   c296c:	b17d      	cbz	r5, c298e <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   c296e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   c2972:	782a      	ldrb	r2, [r5, #0]
   c2974:	3b03      	subs	r3, #3
   c2976:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   c2978:	bfde      	ittt	le
   c297a:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   c297e:	3b04      	suble	r3, #4
   c2980:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   c2982:	782a      	ldrb	r2, [r5, #0]
   c2984:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   c2988:	4638      	mov	r0, r7
   c298a:	f007 fc0d 	bl	ca1a8 <memcpy>
    _rxBufValid = false;
   c298e:	2300      	movs	r3, #0
   c2990:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   c2994:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   c2998:	4630      	mov	r0, r6
   c299a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c299c <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 23)
   c299c:	2917      	cmp	r1, #23
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   c299e:	b538      	push	{r3, r4, r5, lr}
   c29a0:	4605      	mov	r5, r0
   c29a2:	460c      	mov	r4, r1
	if (power > 23)
   c29a4:	dc14      	bgt.n	c29d0 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 5)
   c29a6:	2904      	cmp	r1, #4
   c29a8:	dd14      	ble.n	c29d4 <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 20)
   c29aa:	2914      	cmp	r1, #20
   c29ac:	dd13      	ble.n	c29d6 <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   c29ae:	2207      	movs	r2, #7
   c29b0:	214d      	movs	r1, #77	; 0x4d
   c29b2:	4628      	mov	r0, r5
   c29b4:	f7ff ff2f 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   c29b8:	3c03      	subs	r4, #3
   c29ba:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
   c29bc:	1f62      	subs	r2, r4, #5
   c29be:	f062 027f 	orn	r2, r2, #127	; 0x7f
   c29c2:	4628      	mov	r0, r5
   c29c4:	b2d2      	uxtb	r2, r2
}
   c29c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
   c29ca:	2109      	movs	r1, #9
   c29cc:	f7ff bf23 	b.w	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 23;
   c29d0:	2417      	movs	r4, #23
   c29d2:	e7ec      	b.n	c29ae <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 5;
   c29d4:	2405      	movs	r4, #5
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   c29d6:	2204      	movs	r2, #4
   c29d8:	214d      	movs	r1, #77	; 0x4d
   c29da:	4628      	mov	r0, r5
   c29dc:	f7ff ff1b 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
   c29e0:	e7ec      	b.n	c29bc <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000c29e4 <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   c29e4:	b538      	push	{r3, r4, r5, lr}
   c29e6:	4604      	mov	r4, r0
   c29e8:	4615      	mov	r5, r2
    _rxBufValid(0)
   c29ea:	461a      	mov	r2, r3
   c29ec:	f7ff fee8 	bl	c27c0 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   c29f0:	4b05      	ldr	r3, [pc, #20]	; (c2a08 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x24>)
   c29f2:	6023      	str	r3, [r4, #0]
   c29f4:	2300      	movs	r3, #0
   c29f6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _myInterruptIndex = 0xff; // Not allocated yet
   c29fa:	23ff      	movs	r3, #255	; 0xff
    _interruptPin = interruptPin;
   c29fc:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _myInterruptIndex = 0xff; // Not allocated yet
   c2a00:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   c2a04:	4620      	mov	r0, r4
   c2a06:	bd38      	pop	{r3, r4, r5, pc}
   c2a08:	000ccd30 	.word	0x000ccd30

000c2a0c <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   c2a0c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   c2a10:	2b03      	cmp	r3, #3
   c2a12:	d91b      	bls.n	c2a4c <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   c2a14:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   c2a18:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   c2a1a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   c2a1e:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   c2a20:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   c2a24:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   c2a26:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   c2a2a:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   c2a2c:	7983      	ldrb	r3, [r0, #6]
   c2a2e:	b933      	cbnz	r3, c2a3e <_ZN7RH_RF9513validateRxBufEv+0x32>
   c2a30:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   c2a32:	7942      	ldrb	r2, [r0, #5]
   c2a34:	429a      	cmp	r2, r3
   c2a36:	d002      	beq.n	c2a3e <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   c2a38:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   c2a3a:	2bff      	cmp	r3, #255	; 0xff
   c2a3c:	d106      	bne.n	c2a4c <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   c2a3e:	8a83      	ldrh	r3, [r0, #20]
   c2a40:	3301      	adds	r3, #1
   c2a42:	b29b      	uxth	r3, r3
   c2a44:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   c2a46:	2301      	movs	r3, #1
   c2a48:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   c2a4c:	4770      	bx	lr
	...

000c2a50 <_ZN7RH_RF9512setFrequencyEf>:
{
   c2a50:	b538      	push	{r3, r4, r5, lr}
   c2a52:	4604      	mov	r4, r0
   c2a54:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   c2a58:	ee10 0a10 	vmov	r0, s0
{
   c2a5c:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   c2a60:	f7f1 fc42 	bl	b42e8 <__aeabi_f2d>
   c2a64:	a317      	add	r3, pc, #92	; (adr r3, c2ac4 <_ZN7RH_RF9512setFrequencyEf+0x74>)
   c2a66:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a6a:	f7f1 fc95 	bl	b4398 <__aeabi_dmul>
   c2a6e:	a317      	add	r3, pc, #92	; (adr r3, c2acc <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   c2a70:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2a74:	f7f1 fdba 	bl	b45ec <__aeabi_ddiv>
   c2a78:	f7f1 ff66 	bl	b4948 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   c2a7c:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   c2a7e:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   c2a80:	f3c0 4207 	ubfx	r2, r0, #16, #8
   c2a84:	4620      	mov	r0, r4
   c2a86:	f7ff fec6 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   c2a8a:	f3c5 2207 	ubfx	r2, r5, #8, #8
   c2a8e:	2107      	movs	r1, #7
   c2a90:	4620      	mov	r0, r4
   c2a92:	f7ff fec0 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   c2a96:	b2ea      	uxtb	r2, r5
   c2a98:	2108      	movs	r1, #8
   c2a9a:	4620      	mov	r0, r4
   c2a9c:	f7ff febb 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   c2aa0:	eddf 7a07 	vldr	s15, [pc, #28]	; c2ac0 <_ZN7RH_RF9512setFrequencyEf+0x70>
   c2aa4:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   c2aa8:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   c2aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c2ab0:	bfac      	ite	ge
   c2ab2:	2301      	movge	r3, #1
   c2ab4:	2300      	movlt	r3, #0
}
   c2ab6:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   c2ab8:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   c2abc:	bd38      	pop	{r3, r4, r5, pc}
   c2abe:	bf00      	nop
   c2ac0:	4442c000 	.word	0x4442c000
   c2ac4:	00000000 	.word	0x00000000
   c2ac8:	412e8480 	.word	0x412e8480
   c2acc:	00000000 	.word	0x00000000
   c2ad0:	404e8480 	.word	0x404e8480

000c2ad4 <_ZN7RH_RF9511setModeIdleEv>:
{
   c2ad4:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   c2ad6:	7903      	ldrb	r3, [r0, #4]
   c2ad8:	2b02      	cmp	r3, #2
{
   c2ada:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   c2adc:	d005      	beq.n	c2aea <_ZN7RH_RF9511setModeIdleEv+0x16>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   c2ade:	2201      	movs	r2, #1
   c2ae0:	4611      	mov	r1, r2
   c2ae2:	f7ff fe98 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   c2ae6:	2302      	movs	r3, #2
   c2ae8:	7123      	strb	r3, [r4, #4]
}
   c2aea:	bd10      	pop	{r4, pc}

000c2aec <_ZN7RH_RF9515handleInterruptEv>:
{
   c2aec:	b538      	push	{r3, r4, r5, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   c2aee:	2112      	movs	r1, #18
{
   c2af0:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   c2af2:	f7ff fe75 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   c2af6:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   c2af8:	4605      	mov	r5, r0
    uint8_t crc_present = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   c2afa:	4620      	mov	r0, r4
   c2afc:	f7ff fe70 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
    if (_mode == RHModeRx
   c2b00:	7923      	ldrb	r3, [r4, #4]
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   c2b02:	2b04      	cmp	r3, #4
   c2b04:	d117      	bne.n	c2b36 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	    | !(crc_present & RH_RF95_RX_PAYLOAD_CRC_IS_ON)))
   c2b06:	f080 0040 	eor.w	r0, r0, #64	; 0x40
   c2b0a:	f3c0 1080 	ubfx	r0, r0, #6, #1
	&& ((irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   c2b0e:	f005 03a0 	and.w	r3, r5, #160	; 0xa0
   c2b12:	4303      	orrs	r3, r0
   c2b14:	d00f      	beq.n	c2b36 <_ZN7RH_RF9515handleInterruptEv+0x4a>
	_rxBad++;
   c2b16:	8a63      	ldrh	r3, [r4, #18]
   c2b18:	3301      	adds	r3, #1
   c2b1a:	b29b      	uxth	r3, r3
   c2b1c:	8263      	strh	r3, [r4, #18]
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   c2b1e:	22ff      	movs	r2, #255	; 0xff
   c2b20:	2112      	movs	r1, #18
   c2b22:	4620      	mov	r0, r4
   c2b24:	f7ff fe77 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   c2b28:	4620      	mov	r0, r4
   c2b2a:	22ff      	movs	r2, #255	; 0xff
}
   c2b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   c2b30:	2112      	movs	r1, #18
   c2b32:	f7ff be70 	b.w	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   c2b36:	7923      	ldrb	r3, [r4, #4]
   c2b38:	2b04      	cmp	r3, #4
   c2b3a:	d101      	bne.n	c2b40 <_ZN7RH_RF9515handleInterruptEv+0x54>
   c2b3c:	0669      	lsls	r1, r5, #25
   c2b3e:	d40d      	bmi.n	c2b5c <_ZN7RH_RF9515handleInterruptEv+0x70>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   c2b40:	7923      	ldrb	r3, [r4, #4]
   c2b42:	2b03      	cmp	r3, #3
   c2b44:	d101      	bne.n	c2b4a <_ZN7RH_RF9515handleInterruptEv+0x5e>
   c2b46:	072a      	lsls	r2, r5, #28
   c2b48:	d458      	bmi.n	c2bfc <_ZN7RH_RF9515handleInterruptEv+0x110>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   c2b4a:	7923      	ldrb	r3, [r4, #4]
   c2b4c:	2b05      	cmp	r3, #5
   c2b4e:	d1e6      	bne.n	c2b1e <_ZN7RH_RF9515handleInterruptEv+0x32>
   c2b50:	076b      	lsls	r3, r5, #29
   c2b52:	d5e4      	bpl.n	c2b1e <_ZN7RH_RF9515handleInterruptEv+0x32>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   c2b54:	f005 0501 	and.w	r5, r5, #1
   c2b58:	7625      	strb	r5, [r4, #24]
   c2b5a:	e053      	b.n	c2c04 <_ZN7RH_RF9515handleInterruptEv+0x118>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   c2b5c:	2113      	movs	r1, #19
   c2b5e:	4620      	mov	r0, r4
   c2b60:	f7ff fe3e 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   c2b64:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   c2b66:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   c2b68:	4620      	mov	r0, r4
   c2b6a:	f7ff fe39 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
   c2b6e:	210d      	movs	r1, #13
   c2b70:	4602      	mov	r2, r0
   c2b72:	4620      	mov	r0, r4
   c2b74:	f7ff fe4f 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   c2b78:	462b      	mov	r3, r5
   c2b7a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   c2b7e:	2100      	movs	r1, #0
   c2b80:	4620      	mov	r0, r4
   c2b82:	f7ff fe6c 	bl	c285e <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   c2b86:	22ff      	movs	r2, #255	; 0xff
   c2b88:	2112      	movs	r1, #18
	_bufLen = len;
   c2b8a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   c2b8e:	4620      	mov	r0, r4
   c2b90:	f7ff fe41 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   c2b94:	2119      	movs	r1, #25
   c2b96:	4620      	mov	r0, r4
   c2b98:	f7ff fe22 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
   c2b9c:	b240      	sxtb	r0, r0
   c2b9e:	2800      	cmp	r0, #0
   c2ba0:	bfb8      	it	lt
   c2ba2:	3003      	addlt	r0, #3
   c2ba4:	1080      	asrs	r0, r0, #2
   c2ba6:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   c2baa:	211a      	movs	r1, #26
   c2bac:	4620      	mov	r0, r4
   c2bae:	f7ff fe17 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   c2bb2:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   c2bb6:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   c2bb8:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   c2bba:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   c2bbc:	bfa9      	itett	ge
   c2bbe:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   c2bc0:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   c2bc2:	b21b      	sxthge	r3, r3
   c2bc4:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   c2bc6:	bfb2      	itee	lt
   c2bc8:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   c2bca:	220f      	movge	r2, #15
   c2bcc:	fb93 f3f2 	sdivge	r3, r3, r2
   c2bd0:	b21b      	sxth	r3, r3
   c2bd2:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   c2bd4:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   c2bd8:	b16b      	cbz	r3, c2bf6 <_ZN7RH_RF9515handleInterruptEv+0x10a>
	    _lastRssi -= 157;
   c2bda:	8a23      	ldrh	r3, [r4, #16]
   c2bdc:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   c2bde:	b21b      	sxth	r3, r3
   c2be0:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   c2be2:	4620      	mov	r0, r4
   c2be4:	f7ff ff12 	bl	c2a0c <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   c2be8:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   c2bec:	2b00      	cmp	r3, #0
   c2bee:	d096      	beq.n	c2b1e <_ZN7RH_RF9515handleInterruptEv+0x32>
        setModeIdle();
   c2bf0:	f7ff ff70 	bl	c2ad4 <_ZN7RH_RF9511setModeIdleEv>
   c2bf4:	e793      	b.n	c2b1e <_ZN7RH_RF9515handleInterruptEv+0x32>
	    _lastRssi -= 164;
   c2bf6:	8a23      	ldrh	r3, [r4, #16]
   c2bf8:	3ba4      	subs	r3, #164	; 0xa4
   c2bfa:	e7f0      	b.n	c2bde <_ZN7RH_RF9515handleInterruptEv+0xf2>
	_txGood++;
   c2bfc:	8ae3      	ldrh	r3, [r4, #22]
   c2bfe:	3301      	adds	r3, #1
   c2c00:	b29b      	uxth	r3, r3
   c2c02:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   c2c04:	4620      	mov	r0, r4
   c2c06:	e7f3      	b.n	c2bf0 <_ZN7RH_RF9515handleInterruptEv+0x104>

000c2c08 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   c2c08:	4b02      	ldr	r3, [pc, #8]	; (c2c14 <_ZN7RH_RF954isr0Ev+0xc>)
   c2c0a:	6818      	ldr	r0, [r3, #0]
   c2c0c:	b108      	cbz	r0, c2c12 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   c2c0e:	f7ff bf6d 	b.w	c2aec <_ZN7RH_RF9515handleInterruptEv>
}
   c2c12:	4770      	bx	lr
   c2c14:	2003e610 	.word	0x2003e610

000c2c18 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   c2c18:	4b02      	ldr	r3, [pc, #8]	; (c2c24 <_ZN7RH_RF954isr1Ev+0xc>)
   c2c1a:	6858      	ldr	r0, [r3, #4]
   c2c1c:	b108      	cbz	r0, c2c22 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   c2c1e:	f7ff bf65 	b.w	c2aec <_ZN7RH_RF9515handleInterruptEv>
}
   c2c22:	4770      	bx	lr
   c2c24:	2003e610 	.word	0x2003e610

000c2c28 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   c2c28:	4b02      	ldr	r3, [pc, #8]	; (c2c34 <_ZN7RH_RF954isr2Ev+0xc>)
   c2c2a:	6898      	ldr	r0, [r3, #8]
   c2c2c:	b108      	cbz	r0, c2c32 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   c2c2e:	f7ff bf5d 	b.w	c2aec <_ZN7RH_RF9515handleInterruptEv>
}
   c2c32:	4770      	bx	lr
   c2c34:	2003e610 	.word	0x2003e610

000c2c38 <_ZN7RH_RF959setModeRxEv>:
{
   c2c38:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   c2c3a:	7903      	ldrb	r3, [r0, #4]
   c2c3c:	2b04      	cmp	r3, #4
{
   c2c3e:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   c2c40:	d00a      	beq.n	c2c58 <_ZN7RH_RF959setModeRxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   c2c42:	2205      	movs	r2, #5
   c2c44:	2101      	movs	r1, #1
   c2c46:	f7ff fde6 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   c2c4a:	2200      	movs	r2, #0
   c2c4c:	2140      	movs	r1, #64	; 0x40
   c2c4e:	4620      	mov	r0, r4
   c2c50:	f7ff fde1 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   c2c54:	2304      	movs	r3, #4
   c2c56:	7123      	strb	r3, [r4, #4]
}
   c2c58:	bd10      	pop	{r4, pc}

000c2c5a <_ZN7RH_RF959availableEv>:
{
   c2c5a:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   c2c5c:	7903      	ldrb	r3, [r0, #4]
   c2c5e:	2b03      	cmp	r3, #3
{
   c2c60:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   c2c62:	d005      	beq.n	c2c70 <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   c2c64:	f7ff ffe8 	bl	c2c38 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   c2c68:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   c2c6c:	b2c0      	uxtb	r0, r0
}
   c2c6e:	bd10      	pop	{r4, pc}
	return false;
   c2c70:	2000      	movs	r0, #0
   c2c72:	e7fc      	b.n	c2c6e <_ZN7RH_RF959availableEv+0x14>

000c2c74 <_ZN7RH_RF959setModeTxEv>:
{
   c2c74:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   c2c76:	7903      	ldrb	r3, [r0, #4]
   c2c78:	2b03      	cmp	r3, #3
{
   c2c7a:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   c2c7c:	d00a      	beq.n	c2c94 <_ZN7RH_RF959setModeTxEv+0x20>
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   c2c7e:	2203      	movs	r2, #3
   c2c80:	2101      	movs	r1, #1
   c2c82:	f7ff fdc8 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   c2c86:	2240      	movs	r2, #64	; 0x40
   c2c88:	4611      	mov	r1, r2
   c2c8a:	4620      	mov	r0, r4
   c2c8c:	f7ff fdc3 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   c2c90:	2303      	movs	r3, #3
   c2c92:	7123      	strb	r3, [r4, #4]
}
   c2c94:	bd10      	pop	{r4, pc}

000c2c96 <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   c2c96:	2afb      	cmp	r2, #251	; 0xfb
{
   c2c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c2c9a:	4604      	mov	r4, r0
   c2c9c:	460f      	mov	r7, r1
   c2c9e:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   c2ca0:	d902      	bls.n	c2ca8 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   c2ca2:	2600      	movs	r6, #0
}
   c2ca4:	4630      	mov	r0, r6
   c2ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   c2ca8:	6803      	ldr	r3, [r0, #0]
   c2caa:	699b      	ldr	r3, [r3, #24]
   c2cac:	4798      	blx	r3
    setModeIdle();
   c2cae:	4620      	mov	r0, r4
   c2cb0:	f7ff ff10 	bl	c2ad4 <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   c2cb4:	6823      	ldr	r3, [r4, #0]
   c2cb6:	4620      	mov	r0, r4
   c2cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c2cba:	4798      	blx	r3
   c2cbc:	4606      	mov	r6, r0
   c2cbe:	2800      	cmp	r0, #0
   c2cc0:	d0ef      	beq.n	c2ca2 <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   c2cc2:	2200      	movs	r2, #0
   c2cc4:	210d      	movs	r1, #13
   c2cc6:	4620      	mov	r0, r4
   c2cc8:	f7ff fda5 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   c2ccc:	7ae2      	ldrb	r2, [r4, #11]
   c2cce:	2100      	movs	r1, #0
   c2cd0:	4620      	mov	r0, r4
   c2cd2:	f7ff fda0 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   c2cd6:	7b22      	ldrb	r2, [r4, #12]
   c2cd8:	2100      	movs	r1, #0
   c2cda:	4620      	mov	r0, r4
   c2cdc:	f7ff fd9b 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   c2ce0:	7b62      	ldrb	r2, [r4, #13]
   c2ce2:	2100      	movs	r1, #0
   c2ce4:	4620      	mov	r0, r4
   c2ce6:	f7ff fd96 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   c2cea:	7ba2      	ldrb	r2, [r4, #14]
   c2cec:	2100      	movs	r1, #0
   c2cee:	4620      	mov	r0, r4
   c2cf0:	f7ff fd91 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   c2cf4:	462b      	mov	r3, r5
   c2cf6:	463a      	mov	r2, r7
   c2cf8:	2100      	movs	r1, #0
   c2cfa:	4620      	mov	r0, r4
   c2cfc:	f7ff fdda 	bl	c28b4 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   c2d00:	1d2a      	adds	r2, r5, #4
   c2d02:	b2d2      	uxtb	r2, r2
   c2d04:	2122      	movs	r1, #34	; 0x22
   c2d06:	4620      	mov	r0, r4
   c2d08:	f7ff fd85 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   c2d0c:	4620      	mov	r0, r4
   c2d0e:	f7ff ffb1 	bl	c2c74 <_ZN7RH_RF959setModeTxEv>
    return true;
   c2d12:	e7c7      	b.n	c2ca4 <_ZN7RH_RF954sendEPKhh+0xe>

000c2d14 <_ZN7RH_RF9510setTxPowerEab>:
    if (useRFO)
   c2d14:	b15a      	cbz	r2, c2d2e <_ZN7RH_RF9510setTxPowerEab+0x1a>
	if (power > 14)
   c2d16:	ea41 72e1 	orr.w	r2, r1, r1, asr #31
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
   c2d1a:	2a0e      	cmp	r2, #14
   c2d1c:	bfa8      	it	ge
   c2d1e:	220e      	movge	r2, #14
   c2d20:	3201      	adds	r2, #1
   c2d22:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   c2d26:	b2d2      	uxtb	r2, r2
   c2d28:	2109      	movs	r1, #9
   c2d2a:	f7ff bd74 	b.w	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
   c2d2e:	f7ff be35 	b.w	c299c <_ZN7RH_RF9510setTxPowerEab.part.0>

000c2d32 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   c2d32:	b538      	push	{r3, r4, r5, lr}
   c2d34:	460c      	mov	r4, r1
   c2d36:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   c2d38:	780a      	ldrb	r2, [r1, #0]
   c2d3a:	211d      	movs	r1, #29
   c2d3c:	f7ff fd6b 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   c2d40:	7862      	ldrb	r2, [r4, #1]
   c2d42:	211e      	movs	r1, #30
   c2d44:	4628      	mov	r0, r5
   c2d46:	f7ff fd66 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   c2d4a:	78a2      	ldrb	r2, [r4, #2]
   c2d4c:	4628      	mov	r0, r5
   c2d4e:	2126      	movs	r1, #38	; 0x26
}
   c2d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   c2d54:	f7ff bd5f 	b.w	c2816 <_ZN11RHSPIDriver8spiWriteEhh>

000c2d58 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   c2d58:	2904      	cmp	r1, #4
{
   c2d5a:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   c2d5c:	d80f      	bhi.n	c2d7e <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   c2d5e:	4b09      	ldr	r3, [pc, #36]	; (c2d84 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   c2d60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   c2d64:	185c      	adds	r4, r3, r1
   c2d66:	5a5a      	ldrh	r2, [r3, r1]
   c2d68:	78a3      	ldrb	r3, [r4, #2]
   c2d6a:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   c2d6e:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   c2d70:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   c2d74:	f7ff ffdd 	bl	c2d32 <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   c2d78:	2001      	movs	r0, #1
}
   c2d7a:	b002      	add	sp, #8
   c2d7c:	bd10      	pop	{r4, pc}
        return false;
   c2d7e:	2000      	movs	r0, #0
   c2d80:	e7fb      	b.n	c2d7a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   c2d82:	bf00      	nop
   c2d84:	000ccd1c 	.word	0x000ccd1c

000c2d88 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   c2d88:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   c2d8a:	0a0a      	lsrs	r2, r1, #8
{
   c2d8c:	4605      	mov	r5, r0
   c2d8e:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   c2d90:	2120      	movs	r1, #32
   c2d92:	f7ff fd40 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   c2d96:	b2e2      	uxtb	r2, r4
   c2d98:	4628      	mov	r0, r5
   c2d9a:	2121      	movs	r1, #33	; 0x21
}
   c2d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   c2da0:	f7ff bd39 	b.w	c2816 <_ZN11RHSPIDriver8spiWriteEhh>

000c2da4 <_ZN7RH_RF954initEv>:
{
   c2da4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c2da6:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   c2da8:	f7ff fcf4 	bl	c2794 <_ZN11RHSPIDriver4initEv>
   c2dac:	4605      	mov	r5, r0
   c2dae:	b918      	cbnz	r0, c2db8 <_ZN7RH_RF954initEv+0x14>
	return false;
   c2db0:	2500      	movs	r5, #0
}
   c2db2:	4628      	mov	r0, r5
   c2db4:	b002      	add	sp, #8
   c2db6:	bd70      	pop	{r4, r5, r6, pc}
    int interruptNumber = digitalPinToInterrupt(_interruptPin);
   c2db8:	f894 6026 	ldrb.w	r6, [r4, #38]	; 0x26
    spiUsingInterrupt(interruptNumber);
   c2dbc:	4620      	mov	r0, r4
   c2dbe:	4631      	mov	r1, r6
   c2dc0:	f7ff fda2 	bl	c2908 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   c2dc4:	2280      	movs	r2, #128	; 0x80
   c2dc6:	2101      	movs	r1, #1
   c2dc8:	4620      	mov	r0, r4
   c2dca:	f7ff fd24 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   c2dce:	200a      	movs	r0, #10
   c2dd0:	f002 fcae 	bl	c5730 <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   c2dd4:	2101      	movs	r1, #1
   c2dd6:	4620      	mov	r0, r4
   c2dd8:	f7ff fd02 	bl	c27e0 <_ZN11RHSPIDriver7spiReadEh>
   c2ddc:	2880      	cmp	r0, #128	; 0x80
   c2dde:	d1e7      	bne.n	c2db0 <_ZN7RH_RF954initEv+0xc>
    pinMode(_interruptPin, INPUT); 
   c2de0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   c2de4:	2100      	movs	r1, #0
   c2de6:	f004 fbe7 	bl	c75b8 <pinMode>
    if (_myInterruptIndex == 0xff)
   c2dea:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   c2dee:	2bff      	cmp	r3, #255	; 0xff
   c2df0:	d107      	bne.n	c2e02 <_ZN7RH_RF954initEv+0x5e>
	if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   c2df2:	4a23      	ldr	r2, [pc, #140]	; (c2e80 <_ZN7RH_RF954initEv+0xdc>)
   c2df4:	7813      	ldrb	r3, [r2, #0]
   c2df6:	2b03      	cmp	r3, #3
   c2df8:	d8da      	bhi.n	c2db0 <_ZN7RH_RF954initEv+0xc>
	    _myInterruptIndex = _interruptCount++;
   c2dfa:	1c59      	adds	r1, r3, #1
   c2dfc:	7011      	strb	r1, [r2, #0]
   c2dfe:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _deviceForInterrupt[_myInterruptIndex] = this;
   c2e02:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   c2e06:	4b1f      	ldr	r3, [pc, #124]	; (c2e84 <_ZN7RH_RF954initEv+0xe0>)
   c2e08:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    if (_myInterruptIndex == 0)
   c2e0c:	bb32      	cbnz	r2, c2e5c <_ZN7RH_RF954initEv+0xb8>
	attachInterrupt(interruptNumber, isr0, RISING);
   c2e0e:	491e      	ldr	r1, [pc, #120]	; (c2e88 <_ZN7RH_RF954initEv+0xe4>)
   c2e10:	9200      	str	r2, [sp, #0]
   c2e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2e16:	2201      	movs	r2, #1
	attachInterrupt(interruptNumber, isr2, RISING);
   c2e18:	4630      	mov	r0, r6
   c2e1a:	f003 fabf 	bl	c639c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   c2e1e:	2200      	movs	r2, #0
   c2e20:	210e      	movs	r1, #14
   c2e22:	4620      	mov	r0, r4
   c2e24:	f7ff fcf7 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   c2e28:	2200      	movs	r2, #0
   c2e2a:	210f      	movs	r1, #15
   c2e2c:	4620      	mov	r0, r4
   c2e2e:	f7ff fcf2 	bl	c2816 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   c2e32:	4620      	mov	r0, r4
   c2e34:	f7ff fe4e 	bl	c2ad4 <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   c2e38:	2100      	movs	r1, #0
   c2e3a:	4620      	mov	r0, r4
   c2e3c:	f7ff ff8c 	bl	c2d58 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   c2e40:	2108      	movs	r1, #8
   c2e42:	4620      	mov	r0, r4
   c2e44:	f7ff ffa0 	bl	c2d88 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   c2e48:	ed9f 0a10 	vldr	s0, [pc, #64]	; c2e8c <_ZN7RH_RF954initEv+0xe8>
   c2e4c:	4620      	mov	r0, r4
   c2e4e:	f7ff fdff 	bl	c2a50 <_ZN7RH_RF9512setFrequencyEf>
    if (useRFO)
   c2e52:	210d      	movs	r1, #13
   c2e54:	4620      	mov	r0, r4
   c2e56:	f7ff fda1 	bl	c299c <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   c2e5a:	e7aa      	b.n	c2db2 <_ZN7RH_RF954initEv+0xe>
    else if (_myInterruptIndex == 1)
   c2e5c:	2a01      	cmp	r2, #1
   c2e5e:	f04f 0300 	mov.w	r3, #0
   c2e62:	d104      	bne.n	c2e6e <_ZN7RH_RF954initEv+0xca>
	attachInterrupt(interruptNumber, isr1, RISING);
   c2e64:	9300      	str	r3, [sp, #0]
   c2e66:	490a      	ldr	r1, [pc, #40]	; (c2e90 <_ZN7RH_RF954initEv+0xec>)
   c2e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2e6c:	e7d4      	b.n	c2e18 <_ZN7RH_RF954initEv+0x74>
    else if (_myInterruptIndex == 2)
   c2e6e:	2a02      	cmp	r2, #2
   c2e70:	d19e      	bne.n	c2db0 <_ZN7RH_RF954initEv+0xc>
	attachInterrupt(interruptNumber, isr2, RISING);
   c2e72:	9300      	str	r3, [sp, #0]
   c2e74:	4907      	ldr	r1, [pc, #28]	; (c2e94 <_ZN7RH_RF954initEv+0xf0>)
   c2e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c2e7a:	2201      	movs	r2, #1
   c2e7c:	e7cc      	b.n	c2e18 <_ZN7RH_RF954initEv+0x74>
   c2e7e:	bf00      	nop
   c2e80:	2003e60c 	.word	0x2003e60c
   c2e84:	2003e610 	.word	0x2003e610
   c2e88:	000c2c09 	.word	0x000c2c09
   c2e8c:	43d90000 	.word	0x43d90000
   c2e90:	000c2c19 	.word	0x000c2c19
   c2e94:	000c2c29 	.word	0x000c2c29

000c2e98 <_ZL9date2daysthh>:
    @param m Month
    @param d Day
    @return Number of days
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   c2e98:	b530      	push	{r4, r5, lr}
   c2e9a:	4c0f      	ldr	r4, [pc, #60]	; (c2ed8 <_ZL9date2daysthh+0x40>)
  if (y >= 2000U)
    y -= 2000U;
  uint16_t days = d;
   c2e9c:	2300      	movs	r3, #0
  for (uint8_t i = 1; i < m; ++i)
   c2e9e:	3301      	adds	r3, #1
   c2ea0:	b2dd      	uxtb	r5, r3
   c2ea2:	428d      	cmp	r5, r1
   c2ea4:	d204      	bcs.n	c2eb0 <_ZL9date2daysthh+0x18>
    days += pgm_read_byte(daysInMonth + i - 1);
   c2ea6:	f814 5b01 	ldrb.w	r5, [r4], #1
   c2eaa:	442a      	add	r2, r5
   c2eac:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
   c2eae:	e7f6      	b.n	c2e9e <_ZL9date2daysthh+0x6>
  if (m > 2 && y % 4 == 0)
   c2eb0:	2902      	cmp	r1, #2
   c2eb2:	d903      	bls.n	c2ebc <_ZL9date2daysthh+0x24>
   c2eb4:	0783      	lsls	r3, r0, #30
    ++days;
   c2eb6:	bf04      	itt	eq
   c2eb8:	3201      	addeq	r2, #1
   c2eba:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
   c2ebc:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   c2ec0:	1cc3      	adds	r3, r0, #3
   c2ec2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   c2ec6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   c2eca:	f3c3 038d 	ubfx	r3, r3, #2, #14
   c2ece:	3801      	subs	r0, #1
   c2ed0:	4418      	add	r0, r3
   c2ed2:	4410      	add	r0, r2
}
   c2ed4:	b280      	uxth	r0, r0
   c2ed6:	bd30      	pop	{r4, r5, pc}
   c2ed8:	000ccda0 	.word	0x000ccda0

000c2edc <_ZN8DateTimeC1Em>:

    @param t Time elapsed in seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
   c2edc:	4b22      	ldr	r3, [pc, #136]	; (c2f68 <_ZN8DateTimeC1Em+0x8c>)
DateTime::DateTime(uint32_t t) {
   c2ede:	b5f0      	push	{r4, r5, r6, r7, lr}
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
   c2ee0:	440b      	add	r3, r1

  ss = t % 60;
   c2ee2:	243c      	movs	r4, #60	; 0x3c
   c2ee4:	fbb3 f1f4 	udiv	r1, r3, r4
   c2ee8:	fb04 3311 	mls	r3, r4, r1, r3
  t /= 60;
  mm = t % 60;
   c2eec:	fbb1 f2f4 	udiv	r2, r1, r4
   c2ef0:	fb04 1112 	mls	r1, r4, r2, r1
   c2ef4:	7101      	strb	r1, [r0, #4]
  t /= 60;
  hh = t % 24;
   c2ef6:	2118      	movs	r1, #24
  ss = t % 60;
   c2ef8:	7143      	strb	r3, [r0, #5]
  hh = t % 24;
   c2efa:	fbb2 f3f1 	udiv	r3, r2, r1
   c2efe:	fb01 2213 	mls	r2, r1, r3, r2
   c2f02:	70c2      	strb	r2, [r0, #3]
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
   c2f04:	2200      	movs	r2, #0
  uint16_t days = t / 24;
   c2f06:	b29b      	uxth	r3, r3
  for (yOff = 0;; ++yOff) {
   c2f08:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
   c2f0a:	f240 166d 	movw	r6, #365	; 0x16d
      break;
    days -= 365 + leap;
   c2f0e:	f64f 6493 	movw	r4, #65171	; 0xfe93
    leap = yOff % 4 == 0;
   c2f12:	7802      	ldrb	r2, [r0, #0]
   c2f14:	f012 0503 	ands.w	r5, r2, #3
    if (days < 365U + leap)
   c2f18:	bf13      	iteet	ne
   c2f1a:	4637      	movne	r7, r6
   c2f1c:	f44f 77b7 	moveq.w	r7, #366	; 0x16e
   c2f20:	2101      	moveq	r1, #1
   c2f22:	2100      	movne	r1, #0
   c2f24:	42bb      	cmp	r3, r7
   c2f26:	d305      	bcc.n	c2f34 <_ZN8DateTimeC1Em+0x58>
    days -= 365 + leap;
   c2f28:	1a61      	subs	r1, r4, r1
   c2f2a:	440b      	add	r3, r1
  for (yOff = 0;; ++yOff) {
   c2f2c:	3201      	adds	r2, #1
    days -= 365 + leap;
   c2f2e:	b29b      	uxth	r3, r3
  for (yOff = 0;; ++yOff) {
   c2f30:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
   c2f32:	e7ee      	b.n	c2f12 <_ZN8DateTimeC1Em+0x36>
  }
  for (m = 1; m < 12; ++m) {
   c2f34:	2201      	movs	r2, #1
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   c2f36:	4e0d      	ldr	r6, [pc, #52]	; (c2f6c <_ZN8DateTimeC1Em+0x90>)
  for (m = 1; m < 12; ++m) {
   c2f38:	7042      	strb	r2, [r0, #1]
   c2f3a:	7842      	ldrb	r2, [r0, #1]
   c2f3c:	2a0b      	cmp	r2, #11
   c2f3e:	d80f      	bhi.n	c2f60 <_ZN8DateTimeC1Em+0x84>
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   c2f40:	18b1      	adds	r1, r6, r2
   c2f42:	f811 1c01 	ldrb.w	r1, [r1, #-1]
    if (leap && m == 2)
   c2f46:	b91d      	cbnz	r5, c2f50 <_ZN8DateTimeC1Em+0x74>
   c2f48:	2a02      	cmp	r2, #2
      ++daysPerMonth;
   c2f4a:	bf04      	itt	eq
   c2f4c:	3101      	addeq	r1, #1
   c2f4e:	b2c9      	uxtbeq	r1, r1
    if (days < daysPerMonth)
   c2f50:	4299      	cmp	r1, r3
   c2f52:	b28c      	uxth	r4, r1
   c2f54:	d804      	bhi.n	c2f60 <_ZN8DateTimeC1Em+0x84>
      break;
    days -= daysPerMonth;
   c2f56:	1b1b      	subs	r3, r3, r4
  for (m = 1; m < 12; ++m) {
   c2f58:	3201      	adds	r2, #1
    days -= daysPerMonth;
   c2f5a:	b29b      	uxth	r3, r3
  for (m = 1; m < 12; ++m) {
   c2f5c:	7042      	strb	r2, [r0, #1]
   c2f5e:	e7ec      	b.n	c2f3a <_ZN8DateTimeC1Em+0x5e>
  }
  d = days + 1;
   c2f60:	3301      	adds	r3, #1
   c2f62:	7083      	strb	r3, [r0, #2]
}
   c2f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c2f66:	bf00      	nop
   c2f68:	c792bc80 	.word	0xc792bc80
   c2f6c:	000ccda0 	.word	0x000ccda0

000c2f70 <_ZN8DateTimeC1Ethhhhh>:
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000U)
   c2f70:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    year -= 2000U;
  yOff = year;
  m = month;
  d = day;
   c2f74:	7083      	strb	r3, [r0, #2]
  hh = hour;
   c2f76:	f89d 3000 	ldrb.w	r3, [sp]
   c2f7a:	70c3      	strb	r3, [r0, #3]
    year -= 2000U;
   c2f7c:	bf28      	it	cs
   c2f7e:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
  mm = min;
   c2f82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   c2f86:	7103      	strb	r3, [r0, #4]
    year -= 2000U;
   c2f88:	bf28      	it	cs
   c2f8a:	b289      	uxthcs	r1, r1
  ss = sec;
   c2f8c:	f89d 3008 	ldrb.w	r3, [sp, #8]
  yOff = year;
   c2f90:	7001      	strb	r1, [r0, #0]
  m = month;
   c2f92:	7042      	strb	r2, [r0, #1]
  ss = sec;
   c2f94:	7143      	strb	r3, [r0, #5]
}
   c2f96:	4770      	bx	lr

000c2f98 <_ZNK8DateTime8unixtimeEv>:
        this method.

    @return Number of seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
uint32_t DateTime::unixtime(void) const {
   c2f98:	b510      	push	{r4, lr}
   c2f9a:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
   c2f9c:	7882      	ldrb	r2, [r0, #2]
   c2f9e:	7841      	ldrb	r1, [r0, #1]
   c2fa0:	7800      	ldrb	r0, [r0, #0]
   c2fa2:	f7ff ff79 	bl	c2e98 <_ZL9date2daysthh>
  return ((days * 24UL + h) * 60 + m) * 60 + s;
   c2fa6:	78e3      	ldrb	r3, [r4, #3]
   c2fa8:	7961      	ldrb	r1, [r4, #5]
   c2faa:	2218      	movs	r2, #24
   c2fac:	fb02 3000 	mla	r0, r2, r0, r3
   c2fb0:	7923      	ldrb	r3, [r4, #4]
   c2fb2:	223c      	movs	r2, #60	; 0x3c
   c2fb4:	fb02 3000 	mla	r0, r2, r0, r3
  t = time2ulong(days, hh, mm, ss);
  t += SECONDS_FROM_1970_TO_2000; // seconds from 1970 to 2000
   c2fb8:	4b02      	ldr	r3, [pc, #8]	; (c2fc4 <_ZNK8DateTime8unixtimeEv+0x2c>)
   c2fba:	440b      	add	r3, r1

  return t;
}
   c2fbc:	fb02 3000 	mla	r0, r2, r0, r3
   c2fc0:	bd10      	pop	{r4, pc}
   c2fc2:	bf00      	nop
   c2fc4:	386d4380 	.word	0x386d4380

000c2fc8 <_ZN11RTC_PCF85235beginEP7TwoWire>:
    @brief  Start I2C for the PCF8523 and test succesful connection
    @return True if Wire can find PCF8523 or false otherwise.
*/
/**************************************************************************/

boolean RTC_PCF8523::begin(TwoWire *wireInstance) {
   c2fc8:	b510      	push	{r4, lr}
   c2fca:	4604      	mov	r4, r0
   c2fcc:	4608      	mov	r0, r1
  RTCWireBus = wireInstance;
   c2fce:	6021      	str	r1, [r4, #0]
  RTCWireBus->begin();
   c2fd0:	f003 f964 	bl	c629c <_ZN7TwoWire5beginEv>
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
   c2fd4:	6820      	ldr	r0, [r4, #0]
   c2fd6:	2168      	movs	r1, #104	; 0x68
   c2fd8:	f003 f99a 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  if (RTCWireBus->endTransmission() == 0)
   c2fdc:	6820      	ldr	r0, [r4, #0]
   c2fde:	f003 f9b8 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
    return true;
  return false;
}
   c2fe2:	fab0 f080 	clz	r0, r0
   c2fe6:	0940      	lsrs	r0, r0, #5
   c2fe8:	bd10      	pop	{r4, pc}

000c2fea <_ZN11RTC_PCF85236adjustERK8DateTime>:
/*!
    @brief  Set the date and time, set battery switchover mode
    @param dt DateTime to set
*/
/**************************************************************************/
void RTC_PCF8523::adjust(const DateTime &dt) {
   c2fea:	b570      	push	{r4, r5, r6, lr}
   c2fec:	4604      	mov	r4, r0
   c2fee:	460e      	mov	r6, r1
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
   c2ff0:	6800      	ldr	r0, [r0, #0]
   c2ff2:	2168      	movs	r1, #104	; 0x68
   c2ff4:	f003 f98c 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)3); // start at location 3
   c2ff8:	6820      	ldr	r0, [r4, #0]
   c2ffa:	6803      	ldr	r3, [r0, #0]
   c2ffc:	2103      	movs	r1, #3
   c2ffe:	689b      	ldr	r3, [r3, #8]
   c3000:	4798      	blx	r3
  uint8_t minute() const { return mm; }
  /*!
      @brief  Return the second.
      @return Second (0--59).
  */
  uint8_t second() const { return ss; }
   c3002:	7971      	ldrb	r1, [r6, #5]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
   c3004:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   c3006:	250a      	movs	r5, #10
   c3008:	fbb1 f3f5 	udiv	r3, r1, r5
   c300c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c3010:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.second()));
   c3014:	6803      	ldr	r3, [r0, #0]
   c3016:	b2c9      	uxtb	r1, r1
   c3018:	689b      	ldr	r3, [r3, #8]
   c301a:	4798      	blx	r3
  uint8_t minute() const { return mm; }
   c301c:	7931      	ldrb	r1, [r6, #4]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
   c301e:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   c3020:	fbb1 f3f5 	udiv	r3, r1, r5
   c3024:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c3028:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.minute()));
   c302c:	6803      	ldr	r3, [r0, #0]
   c302e:	b2c9      	uxtb	r1, r1
   c3030:	689b      	ldr	r3, [r3, #8]
   c3032:	4798      	blx	r3
  uint8_t hour() const { return hh; }
   c3034:	78f1      	ldrb	r1, [r6, #3]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
   c3036:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   c3038:	fbb1 f3f5 	udiv	r3, r1, r5
   c303c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c3040:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.hour()));
   c3044:	6803      	ldr	r3, [r0, #0]
   c3046:	b2c9      	uxtb	r1, r1
   c3048:	689b      	ldr	r3, [r3, #8]
   c304a:	4798      	blx	r3
  uint8_t day() const { return d; }
   c304c:	78b1      	ldrb	r1, [r6, #2]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
   c304e:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   c3050:	fbb1 f3f5 	udiv	r3, r1, r5
   c3054:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c3058:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.day()));
   c305c:	6803      	ldr	r3, [r0, #0]
   c305e:	b2c9      	uxtb	r1, r1
   c3060:	689b      	ldr	r3, [r3, #8]
   c3062:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE(bin2bcd(0)); // skip weekdays
   c3064:	6820      	ldr	r0, [r4, #0]
   c3066:	6803      	ldr	r3, [r0, #0]
   c3068:	2100      	movs	r1, #0
   c306a:	689b      	ldr	r3, [r3, #8]
   c306c:	4798      	blx	r3
  uint8_t month() const { return m; }
   c306e:	7871      	ldrb	r1, [r6, #1]
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
   c3070:	6820      	ldr	r0, [r4, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   c3072:	fbb1 f3f5 	udiv	r3, r1, r5
   c3076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c307a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.month()));
   c307e:	6803      	ldr	r3, [r0, #0]
   c3080:	b2c9      	uxtb	r1, r1
   c3082:	689b      	ldr	r3, [r3, #8]
   c3084:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
   c3086:	6820      	ldr	r0, [r4, #0]
  uint16_t year() const { return 2000U + yOff; }
   c3088:	7831      	ldrb	r1, [r6, #0]
   c308a:	6803      	ldr	r3, [r0, #0]
static uint8_t bin2bcd(uint8_t val) { return val + 6 * (val / 10); }
   c308c:	fbb1 f5f5 	udiv	r5, r1, r5
   c3090:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   c3094:	eb01 0145 	add.w	r1, r1, r5, lsl #1
  RTCWireBus->_I2C_WRITE(bin2bcd(dt.year() - 2000U));
   c3098:	689b      	ldr	r3, [r3, #8]
   c309a:	b2c9      	uxtb	r1, r1
   c309c:	4798      	blx	r3
  RTCWireBus->endTransmission();
   c309e:	6820      	ldr	r0, [r4, #0]
   c30a0:	f003 f957 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>

  // set to battery switchover mode
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
   c30a4:	6820      	ldr	r0, [r4, #0]
   c30a6:	2168      	movs	r1, #104	; 0x68
   c30a8:	f003 f932 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)PCF8523_CONTROL_3);
   c30ac:	6820      	ldr	r0, [r4, #0]
   c30ae:	6803      	ldr	r3, [r0, #0]
   c30b0:	2102      	movs	r1, #2
   c30b2:	689b      	ldr	r3, [r3, #8]
   c30b4:	4798      	blx	r3
  RTCWireBus->_I2C_WRITE((byte)0x00);
   c30b6:	6820      	ldr	r0, [r4, #0]
   c30b8:	6803      	ldr	r3, [r0, #0]
   c30ba:	2100      	movs	r1, #0
   c30bc:	689b      	ldr	r3, [r3, #8]
   c30be:	4798      	blx	r3
  RTCWireBus->endTransmission();
   c30c0:	6820      	ldr	r0, [r4, #0]
}
   c30c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RTCWireBus->endTransmission();
   c30c6:	f003 b944 	b.w	c6352 <_ZN7TwoWire15endTransmissionEv>

000c30ca <_ZN11RTC_PCF85233nowEv>:
/*!
    @brief  Get the current date/time
    @return DateTime object containing the current date/time
*/
/**************************************************************************/
DateTime RTC_PCF8523::now() {
   c30ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c30ce:	460c      	mov	r4, r1
   c30d0:	4605      	mov	r5, r0
  RTCWireBus->beginTransmission(PCF8523_ADDRESS);
   c30d2:	2168      	movs	r1, #104	; 0x68
   c30d4:	6820      	ldr	r0, [r4, #0]
   c30d6:	f003 f91b 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  RTCWireBus->_I2C_WRITE((byte)3);
   c30da:	6820      	ldr	r0, [r4, #0]
   c30dc:	6803      	ldr	r3, [r0, #0]
   c30de:	2103      	movs	r1, #3
   c30e0:	689b      	ldr	r3, [r3, #8]
   c30e2:	4798      	blx	r3
  RTCWireBus->endTransmission();
   c30e4:	6820      	ldr	r0, [r4, #0]
   c30e6:	f003 f934 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>

  RTCWireBus->requestFrom(PCF8523_ADDRESS, 7);
   c30ea:	2207      	movs	r2, #7
   c30ec:	2168      	movs	r1, #104	; 0x68
   c30ee:	6820      	ldr	r0, [r4, #0]
   c30f0:	f003 f907 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(RTCWireBus->_I2C_READ() & 0x7F);
   c30f4:	6820      	ldr	r0, [r4, #0]
   c30f6:	6803      	ldr	r3, [r0, #0]
   c30f8:	695b      	ldr	r3, [r3, #20]
   c30fa:	4798      	blx	r3
   c30fc:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   c3100:	f3c0 1002 	ubfx	r0, r0, #4, #3
   c3104:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   c3108:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   c310c:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(RTCWireBus->_I2C_READ());
   c3110:	6820      	ldr	r0, [r4, #0]
   c3112:	6803      	ldr	r3, [r0, #0]
   c3114:	695b      	ldr	r3, [r3, #20]
   c3116:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   c3118:	f3c0 1603 	ubfx	r6, r0, #4, #4
   c311c:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   c3120:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   c3124:	f000 06ff 	and.w	r6, r0, #255	; 0xff
  uint8_t hh = bcd2bin(RTCWireBus->_I2C_READ());
   c3128:	6820      	ldr	r0, [r4, #0]
   c312a:	6803      	ldr	r3, [r0, #0]
   c312c:	695b      	ldr	r3, [r3, #20]
   c312e:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   c3130:	f3c0 1703 	ubfx	r7, r0, #4, #4
   c3134:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   c3138:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   c313c:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  uint8_t d = bcd2bin(RTCWireBus->_I2C_READ());
   c3140:	6820      	ldr	r0, [r4, #0]
   c3142:	6803      	ldr	r3, [r0, #0]
   c3144:	695b      	ldr	r3, [r3, #20]
   c3146:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   c3148:	f3c0 1803 	ubfx	r8, r0, #4, #4
   c314c:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   c3150:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   c3154:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  RTCWireBus->_I2C_READ(); // skip 'weekdays'
   c3158:	6820      	ldr	r0, [r4, #0]
   c315a:	6803      	ldr	r3, [r0, #0]
   c315c:	695b      	ldr	r3, [r3, #20]
   c315e:	4798      	blx	r3
  uint8_t m = bcd2bin(RTCWireBus->_I2C_READ());
   c3160:	6820      	ldr	r0, [r4, #0]
   c3162:	6803      	ldr	r3, [r0, #0]
   c3164:	695b      	ldr	r3, [r3, #20]
   c3166:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   c3168:	f3c0 1a03 	ubfx	sl, r0, #4, #4
   c316c:	ebaa 0a8a 	sub.w	sl, sl, sl, lsl #2
   c3170:	eb00 004a 	add.w	r0, r0, sl, lsl #1
   c3174:	f000 0aff 	and.w	sl, r0, #255	; 0xff
  uint16_t y = bcd2bin(RTCWireBus->_I2C_READ()) + 2000U;
   c3178:	6820      	ldr	r0, [r4, #0]
   c317a:	6803      	ldr	r3, [r0, #0]
   c317c:	695b      	ldr	r3, [r3, #20]
   c317e:	4798      	blx	r3
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
   c3180:	f3c0 1303 	ubfx	r3, r0, #4, #4
   c3184:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   c3188:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  yOff = year;
   c318c:	7028      	strb	r0, [r5, #0]
  m = month;
   c318e:	f885 a001 	strb.w	sl, [r5, #1]
  d = day;
   c3192:	f885 8002 	strb.w	r8, [r5, #2]
  hh = hour;
   c3196:	70ef      	strb	r7, [r5, #3]
  mm = min;
   c3198:	712e      	strb	r6, [r5, #4]
  ss = sec;
   c319a:	f885 9005 	strb.w	r9, [r5, #5]

  return DateTime(y, m, d, hh, mm, ss);
}
   c319e:	4628      	mov	r0, r5
   c31a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000c31a4 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   c31a4:	b538      	push	{r3, r4, r5, lr}
   c31a6:	4604      	mov	r4, r0
   c31a8:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   c31aa:	2224      	movs	r2, #36	; 0x24
   c31ac:	2100      	movs	r1, #0
   c31ae:	f007 f809 	bl	ca1c4 <memset>

  m_vol = vol;
   c31b2:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   c31b4:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   c31b6:	2b10      	cmp	r3, #16
   c31b8:	d003      	beq.n	c31c2 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   c31ba:	2b20      	cmp	r3, #32
   c31bc:	d006      	beq.n	c31cc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   c31be:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   c31c0:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   c31c2:	2320      	movs	r3, #32
  m_flags = F_READ;
   c31c4:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   c31c6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   c31c8:	70a0      	strb	r0, [r4, #2]
  return true;
   c31ca:	e7f9      	b.n	c31c0 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   c31cc:	2340      	movs	r3, #64	; 0x40
   c31ce:	e7f9      	b.n	c31c4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000c31d0 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   c31d0:	b510      	push	{r4, lr}
   c31d2:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   c31d4:	3024      	adds	r0, #36	; 0x24
   c31d6:	f001 f871 	bl	c42bc <_ZN8FatCache4syncEv>
   c31da:	b128      	cbz	r0, c31e8 <_ZN9FatVolume9cacheSyncEv+0x18>
   c31dc:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   c31e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   c31e4:	f001 b86a 	b.w	c42bc <_ZN8FatCache4syncEv>
  }
   c31e8:	bd10      	pop	{r4, pc}

000c31ea <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   c31ea:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   c31ec:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   c31ee:	f043 0304 	orr.w	r3, r3, #4
   c31f2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   c31f4:	f100 0210 	add.w	r2, r0, #16
   c31f8:	6880      	ldr	r0, [r0, #8]
   c31fa:	f001 b915 	b.w	c4428 <_ZN9FatVolume15allocateClusterEmPm>
	...

000c3200 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   c3200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   c3204:	7801      	ldrb	r1, [r0, #0]
   c3206:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   c320a:	4604      	mov	r4, r0
  if (isRootFixed()) {
   c320c:	d003      	beq.n	c3216 <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   c320e:	2600      	movs	r6, #0
}
   c3210:	4630      	mov	r0, r6
   c3212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   c3216:	6942      	ldr	r2, [r0, #20]
   c3218:	4b17      	ldr	r3, [pc, #92]	; (c3278 <_ZN7FatFile13addDirClusterEv+0x78>)
   c321a:	429a      	cmp	r2, r3
   c321c:	d2f7      	bcs.n	c320e <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   c321e:	f7ff ffe4 	bl	c31ea <_ZN7FatFile10addClusterEv>
   c3222:	4606      	mov	r6, r0
   c3224:	2800      	cmp	r0, #0
   c3226:	d0f2      	beq.n	c320e <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   c3228:	6921      	ldr	r1, [r4, #16]
   c322a:	68a0      	ldr	r0, [r4, #8]
   c322c:	f001 f891 	bl	c4352 <_ZNK9FatVolume17clusterFirstBlockEm>
   c3230:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   c3232:	68a0      	ldr	r0, [r4, #8]
   c3234:	2205      	movs	r2, #5
   c3236:	4639      	mov	r1, r7
   c3238:	3024      	adds	r0, #36	; 0x24
   c323a:	f001 f867 	bl	c430c <_ZN8FatCache4readEmh>
  if (!pc) {
   c323e:	4680      	mov	r8, r0
   c3240:	2800      	cmp	r0, #0
   c3242:	d0e4      	beq.n	c320e <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   c3244:	4629      	mov	r1, r5
   c3246:	f44f 7200 	mov.w	r2, #512	; 0x200
   c324a:	f006 ffbb 	bl	ca1c4 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   c324e:	2501      	movs	r5, #1
   c3250:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   c3252:	791a      	ldrb	r2, [r3, #4]
   c3254:	42aa      	cmp	r2, r5
   c3256:	d909      	bls.n	c326c <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   c3258:	6818      	ldr	r0, [r3, #0]
   c325a:	4642      	mov	r2, r8
   c325c:	19e9      	adds	r1, r5, r7
   c325e:	f001 fbc2 	bl	c49e6 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   c3262:	2800      	cmp	r0, #0
   c3264:	d0d3      	beq.n	c320e <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   c3266:	3501      	adds	r5, #1
   c3268:	b2ed      	uxtb	r5, r5
   c326a:	e7f1      	b.n	c3250 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   c326c:	6963      	ldr	r3, [r4, #20]
   c326e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   c3272:	6163      	str	r3, [r4, #20]
  return true;
   c3274:	e7cc      	b.n	c3210 <_ZN7FatFile13addDirClusterEv+0x10>
   c3276:	bf00      	nop
   c3278:	001ffe00 	.word	0x001ffe00

000c327c <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   c327c:	b510      	push	{r4, lr}
   c327e:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   c3280:	6880      	ldr	r0, [r0, #8]
   c3282:	460a      	mov	r2, r1
   c3284:	3024      	adds	r0, #36	; 0x24
   c3286:	69a1      	ldr	r1, [r4, #24]
   c3288:	f001 f840 	bl	c430c <_ZN8FatCache4readEmh>
  if (!pc) {
   c328c:	b120      	cbz	r0, c3298 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   c328e:	88a3      	ldrh	r3, [r4, #4]
   c3290:	f003 030f 	and.w	r3, r3, #15
   c3294:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   c3298:	bd10      	pop	{r4, pc}

000c329a <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   c329a:	7803      	ldrb	r3, [r0, #0]
   c329c:	b90b      	cbnz	r3, c32a2 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   c329e:	f7ff bf81 	b.w	c31a4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   c32a2:	2000      	movs	r0, #0
   c32a4:	4770      	bx	lr

000c32a6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   c32a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   c32aa:	7803      	ldrb	r3, [r0, #0]
   c32ac:	4604      	mov	r4, r0
   c32ae:	4688      	mov	r8, r1
   c32b0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   c32b2:	2b00      	cmp	r3, #0
   c32b4:	d05d      	beq.n	c3372 <_ZN7FatFile4readEPvj+0xcc>
   c32b6:	7882      	ldrb	r2, [r0, #2]
   c32b8:	07d1      	lsls	r1, r2, #31
   c32ba:	d55a      	bpl.n	c3372 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   c32bc:	071a      	lsls	r2, r3, #28
   c32be:	d52d      	bpl.n	c331c <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   c32c0:	69c3      	ldr	r3, [r0, #28]
   c32c2:	6942      	ldr	r2, [r0, #20]
   c32c4:	1a9b      	subs	r3, r3, r2
   c32c6:	429d      	cmp	r5, r3
   c32c8:	bf28      	it	cs
   c32ca:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   c32cc:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   c32ce:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   c32d2:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   c32d6:	2e00      	cmp	r6, #0
   c32d8:	f000 808f 	beq.w	c33fa <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   c32dc:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   c32de:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   c32e0:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   c32e2:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   c32e4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   c32e8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   c32ec:	d51f      	bpl.n	c332e <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   c32ee:	6a00      	ldr	r0, [r0, #32]
   c32f0:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   c32f2:	68a0      	ldr	r0, [r4, #8]
   c32f4:	f1ba 0f00 	cmp.w	sl, #0
   c32f8:	d142      	bne.n	c3380 <_ZN7FatFile4readEPvj+0xda>
   c32fa:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c32fe:	d33f      	bcc.n	c3380 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   c3300:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   c3302:	4299      	cmp	r1, r3
   c3304:	d03c      	beq.n	c3380 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   c3306:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   c330a:	d252      	bcs.n	c33b2 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   c330c:	6800      	ldr	r0, [r0, #0]
   c330e:	4642      	mov	r2, r8
   c3310:	f001 fae0 	bl	c48d4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   c3314:	b368      	cbz	r0, c3372 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   c3316:	f44f 7700 	mov.w	r7, #512	; 0x200
   c331a:	e044      	b.n	c33a6 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   c331c:	069b      	lsls	r3, r3, #26
   c331e:	d5d5      	bpl.n	c32cc <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   c3320:	6883      	ldr	r3, [r0, #8]
   c3322:	891a      	ldrh	r2, [r3, #8]
   c3324:	6943      	ldr	r3, [r0, #20]
   c3326:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   c332a:	b29b      	uxth	r3, r3
   c332c:	e7cb      	b.n	c32c6 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   c332e:	f890 9005 	ldrb.w	r9, [r0, #5]
   c3332:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   c3336:	f1ba 0f00 	cmp.w	sl, #0
   c333a:	d108      	bne.n	c334e <_ZN7FatFile4readEPvj+0xa8>
   c333c:	f1b9 0f00 	cmp.w	r9, #0
   c3340:	d105      	bne.n	c334e <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   c3342:	b95b      	cbnz	r3, c335c <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   c3344:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   c3346:	bf4c      	ite	mi
   c3348:	6a03      	ldrmi	r3, [r0, #32]
   c334a:	6a23      	ldrpl	r3, [r4, #32]
   c334c:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   c334e:	6921      	ldr	r1, [r4, #16]
   c3350:	68a0      	ldr	r0, [r4, #8]
   c3352:	f000 fffe 	bl	c4352 <_ZNK9FatVolume17clusterFirstBlockEm>
   c3356:	eb09 0100 	add.w	r1, r9, r0
   c335a:	e7ca      	b.n	c32f2 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   c335c:	6921      	ldr	r1, [r4, #16]
   c335e:	465a      	mov	r2, fp
   c3360:	f000 fffd 	bl	c435e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   c3364:	2800      	cmp	r0, #0
   c3366:	db04      	blt.n	c3372 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   c3368:	d1f1      	bne.n	c334e <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   c336a:	7823      	ldrb	r3, [r4, #0]
   c336c:	f013 0f70 	tst.w	r3, #112	; 0x70
   c3370:	d143      	bne.n	c33fa <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   c3372:	7863      	ldrb	r3, [r4, #1]
   c3374:	f043 0302 	orr.w	r3, r3, #2
   c3378:	7063      	strb	r3, [r4, #1]
  return -1;
   c337a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c337e:	e03d      	b.n	c33fc <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   c3380:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   c3384:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   c3386:	f04f 0200 	mov.w	r2, #0
   c338a:	f100 0024 	add.w	r0, r0, #36	; 0x24
   c338e:	bf28      	it	cs
   c3390:	4637      	movcs	r7, r6
   c3392:	f000 ffbb 	bl	c430c <_ZN8FatCache4readEmh>
      if (!pc) {
   c3396:	2800      	cmp	r0, #0
   c3398:	d0eb      	beq.n	c3372 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   c339a:	eb00 010a 	add.w	r1, r0, sl
   c339e:	463a      	mov	r2, r7
   c33a0:	4640      	mov	r0, r8
   c33a2:	f006 ff01 	bl	ca1a8 <memcpy>
    m_curPosition += n;
   c33a6:	6963      	ldr	r3, [r4, #20]
   c33a8:	443b      	add	r3, r7
    dst += n;
   c33aa:	44b8      	add	r8, r7
    m_curPosition += n;
   c33ac:	6163      	str	r3, [r4, #20]
    toRead -= n;
   c33ae:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   c33b0:	e791      	b.n	c32d6 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   c33b2:	7822      	ldrb	r2, [r4, #0]
   c33b4:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   c33b6:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   c33ba:	d406      	bmi.n	c33ca <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   c33bc:	7902      	ldrb	r2, [r0, #4]
   c33be:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   c33c2:	b2d2      	uxtb	r2, r2
   c33c4:	4592      	cmp	sl, r2
   c33c6:	bf28      	it	cs
   c33c8:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   c33ca:	4299      	cmp	r1, r3
      n = 512*nb;
   c33cc:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   c33d0:	d208      	bcs.n	c33e4 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   c33d2:	68a0      	ldr	r0, [r4, #8]
   c33d4:	4653      	mov	r3, sl
   c33d6:	6800      	ldr	r0, [r0, #0]
   c33d8:	4642      	mov	r2, r8
   c33da:	f001 fac3 	bl	c4964 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   c33de:	2800      	cmp	r0, #0
   c33e0:	d1e1      	bne.n	c33a6 <_ZN7FatFile4readEPvj+0x100>
   c33e2:	e7c6      	b.n	c3372 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   c33e4:	4453      	add	r3, sl
   c33e6:	428b      	cmp	r3, r1
   c33e8:	d9f3      	bls.n	c33d2 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   c33ea:	3024      	adds	r0, #36	; 0x24
   c33ec:	9101      	str	r1, [sp, #4]
   c33ee:	f000 ff65 	bl	c42bc <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   c33f2:	9901      	ldr	r1, [sp, #4]
   c33f4:	2800      	cmp	r0, #0
   c33f6:	d1ec      	bne.n	c33d2 <_ZN7FatFile4readEPvj+0x12c>
   c33f8:	e7bb      	b.n	c3372 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   c33fa:	1ba8      	subs	r0, r5, r6
}
   c33fc:	b003      	add	sp, #12
   c33fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c3402 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   c3402:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   c3404:	2201      	movs	r2, #1
   c3406:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   c340a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   c340e:	4604      	mov	r4, r0
   c3410:	f7ff ff49 	bl	c32a6 <_ZN7FatFile4readEPvj>
   c3414:	2801      	cmp	r0, #1
   c3416:	bf0a      	itet	eq
   c3418:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   c341c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   c3420:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   c3424:	b002      	add	sp, #8
   c3426:	bd70      	pop	{r4, r5, r6, pc}

000c3428 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   c3428:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   c342a:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   c342c:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   c3430:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   c3432:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   c3436:	d000      	beq.n	c343a <_ZN7FatFile12readDirCacheEb+0x12>
   c3438:	b999      	cbnz	r1, c3462 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   c343a:	2201      	movs	r2, #1
   c343c:	f10d 0107 	add.w	r1, sp, #7
   c3440:	4620      	mov	r0, r4
   c3442:	f7ff ff30 	bl	c32a6 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   c3446:	b240      	sxtb	r0, r0
   c3448:	2801      	cmp	r0, #1
   c344a:	d002      	beq.n	c3452 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   c344c:	2000      	movs	r0, #0
}
   c344e:	b003      	add	sp, #12
   c3450:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   c3452:	6963      	ldr	r3, [r4, #20]
   c3454:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   c3456:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   c3458:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   c345a:	3030      	adds	r0, #48	; 0x30
   c345c:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   c3460:	e7f5      	b.n	c344e <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   c3462:	3320      	adds	r3, #32
   c3464:	e7f7      	b.n	c3456 <_ZN7FatFile12readDirCacheEb+0x2e>

000c3466 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   c3466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   c346a:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   c346c:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   c346e:	4604      	mov	r4, r0
   c3470:	460d      	mov	r5, r1
  if (!isOpen()) {
   c3472:	b162      	cbz	r2, c348e <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   c3474:	6940      	ldr	r0, [r0, #20]
   c3476:	4288      	cmp	r0, r1
   c3478:	d002      	beq.n	c3480 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   c347a:	b919      	cbnz	r1, c3484 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   c347c:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   c347e:	6165      	str	r5, [r4, #20]
    return true;
   c3480:	2001      	movs	r0, #1
   c3482:	e006      	b.n	c3492 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   c3484:	0716      	lsls	r6, r2, #28
   c3486:	d506      	bpl.n	c3496 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   c3488:	69e3      	ldr	r3, [r4, #28]
   c348a:	428b      	cmp	r3, r1
   c348c:	d20b      	bcs.n	c34a6 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   c348e:	6127      	str	r7, [r4, #16]
  return false;
   c3490:	2000      	movs	r0, #0
}
   c3492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   c3496:	0691      	lsls	r1, r2, #26
   c3498:	d505      	bpl.n	c34a6 <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   c349a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   c349c:	891b      	ldrh	r3, [r3, #8]
   c349e:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   c34a2:	d9ec      	bls.n	c347e <_ZN7FatFile7seekSetEm+0x18>
   c34a4:	e7f3      	b.n	c348e <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   c34a6:	f8d4 c008 	ldr.w	ip, [r4, #8]
   c34aa:	f89c 6006 	ldrb.w	r6, [ip, #6]
   c34ae:	1e43      	subs	r3, r0, #1
   c34b0:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   c34b4:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   c34b6:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   c34b8:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   c34ba:	42b3      	cmp	r3, r6
   c34bc:	d800      	bhi.n	c34c0 <_ZN7FatFile7seekSetEm+0x5a>
   c34be:	b998      	cbnz	r0, c34e8 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   c34c0:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   c34c2:	bf4c      	ite	mi
   c34c4:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   c34c8:	6a23      	ldrpl	r3, [r4, #32]
   c34ca:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   c34cc:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   c34d0:	2e00      	cmp	r6, #0
   c34d2:	d0d4      	beq.n	c347e <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   c34d4:	6921      	ldr	r1, [r4, #16]
   c34d6:	68a0      	ldr	r0, [r4, #8]
   c34d8:	4642      	mov	r2, r8
   c34da:	f000 ff40 	bl	c435e <_ZN9FatVolume6fatGetEmPm>
   c34de:	2800      	cmp	r0, #0
   c34e0:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   c34e4:	dcf4      	bgt.n	c34d0 <_ZN7FatFile7seekSetEm+0x6a>
   c34e6:	e7d2      	b.n	c348e <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   c34e8:	1af6      	subs	r6, r6, r3
   c34ea:	e7ef      	b.n	c34cc <_ZN7FatFile7seekSetEm+0x66>

000c34ec <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   c34ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c34ee:	460f      	mov	r7, r1
   c34f0:	4604      	mov	r4, r0
   c34f2:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   c34f4:	2100      	movs	r1, #0
   c34f6:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   c34f8:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   c34fa:	f006 fe63 	bl	ca1c4 <memset>
  m_vol = dirFile->m_vol;
   c34fe:	68b8      	ldr	r0, [r7, #8]
   c3500:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   c3502:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   c3504:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   c3508:	6a3b      	ldr	r3, [r7, #32]
   c350a:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   c350c:	016a      	lsls	r2, r5, #5
   c350e:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   c3512:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   c3516:	071f      	lsls	r7, r3, #28
   c3518:	d444      	bmi.n	c35a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   c351a:	f003 0317 	and.w	r3, r3, #23
   c351e:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   c3520:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   c3524:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   c3528:	bf04      	itt	eq
   c352a:	f043 0308 	orreq.w	r3, r3, #8
   c352e:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   c3530:	f89d 3018 	ldrb.w	r3, [sp, #24]
   c3534:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   c3536:	f006 0303 	and.w	r3, r6, #3
   c353a:	2b01      	cmp	r3, #1
   c353c:	d02c      	beq.n	c3598 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   c353e:	2b02      	cmp	r3, #2
   c3540:	d028      	beq.n	c3594 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   c3542:	bb7b      	cbnz	r3, c35a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   c3544:	0571      	lsls	r1, r6, #21
   c3546:	d42d      	bmi.n	c35a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   c3548:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   c354a:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   c354c:	78a1      	ldrb	r1, [r4, #2]
   c354e:	078b      	lsls	r3, r1, #30
   c3550:	d504      	bpl.n	c355c <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   c3552:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   c3554:	06df      	lsls	r7, r3, #27
   c3556:	d425      	bmi.n	c35a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   c3558:	07dd      	lsls	r5, r3, #31
   c355a:	d423      	bmi.n	c35a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   c355c:	11b3      	asrs	r3, r6, #6
   c355e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   c3562:	f006 0508 	and.w	r5, r6, #8
   c3566:	432b      	orrs	r3, r5
   c3568:	430b      	orrs	r3, r1
   c356a:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   c356c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   c356e:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   c3570:	1883      	adds	r3, r0, r2
   c3572:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   c3576:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   c357a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   c357e:	0572      	lsls	r2, r6, #21
   c3580:	d513      	bpl.n	c35aa <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   c3582:	b959      	cbnz	r1, c359c <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   c3584:	78a3      	ldrb	r3, [r4, #2]
   c3586:	f043 0304 	orr.w	r3, r3, #4
   c358a:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   c358c:	0473      	lsls	r3, r6, #17
   c358e:	d410      	bmi.n	c35b2 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   c3590:	2001      	movs	r0, #1
}
   c3592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   c3594:	2303      	movs	r3, #3
   c3596:	e7d8      	b.n	c354a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   c3598:	2302      	movs	r3, #2
   c359a:	e7d6      	b.n	c354a <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   c359c:	f000 ff7f 	bl	c449e <_ZN9FatVolume9freeChainEm>
   c35a0:	2800      	cmp	r0, #0
   c35a2:	d1ef      	bne.n	c3584 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   c35a4:	2000      	movs	r0, #0
   c35a6:	7020      	strb	r0, [r4, #0]
  return false;
   c35a8:	e7f3      	b.n	c3592 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   c35aa:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   c35ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   c35ae:	61e3      	str	r3, [r4, #28]
   c35b0:	e7ec      	b.n	c358c <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   c35b2:	69e1      	ldr	r1, [r4, #28]
   c35b4:	4620      	mov	r0, r4
   c35b6:	f7ff ff56 	bl	c3466 <_ZN7FatFile7seekSetEm>
   c35ba:	2800      	cmp	r0, #0
   c35bc:	d1e8      	bne.n	c3590 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   c35be:	e7f1      	b.n	c35a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000c35c0 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   c35c0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   c35c2:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   c35c4:	4604      	mov	r4, r0
  if (!isOpen()) {
   c35c6:	b90b      	cbnz	r3, c35cc <_ZN7FatFile4syncEv+0xc>
    return true;
   c35c8:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   c35ca:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   c35cc:	7883      	ldrb	r3, [r0, #2]
   c35ce:	075a      	lsls	r2, r3, #29
   c35d0:	d523      	bpl.n	c361a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   c35d2:	2101      	movs	r1, #1
   c35d4:	f7ff fe52 	bl	c327c <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   c35d8:	4605      	mov	r5, r0
   c35da:	b928      	cbnz	r0, c35e8 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   c35dc:	7863      	ldrb	r3, [r4, #1]
   c35de:	f043 0301 	orr.w	r3, r3, #1
   c35e2:	7063      	strb	r3, [r4, #1]
  return false;
   c35e4:	2000      	movs	r0, #0
   c35e6:	e7f0      	b.n	c35ca <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   c35e8:	7803      	ldrb	r3, [r0, #0]
   c35ea:	2be5      	cmp	r3, #229	; 0xe5
   c35ec:	d0f6      	beq.n	c35dc <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   c35ee:	7823      	ldrb	r3, [r4, #0]
   c35f0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   c35f2:	bf44      	itt	mi
   c35f4:	69e3      	ldrmi	r3, [r4, #28]
   c35f6:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   c35f8:	6a23      	ldr	r3, [r4, #32]
   c35fa:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   c35fc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   c35fe:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   c3600:	4b09      	ldr	r3, [pc, #36]	; (c3628 <_ZN7FatFile4syncEv+0x68>)
   c3602:	681b      	ldr	r3, [r3, #0]
   c3604:	b12b      	cbz	r3, c3612 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   c3606:	f100 0116 	add.w	r1, r0, #22
   c360a:	3018      	adds	r0, #24
   c360c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   c360e:	8b2b      	ldrh	r3, [r5, #24]
   c3610:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   c3612:	78a3      	ldrb	r3, [r4, #2]
   c3614:	f023 0304 	bic.w	r3, r3, #4
   c3618:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   c361a:	68a0      	ldr	r0, [r4, #8]
   c361c:	f7ff fdd8 	bl	c31d0 <_ZN9FatVolume9cacheSyncEv>
   c3620:	2800      	cmp	r0, #0
   c3622:	d0db      	beq.n	c35dc <_ZN7FatFile4syncEv+0x1c>
   c3624:	e7d0      	b.n	c35c8 <_ZN7FatFile4syncEv+0x8>
   c3626:	bf00      	nop
   c3628:	2003e61c 	.word	0x2003e61c

000c362c <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   c362c:	b510      	push	{r4, lr}
   c362e:	4604      	mov	r4, r0
  bool rtn = sync();
   c3630:	f7ff ffc6 	bl	c35c0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   c3634:	2300      	movs	r3, #0
   c3636:	7023      	strb	r3, [r4, #0]
}
   c3638:	bd10      	pop	{r4, pc}

000c363a <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   c363a:	b5f0      	push	{r4, r5, r6, r7, lr}
   c363c:	b093      	sub	sp, #76	; 0x4c
   c363e:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   c3640:	2300      	movs	r3, #0
   c3642:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   c3644:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   c3646:	9201      	str	r2, [sp, #4]
   c3648:	4606      	mov	r6, r0
   c364a:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   c364c:	b113      	cbz	r3, c3654 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   c364e:	2000      	movs	r0, #0
}
   c3650:	b013      	add	sp, #76	; 0x4c
   c3652:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   c3654:	780b      	ldrb	r3, [r1, #0]
   c3656:	f013 0f70 	tst.w	r3, #112	; 0x70
   c365a:	d0f8      	beq.n	c364e <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   c365c:	7813      	ldrb	r3, [r2, #0]
   c365e:	2b2f      	cmp	r3, #47	; 0x2f
   c3660:	d112      	bne.n	c3688 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   c3662:	9a01      	ldr	r2, [sp, #4]
   c3664:	7813      	ldrb	r3, [r2, #0]
   c3666:	2b2f      	cmp	r3, #47	; 0x2f
   c3668:	d102      	bne.n	c3670 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   c366a:	3201      	adds	r2, #1
   c366c:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   c366e:	e7f8      	b.n	c3662 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   c3670:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   c3672:	b91b      	cbnz	r3, c367c <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   c3674:	4630      	mov	r0, r6
   c3676:	f7ff fe10 	bl	c329a <_ZN7FatFile8openRootEP9FatVolume>
   c367a:	e7e9      	b.n	c3650 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   c367c:	a809      	add	r0, sp, #36	; 0x24
   c367e:	f7ff fd91 	bl	c31a4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   c3682:	2800      	cmp	r0, #0
   c3684:	d0e3      	beq.n	c364e <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   c3686:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   c3688:	9801      	ldr	r0, [sp, #4]
   c368a:	aa01      	add	r2, sp, #4
   c368c:	a903      	add	r1, sp, #12
   c368e:	f000 fab7 	bl	c3c00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   c3692:	2800      	cmp	r0, #0
   c3694:	d0db      	beq.n	c364e <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   c3696:	9b01      	ldr	r3, [sp, #4]
   c3698:	781b      	ldrb	r3, [r3, #0]
   c369a:	b19b      	cbz	r3, c36c4 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   c369c:	2300      	movs	r3, #0
   c369e:	aa03      	add	r2, sp, #12
   c36a0:	4621      	mov	r1, r4
   c36a2:	4630      	mov	r0, r6
   c36a4:	f000 fc40 	bl	c3f28 <_ZN7FatFile4openEPS_P7fname_ti>
   c36a8:	2800      	cmp	r0, #0
   c36aa:	d0d0      	beq.n	c364e <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   c36ac:	4635      	mov	r5, r6
   c36ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c36b0:	ac09      	add	r4, sp, #36	; 0x24
   c36b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c36b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c36b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c36b8:	682b      	ldr	r3, [r5, #0]
   c36ba:	6023      	str	r3, [r4, #0]
    close();
   c36bc:	4630      	mov	r0, r6
   c36be:	f7ff ffb5 	bl	c362c <_ZN7FatFile5closeEv>
  while (1) {
   c36c2:	e7e0      	b.n	c3686 <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   c36c4:	463b      	mov	r3, r7
   c36c6:	aa03      	add	r2, sp, #12
   c36c8:	4621      	mov	r1, r4
   c36ca:	4630      	mov	r0, r6
   c36cc:	f000 fc2c 	bl	c3f28 <_ZN7FatFile4openEPS_P7fname_ti>
   c36d0:	e7be      	b.n	c3650 <_ZN7FatFile4openEPS_PKci+0x16>

000c36d2 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   c36d2:	b500      	push	{lr}
   c36d4:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   c36d6:	2300      	movs	r3, #0
   c36d8:	460a      	mov	r2, r1
   c36da:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   c36dc:	4601      	mov	r1, r0
   c36de:	2301      	movs	r3, #1
   c36e0:	a801      	add	r0, sp, #4
   c36e2:	f7ff ffaa 	bl	c363a <_ZN7FatFile4openEPS_PKci>
   c36e6:	b110      	cbz	r0, c36ee <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   c36e8:	a801      	add	r0, sp, #4
   c36ea:	f000 fb67 	bl	c3dbc <_ZN7FatFile6removeEv>
}
   c36ee:	b00b      	add	sp, #44	; 0x2c
   c36f0:	f85d fb04 	ldr.w	pc, [sp], #4

000c36f4 <_ZN7FatFile5mkdirEPS_P7fname_t>:
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   c36f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
   c36f6:	780b      	ldrb	r3, [r1, #0]
   c36f8:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::mkdir(FatFile* parent, fname_t* fname) {
   c36fc:	b089      	sub	sp, #36	; 0x24
   c36fe:	4604      	mov	r4, r0
   c3700:	460e      	mov	r6, r1
  if (!parent->isDir()) {
   c3702:	d102      	bne.n	c370a <_ZN7FatFile5mkdirEPS_P7fname_t+0x16>
  return false;
   c3704:	2000      	movs	r0, #0
}
   c3706:	b009      	add	sp, #36	; 0x24
   c3708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_RDWR | O_CREAT | O_EXCL)) {
   c370a:	f640 2302 	movw	r3, #2562	; 0xa02
   c370e:	f000 fc0b 	bl	c3f28 <_ZN7FatFile4openEPS_P7fname_ti>
   c3712:	2800      	cmp	r0, #0
   c3714:	d0f6      	beq.n	c3704 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  m_flags = F_READ;
   c3716:	2701      	movs	r7, #1
  m_attr = FILE_ATTR_SUBDIR;
   c3718:	2510      	movs	r5, #16
  m_flags = F_READ;
   c371a:	70a7      	strb	r7, [r4, #2]
  m_attr = FILE_ATTR_SUBDIR;
   c371c:	7025      	strb	r5, [r4, #0]
  if (!addDirCluster()) {
   c371e:	4620      	mov	r0, r4
   c3720:	f7ff fd6e 	bl	c3200 <_ZN7FatFile13addDirClusterEv>
   c3724:	2800      	cmp	r0, #0
   c3726:	d0ed      	beq.n	c3704 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  m_firstCluster = m_curCluster;
   c3728:	6923      	ldr	r3, [r4, #16]
   c372a:	6223      	str	r3, [r4, #32]
    seekSet(0);
   c372c:	2100      	movs	r1, #0
   c372e:	4620      	mov	r0, r4
   c3730:	f7ff fe99 	bl	c3466 <_ZN7FatFile7seekSetEm>
  if (!sync()) {
   c3734:	4620      	mov	r0, r4
   c3736:	f7ff ff43 	bl	c35c0 <_ZN7FatFile4syncEv>
   c373a:	2800      	cmp	r0, #0
   c373c:	d0e2      	beq.n	c3704 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   c373e:	4639      	mov	r1, r7
   c3740:	4620      	mov	r0, r4
   c3742:	f7ff fd9b 	bl	c327c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   c3746:	2800      	cmp	r0, #0
   c3748:	d0dc      	beq.n	c3704 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  memcpy(&dot, dir, sizeof(dot));
   c374a:	466a      	mov	r2, sp
  dir->attributes = DIR_ATT_DIRECTORY;
   c374c:	72c5      	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
   c374e:	4603      	mov	r3, r0
   c3750:	f100 0c20 	add.w	ip, r0, #32
   c3754:	4615      	mov	r5, r2
   c3756:	6818      	ldr	r0, [r3, #0]
   c3758:	6859      	ldr	r1, [r3, #4]
   c375a:	4617      	mov	r7, r2
   c375c:	c703      	stmia	r7!, {r0, r1}
   c375e:	3308      	adds	r3, #8
   c3760:	4563      	cmp	r3, ip
   c3762:	463a      	mov	r2, r7
   c3764:	d1f7      	bne.n	c3756 <_ZN7FatFile5mkdirEPS_P7fname_t+0x62>
    dot.name[i] = ' ';
   c3766:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  block = m_vol->clusterFirstBlock(m_firstCluster);
   c376a:	6a21      	ldr	r1, [r4, #32]
   c376c:	68a0      	ldr	r0, [r4, #8]
    dot.name[i] = ' ';
   c376e:	f8cd 3001 	str.w	r3, [sp, #1]
   c3772:	f8cd 3005 	str.w	r3, [sp, #5]
   c3776:	f8ad 3009 	strh.w	r3, [sp, #9]
  block = m_vol->clusterFirstBlock(m_firstCluster);
   c377a:	f000 fdea 	bl	c4352 <_ZNK9FatVolume17clusterFirstBlockEm>
   c377e:	4601      	mov	r1, r0
    return m_cache.read(blockNumber, options);
   c3780:	68a0      	ldr	r0, [r4, #8]
   c3782:	2201      	movs	r2, #1
   c3784:	3024      	adds	r0, #36	; 0x24
   c3786:	f000 fdc1 	bl	c430c <_ZN8FatCache4readEmh>
  if (!pc) {
   c378a:	4603      	mov	r3, r0
   c378c:	2800      	cmp	r0, #0
   c378e:	d0b9      	beq.n	c3704 <_ZN7FatFile5mkdirEPS_P7fname_t+0x10>
  memcpy(&pc->dir[0], &dot, sizeof(dot));
   c3790:	222e      	movs	r2, #46	; 0x2e
   c3792:	f88d 2000 	strb.w	r2, [sp]
   c3796:	46ac      	mov	ip, r5
   c3798:	4607      	mov	r7, r0
   c379a:	f10d 0e20 	add.w	lr, sp, #32
   c379e:	4662      	mov	r2, ip
   c37a0:	ca03      	ldmia	r2!, {r0, r1}
   c37a2:	4572      	cmp	r2, lr
   c37a4:	6038      	str	r0, [r7, #0]
   c37a6:	6079      	str	r1, [r7, #4]
   c37a8:	4694      	mov	ip, r2
   c37aa:	f107 0708 	add.w	r7, r7, #8
   c37ae:	d1f6      	bne.n	c379e <_ZN7FatFile5mkdirEPS_P7fname_t+0xaa>
  dot.name[1] = '.';
   c37b0:	222e      	movs	r2, #46	; 0x2e
   c37b2:	f88d 2001 	strb.w	r2, [sp, #1]
  dot.firstClusterLow = parent->m_firstCluster & 0XFFFF;
   c37b6:	6a32      	ldr	r2, [r6, #32]
   c37b8:	f8ad 201a 	strh.w	r2, [sp, #26]
  dot.firstClusterHigh = parent->m_firstCluster >> 16;
   c37bc:	0c11      	lsrs	r1, r2, #16
   c37be:	f8ad 1014 	strh.w	r1, [sp, #20]
  memcpy(&pc->dir[1], &dot, sizeof(dot));
   c37c2:	462a      	mov	r2, r5
   c37c4:	3320      	adds	r3, #32
   c37c6:	ae08      	add	r6, sp, #32
   c37c8:	4615      	mov	r5, r2
   c37ca:	cd03      	ldmia	r5!, {r0, r1}
   c37cc:	42b5      	cmp	r5, r6
   c37ce:	6018      	str	r0, [r3, #0]
   c37d0:	6059      	str	r1, [r3, #4]
   c37d2:	462a      	mov	r2, r5
   c37d4:	f103 0308 	add.w	r3, r3, #8
   c37d8:	d1f6      	bne.n	c37c8 <_ZN7FatFile5mkdirEPS_P7fname_t+0xd4>
  return m_vol->cacheSync();
   c37da:	68a0      	ldr	r0, [r4, #8]
   c37dc:	f7ff fcf8 	bl	c31d0 <_ZN9FatVolume9cacheSyncEv>
   c37e0:	e791      	b.n	c3706 <_ZN7FatFile5mkdirEPS_P7fname_t+0x12>

000c37e2 <_ZN7FatFile5mkdirEPS_PKcb>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   c37e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   c37e4:	b093      	sub	sp, #76	; 0x4c
   c37e6:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   c37e8:	2300      	movs	r3, #0
   c37ea:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !parent->isDir()) {
   c37ec:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   c37ee:	9201      	str	r2, [sp, #4]
   c37f0:	4606      	mov	r6, r0
   c37f2:	460c      	mov	r4, r1
  if (isOpen() || !parent->isDir()) {
   c37f4:	b113      	cbz	r3, c37fc <_ZN7FatFile5mkdirEPS_PKcb+0x1a>
  return false;
   c37f6:	2000      	movs	r0, #0
}
   c37f8:	b013      	add	sp, #76	; 0x4c
   c37fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
   c37fc:	780b      	ldrb	r3, [r1, #0]
   c37fe:	f013 0f70 	tst.w	r3, #112	; 0x70
   c3802:	d0f8      	beq.n	c37f6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  if (isDirSeparator(*path)) {
   c3804:	7813      	ldrb	r3, [r2, #0]
   c3806:	2b2f      	cmp	r3, #47	; 0x2f
   c3808:	d10d      	bne.n	c3826 <_ZN7FatFile5mkdirEPS_PKcb+0x44>
    while (isDirSeparator(*path)) {
   c380a:	9a01      	ldr	r2, [sp, #4]
   c380c:	7813      	ldrb	r3, [r2, #0]
   c380e:	2b2f      	cmp	r3, #47	; 0x2f
   c3810:	d102      	bne.n	c3818 <_ZN7FatFile5mkdirEPS_PKcb+0x36>
      path++;
   c3812:	3201      	adds	r2, #1
   c3814:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   c3816:	e7f8      	b.n	c380a <_ZN7FatFile5mkdirEPS_PKcb+0x28>
    return m_attr;
   c3818:	68a1      	ldr	r1, [r4, #8]
   c381a:	a809      	add	r0, sp, #36	; 0x24
   c381c:	f7ff fcc2 	bl	c31a4 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(parent->m_vol)) {
   c3820:	2800      	cmp	r0, #0
   c3822:	d0e8      	beq.n	c37f6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    parent = &tmpDir;
   c3824:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   c3826:	9801      	ldr	r0, [sp, #4]
   c3828:	aa01      	add	r2, sp, #4
   c382a:	a903      	add	r1, sp, #12
   c382c:	f000 f9e8 	bl	c3c00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   c3830:	2800      	cmp	r0, #0
   c3832:	d0e0      	beq.n	c37f6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
    if (!*path) {
   c3834:	9b01      	ldr	r3, [sp, #4]
   c3836:	781b      	ldrb	r3, [r3, #0]
   c3838:	b1e3      	cbz	r3, c3874 <_ZN7FatFile5mkdirEPS_PKcb+0x92>
    if (!open(parent, &fname, O_RDONLY)) {
   c383a:	2300      	movs	r3, #0
   c383c:	aa03      	add	r2, sp, #12
   c383e:	4621      	mov	r1, r4
   c3840:	4630      	mov	r0, r6
   c3842:	f000 fb71 	bl	c3f28 <_ZN7FatFile4openEPS_P7fname_ti>
   c3846:	b158      	cbz	r0, c3860 <_ZN7FatFile5mkdirEPS_PKcb+0x7e>
    tmpDir = *this;
   c3848:	4635      	mov	r5, r6
   c384a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c384c:	ac09      	add	r4, sp, #36	; 0x24
   c384e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c3850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c3852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c3854:	682b      	ldr	r3, [r5, #0]
   c3856:	6023      	str	r3, [r4, #0]
    close();
   c3858:	4630      	mov	r0, r6
   c385a:	f7ff fee7 	bl	c362c <_ZN7FatFile5closeEv>
  while (1) {
   c385e:	e7e1      	b.n	c3824 <_ZN7FatFile5mkdirEPS_PKcb+0x42>
      if (!pFlag || !mkdir(parent, &fname)) {
   c3860:	2f00      	cmp	r7, #0
   c3862:	d0c8      	beq.n	c37f6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
   c3864:	aa03      	add	r2, sp, #12
   c3866:	4621      	mov	r1, r4
   c3868:	4630      	mov	r0, r6
   c386a:	f7ff ff43 	bl	c36f4 <_ZN7FatFile5mkdirEPS_P7fname_t>
   c386e:	2800      	cmp	r0, #0
   c3870:	d1ea      	bne.n	c3848 <_ZN7FatFile5mkdirEPS_PKcb+0x66>
   c3872:	e7c0      	b.n	c37f6 <_ZN7FatFile5mkdirEPS_PKcb+0x14>
  return mkdir(parent, &fname);
   c3874:	aa03      	add	r2, sp, #12
   c3876:	4621      	mov	r1, r4
   c3878:	4630      	mov	r0, r6
   c387a:	f7ff ff3b 	bl	c36f4 <_ZN7FatFile5mkdirEPS_P7fname_t>
   c387e:	e7bb      	b.n	c37f8 <_ZN7FatFile5mkdirEPS_PKcb+0x16>

000c3880 <_ZN7FatFile6renameEPS_PKc>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
   c3880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
   c3884:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
   c3886:	b09b      	sub	sp, #108	; 0x6c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   c3888:	f04f 0900 	mov.w	r9, #0
  if (!(isFile() || isSubDir())) {
   c388c:	f013 0f18 	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
   c3890:	4604      	mov	r4, r0
   c3892:	460f      	mov	r7, r1
   c3894:	4690      	mov	r8, r2
   c3896:	f8cd 9020 	str.w	r9, [sp, #32]
   c389a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
   c389e:	d103      	bne.n	c38a8 <_ZN7FatFile6renameEPS_PKc+0x28>
  return false;
   c38a0:	2000      	movs	r0, #0
}
   c38a2:	b01b      	add	sp, #108	; 0x6c
   c38a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
   c38a8:	6882      	ldr	r2, [r0, #8]
   c38aa:	688b      	ldr	r3, [r1, #8]
   c38ac:	429a      	cmp	r2, r3
   c38ae:	d1f7      	bne.n	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
  oldFile = *this;
   c38b0:	4626      	mov	r6, r4
  sync();
   c38b2:	f7ff fe85 	bl	c35c0 <_ZN7FatFile4syncEv>
  oldFile = *this;
   c38b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   c38b8:	ad11      	add	r5, sp, #68	; 0x44
   c38ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c38bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   c38be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c38c0:	6833      	ldr	r3, [r6, #0]
   c38c2:	602b      	str	r3, [r5, #0]
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
   c38c4:	4649      	mov	r1, r9
   c38c6:	4620      	mov	r0, r4
   c38c8:	f7ff fcd8 	bl	c327c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   c38cc:	2800      	cmp	r0, #0
   c38ce:	d0e7      	beq.n	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
  memcpy(&entry, dir, sizeof(entry));
   c38d0:	466a      	mov	r2, sp
   c38d2:	4603      	mov	r3, r0
   c38d4:	f100 0c20 	add.w	ip, r0, #32
   c38d8:	4615      	mov	r5, r2
   c38da:	6818      	ldr	r0, [r3, #0]
   c38dc:	6859      	ldr	r1, [r3, #4]
   c38de:	4616      	mov	r6, r2
   c38e0:	c603      	stmia	r6!, {r0, r1}
   c38e2:	3308      	adds	r3, #8
   c38e4:	4563      	cmp	r3, ip
   c38e6:	4632      	mov	r2, r6
   c38e8:	d1f7      	bne.n	c38da <_ZN7FatFile6renameEPS_PKc+0x5a>
  if (isFile()) {
   c38ea:	7823      	ldrb	r3, [r4, #0]
   c38ec:	f013 0308 	ands.w	r3, r3, #8
   c38f0:	ae08      	add	r6, sp, #32
   c38f2:	d00a      	beq.n	c390a <_ZN7FatFile6renameEPS_PKc+0x8a>
    if (!file.open(dirFile, newPath, O_WRONLY | O_CREAT | O_EXCL)) {
   c38f4:	f640 2301 	movw	r3, #2561	; 0xa01
   c38f8:	4642      	mov	r2, r8
   c38fa:	4639      	mov	r1, r7
   c38fc:	4630      	mov	r0, r6
   c38fe:	f7ff fe9c 	bl	c363a <_ZN7FatFile4openEPS_PKci>
   c3902:	2800      	cmp	r0, #0
   c3904:	d0cc      	beq.n	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
  uint32_t dirCluster = 0;
   c3906:	2700      	movs	r7, #0
   c3908:	e007      	b.n	c391a <_ZN7FatFile6renameEPS_PKc+0x9a>
    if (!file.mkdir(dirFile, newPath, false)) {
   c390a:	4642      	mov	r2, r8
   c390c:	4639      	mov	r1, r7
   c390e:	4630      	mov	r0, r6
   c3910:	f7ff ff67 	bl	c37e2 <_ZN7FatFile5mkdirEPS_PKcb>
   c3914:	2800      	cmp	r0, #0
   c3916:	d0c3      	beq.n	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
    dirCluster = file.m_firstCluster;
   c3918:	9f10      	ldr	r7, [sp, #64]	; 0x40
  m_dirBlock = file.m_dirBlock;
   c391a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   c391c:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
   c391e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   c3922:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
   c3924:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   c3928:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
   c392a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c392c:	60e3      	str	r3, [r4, #12]
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   c392e:	2101      	movs	r1, #1
  file.m_attr = FILE_ATTR_CLOSED;
   c3930:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   c3932:	4620      	mov	r0, r4
  file.m_attr = FILE_ATTR_CLOSED;
   c3934:	f88d 3020 	strb.w	r3, [sp, #32]
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   c3938:	f7ff fca0 	bl	c327c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   c393c:	2800      	cmp	r0, #0
   c393e:	d0af      	beq.n	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
  memcpy(&dir->creationTimeTenths, &entry.creationTimeTenths,
   c3940:	f10d 030d 	add.w	r3, sp, #13
   c3944:	f100 020d 	add.w	r2, r0, #13
   c3948:	f10d 011d 	add.w	r1, sp, #29
   c394c:	f853 cb04 	ldr.w	ip, [r3], #4
   c3950:	f842 cb04 	str.w	ip, [r2], #4
   c3954:	428b      	cmp	r3, r1
   c3956:	d1f9      	bne.n	c394c <_ZN7FatFile6renameEPS_PKc+0xcc>
   c3958:	8819      	ldrh	r1, [r3, #0]
   c395a:	8011      	strh	r1, [r2, #0]
   c395c:	789b      	ldrb	r3, [r3, #2]
   c395e:	7093      	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
   c3960:	f89d 300b 	ldrb.w	r3, [sp, #11]
   c3964:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
   c3966:	2f00      	cmp	r7, #0
   c3968:	d038      	beq.n	c39dc <_ZN7FatFile6renameEPS_PKc+0x15c>
    uint32_t block = m_vol->clusterFirstBlock(dirCluster);
   c396a:	4639      	mov	r1, r7
   c396c:	68a0      	ldr	r0, [r4, #8]
   c396e:	f000 fcf0 	bl	c4352 <_ZNK9FatVolume17clusterFirstBlockEm>
   c3972:	4601      	mov	r1, r0
   c3974:	68a0      	ldr	r0, [r4, #8]
   c3976:	2200      	movs	r2, #0
   c3978:	3024      	adds	r0, #36	; 0x24
   c397a:	f000 fcc7 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c397e:	2800      	cmp	r0, #0
   c3980:	d08e      	beq.n	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
    memcpy(&entry, &pc->dir[1], sizeof(entry));
   c3982:	f100 0220 	add.w	r2, r0, #32
   c3986:	46ae      	mov	lr, r5
   c3988:	f100 0340 	add.w	r3, r0, #64	; 0x40
   c398c:	6810      	ldr	r0, [r2, #0]
   c398e:	6851      	ldr	r1, [r2, #4]
   c3990:	46f4      	mov	ip, lr
   c3992:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   c3996:	3208      	adds	r2, #8
   c3998:	429a      	cmp	r2, r3
   c399a:	46e6      	mov	lr, ip
   c399c:	d1f6      	bne.n	c398c <_ZN7FatFile6renameEPS_PKc+0x10c>
    if (!m_vol->freeChain(dirCluster)) {
   c399e:	68a0      	ldr	r0, [r4, #8]
   c39a0:	4639      	mov	r1, r7
   c39a2:	f000 fd7c 	bl	c449e <_ZN9FatVolume9freeChainEm>
   c39a6:	2800      	cmp	r0, #0
   c39a8:	f43f af7a 	beq.w	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
    block = m_vol->clusterFirstBlock(m_firstCluster);
   c39ac:	6a21      	ldr	r1, [r4, #32]
   c39ae:	68a0      	ldr	r0, [r4, #8]
   c39b0:	f000 fccf 	bl	c4352 <_ZNK9FatVolume17clusterFirstBlockEm>
   c39b4:	4601      	mov	r1, r0
   c39b6:	68a0      	ldr	r0, [r4, #8]
   c39b8:	2201      	movs	r2, #1
   c39ba:	3024      	adds	r0, #36	; 0x24
   c39bc:	f000 fca6 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c39c0:	2800      	cmp	r0, #0
   c39c2:	f43f af6d 	beq.w	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
    memcpy(&pc->dir[1], &entry, sizeof(entry));
   c39c6:	f100 0320 	add.w	r3, r0, #32
   c39ca:	462a      	mov	r2, r5
   c39cc:	ca03      	ldmia	r2!, {r0, r1}
   c39ce:	42b2      	cmp	r2, r6
   c39d0:	6018      	str	r0, [r3, #0]
   c39d2:	6059      	str	r1, [r3, #4]
   c39d4:	4615      	mov	r5, r2
   c39d6:	f103 0308 	add.w	r3, r3, #8
   c39da:	d1f6      	bne.n	c39ca <_ZN7FatFile6renameEPS_PKc+0x14a>
  oldFile.m_firstCluster = 0;
   c39dc:	2300      	movs	r3, #0
   c39de:	9319      	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = F_WRITE;
   c39e0:	2302      	movs	r3, #2
   c39e2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
  if (!oldFile.remove()) {
   c39e6:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_attr = FILE_ATTR_FILE;
   c39e8:	2308      	movs	r3, #8
   c39ea:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
   c39ee:	f000 f9e5 	bl	c3dbc <_ZN7FatFile6removeEv>
   c39f2:	2800      	cmp	r0, #0
   c39f4:	f43f af54 	beq.w	c38a0 <_ZN7FatFile6renameEPS_PKc+0x20>
  return m_vol->cacheSync();
   c39f8:	68a0      	ldr	r0, [r4, #8]
   c39fa:	f7ff fbe9 	bl	c31d0 <_ZN9FatVolume9cacheSyncEv>
   c39fe:	e750      	b.n	c38a2 <_ZN7FatFile6renameEPS_PKc+0x22>

000c3a00 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   c3a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   c3a04:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   c3a06:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   c3a08:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   c3a0a:	4604      	mov	r4, r0
   c3a0c:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   c3a0e:	d55b      	bpl.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
   c3a10:	7883      	ldrb	r3, [r0, #2]
   c3a12:	079a      	lsls	r2, r3, #30
   c3a14:	d558      	bpl.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   c3a16:	071b      	lsls	r3, r3, #28
   c3a18:	d451      	bmi.n	c3abe <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   c3a1a:	6963      	ldr	r3, [r4, #20]
   c3a1c:	43db      	mvns	r3, r3
   c3a1e:	42bb      	cmp	r3, r7
   c3a20:	d352      	bcc.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
   c3a22:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   c3a24:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   c3a28:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   c3a2a:	f1b8 0f00 	cmp.w	r8, #0
   c3a2e:	f000 8091 	beq.w	c3b54 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   c3a32:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   c3a34:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   c3a36:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   c3a3a:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   c3a3e:	d10e      	bne.n	c3a5e <_ZN7FatFile5writeEPKvj+0x5e>
   c3a40:	b96d      	cbnz	r5, c3a5e <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   c3a42:	6921      	ldr	r1, [r4, #16]
   c3a44:	2900      	cmp	r1, #0
   c3a46:	d046      	beq.n	c3ad6 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   c3a48:	4652      	mov	r2, sl
   c3a4a:	f000 fc88 	bl	c435e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   c3a4e:	2800      	cmp	r0, #0
   c3a50:	db3a      	blt.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   c3a52:	d104      	bne.n	c3a5e <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   c3a54:	4620      	mov	r0, r4
   c3a56:	f7ff fbc8 	bl	c31ea <_ZN7FatFile10addClusterEv>
   c3a5a:	2800      	cmp	r0, #0
   c3a5c:	d034      	beq.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   c3a5e:	6921      	ldr	r1, [r4, #16]
   c3a60:	68a0      	ldr	r0, [r4, #8]
   c3a62:	f000 fc76 	bl	c4352 <_ZNK9FatVolume17clusterFirstBlockEm>
   c3a66:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   c3a68:	68a0      	ldr	r0, [r4, #8]
   c3a6a:	b915      	cbnz	r5, c3a72 <_ZN7FatFile5writeEPKvj+0x72>
   c3a6c:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   c3a70:	d23f      	bcs.n	c3af2 <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   c3a72:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   c3a76:	4546      	cmp	r6, r8
   c3a78:	bf28      	it	cs
   c3a7a:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   c3a7c:	2d00      	cmp	r5, #0
   c3a7e:	d136      	bne.n	c3aee <_ZN7FatFile5writeEPKvj+0xee>
   c3a80:	6962      	ldr	r2, [r4, #20]
   c3a82:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   c3a84:	429a      	cmp	r2, r3
   c3a86:	bf34      	ite	cc
   c3a88:	2201      	movcc	r2, #1
   c3a8a:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   c3a8c:	3024      	adds	r0, #36	; 0x24
   c3a8e:	f000 fc3d 	bl	c430c <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   c3a92:	b1c8      	cbz	r0, c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   c3a94:	4428      	add	r0, r5
   c3a96:	4632      	mov	r2, r6
   c3a98:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   c3a9a:	4435      	add	r5, r6
      memcpy(dst, src, n);
   c3a9c:	f006 fb84 	bl	ca1a8 <memcpy>
      if (512 == (n + blockOffset)) {
   c3aa0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   c3aa4:	d104      	bne.n	c3ab0 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   c3aa6:	68a0      	ldr	r0, [r4, #8]
   c3aa8:	3024      	adds	r0, #36	; 0x24
   c3aaa:	f000 fc07 	bl	c42bc <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   c3aae:	b158      	cbz	r0, c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   c3ab0:	6963      	ldr	r3, [r4, #20]
   c3ab2:	4433      	add	r3, r6
   c3ab4:	6163      	str	r3, [r4, #20]
    src += n;
   c3ab6:	44b1      	add	r9, r6
    nToWrite -= n;
   c3ab8:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   c3abc:	e7b4      	b.n	c3a28 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   c3abe:	69c1      	ldr	r1, [r0, #28]
   c3ac0:	f7ff fcd1 	bl	c3466 <_ZN7FatFile7seekSetEm>
   c3ac4:	2800      	cmp	r0, #0
   c3ac6:	d1a8      	bne.n	c3a1a <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   c3ac8:	7863      	ldrb	r3, [r4, #1]
   c3aca:	f043 0301 	orr.w	r3, r3, #1
   c3ace:	7063      	strb	r3, [r4, #1]
  return -1;
   c3ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c3ad4:	e050      	b.n	c3b78 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   c3ad6:	6a23      	ldr	r3, [r4, #32]
   c3ad8:	b93b      	cbnz	r3, c3aea <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   c3ada:	4620      	mov	r0, r4
   c3adc:	f7ff fb85 	bl	c31ea <_ZN7FatFile10addClusterEv>
   c3ae0:	2800      	cmp	r0, #0
   c3ae2:	d0f1      	beq.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   c3ae4:	6923      	ldr	r3, [r4, #16]
   c3ae6:	6223      	str	r3, [r4, #32]
   c3ae8:	e7b9      	b.n	c3a5e <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   c3aea:	6123      	str	r3, [r4, #16]
   c3aec:	e7b7      	b.n	c3a5e <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   c3aee:	2201      	movs	r2, #1
   c3af0:	e7cc      	b.n	c3a8c <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   c3af2:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   c3af6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   c3af8:	d31b      	bcc.n	c3b32 <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   c3afa:	f890 c004 	ldrb.w	ip, [r0, #4]
   c3afe:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   c3b02:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   c3b04:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   c3b08:	4573      	cmp	r3, lr
   c3b0a:	bf28      	it	cs
   c3b0c:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   c3b0e:	4291      	cmp	r1, r2
      n = 512*nb;
   c3b10:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   c3b14:	d307      	bcc.n	c3b26 <_ZN7FatFile5writeEPKvj+0x126>
   c3b16:	441a      	add	r2, r3
   c3b18:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   c3b1a:	bf82      	ittt	hi
   c3b1c:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   c3b20:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   c3b24:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   c3b26:	68a5      	ldr	r5, [r4, #8]
   c3b28:	464a      	mov	r2, r9
   c3b2a:	6828      	ldr	r0, [r5, #0]
   c3b2c:	f000 ffd1 	bl	c4ad2 <_ZN9SdSpiCard11writeBlocksEmPKhj>
   c3b30:	e7bd      	b.n	c3aae <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   c3b32:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   c3b34:	bf02      	ittt	eq
   c3b36:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   c3b3a:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   c3b3e:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   c3b40:	68a3      	ldr	r3, [r4, #8]
   c3b42:	464a      	mov	r2, r9
   c3b44:	6818      	ldr	r0, [r3, #0]
   c3b46:	f000 ff4e 	bl	c49e6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   c3b4a:	2800      	cmp	r0, #0
   c3b4c:	d0bc      	beq.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   c3b4e:	f44f 7600 	mov.w	r6, #512	; 0x200
   c3b52:	e7ad      	b.n	c3ab0 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   c3b54:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   c3b56:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   c3b58:	42b2      	cmp	r2, r6
   c3b5a:	d204      	bcs.n	c3b66 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   c3b5c:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   c3b5e:	f043 0304 	orr.w	r3, r3, #4
   c3b62:	70a3      	strb	r3, [r4, #2]
   c3b64:	e003      	b.n	c3b6e <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   c3b66:	4a08      	ldr	r2, [pc, #32]	; (c3b88 <_ZN7FatFile5writeEPKvj+0x188>)
   c3b68:	6812      	ldr	r2, [r2, #0]
   c3b6a:	2a00      	cmp	r2, #0
   c3b6c:	d1f7      	bne.n	c3b5e <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   c3b6e:	f994 3002 	ldrsb.w	r3, [r4, #2]
   c3b72:	2b00      	cmp	r3, #0
   c3b74:	db02      	blt.n	c3b7c <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   c3b76:	4638      	mov	r0, r7
}
   c3b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   c3b7c:	4620      	mov	r0, r4
   c3b7e:	f7ff fd1f 	bl	c35c0 <_ZN7FatFile4syncEv>
   c3b82:	2800      	cmp	r0, #0
   c3b84:	d1f7      	bne.n	c3b76 <_ZN7FatFile5writeEPKvj+0x176>
   c3b86:	e79f      	b.n	c3ac8 <_ZN7FatFile5writeEPKvj+0xc8>
   c3b88:	2003e61c 	.word	0x2003e61c

000c3b8c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   c3b8c:	2904      	cmp	r1, #4
   c3b8e:	d804      	bhi.n	c3b9a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   c3b90:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   c3b94:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   c3b98:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   c3b9a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   c3b9c:	bf9b      	ittet	ls
   c3b9e:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   c3ba2:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   c3ba6:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   c3ba8:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   c3baa:	bf84      	itt	hi
   c3bac:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   c3bb0:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   c3bb2:	4770      	bx	lr

000c3bb4 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   c3bb4:	1e41      	subs	r1, r0, #1
   c3bb6:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   c3bba:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   c3bbc:	0842      	lsrs	r2, r0, #1
   c3bbe:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   c3bc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c3bc6:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   c3bca:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   c3bcc:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   c3bce:	d1f5      	bne.n	c3bbc <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   c3bd0:	4770      	bx	lr

000c3bd2 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   c3bd2:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   c3bd4:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   c3bd6:	4604      	mov	r4, r0
   c3bd8:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   c3bda:	b923      	cbnz	r3, c3be6 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   c3bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   c3be0:	6889      	ldr	r1, [r1, #8]
   c3be2:	f7ff bb5a 	b.w	c329a <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   c3be6:	2224      	movs	r2, #36	; 0x24
   c3be8:	2100      	movs	r1, #0
   c3bea:	f006 faeb 	bl	ca1c4 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   c3bee:	2310      	movs	r3, #16
  m_flags = F_READ;
   c3bf0:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   c3bf2:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   c3bf4:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   c3bf6:	68ab      	ldr	r3, [r5, #8]
   c3bf8:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   c3bfa:	68eb      	ldr	r3, [r5, #12]
   c3bfc:	6223      	str	r3, [r4, #32]
}
   c3bfe:	bd38      	pop	{r3, r4, r5, pc}

000c3c00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   c3c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c3c04:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   c3c06:	f810 3b01 	ldrb.w	r3, [r0], #1
   c3c0a:	2b20      	cmp	r3, #32
   c3c0c:	d0fa      	beq.n	c3c04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   c3c0e:	4d6a      	ldr	r5, [pc, #424]	; (c3db8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   c3c10:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   c3c12:	2400      	movs	r4, #0
    c = path[len];
   c3c14:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   c3c16:	b1c3      	cbz	r3, c3c4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   c3c18:	2b2f      	cmp	r3, #47	; 0x2f
   c3c1a:	d016      	beq.n	c3c4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   c3c1c:	2b5c      	cmp	r3, #92	; 0x5c
   c3c1e:	d102      	bne.n	c3c26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   c3c20:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   c3c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   c3c26:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   c3c2a:	b2c0      	uxtb	r0, r0
   c3c2c:	281d      	cmp	r0, #29
   c3c2e:	d803      	bhi.n	c3c38 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   c3c30:	fa25 f000 	lsr.w	r0, r5, r0
   c3c34:	07c0      	lsls	r0, r0, #31
   c3c36:	d4f3      	bmi.n	c3c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   c3c38:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   c3c3c:	283c      	cmp	r0, #60	; 0x3c
   c3c3e:	d0ef      	beq.n	c3c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   c3c40:	3b20      	subs	r3, #32
   c3c42:	2b5e      	cmp	r3, #94	; 0x5e
   c3c44:	d8ec      	bhi.n	c3c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   c3c46:	3401      	adds	r4, #1
    c = path[len];
   c3c48:	e7e4      	b.n	c3c14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   c3c4a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   c3c4c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   c3c4e:	4607      	mov	r7, r0
   c3c50:	f810 5b01 	ldrb.w	r5, [r0], #1
   c3c54:	2d20      	cmp	r5, #32
   c3c56:	d0fa      	beq.n	c3c4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   c3c58:	2d2f      	cmp	r5, #47	; 0x2f
   c3c5a:	d0f8      	beq.n	c3c4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   c3c5c:	6017      	str	r7, [r2, #0]
  while (len) {
   c3c5e:	b14c      	cbz	r4, c3c74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   c3c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   c3c64:	2a2e      	cmp	r2, #46	; 0x2e
   c3c66:	d001      	beq.n	c3c6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   c3c68:	2a20      	cmp	r2, #32
   c3c6a:	d101      	bne.n	c3c70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   c3c6c:	3c01      	subs	r4, #1
  while (len) {
   c3c6e:	e7f6      	b.n	c3c5e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   c3c70:	2cff      	cmp	r4, #255	; 0xff
   c3c72:	dcd5      	bgt.n	c3c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   c3c74:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   c3c78:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   c3c7c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   c3c7e:	f8c1 300d 	str.w	r3, [r1, #13]
   c3c82:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   c3c84:	f04f 0800 	mov.w	r8, #0
   c3c88:	f816 3008 	ldrb.w	r3, [r6, r8]
   c3c8c:	2b2e      	cmp	r3, #46	; 0x2e
   c3c8e:	d001      	beq.n	c3c94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   c3c90:	2b20      	cmp	r3, #32
   c3c92:	d102      	bne.n	c3c9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   c3c94:	f108 0801 	add.w	r8, r8, #1
   c3c98:	e7f6      	b.n	c3c88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   c3c9a:	fab8 f088 	clz	r0, r8
   c3c9e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   c3ca0:	1e65      	subs	r5, r4, #1
   c3ca2:	1c6b      	adds	r3, r5, #1
   c3ca4:	d002      	beq.n	c3cac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   c3ca6:	5d73      	ldrb	r3, [r6, r5]
   c3ca8:	2b2e      	cmp	r3, #46	; 0x2e
   c3caa:	d114      	bne.n	c3cd6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   c3cac:	f04f 0900 	mov.w	r9, #0
   c3cb0:	2707      	movs	r7, #7
   c3cb2:	464a      	mov	r2, r9
   c3cb4:	46ca      	mov	sl, r9
   c3cb6:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   c3cba:	45a0      	cmp	r8, r4
   c3cbc:	da68      	bge.n	c3d90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   c3cbe:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   c3cc2:	2b20      	cmp	r3, #32
   c3cc4:	d003      	beq.n	c3cce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   c3cc6:	2b2e      	cmp	r3, #46	; 0x2e
   c3cc8:	d107      	bne.n	c3cda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   c3cca:	45a8      	cmp	r8, r5
   c3ccc:	d012      	beq.n	c3cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   c3cce:	2000      	movs	r0, #0
  for (; si < len; si++) {
   c3cd0:	f108 0801 	add.w	r8, r8, #1
   c3cd4:	e7f1      	b.n	c3cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   c3cd6:	3d01      	subs	r5, #1
   c3cd8:	e7e3      	b.n	c3ca2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   c3cda:	2b22      	cmp	r3, #34	; 0x22
   c3cdc:	d008      	beq.n	c3cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   c3cde:	2b7c      	cmp	r3, #124	; 0x7c
   c3ce0:	d006      	beq.n	c3cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   c3ce2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   c3ce6:	f1bc 0f05 	cmp.w	ip, #5
   c3cea:	d80a      	bhi.n	c3d02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   c3cec:	2b2d      	cmp	r3, #45	; 0x2d
   c3cee:	d012      	beq.n	c3d16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   c3cf0:	45a8      	cmp	r8, r5
   c3cf2:	d15b      	bne.n	c3dac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   c3cf4:	2f0a      	cmp	r7, #10
   c3cf6:	d04a      	beq.n	c3d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   c3cf8:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   c3cfa:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   c3cfc:	f04f 0e10 	mov.w	lr, #16
   c3d00:	e7e6      	b.n	c3cd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   c3d02:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   c3d06:	f1bc 0f05 	cmp.w	ip, #5
   c3d0a:	d9f1      	bls.n	c3cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   c3d0c:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   c3d10:	f1bc 0f02 	cmp.w	ip, #2
   c3d14:	d9ec      	bls.n	c3cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   c3d16:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   c3d1a:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   c3d1e:	d8e7      	bhi.n	c3cf0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   c3d20:	45a8      	cmp	r8, r5
   c3d22:	d0e7      	beq.n	c3cf4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   c3d24:	42ba      	cmp	r2, r7
   c3d26:	d830      	bhi.n	c3d8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   c3d28:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   c3d2c:	f1bc 0f19 	cmp.w	ip, #25
   c3d30:	d81a      	bhi.n	c3d68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   c3d32:	3b20      	subs	r3, #32
        lc |= bit;
   c3d34:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   c3d38:	b2db      	uxtb	r3, r3
        lc |= bit;
   c3d3a:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   c3d3e:	f102 0c01 	add.w	ip, r2, #1
   c3d42:	fa5f fc8c 	uxtb.w	ip, ip
   c3d46:	440a      	add	r2, r1
      if (i < 7) {
   c3d48:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   c3d4c:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   c3d4e:	d801      	bhi.n	c3d54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   c3d50:	f881 c00c 	strb.w	ip, [r1, #12]
   c3d54:	4662      	mov	r2, ip
   c3d56:	e7bb      	b.n	c3cd0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   c3d58:	45a8      	cmp	r8, r5
   c3d5a:	dc18      	bgt.n	c3d8e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   c3d5c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   c3d5e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   c3d60:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   c3d62:	f04f 0e10 	mov.w	lr, #16
   c3d66:	e7b2      	b.n	c3cce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   c3d68:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   c3d6c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   c3d70:	bf98      	it	ls
   c3d72:	ea4e 0a0a 	orrls.w	sl, lr, sl
   c3d76:	e7e2      	b.n	c3d3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   c3d78:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   c3d7a:	2001      	movs	r0, #1
   c3d7c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   c3d7e:	4419      	add	r1, r3
   c3d80:	237e      	movs	r3, #126	; 0x7e
   c3d82:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   c3d84:	2331      	movs	r3, #49	; 0x31
   c3d86:	738b      	strb	r3, [r1, #14]
   c3d88:	e74b      	b.n	c3c22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   c3d8a:	2f0a      	cmp	r7, #10
   c3d8c:	d1e4      	bne.n	c3d58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   c3d8e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   c3d90:	7b4b      	ldrb	r3, [r1, #13]
   c3d92:	2b20      	cmp	r3, #32
   c3d94:	f43f af44 	beq.w	c3c20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   c3d98:	2800      	cmp	r0, #0
   c3d9a:	d0ed      	beq.n	c3d78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   c3d9c:	ea1a 0f09 	tst.w	sl, r9
   c3da0:	bf18      	it	ne
   c3da2:	f04f 0902 	movne.w	r9, #2
   c3da6:	f881 9000 	strb.w	r9, [r1]
   c3daa:	e73a      	b.n	c3c22 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   c3dac:	42ba      	cmp	r2, r7
   c3dae:	d8ec      	bhi.n	c3d8a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   c3db0:	2000      	movs	r0, #0
      c = '_';
   c3db2:	235f      	movs	r3, #95	; 0x5f
   c3db4:	e7c3      	b.n	c3d3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   c3db6:	bf00      	nop
   c3db8:	31000101 	.word	0x31000101

000c3dbc <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   c3dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c3dc0:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   c3dc2:	2300      	movs	r3, #0
   c3dc4:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   c3dc6:	7803      	ldrb	r3, [r0, #0]
   c3dc8:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   c3dca:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   c3dcc:	d50a      	bpl.n	c3de4 <_ZN7FatFile6removeEv+0x28>
   c3dce:	7883      	ldrb	r3, [r0, #2]
   c3dd0:	079a      	lsls	r2, r3, #30
   c3dd2:	d507      	bpl.n	c3de4 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   c3dd4:	6a01      	ldr	r1, [r0, #32]
   c3dd6:	b939      	cbnz	r1, c3de8 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   c3dd8:	2101      	movs	r1, #1
   c3dda:	4620      	mov	r0, r4
   c3ddc:	f7ff fa4e 	bl	c327c <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   c3de0:	4605      	mov	r5, r0
   c3de2:	b938      	cbnz	r0, c3df4 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   c3de4:	2000      	movs	r0, #0
   c3de6:	e048      	b.n	c3e7a <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   c3de8:	6880      	ldr	r0, [r0, #8]
   c3dea:	f000 fb58 	bl	c449e <_ZN9FatVolume9freeChainEm>
   c3dee:	2800      	cmp	r0, #0
   c3df0:	d1f2      	bne.n	c3dd8 <_ZN7FatFile6removeEv+0x1c>
   c3df2:	e7f7      	b.n	c3de4 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   c3df4:	f7ff fede 	bl	c3bb4 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   c3df8:	27e5      	movs	r7, #229	; 0xe5
   c3dfa:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   c3dfc:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   c3dfe:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   c3e00:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   c3e02:	68a0      	ldr	r0, [r4, #8]
   c3e04:	f7ff f9e4 	bl	c31d0 <_ZN9FatVolume9cacheSyncEv>
   c3e08:	2800      	cmp	r0, #0
   c3e0a:	d0eb      	beq.n	c3de4 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   c3e0c:	78e3      	ldrb	r3, [r4, #3]
   c3e0e:	2b00      	cmp	r3, #0
   c3e10:	d033      	beq.n	c3e7a <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   c3e12:	4621      	mov	r1, r4
   c3e14:	a801      	add	r0, sp, #4
   c3e16:	f7ff fedc 	bl	c3bd2 <_ZN7FatFile11openClusterEPS_>
   c3e1a:	2800      	cmp	r0, #0
   c3e1c:	d0e2      	beq.n	c3de4 <_ZN7FatFile6removeEv+0x28>
   c3e1e:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   c3e20:	78e3      	ldrb	r3, [r4, #3]
   c3e22:	fa5f f885 	uxtb.w	r8, r5
   c3e26:	4543      	cmp	r3, r8
   c3e28:	d3dc      	bcc.n	c3de4 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   c3e2a:	88a1      	ldrh	r1, [r4, #4]
   c3e2c:	1b49      	subs	r1, r1, r5
   c3e2e:	0149      	lsls	r1, r1, #5
   c3e30:	a801      	add	r0, sp, #4
   c3e32:	f7ff fb18 	bl	c3466 <_ZN7FatFile7seekSetEm>
   c3e36:	2800      	cmp	r0, #0
   c3e38:	d0d4      	beq.n	c3de4 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   c3e3a:	2100      	movs	r1, #0
   c3e3c:	a801      	add	r0, sp, #4
   c3e3e:	f7ff faf3 	bl	c3428 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   c3e42:	2800      	cmp	r0, #0
   c3e44:	d0ce      	beq.n	c3de4 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   c3e46:	7ac3      	ldrb	r3, [r0, #11]
   c3e48:	2b0f      	cmp	r3, #15
   c3e4a:	d1cb      	bne.n	c3de4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   c3e4c:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   c3e4e:	f002 031f 	and.w	r3, r2, #31
   c3e52:	4543      	cmp	r3, r8
   c3e54:	d1c6      	bne.n	c3de4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   c3e56:	7b43      	ldrb	r3, [r0, #13]
   c3e58:	42b3      	cmp	r3, r6
   c3e5a:	d1c3      	bne.n	c3de4 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   c3e5c:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   c3e5e:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   c3e60:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   c3e64:	f043 0301 	orr.w	r3, r3, #1
   c3e68:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   c3e6c:	0653      	lsls	r3, r2, #25
   c3e6e:	f105 0501 	add.w	r5, r5, #1
   c3e72:	d5d5      	bpl.n	c3e20 <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   c3e74:	68a0      	ldr	r0, [r4, #8]
   c3e76:	f7ff f9ab 	bl	c31d0 <_ZN9FatVolume9cacheSyncEv>
}
   c3e7a:	b00a      	add	sp, #40	; 0x28
   c3e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c3e80 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   c3e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   c3e84:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   c3e88:	4606      	mov	r6, r0
   c3e8a:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   c3e8c:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   c3e8e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   c3e90:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   c3e94:	6861      	ldr	r1, [r4, #4]
   c3e96:	68a2      	ldr	r2, [r4, #8]
   c3e98:	186b      	adds	r3, r5, r1
   c3e9a:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   c3e9c:	4411      	add	r1, r2
   c3e9e:	4291      	cmp	r1, r2
   c3ea0:	d006      	beq.n	c3eb0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   c3ea2:	f812 0b01 	ldrb.w	r0, [r2], #1
   c3ea6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   c3eaa:	4043      	eors	r3, r0
   c3eac:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   c3eae:	e7f6      	b.n	c3e9e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   c3eb0:	f1b9 0f03 	cmp.w	r9, #3
   c3eb4:	bf28      	it	cs
   c3eb6:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   c3eba:	f109 0204 	add.w	r2, r9, #4
   c3ebe:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   c3ec0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   c3ec4:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   c3ec6:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   c3ec8:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   c3eca:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   c3ecc:	bf94      	ite	ls
   c3ece:	3130      	addls	r1, #48	; 0x30
   c3ed0:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   c3ed2:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   c3ed4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   c3ed6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   c3eda:	d1f1      	bne.n	c3ec0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   c3edc:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   c3ee0:	2100      	movs	r1, #0
   c3ee2:	735f      	strb	r7, [r3, #13]
   c3ee4:	4630      	mov	r0, r6
   c3ee6:	f7ff fabe 	bl	c3466 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   c3eea:	2101      	movs	r1, #1
   c3eec:	4630      	mov	r0, r6
   c3eee:	f7ff fa9b 	bl	c3428 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   c3ef2:	4601      	mov	r1, r0
   c3ef4:	b928      	cbnz	r0, c3f02 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   c3ef6:	7870      	ldrb	r0, [r6, #1]
   c3ef8:	fab0 f080 	clz	r0, r0
   c3efc:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   c3efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   c3f02:	7803      	ldrb	r3, [r0, #0]
   c3f04:	b16b      	cbz	r3, c3f22 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   c3f06:	7ac3      	ldrb	r3, [r0, #11]
   c3f08:	071b      	lsls	r3, r3, #28
   c3f0a:	d4ee      	bmi.n	c3eea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   c3f0c:	220b      	movs	r2, #11
   c3f0e:	4640      	mov	r0, r8
   c3f10:	f006 f93a 	bl	ca188 <memcmp>
   c3f14:	2800      	cmp	r0, #0
   c3f16:	d1e8      	bne.n	c3eea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   c3f18:	3501      	adds	r5, #1
   c3f1a:	b2ad      	uxth	r5, r5
   c3f1c:	2d64      	cmp	r5, #100	; 0x64
   c3f1e:	d1b9      	bne.n	c3e94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   c3f20:	e7ed      	b.n	c3efe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   c3f22:	2001      	movs	r0, #1
   c3f24:	e7eb      	b.n	c3efe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000c3f28 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   c3f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c3f2c:	ed2d 8b02 	vpush	{d8}
   c3f30:	b08b      	sub	sp, #44	; 0x2c
   c3f32:	460d      	mov	r5, r1
   c3f34:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   c3f36:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   c3f38:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   c3f3a:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   c3f3e:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   c3f40:	d105      	bne.n	c3f4e <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   c3f42:	2000      	movs	r0, #0
}
   c3f44:	b00b      	add	sp, #44	; 0x2c
   c3f46:	ecbd 8b02 	vpop	{d8}
   c3f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   c3f4e:	9b07      	ldr	r3, [sp, #28]
   c3f50:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   c3f52:	2b00      	cmp	r3, #0
   c3f54:	d1f5      	bne.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   c3f56:	6853      	ldr	r3, [r2, #4]
   c3f58:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   c3f5a:	7813      	ldrb	r3, [r2, #0]
   c3f5c:	079c      	lsls	r4, r3, #30
   c3f5e:	bf1f      	itttt	ne
   c3f60:	9b05      	ldrne	r3, [sp, #20]
   c3f62:	330c      	addne	r3, #12
   c3f64:	220d      	movne	r2, #13
   c3f66:	fbb3 f3f2 	udivne	r3, r3, r2
   c3f6a:	bf1a      	itte	ne
   c3f6c:	3301      	addne	r3, #1
   c3f6e:	b2db      	uxtbne	r3, r3
   c3f70:	2301      	moveq	r3, #1
    seekSet(0);
   c3f72:	2100      	movs	r1, #0
   c3f74:	4628      	mov	r0, r5
   c3f76:	9303      	str	r3, [sp, #12]
   c3f78:	f7ff fa75 	bl	c3466 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   c3f7c:	f107 030d 	add.w	r3, r7, #13
  }
   c3f80:	f04f 0b00 	mov.w	fp, #0
   c3f84:	ee08 3a10 	vmov	s16, r3
   c3f88:	46da      	mov	sl, fp
   c3f8a:	465c      	mov	r4, fp
   c3f8c:	465e      	mov	r6, fp
   c3f8e:	f8cd b010 	str.w	fp, [sp, #16]
   c3f92:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   c3f94:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   c3f96:	2101      	movs	r1, #1
   c3f98:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   c3f9a:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   c3f9e:	f7ff fa43 	bl	c3428 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   c3fa2:	4603      	mov	r3, r0
   c3fa4:	2800      	cmp	r0, #0
   c3fa6:	d171      	bne.n	c408c <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   c3fa8:	786b      	ldrb	r3, [r5, #1]
   c3faa:	2b00      	cmp	r3, #0
   c3fac:	d1c9      	bne.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   c3fae:	9b06      	ldr	r3, [sp, #24]
   c3fb0:	059a      	lsls	r2, r3, #22
   c3fb2:	d5c6      	bpl.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   c3fb4:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   c3fb8:	3b01      	subs	r3, #1
   c3fba:	2b01      	cmp	r3, #1
   c3fbc:	d8c1      	bhi.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   c3fbe:	9b04      	ldr	r3, [sp, #16]
   c3fc0:	2c00      	cmp	r4, #0
   c3fc2:	bf08      	it	eq
   c3fc4:	4643      	moveq	r3, r8
   c3fc6:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   c3fc8:	9b03      	ldr	r3, [sp, #12]
   c3fca:	429c      	cmp	r4, r3
   c3fcc:	f0c0 80f1 	bcc.w	c41b2 <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   c3fd0:	f1b9 0f00 	cmp.w	r9, #0
   c3fd4:	f040 810a 	bne.w	c41ec <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   c3fd8:	9b04      	ldr	r3, [sp, #16]
   c3fda:	4628      	mov	r0, r5
   c3fdc:	0159      	lsls	r1, r3, #5
   c3fde:	f7ff fa42 	bl	c3466 <_ZN7FatFile7seekSetEm>
   c3fe2:	2800      	cmp	r0, #0
   c3fe4:	d0ad      	beq.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   c3fe6:	9b03      	ldr	r3, [sp, #12]
   c3fe8:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   c3fec:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   c3ff0:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   c3ff2:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   c3ff6:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   c3ffa:	2e00      	cmp	r6, #0
   c3ffc:	f000 810d 	beq.w	c421a <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   c4000:	2100      	movs	r1, #0
   c4002:	4628      	mov	r0, r5
   c4004:	f7ff fa10 	bl	c3428 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   c4008:	4604      	mov	r4, r0
   c400a:	2800      	cmp	r0, #0
   c400c:	d099      	beq.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   c400e:	68aa      	ldr	r2, [r5, #8]
   c4010:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   c4014:	454e      	cmp	r6, r9
   c4016:	f043 0301 	orr.w	r3, r3, #1
   c401a:	bf0c      	ite	eq
   c401c:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   c4020:	46b3      	movne	fp, r6
   c4022:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   c4026:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   c402a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   c402e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   c4032:	f107 000d 	add.w	r0, r7, #13
   c4036:	f7ff fdbd 	bl	c3bb4 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   c403a:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   c403e:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   c4040:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   c4044:	f00b 031f 	and.w	r3, fp, #31
   c4048:	220d      	movs	r2, #13
   c404a:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   c404c:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   c4050:	4353      	muls	r3, r2
   c4052:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   c4054:	9905      	ldr	r1, [sp, #20]
   c4056:	4299      	cmp	r1, r3
   c4058:	f240 80d0 	bls.w	c41fc <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   c405c:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   c4060:	2a04      	cmp	r2, #4
   c4062:	fa5f fe82 	uxtb.w	lr, r2
   c4066:	f102 0001 	add.w	r0, r2, #1
   c406a:	f200 80cd 	bhi.w	c4208 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   c406e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   c4072:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   c4076:	280d      	cmp	r0, #13
   c4078:	f103 0301 	add.w	r3, r3, #1
   c407c:	4602      	mov	r2, r0
   c407e:	d1e9      	bne.n	c4054 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   c4080:	3e01      	subs	r6, #1
   c4082:	b2f6      	uxtb	r6, r6
   c4084:	e7b9      	b.n	c3ffa <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   c4086:	f04f 0901 	mov.w	r9, #1
   c408a:	e783      	b.n	c3f94 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   c408c:	7802      	ldrb	r2, [r0, #0]
   c408e:	2ae5      	cmp	r2, #229	; 0xe5
   c4090:	d000      	beq.n	c4094 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   c4092:	b97a      	cbnz	r2, c40b4 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   c4094:	9904      	ldr	r1, [sp, #16]
   c4096:	2c00      	cmp	r4, #0
   c4098:	bf08      	it	eq
   c409a:	4641      	moveq	r1, r8
   c409c:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   c409e:	9903      	ldr	r1, [sp, #12]
   c40a0:	428c      	cmp	r4, r1
        freeFound++;
   c40a2:	bf3c      	itt	cc
   c40a4:	3401      	addcc	r4, #1
   c40a6:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   c40a8:	2a00      	cmp	r2, #0
   c40aa:	d080      	beq.n	c3fae <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   c40ac:	2ae5      	cmp	r2, #229	; 0xe5
   c40ae:	d105      	bne.n	c40bc <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   c40b0:	2600      	movs	r6, #0
   c40b2:	e76f      	b.n	c3f94 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   c40b4:	9903      	ldr	r1, [sp, #12]
   c40b6:	428c      	cmp	r4, r1
   c40b8:	bf38      	it	cc
   c40ba:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   c40bc:	2a2e      	cmp	r2, #46	; 0x2e
   c40be:	d0f7      	beq.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   c40c0:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   c40c2:	290f      	cmp	r1, #15
   c40c4:	d14a      	bne.n	c415c <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   c40c6:	bb16      	cbnz	r6, c410e <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   c40c8:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   c40cc:	f43f af62 	beq.w	c3f94 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   c40d0:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   c40d4:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   c40d8:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   c40da:	220d      	movs	r2, #13
   c40dc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   c40e0:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   c40e4:	9a05      	ldr	r2, [sp, #20]
   c40e6:	4542      	cmp	r2, r8
   c40e8:	d9e2      	bls.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   c40ea:	eba2 0208 	sub.w	r2, r2, r8
   c40ee:	9208      	str	r2, [sp, #32]
   c40f0:	2200      	movs	r2, #0
   c40f2:	eb02 0108 	add.w	r1, r2, r8
   c40f6:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   c40f8:	4618      	mov	r0, r3
   c40fa:	b2d1      	uxtb	r1, r2
   c40fc:	f7ff fd46 	bl	c3b8c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   c4100:	9908      	ldr	r1, [sp, #32]
   c4102:	428a      	cmp	r2, r1
   c4104:	d10d      	bne.n	c4122 <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   c4106:	2800      	cmp	r0, #0
   c4108:	bf18      	it	ne
   c410a:	2600      	movne	r6, #0
   c410c:	e742      	b.n	c3f94 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   c410e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c4112:	fa5f fa8a 	uxtb.w	sl, sl
   c4116:	4552      	cmp	r2, sl
   c4118:	d1ca      	bne.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   c411a:	7b5a      	ldrb	r2, [r3, #13]
   c411c:	455a      	cmp	r2, fp
   c411e:	d0dc      	beq.n	c40da <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   c4120:	e7c6      	b.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   c4122:	28ff      	cmp	r0, #255	; 0xff
   c4124:	d8c4      	bhi.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   c4126:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   c412a:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   c412e:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   c4130:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   c4132:	bf9c      	itt	ls
   c4134:	f10e 0020 	addls.w	r0, lr, #32
   c4138:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   c413c:	4608      	mov	r0, r1
   c413e:	9909      	ldr	r1, [sp, #36]	; 0x24
   c4140:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   c4142:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   c4146:	f1bc 0f19 	cmp.w	ip, #25
   c414a:	bf9c      	itt	ls
   c414c:	3120      	addls	r1, #32
   c414e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   c4150:	4571      	cmp	r1, lr
   c4152:	d1ad      	bne.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   c4154:	3201      	adds	r2, #1
   c4156:	2a0d      	cmp	r2, #13
   c4158:	d1cb      	bne.n	c40f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   c415a:	e71b      	b.n	c3f94 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   c415c:	0708      	lsls	r0, r1, #28
   c415e:	d4a7      	bmi.n	c40b0 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   c4160:	b15e      	cbz	r6, c417a <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   c4162:	f1ba 0f01 	cmp.w	sl, #1
   c4166:	f47f aeec 	bne.w	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   c416a:	4618      	mov	r0, r3
   c416c:	f7ff fd22 	bl	c3bb4 <_ZN7FatFile11lfnChecksumEPh>
   c4170:	4558      	cmp	r0, fp
   c4172:	f47f aee6 	bne.w	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   c4176:	46b1      	mov	r9, r6
   c4178:	e00e      	b.n	c4198 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   c417a:	ee18 1a10 	vmov	r1, s16
   c417e:	220b      	movs	r2, #11
   c4180:	4618      	mov	r0, r3
   c4182:	f006 f801 	bl	ca188 <memcmp>
   c4186:	2800      	cmp	r0, #0
   c4188:	f47f af04 	bne.w	c3f94 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   c418c:	f897 9000 	ldrb.w	r9, [r7]
   c4190:	f019 0901 	ands.w	r9, r9, #1
   c4194:	f47f af77 	bne.w	c4086 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   c4198:	9b06      	ldr	r3, [sp, #24]
   c419a:	0519      	lsls	r1, r3, #20
   c419c:	f53f aed1 	bmi.w	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   c41a0:	9b06      	ldr	r3, [sp, #24]
   c41a2:	9807      	ldr	r0, [sp, #28]
   c41a4:	f8cd 9000 	str.w	r9, [sp]
   c41a8:	4642      	mov	r2, r8
   c41aa:	4629      	mov	r1, r5
   c41ac:	f7ff f99e 	bl	c34ec <_ZN7FatFile15openCachedEntryEPS_tih>
   c41b0:	e6c8      	b.n	c3f44 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   c41b2:	2100      	movs	r1, #0
   c41b4:	4628      	mov	r0, r5
   c41b6:	f7ff f937 	bl	c3428 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   c41ba:	b9a0      	cbnz	r0, c41e6 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   c41bc:	786b      	ldrb	r3, [r5, #1]
   c41be:	2b00      	cmp	r3, #0
   c41c0:	f47f aebf 	bne.w	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   c41c4:	4628      	mov	r0, r5
   c41c6:	f7ff f81b 	bl	c3200 <_ZN7FatFile13addDirClusterEv>
   c41ca:	2800      	cmp	r0, #0
   c41cc:	f43f aeb9 	beq.w	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   c41d0:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   c41d2:	791b      	ldrb	r3, [r3, #4]
   c41d4:	2b01      	cmp	r3, #1
   c41d6:	f63f aefb 	bhi.w	c3fd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   c41da:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   c41dc:	3410      	adds	r4, #16
   c41de:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   c41e0:	42a3      	cmp	r3, r4
   c41e2:	d8ef      	bhi.n	c41c4 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   c41e4:	e6f4      	b.n	c3fd0 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   c41e6:	3401      	adds	r4, #1
   c41e8:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   c41ea:	e6ed      	b.n	c3fc8 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   c41ec:	4639      	mov	r1, r7
   c41ee:	4628      	mov	r0, r5
   c41f0:	f7ff fe46 	bl	c3e80 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   c41f4:	2800      	cmp	r0, #0
   c41f6:	f47f aeef 	bne.w	c3fd8 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   c41fa:	e6a2      	b.n	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   c41fc:	bf14      	ite	ne
   c41fe:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   c4202:	2100      	moveq	r1, #0
   c4204:	b289      	uxth	r1, r1
   c4206:	e72b      	b.n	c4060 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   c4208:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   c420c:	bf94      	ite	ls
   c420e:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   c4212:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   c4216:	8091      	strh	r1, [r2, #4]
   c4218:	e72d      	b.n	c4076 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   c421a:	4631      	mov	r1, r6
   c421c:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   c421e:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   c4222:	f7ff f901 	bl	c3428 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   c4226:	4604      	mov	r4, r0
   c4228:	2800      	cmp	r0, #0
   c422a:	f43f ae8a 	beq.w	c3f42 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   c422e:	2220      	movs	r2, #32
   c4230:	4631      	mov	r1, r6
   c4232:	f005 ffc7 	bl	ca1c4 <memset>
  memcpy(dir->name, fname->sfn, 11);
   c4236:	f8d7 300d 	ldr.w	r3, [r7, #13]
   c423a:	6023      	str	r3, [r4, #0]
   c423c:	f8d7 3011 	ldr.w	r3, [r7, #17]
   c4240:	6063      	str	r3, [r4, #4]
   c4242:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   c4246:	8123      	strh	r3, [r4, #8]
   c4248:	7dfb      	ldrb	r3, [r7, #23]
   c424a:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   c424c:	783b      	ldrb	r3, [r7, #0]
   c424e:	f003 0318 	and.w	r3, r3, #24
   c4252:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   c4254:	4b0f      	ldr	r3, [pc, #60]	; (c4294 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   c4256:	681b      	ldr	r3, [r3, #0]
   c4258:	b19b      	cbz	r3, c4282 <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   c425a:	f104 010e 	add.w	r1, r4, #14
   c425e:	f104 0010 	add.w	r0, r4, #16
   c4262:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   c4264:	8a23      	ldrh	r3, [r4, #16]
   c4266:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   c4268:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   c426a:	89e3      	ldrh	r3, [r4, #14]
   c426c:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   c426e:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   c4270:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   c4274:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   c4278:	f3c8 184f 	ubfx	r8, r8, #5, #16
   c427c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   c4280:	e78e      	b.n	c41a0 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   c4282:	2321      	movs	r3, #33	; 0x21
   c4284:	7423      	strb	r3, [r4, #16]
   c4286:	2328      	movs	r3, #40	; 0x28
   c4288:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   c428a:	2308      	movs	r3, #8
   c428c:	73a6      	strb	r6, [r4, #14]
   c428e:	73e3      	strb	r3, [r4, #15]
   c4290:	e7e8      	b.n	c4264 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   c4292:	bf00      	nop
   c4294:	2003e61c 	.word	0x2003e61c

000c4298 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   c4298:	b513      	push	{r0, r1, r4, lr}
   c429a:	4604      	mov	r4, r0
    }
   c429c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   c429e:	b159      	cbz	r1, c42b8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   c42a0:	9101      	str	r1, [sp, #4]
   c42a2:	f7f0 feab 	bl	b4ffc <strlen>
   c42a6:	6823      	ldr	r3, [r4, #0]
   c42a8:	9901      	ldr	r1, [sp, #4]
   c42aa:	68db      	ldr	r3, [r3, #12]
   c42ac:	4602      	mov	r2, r0
   c42ae:	4620      	mov	r0, r4
    }
   c42b0:	b002      	add	sp, #8
   c42b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   c42b6:	4718      	bx	r3
    }
   c42b8:	b002      	add	sp, #8
   c42ba:	bd10      	pop	{r4, pc}

000c42bc <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   c42bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   c42be:	7803      	ldrb	r3, [r0, #0]
   c42c0:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   c42c2:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   c42c4:	d520      	bpl.n	c4308 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   c42c6:	6843      	ldr	r3, [r0, #4]
   c42c8:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   c42ca:	f100 020c 	add.w	r2, r0, #12
   c42ce:	6818      	ldr	r0, [r3, #0]
   c42d0:	9201      	str	r2, [sp, #4]
   c42d2:	f000 fb88 	bl	c49e6 <_ZN9SdSpiCard10writeBlockEmPKh>
   c42d6:	9a01      	ldr	r2, [sp, #4]
   c42d8:	4605      	mov	r5, r0
   c42da:	b918      	cbnz	r0, c42e4 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   c42dc:	2500      	movs	r5, #0
}
   c42de:	4628      	mov	r0, r5
   c42e0:	b003      	add	sp, #12
   c42e2:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   c42e4:	7823      	ldrb	r3, [r4, #0]
   c42e6:	079b      	lsls	r3, r3, #30
   c42e8:	d404      	bmi.n	c42f4 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   c42ea:	7823      	ldrb	r3, [r4, #0]
   c42ec:	f023 0301 	bic.w	r3, r3, #1
   c42f0:	7023      	strb	r3, [r4, #0]
   c42f2:	e7f4      	b.n	c42de <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   c42f4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   c42f8:	6919      	ldr	r1, [r3, #16]
   c42fa:	4401      	add	r1, r0
   c42fc:	6818      	ldr	r0, [r3, #0]
   c42fe:	f000 fb72 	bl	c49e6 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   c4302:	2800      	cmp	r0, #0
   c4304:	d1f1      	bne.n	c42ea <_ZN8FatCache4syncEv+0x2e>
   c4306:	e7e9      	b.n	c42dc <_ZN8FatCache4syncEv+0x20>
  return true;
   c4308:	2501      	movs	r5, #1
   c430a:	e7e8      	b.n	c42de <_ZN8FatCache4syncEv+0x22>

000c430c <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   c430c:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   c430e:	6883      	ldr	r3, [r0, #8]
   c4310:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   c4312:	4604      	mov	r4, r0
   c4314:	460e      	mov	r6, r1
   c4316:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   c4318:	d009      	beq.n	c432e <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   c431a:	f7ff ffcf 	bl	c42bc <_ZN8FatCache4syncEv>
   c431e:	b908      	cbnz	r0, c4324 <_ZN8FatCache4readEmh+0x18>
  return 0;
   c4320:	2000      	movs	r0, #0
}
   c4322:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   c4324:	076b      	lsls	r3, r5, #29
   c4326:	d50a      	bpl.n	c433e <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   c4328:	2300      	movs	r3, #0
   c432a:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   c432c:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   c432e:	7822      	ldrb	r2, [r4, #0]
   c4330:	f005 0503 	and.w	r5, r5, #3
   c4334:	4620      	mov	r0, r4
   c4336:	4315      	orrs	r5, r2
   c4338:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   c433c:	e7f1      	b.n	c4322 <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   c433e:	6863      	ldr	r3, [r4, #4]
   c4340:	f104 020c 	add.w	r2, r4, #12
   c4344:	6818      	ldr	r0, [r3, #0]
   c4346:	4631      	mov	r1, r6
   c4348:	f000 fac4 	bl	c48d4 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   c434c:	2800      	cmp	r0, #0
   c434e:	d1eb      	bne.n	c4328 <_ZN8FatCache4readEmh+0x1c>
   c4350:	e7e6      	b.n	c4320 <_ZN8FatCache4readEmh+0x14>

000c4352 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   c4352:	7983      	ldrb	r3, [r0, #6]
   c4354:	6940      	ldr	r0, [r0, #20]
   c4356:	3902      	subs	r1, #2
   c4358:	4099      	lsls	r1, r3
}
   c435a:	4408      	add	r0, r1
   c435c:	4770      	bx	lr

000c435e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   c435e:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   c4360:	b570      	push	{r4, r5, r6, lr}
   c4362:	4605      	mov	r5, r0
   c4364:	460c      	mov	r4, r1
   c4366:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   c4368:	d802      	bhi.n	c4370 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   c436a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c436e:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   c4370:	69c3      	ldr	r3, [r0, #28]
   c4372:	428b      	cmp	r3, r1
   c4374:	d3f9      	bcc.n	c436a <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   c4376:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   c4378:	2b20      	cmp	r3, #32
   c437a:	d116      	bne.n	c43aa <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   c437c:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   c437e:	2202      	movs	r2, #2
   c4380:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   c4384:	f500 700c 	add.w	r0, r0, #560	; 0x230
   c4388:	f7ff ffc0 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c438c:	2800      	cmp	r0, #0
   c438e:	d0ec      	beq.n	c436a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   c4390:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   c4394:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   c4398:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   c439c:	69ea      	ldr	r2, [r5, #28]
   c439e:	429a      	cmp	r2, r3
  *value = next;
   c43a0:	bf26      	itte	cs
   c43a2:	6033      	strcs	r3, [r6, #0]
  return 1;
   c43a4:	2001      	movcs	r0, #1
    return 0;
   c43a6:	2000      	movcc	r0, #0
   c43a8:	e7e1      	b.n	c436e <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   c43aa:	2b10      	cmp	r3, #16
   c43ac:	d1dd      	bne.n	c436a <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   c43ae:	f3c1 2307 	ubfx	r3, r1, #8, #8
   c43b2:	6981      	ldr	r1, [r0, #24]
   c43b4:	2202      	movs	r2, #2
   c43b6:	4419      	add	r1, r3
   c43b8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   c43bc:	f7ff ffa6 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c43c0:	2800      	cmp	r0, #0
   c43c2:	d0d2      	beq.n	c436a <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   c43c4:	b2e4      	uxtb	r4, r4
   c43c6:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   c43ca:	e7e7      	b.n	c439c <_ZN9FatVolume6fatGetEmPm+0x3e>

000c43cc <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   c43cc:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   c43ce:	b538      	push	{r3, r4, r5, lr}
   c43d0:	460c      	mov	r4, r1
   c43d2:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   c43d4:	d801      	bhi.n	c43da <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   c43d6:	2000      	movs	r0, #0
}
   c43d8:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   c43da:	69c3      	ldr	r3, [r0, #28]
   c43dc:	428b      	cmp	r3, r1
   c43de:	d3fa      	bcc.n	c43d6 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   c43e0:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   c43e2:	2b20      	cmp	r3, #32
   c43e4:	d10f      	bne.n	c4406 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   c43e6:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   c43e8:	2203      	movs	r2, #3
   c43ea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   c43ee:	f500 700c 	add.w	r0, r0, #560	; 0x230
   c43f2:	f7ff ff8b 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c43f6:	2800      	cmp	r0, #0
   c43f8:	d0ed      	beq.n	c43d6 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   c43fa:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   c43fe:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   c4402:	2001      	movs	r0, #1
   c4404:	e7e8      	b.n	c43d8 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   c4406:	2b10      	cmp	r3, #16
   c4408:	d1e5      	bne.n	c43d6 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   c440a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   c440e:	6981      	ldr	r1, [r0, #24]
   c4410:	2203      	movs	r2, #3
   c4412:	4419      	add	r1, r3
   c4414:	f500 700c 	add.w	r0, r0, #560	; 0x230
   c4418:	f7ff ff78 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c441c:	2800      	cmp	r0, #0
   c441e:	d0da      	beq.n	c43d6 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   c4420:	b2e4      	uxtb	r4, r4
   c4422:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   c4426:	e7ec      	b.n	c4402 <_ZN9FatVolume6fatPutEmm+0x36>

000c4428 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   c4428:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   c442c:	68c4      	ldr	r4, [r0, #12]
   c442e:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   c4430:	4605      	mov	r5, r0
   c4432:	460e      	mov	r6, r1
   c4434:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   c4436:	d301      	bcc.n	c443c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   c4438:	2701      	movs	r7, #1
   c443a:	e001      	b.n	c4440 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   c443c:	460c      	mov	r4, r1
    setStart = false;
   c443e:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   c4440:	69eb      	ldr	r3, [r5, #28]
    find++;
   c4442:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   c4444:	42a3      	cmp	r3, r4
   c4446:	d202      	bcs.n	c444e <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   c4448:	b9c7      	cbnz	r7, c447c <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   c444a:	68ec      	ldr	r4, [r5, #12]
   c444c:	e7f4      	b.n	c4438 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   c444e:	42a6      	cmp	r6, r4
   c4450:	d014      	beq.n	c447c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   c4452:	aa01      	add	r2, sp, #4
   c4454:	4621      	mov	r1, r4
   c4456:	4628      	mov	r0, r5
   c4458:	f7ff ff81 	bl	c435e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   c445c:	2800      	cmp	r0, #0
   c445e:	db0d      	blt.n	c447c <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   c4460:	d0ee      	beq.n	c4440 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   c4462:	9b01      	ldr	r3, [sp, #4]
   c4464:	2b00      	cmp	r3, #0
   c4466:	d1eb      	bne.n	c4440 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   c4468:	b107      	cbz	r7, c446c <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   c446a:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   c446c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   c4470:	4621      	mov	r1, r4
   c4472:	4628      	mov	r0, r5
   c4474:	f7ff ffaa 	bl	c43cc <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   c4478:	4607      	mov	r7, r0
   c447a:	b920      	cbnz	r0, c4486 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   c447c:	2700      	movs	r7, #0
}
   c447e:	4638      	mov	r0, r7
   c4480:	b002      	add	sp, #8
   c4482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   c4486:	b916      	cbnz	r6, c448e <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   c4488:	f8c8 4000 	str.w	r4, [r8]
  return true;
   c448c:	e7f7      	b.n	c447e <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   c448e:	4622      	mov	r2, r4
   c4490:	4631      	mov	r1, r6
   c4492:	4628      	mov	r0, r5
   c4494:	f7ff ff9a 	bl	c43cc <_ZN9FatVolume6fatPutEmm>
   c4498:	2800      	cmp	r0, #0
   c449a:	d1f5      	bne.n	c4488 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   c449c:	e7ee      	b.n	c447c <_ZN9FatVolume15allocateClusterEmPm+0x54>

000c449e <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   c449e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   c44a0:	4605      	mov	r5, r0
   c44a2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   c44a4:	aa01      	add	r2, sp, #4
   c44a6:	4621      	mov	r1, r4
   c44a8:	4628      	mov	r0, r5
   c44aa:	f7ff ff58 	bl	c435e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   c44ae:	1e06      	subs	r6, r0, #0
   c44b0:	db10      	blt.n	c44d4 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   c44b2:	2200      	movs	r2, #0
   c44b4:	4621      	mov	r1, r4
   c44b6:	4628      	mov	r0, r5
   c44b8:	f7ff ff88 	bl	c43cc <_ZN9FatVolume6fatPutEmm>
   c44bc:	b150      	cbz	r0, c44d4 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   c44be:	68eb      	ldr	r3, [r5, #12]
   c44c0:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   c44c2:	bf24      	itt	cs
   c44c4:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   c44c8:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   c44ca:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   c44cc:	2e00      	cmp	r6, #0
   c44ce:	d1e9      	bne.n	c44a4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   c44d0:	b002      	add	sp, #8
   c44d2:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   c44d4:	2000      	movs	r0, #0
   c44d6:	e7fb      	b.n	c44d0 <_ZN9FatVolume9freeChainEm+0x32>

000c44d8 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   c44d8:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   c44da:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   c44dc:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   c44de:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   c44e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   c44e4:	4604      	mov	r4, r0
  m_fatType = 0;
   c44e6:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   c44e8:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   c44ec:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   c44ee:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   c44f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   c44f4:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   c44f8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   c44fc:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   c4500:	460d      	mov	r5, r1
   c4502:	b1b9      	cbz	r1, c4534 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   c4504:	2904      	cmp	r1, #4
   c4506:	d901      	bls.n	c450c <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   c4508:	2000      	movs	r0, #0
}
   c450a:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   c450c:	4611      	mov	r1, r2
   c450e:	4630      	mov	r0, r6
   c4510:	f7ff fefc 	bl	c430c <_ZN8FatCache4readEmh>
    if (!pc) {
   c4514:	2800      	cmp	r0, #0
   c4516:	d0f7      	beq.n	c4508 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   c4518:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   c451c:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   c4520:	065b      	lsls	r3, r3, #25
   c4522:	d1f1      	bne.n	c4508 <_ZN9FatVolume4initEh+0x30>
   c4524:	f105 011b 	add.w	r1, r5, #27
   c4528:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   c452c:	f8d0 5006 	ldr.w	r5, [r0, #6]
   c4530:	2d00      	cmp	r5, #0
   c4532:	d0e9      	beq.n	c4508 <_ZN9FatVolume4initEh+0x30>
   c4534:	2200      	movs	r2, #0
   c4536:	4629      	mov	r1, r5
   c4538:	4630      	mov	r0, r6
   c453a:	f7ff fee7 	bl	c430c <_ZN8FatCache4readEmh>
  if (!pc) {
   c453e:	2800      	cmp	r0, #0
   c4540:	d0e2      	beq.n	c4508 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   c4542:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   c4546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   c454a:	d1dd      	bne.n	c4508 <_ZN9FatVolume4initEh+0x30>
   c454c:	7c03      	ldrb	r3, [r0, #16]
   c454e:	2b02      	cmp	r3, #2
   c4550:	d1da      	bne.n	c4508 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   c4552:	89c3      	ldrh	r3, [r0, #14]
   c4554:	2b00      	cmp	r3, #0
   c4556:	d0d7      	beq.n	c4508 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   c4558:	7b41      	ldrb	r1, [r0, #13]
   c455a:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   c455c:	1e4b      	subs	r3, r1, #1
   c455e:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   c4560:	2300      	movs	r3, #0
   c4562:	71a3      	strb	r3, [r4, #6]
   c4564:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   c4566:	2301      	movs	r3, #1
   c4568:	4299      	cmp	r1, r3
   c456a:	d007      	beq.n	c457c <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   c456c:	3e01      	subs	r6, #1
   c456e:	d0cb      	beq.n	c4508 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   c4570:	79a2      	ldrb	r2, [r4, #6]
   c4572:	005b      	lsls	r3, r3, #1
   c4574:	3201      	adds	r2, #1
   c4576:	b2db      	uxtb	r3, r3
   c4578:	71a2      	strb	r2, [r4, #6]
   c457a:	e7f5      	b.n	c4568 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   c457c:	8ac1      	ldrh	r1, [r0, #22]
   c457e:	b901      	cbnz	r1, c4582 <_ZN9FatVolume4initEh+0xaa>
   c4580:	6a41      	ldr	r1, [r0, #36]	; 0x24
   c4582:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   c4584:	89c3      	ldrh	r3, [r0, #14]
   c4586:	442b      	add	r3, r5
   c4588:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   c458a:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   c458e:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   c4590:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   c4594:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   c4596:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   c459a:	0149      	lsls	r1, r1, #5
   c459c:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   c45a0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   c45a4:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   c45a6:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   c45aa:	b902      	cbnz	r2, c45ae <_ZN9FatVolume4initEh+0xd6>
   c45ac:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   c45ae:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   c45b0:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   c45b2:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   c45b4:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   c45b6:	1c4b      	adds	r3, r1, #1
   c45b8:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   c45ba:	f640 73f4 	movw	r3, #4084	; 0xff4
   c45be:	4299      	cmp	r1, r3
   c45c0:	d802      	bhi.n	c45c8 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   c45c2:	230c      	movs	r3, #12
   c45c4:	71e3      	strb	r3, [r4, #7]
   c45c6:	e79f      	b.n	c4508 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   c45c8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   c45cc:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   c45ce:	bf85      	ittet	hi
   c45d0:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   c45d2:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   c45d4:	2310      	movls	r3, #16
    m_fatType = 32;
   c45d6:	2320      	movhi	r3, #32
   c45d8:	71e3      	strb	r3, [r4, #7]
  return true;
   c45da:	2001      	movs	r0, #1
   c45dc:	e795      	b.n	c450a <_ZN9FatVolume4initEh+0x32>

000c45de <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   c45de:	f000 bacb 	b.w	c4b78 <_ZN14SdSpiAltDriver4sendEh>

000c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   c45e2:	f000 baae 	b.w	c4b42 <_ZN14SdSpiAltDriver7receiveEv>
	...

000c45e8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   c45e8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   c45ea:	4e0e      	ldr	r6, [pc, #56]	; (c4624 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   c45ec:	460d      	mov	r5, r1
   c45ee:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   c45f0:	f000 fd06 	bl	c5000 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   c45f4:	6833      	ldr	r3, [r6, #0]
   c45f6:	1ac0      	subs	r0, r0, r3
   c45f8:	4b0b      	ldr	r3, [pc, #44]	; (c4628 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   c45fa:	4298      	cmp	r0, r3
   c45fc:	d908      	bls.n	c4610 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c45fe:	f000 fd07 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c4602:	4b0a      	ldr	r3, [pc, #40]	; (c462c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   c4604:	6018      	str	r0, [r3, #0]
            return spark_process();
   c4606:	f000 ff73 	bl	c54f0 <spark_process>
   c460a:	f000 fcf9 	bl	c5000 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   c460e:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c4610:	f000 fcfe 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   c4614:	b280      	uxth	r0, r0
   c4616:	1b40      	subs	r0, r0, r5
}
   c4618:	42a0      	cmp	r0, r4
   c461a:	bfd4      	ite	le
   c461c:	2000      	movle	r0, #0
   c461e:	2001      	movgt	r0, #1
   c4620:	bd70      	pop	{r4, r5, r6, pc}
   c4622:	bf00      	nop
   c4624:	2003e624 	.word	0x2003e624
   c4628:	000186a0 	.word	0x000186a0
   c462c:	2003e710 	.word	0x2003e710

000c4630 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   c4630:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   c4632:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   c4634:	4604      	mov	r4, r0
  if (!m_spiActive) {
   c4636:	b94d      	cbnz	r5, c464c <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   c4638:	6840      	ldr	r0, [r0, #4]
   c463a:	f000 fa6b 	bl	c4b14 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   c463e:	6863      	ldr	r3, [r4, #4]
   c4640:	4629      	mov	r1, r5
   c4642:	7d18      	ldrb	r0, [r3, #20]
   c4644:	f002 ffc9 	bl	c75da <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   c4648:	2301      	movs	r3, #1
   c464a:	7223      	strb	r3, [r4, #8]
  }
}
   c464c:	bd38      	pop	{r3, r4, r5, pc}

000c464e <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   c464e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   c4650:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   c4652:	4604      	mov	r4, r0
  if (m_spiActive) {
   c4654:	b16b      	cbz	r3, c4672 <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   c4656:	6843      	ldr	r3, [r0, #4]
   c4658:	2101      	movs	r1, #1
   c465a:	7d18      	ldrb	r0, [r3, #20]
   c465c:	f002 ffbd 	bl	c75da <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   c4660:	6860      	ldr	r0, [r4, #4]
   c4662:	21ff      	movs	r1, #255	; 0xff
   c4664:	f7ff ffbb 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   c4668:	6860      	ldr	r0, [r4, #4]
   c466a:	f000 fa67 	bl	c4b3c <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   c466e:	2300      	movs	r3, #0
   c4670:	7223      	strb	r3, [r4, #8]
  }
}
   c4672:	bd10      	pop	{r4, pc}

000c4674 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   c4674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c4676:	4604      	mov	r4, r0
   c4678:	460d      	mov	r5, r1
   c467a:	4616      	mov	r6, r2
   c467c:	f000 fcc8 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   c4680:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   c4682:	6860      	ldr	r0, [r4, #4]
   c4684:	f7ff ffad 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c4688:	28ff      	cmp	r0, #255	; 0xff
   c468a:	7260      	strb	r0, [r4, #9]
   c468c:	d10e      	bne.n	c46ac <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   c468e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   c4692:	4639      	mov	r1, r7
   c4694:	4620      	mov	r0, r4
   c4696:	f7ff ffa7 	bl	c45e8 <_ZN9SdSpiCard10isTimedOutEtt>
   c469a:	2800      	cmp	r0, #0
   c469c:	d0f1      	beq.n	c4682 <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   c469e:	2355      	movs	r3, #85	; 0x55
  spiStop();
   c46a0:	4620      	mov	r0, r4
   c46a2:	7023      	strb	r3, [r4, #0]
   c46a4:	f7ff ffd3 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c46a8:	2000      	movs	r0, #0
}
   c46aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   c46ac:	28fe      	cmp	r0, #254	; 0xfe
   c46ae:	d001      	beq.n	c46b4 <_ZN9SdSpiCard8readDataEPhj+0x40>
   c46b0:	2350      	movs	r3, #80	; 0x50
   c46b2:	e7f5      	b.n	c46a0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   c46b4:	6860      	ldr	r0, [r4, #4]
   c46b6:	4632      	mov	r2, r6
   c46b8:	4629      	mov	r1, r5
   c46ba:	f000 fa47 	bl	c4b4c <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   c46be:	7260      	strb	r0, [r4, #9]
   c46c0:	b108      	cbz	r0, c46c6 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   c46c2:	2360      	movs	r3, #96	; 0x60
   c46c4:	e7ec      	b.n	c46a0 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   c46c6:	6860      	ldr	r0, [r4, #4]
   c46c8:	f7ff ff8b 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   c46cc:	6860      	ldr	r0, [r4, #4]
   c46ce:	f7ff ff88 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   c46d2:	2001      	movs	r0, #1
   c46d4:	e7e9      	b.n	c46aa <_ZN9SdSpiCard8readDataEPhj+0x36>

000c46d6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   c46d6:	b570      	push	{r4, r5, r6, lr}
   c46d8:	4604      	mov	r4, r0
   c46da:	460e      	mov	r6, r1
   c46dc:	f000 fc98 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
   c46e0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   c46e2:	4632      	mov	r2, r6
   c46e4:	4629      	mov	r1, r5
   c46e6:	4620      	mov	r0, r4
   c46e8:	f7ff ff7e 	bl	c45e8 <_ZN9SdSpiCard10isTimedOutEtt>
   c46ec:	b930      	cbnz	r0, c46fc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   c46ee:	6860      	ldr	r0, [r4, #4]
   c46f0:	f7ff ff77 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c46f4:	28ff      	cmp	r0, #255	; 0xff
   c46f6:	d1f4      	bne.n	c46e2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   c46f8:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   c46fa:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   c46fc:	2000      	movs	r0, #0
   c46fe:	e7fc      	b.n	c46fa <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000c4700 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   c4700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   c4702:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   c4704:	9201      	str	r2, [sp, #4]
   c4706:	4604      	mov	r4, r0
   c4708:	460d      	mov	r5, r1
  if (!m_spiActive) {
   c470a:	b90b      	cbnz	r3, c4710 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   c470c:	f7ff ff90 	bl	c4630 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   c4710:	b125      	cbz	r5, c471c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   c4712:	f44f 7196 	mov.w	r1, #300	; 0x12c
   c4716:	4620      	mov	r0, r4
   c4718:	f7ff ffdd 	bl	c46d6 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   c471c:	6860      	ldr	r0, [r4, #4]
   c471e:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   c4722:	f7ff ff5c 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
   c4726:	2603      	movs	r6, #3
    spiSend(pa[i]);
   c4728:	af01      	add	r7, sp, #4
   c472a:	5db9      	ldrb	r1, [r7, r6]
   c472c:	6860      	ldr	r0, [r4, #4]
   c472e:	f7ff ff56 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   c4732:	3e01      	subs	r6, #1
   c4734:	d2f9      	bcs.n	c472a <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   c4736:	2d00      	cmp	r5, #0
   c4738:	6860      	ldr	r0, [r4, #4]
   c473a:	bf0c      	ite	eq
   c473c:	2195      	moveq	r1, #149	; 0x95
   c473e:	2187      	movne	r1, #135	; 0x87
   c4740:	f7ff ff4d 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   c4744:	6860      	ldr	r0, [r4, #4]
   c4746:	f7ff ff4c 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c474a:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   c474c:	6860      	ldr	r0, [r4, #4]
   c474e:	f7ff ff48 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c4752:	0603      	lsls	r3, r0, #24
   c4754:	7260      	strb	r0, [r4, #9]
   c4756:	d503      	bpl.n	c4760 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   c4758:	3d01      	subs	r5, #1
   c475a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   c475e:	d1f5      	bne.n	c474c <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   c4760:	b003      	add	sp, #12
   c4762:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c4764 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   c4764:	b570      	push	{r4, r5, r6, lr}
   c4766:	4604      	mov	r4, r0
   c4768:	460d      	mov	r5, r1
   c476a:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   c476c:	2137      	movs	r1, #55	; 0x37
   c476e:	2200      	movs	r2, #0
   c4770:	f7ff ffc6 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   c4774:	4632      	mov	r2, r6
   c4776:	4629      	mov	r1, r5
   c4778:	4620      	mov	r0, r4
  }
   c477a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   c477e:	f7ff bfbf 	b.w	c4700 <_ZN9SdSpiCard11cardCommandEhm>
	...

000c4784 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   c4784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   c4788:	2500      	movs	r5, #0
   c478a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   c478c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   c478e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   c4790:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   c4792:	4604      	mov	r4, r0
   c4794:	4690      	mov	r8, r2
   c4796:	461e      	mov	r6, r3
   c4798:	f000 fc3a 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   c479c:	4641      	mov	r1, r8
   c479e:	4607      	mov	r7, r0
   c47a0:	6860      	ldr	r0, [r4, #4]
   c47a2:	f000 f9bb 	bl	c4b1c <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   c47a6:	6863      	ldr	r3, [r4, #4]
   c47a8:	4a49      	ldr	r2, [pc, #292]	; (c48d0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   c47aa:	721d      	strb	r5, [r3, #8]
   c47ac:	2501      	movs	r5, #1
   c47ae:	60da      	str	r2, [r3, #12]
   c47b0:	821d      	strh	r5, [r3, #16]
  spiStart();
   c47b2:	4620      	mov	r0, r4
   c47b4:	f7ff ff3c 	bl	c4630 <_ZN9SdSpiCard8spiStartEv>
   c47b8:	6863      	ldr	r3, [r4, #4]
   c47ba:	4629      	mov	r1, r5
   c47bc:	7d18      	ldrb	r0, [r3, #20]
   c47be:	f002 ff0c 	bl	c75da <digitalWrite>
   c47c2:	250a      	movs	r5, #10
    spiSend(0XFF);
   c47c4:	6860      	ldr	r0, [r4, #4]
   c47c6:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   c47c8:	3d01      	subs	r5, #1
    spiSend(0XFF);
   c47ca:	f7ff ff08 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   c47ce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   c47d2:	d1f7      	bne.n	c47c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   c47d4:	6863      	ldr	r3, [r4, #4]
   c47d6:	4629      	mov	r1, r5
   c47d8:	7d18      	ldrb	r0, [r3, #20]
   c47da:	f002 fefe 	bl	c75da <digitalWrite>
  }
   c47de:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   c47e0:	2200      	movs	r2, #0
   c47e2:	4611      	mov	r1, r2
   c47e4:	4620      	mov	r0, r4
   c47e6:	f7ff ff8b 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c47ea:	2801      	cmp	r0, #1
   c47ec:	4680      	mov	r8, r0
   c47ee:	d018      	beq.n	c4822 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   c47f0:	3d01      	subs	r5, #1
   c47f2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   c47f6:	d107      	bne.n	c4808 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   c47f8:	2320      	movs	r3, #32
  spiStop();
   c47fa:	4620      	mov	r0, r4
   c47fc:	7023      	strb	r3, [r4, #0]
   c47fe:	f7ff ff26 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c4802:	2000      	movs	r0, #0
}
   c4804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   c4808:	6860      	ldr	r0, [r4, #4]
   c480a:	21fd      	movs	r1, #253	; 0xfd
   c480c:	f7ff fee7 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
   c4810:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   c4814:	6860      	ldr	r0, [r4, #4]
   c4816:	f7ff fee4 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   c481a:	f1b8 0801 	subs.w	r8, r8, #1
   c481e:	d1f9      	bne.n	c4814 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   c4820:	e7de      	b.n	c47e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   c4822:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   c4826:	2108      	movs	r1, #8
   c4828:	4620      	mov	r0, r4
   c482a:	f7ff ff69 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c482e:	2805      	cmp	r0, #5
   c4830:	d114      	bne.n	c485c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   c4832:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   c4836:	2500      	movs	r5, #0
   c4838:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   c483a:	462a      	mov	r2, r5
   c483c:	2129      	movs	r1, #41	; 0x29
   c483e:	4620      	mov	r0, r4
   c4840:	f7ff ff90 	bl	c4764 <_ZN9SdSpiCard8cardAcmdEhm>
   c4844:	4602      	mov	r2, r0
   c4846:	b1d8      	cbz	r0, c4880 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   c4848:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   c484c:	4639      	mov	r1, r7
   c484e:	4620      	mov	r0, r4
   c4850:	f7ff feca 	bl	c45e8 <_ZN9SdSpiCard10isTimedOutEtt>
   c4854:	2800      	cmp	r0, #0
   c4856:	d0f0      	beq.n	c483a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   c4858:	2343      	movs	r3, #67	; 0x43
   c485a:	e7ce      	b.n	c47fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   c485c:	2504      	movs	r5, #4
      m_status = spiReceive();
   c485e:	6860      	ldr	r0, [r4, #4]
   c4860:	f7ff febf 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   c4864:	3d01      	subs	r5, #1
   c4866:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   c486a:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   c486c:	d1f7      	bne.n	c485e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   c486e:	28aa      	cmp	r0, #170	; 0xaa
   c4870:	d104      	bne.n	c487c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   c4872:	2302      	movs	r3, #2
   c4874:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   c4876:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   c487a:	e7dd      	b.n	c4838 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   c487c:	2325      	movs	r3, #37	; 0x25
   c487e:	e7bc      	b.n	c47fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   c4880:	7aa3      	ldrb	r3, [r4, #10]
   c4882:	2b02      	cmp	r3, #2
   c4884:	d118      	bne.n	c48b8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   c4886:	213a      	movs	r1, #58	; 0x3a
   c4888:	4620      	mov	r0, r4
   c488a:	f7ff ff39 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c488e:	b108      	cbz	r0, c4894 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   c4890:	2337      	movs	r3, #55	; 0x37
   c4892:	e7b2      	b.n	c47fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   c4894:	6860      	ldr	r0, [r4, #4]
   c4896:	f7ff fea4 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c489a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   c489e:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   c48a0:	bf04      	itt	eq
   c48a2:	2303      	moveq	r3, #3
   c48a4:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   c48a6:	6860      	ldr	r0, [r4, #4]
   c48a8:	f7ff fe9b 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c48ac:	6860      	ldr	r0, [r4, #4]
   c48ae:	f7ff fe98 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c48b2:	6860      	ldr	r0, [r4, #4]
   c48b4:	f7ff fe95 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   c48b8:	4620      	mov	r0, r4
   c48ba:	f7ff fec8 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   c48be:	6863      	ldr	r3, [r4, #4]
   c48c0:	7930      	ldrb	r0, [r6, #4]
   c48c2:	68b1      	ldr	r1, [r6, #8]
   c48c4:	89b2      	ldrh	r2, [r6, #12]
   c48c6:	821a      	strh	r2, [r3, #16]
   c48c8:	7218      	strb	r0, [r3, #8]
   c48ca:	60d9      	str	r1, [r3, #12]
  return true;
   c48cc:	2001      	movs	r0, #1
   c48ce:	e799      	b.n	c4804 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   c48d0:	0003d090 	.word	0x0003d090

000c48d4 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   c48d4:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   c48d6:	7a83      	ldrb	r3, [r0, #10]
   c48d8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   c48da:	bf18      	it	ne
   c48dc:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   c48de:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   c48e0:	460a      	mov	r2, r1
   c48e2:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   c48e4:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   c48e6:	f7ff ff0b 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c48ea:	b130      	cbz	r0, c48fa <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   c48ec:	2330      	movs	r3, #48	; 0x30
   c48ee:	7023      	strb	r3, [r4, #0]
  spiStop();
   c48f0:	4620      	mov	r0, r4
   c48f2:	f7ff feac 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c48f6:	2500      	movs	r5, #0
   c48f8:	e00b      	b.n	c4912 <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   c48fa:	4629      	mov	r1, r5
   c48fc:	f44f 7200 	mov.w	r2, #512	; 0x200
   c4900:	4620      	mov	r0, r4
   c4902:	f7ff feb7 	bl	c4674 <_ZN9SdSpiCard8readDataEPhj>
   c4906:	4605      	mov	r5, r0
   c4908:	2800      	cmp	r0, #0
   c490a:	d0f1      	beq.n	c48f0 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   c490c:	4620      	mov	r0, r4
   c490e:	f7ff fe9e 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
}
   c4912:	4628      	mov	r0, r5
   c4914:	bd38      	pop	{r3, r4, r5, pc}

000c4916 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   c4916:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   c4918:	7a83      	ldrb	r3, [r0, #10]
   c491a:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   c491c:	460a      	mov	r2, r1
    blockNumber <<= 9;
   c491e:	bf18      	it	ne
   c4920:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   c4922:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   c4924:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   c4926:	f7ff feeb 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c492a:	b130      	cbz	r0, c493a <_ZN9SdSpiCard9readStartEm+0x24>
   c492c:	2331      	movs	r3, #49	; 0x31
  spiStop();
   c492e:	4620      	mov	r0, r4
   c4930:	7023      	strb	r3, [r4, #0]
   c4932:	f7ff fe8c 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c4936:	2000      	movs	r0, #0
}
   c4938:	bd10      	pop	{r4, pc}
  return true;
   c493a:	2001      	movs	r0, #1
   c493c:	e7fc      	b.n	c4938 <_ZN9SdSpiCard9readStartEm+0x22>

000c493e <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   c493e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   c4940:	2200      	movs	r2, #0
   c4942:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   c4944:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   c4946:	f7ff fedb 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c494a:	b130      	cbz	r0, c495a <_ZN9SdSpiCard8readStopEv+0x1c>
   c494c:	2328      	movs	r3, #40	; 0x28
  spiStop();
   c494e:	4620      	mov	r0, r4
   c4950:	7023      	strb	r3, [r4, #0]
   c4952:	f7ff fe7c 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c4956:	2000      	movs	r0, #0
}
   c4958:	bd10      	pop	{r4, pc}
  spiStop();
   c495a:	4620      	mov	r0, r4
   c495c:	f7ff fe77 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return true;
   c4960:	2001      	movs	r0, #1
   c4962:	e7f9      	b.n	c4958 <_ZN9SdSpiCard8readStopEv+0x1a>

000c4964 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   c4964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c4966:	4604      	mov	r4, r0
   c4968:	4616      	mov	r6, r2
   c496a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   c496c:	f7ff ffd3 	bl	c4916 <_ZN9SdSpiCard9readStartEm>
   c4970:	b168      	cbz	r0, c498e <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   c4972:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   c4974:	b2ab      	uxth	r3, r5
   c4976:	429f      	cmp	r7, r3
   c4978:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   c497c:	d909      	bls.n	c4992 <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   c497e:	f44f 7200 	mov.w	r2, #512	; 0x200
   c4982:	4620      	mov	r0, r4
   c4984:	f7ff fe76 	bl	c4674 <_ZN9SdSpiCard8readDataEPhj>
   c4988:	3501      	adds	r5, #1
   c498a:	2800      	cmp	r0, #0
   c498c:	d1f2      	bne.n	c4974 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   c498e:	2000      	movs	r0, #0
   c4990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   c4992:	4620      	mov	r0, r4
}
   c4994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   c4998:	f7ff bfd1 	b.w	c493e <_ZN9SdSpiCard8readStopEv>

000c499c <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   c499c:	b538      	push	{r3, r4, r5, lr}
   c499e:	4604      	mov	r4, r0
   c49a0:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   c49a2:	6840      	ldr	r0, [r0, #4]
   c49a4:	f7ff fe1b 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   c49a8:	f44f 7200 	mov.w	r2, #512	; 0x200
   c49ac:	6860      	ldr	r0, [r4, #4]
   c49ae:	4629      	mov	r1, r5
   c49b0:	f000 f8e6 	bl	c4b80 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   c49b4:	6860      	ldr	r0, [r4, #4]
   c49b6:	21ff      	movs	r1, #255	; 0xff
   c49b8:	f7ff fe11 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   c49bc:	6860      	ldr	r0, [r4, #4]
   c49be:	21ff      	movs	r1, #255	; 0xff
   c49c0:	f7ff fe0d 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   c49c4:	6860      	ldr	r0, [r4, #4]
   c49c6:	f7ff fe0c 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c49ca:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   c49cc:	f000 001f 	and.w	r0, r0, #31
   c49d0:	2805      	cmp	r0, #5
   c49d2:	d006      	beq.n	c49e2 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   c49d4:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   c49d6:	4620      	mov	r0, r4
   c49d8:	7023      	strb	r3, [r4, #0]
   c49da:	f7ff fe38 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c49de:	2000      	movs	r0, #0
}
   c49e0:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   c49e2:	2001      	movs	r0, #1
   c49e4:	e7fc      	b.n	c49e0 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000c49e6 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   c49e6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   c49e8:	7a83      	ldrb	r3, [r0, #10]
   c49ea:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   c49ec:	bf18      	it	ne
   c49ee:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   c49f0:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   c49f2:	460a      	mov	r2, r1
   c49f4:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   c49f6:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   c49f8:	f7ff fe82 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c49fc:	4606      	mov	r6, r0
   c49fe:	b130      	cbz	r0, c4a0e <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   c4a00:	2332      	movs	r3, #50	; 0x32
   c4a02:	7023      	strb	r3, [r4, #0]
  spiStop();
   c4a04:	4620      	mov	r0, r4
   c4a06:	f7ff fe22 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c4a0a:	2500      	movs	r5, #0
   c4a0c:	e01f      	b.n	c4a4e <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   c4a0e:	462a      	mov	r2, r5
   c4a10:	21fe      	movs	r1, #254	; 0xfe
   c4a12:	4620      	mov	r0, r4
   c4a14:	f7ff ffc2 	bl	c499c <_ZN9SdSpiCard9writeDataEhPKh>
   c4a18:	2800      	cmp	r0, #0
   c4a1a:	d0f3      	beq.n	c4a04 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   c4a1c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   c4a20:	4620      	mov	r0, r4
   c4a22:	f7ff fe58 	bl	c46d6 <_ZN9SdSpiCard11waitNotBusyEt>
   c4a26:	4605      	mov	r5, r0
   c4a28:	b908      	cbnz	r0, c4a2e <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   c4a2a:	235a      	movs	r3, #90	; 0x5a
   c4a2c:	e7e9      	b.n	c4a02 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   c4a2e:	4632      	mov	r2, r6
   c4a30:	210d      	movs	r1, #13
   c4a32:	4620      	mov	r0, r4
   c4a34:	f7ff fe64 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c4a38:	b108      	cbz	r0, c4a3e <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   c4a3a:	2329      	movs	r3, #41	; 0x29
   c4a3c:	e7e1      	b.n	c4a02 <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   c4a3e:	6860      	ldr	r0, [r4, #4]
   c4a40:	f7ff fdcf 	bl	c45e2 <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   c4a44:	2800      	cmp	r0, #0
   c4a46:	d1f8      	bne.n	c4a3a <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   c4a48:	4620      	mov	r0, r4
   c4a4a:	f7ff fe00 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
}
   c4a4e:	4628      	mov	r0, r5
   c4a50:	bd70      	pop	{r4, r5, r6, pc}

000c4a52 <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   c4a52:	b513      	push	{r0, r1, r4, lr}
   c4a54:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   c4a56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   c4a5a:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   c4a5c:	f7ff fe3b 	bl	c46d6 <_ZN9SdSpiCard11waitNotBusyEt>
   c4a60:	9a01      	ldr	r2, [sp, #4]
   c4a62:	b930      	cbnz	r0, c4a72 <_ZN9SdSpiCard9writeDataEPKh+0x20>
   c4a64:	235b      	movs	r3, #91	; 0x5b
   c4a66:	7023      	strb	r3, [r4, #0]
  spiStop();
   c4a68:	4620      	mov	r0, r4
   c4a6a:	f7ff fdf0 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c4a6e:	2000      	movs	r0, #0
   c4a70:	e005      	b.n	c4a7e <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   c4a72:	21fc      	movs	r1, #252	; 0xfc
   c4a74:	4620      	mov	r0, r4
   c4a76:	f7ff ff91 	bl	c499c <_ZN9SdSpiCard9writeDataEhPKh>
   c4a7a:	2800      	cmp	r0, #0
   c4a7c:	d0f4      	beq.n	c4a68 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   c4a7e:	b002      	add	sp, #8
   c4a80:	bd10      	pop	{r4, pc}

000c4a82 <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   c4a82:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   c4a84:	7a83      	ldrb	r3, [r0, #10]
   c4a86:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   c4a88:	460a      	mov	r2, r1
    blockNumber <<= 9;
   c4a8a:	bf18      	it	ne
   c4a8c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   c4a8e:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   c4a90:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   c4a92:	f7ff fe35 	bl	c4700 <_ZN9SdSpiCard11cardCommandEhm>
   c4a96:	b130      	cbz	r0, c4aa6 <_ZN9SdSpiCard10writeStartEm+0x24>
   c4a98:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   c4a9a:	4620      	mov	r0, r4
   c4a9c:	7023      	strb	r3, [r4, #0]
   c4a9e:	f7ff fdd6 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
  return false;
   c4aa2:	2000      	movs	r0, #0
}
   c4aa4:	bd10      	pop	{r4, pc}
  return true;
   c4aa6:	2001      	movs	r0, #1
   c4aa8:	e7fc      	b.n	c4aa4 <_ZN9SdSpiCard10writeStartEm+0x22>

000c4aaa <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   c4aaa:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   c4aac:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   c4ab0:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   c4ab2:	f7ff fe10 	bl	c46d6 <_ZN9SdSpiCard11waitNotBusyEt>
   c4ab6:	4605      	mov	r5, r0
   c4ab8:	b930      	cbnz	r0, c4ac8 <_ZN9SdSpiCard9writeStopEv+0x1e>
   c4aba:	2356      	movs	r3, #86	; 0x56
   c4abc:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   c4abe:	4620      	mov	r0, r4
   c4ac0:	f7ff fdc5 	bl	c464e <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   c4ac4:	4628      	mov	r0, r5
   c4ac6:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   c4ac8:	6860      	ldr	r0, [r4, #4]
   c4aca:	21fd      	movs	r1, #253	; 0xfd
   c4acc:	f7ff fd87 	bl	c45de <_ZN9SdSpiCard7spiSendEh.isra.0>
   c4ad0:	e7f5      	b.n	c4abe <_ZN9SdSpiCard9writeStopEv+0x14>

000c4ad2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   c4ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c4ad4:	4604      	mov	r4, r0
   c4ad6:	4616      	mov	r6, r2
   c4ad8:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   c4ada:	f7ff ffd2 	bl	c4a82 <_ZN9SdSpiCard10writeStartEm>
   c4ade:	b170      	cbz	r0, c4afe <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   c4ae0:	2500      	movs	r5, #0
   c4ae2:	42bd      	cmp	r5, r7
   c4ae4:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   c4ae8:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   c4aea:	d004      	beq.n	c4af6 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   c4aec:	f7ff ffb1 	bl	c4a52 <_ZN9SdSpiCard9writeDataEPKh>
   c4af0:	b128      	cbz	r0, c4afe <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   c4af2:	3501      	adds	r5, #1
   c4af4:	e7f5      	b.n	c4ae2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   c4af6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   c4afa:	f7ff bfd6 	b.w	c4aaa <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   c4afe:	4620      	mov	r0, r4
   c4b00:	f7ff fda5 	bl	c464e <_ZN9SdSpiCard7spiStopEv>
}
   c4b04:	2000      	movs	r0, #0
   c4b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c4b08 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   c4b08:	4b01      	ldr	r3, [pc, #4]	; (c4b10 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   c4b0a:	2201      	movs	r2, #1
   c4b0c:	701a      	strb	r2, [r3, #0]
}
   c4b0e:	4770      	bx	lr
   c4b10:	2003e628 	.word	0x2003e628

000c4b14 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   c4b14:	1d01      	adds	r1, r0, #4
   c4b16:	6800      	ldr	r0, [r0, #0]
   c4b18:	f002 b8c6 	b.w	c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000c4b1c <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   c4b1c:	b510      	push	{r4, lr}
   c4b1e:	4604      	mov	r4, r0
  m_csPin = csPin;
   c4b20:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   c4b22:	6800      	ldr	r0, [r0, #0]
   c4b24:	f002 f86c 	bl	c6c00 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   c4b28:	7d20      	ldrb	r0, [r4, #20]
   c4b2a:	2101      	movs	r1, #1
   c4b2c:	f002 fd44 	bl	c75b8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   c4b30:	7d20      	ldrb	r0, [r4, #20]
   c4b32:	2101      	movs	r1, #1
}
   c4b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   c4b38:	f002 bd4f 	b.w	c75da <digitalWrite>

000c4b3c <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   c4b3c:	6800      	ldr	r0, [r0, #0]
   c4b3e:	f002 b899 	b.w	c6c74 <_ZN8SPIClass14endTransactionEv>

000c4b42 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   c4b42:	6800      	ldr	r0, [r0, #0]
   c4b44:	21ff      	movs	r1, #255	; 0xff
   c4b46:	f002 b91d 	b.w	c6d84 <_ZN8SPIClass8transferEh>
	...

000c4b4c <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   c4b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4b4e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   c4b50:	4a07      	ldr	r2, [pc, #28]	; (c4b70 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   c4b52:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   c4b54:	2500      	movs	r5, #0
   c4b56:	4c07      	ldr	r4, [pc, #28]	; (c4b74 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   c4b58:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   c4b5a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   c4b5c:	460a      	mov	r2, r1
   c4b5e:	4629      	mov	r1, r5
   c4b60:	f002 f916 	bl	c6d90 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   c4b64:	7823      	ldrb	r3, [r4, #0]
   c4b66:	2b00      	cmp	r3, #0
   c4b68:	d0fc      	beq.n	c4b64 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   c4b6a:	2000      	movs	r0, #0
   c4b6c:	b003      	add	sp, #12
   c4b6e:	bd30      	pop	{r4, r5, pc}
   c4b70:	000c4b09 	.word	0x000c4b09
   c4b74:	2003e628 	.word	0x2003e628

000c4b78 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   c4b78:	6800      	ldr	r0, [r0, #0]
   c4b7a:	f002 b903 	b.w	c6d84 <_ZN8SPIClass8transferEh>
	...

000c4b80 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   c4b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4b82:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   c4b84:	4a06      	ldr	r2, [pc, #24]	; (c4ba0 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   c4b86:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   c4b88:	2500      	movs	r5, #0
   c4b8a:	4c06      	ldr	r4, [pc, #24]	; (c4ba4 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   c4b8c:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   c4b8e:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   c4b90:	462a      	mov	r2, r5
   c4b92:	f002 f8fd 	bl	c6d90 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   c4b96:	7823      	ldrb	r3, [r4, #0]
   c4b98:	2b00      	cmp	r3, #0
   c4b9a:	d0fc      	beq.n	c4b96 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   c4b9c:	b003      	add	sp, #12
   c4b9e:	bd30      	pop	{r4, r5, pc}
   c4ba0:	000c4b09 	.word	0x000c4b09
   c4ba4:	2003e628 	.word	0x2003e628

000c4ba8 <_ZN7TwoWire5writeEi.isra.0>:
   c4ba8:	6803      	ldr	r3, [r0, #0]
   c4baa:	b2c9      	uxtb	r1, r1
   c4bac:	689b      	ldr	r3, [r3, #8]
   c4bae:	4718      	bx	r3

000c4bb0 <_ZN5SVCS3C1Ev>:
 */
#include "i2cArduino.h"


SVCS3::SVCS3(){
  addr=0x63;
   c4bb0:	2363      	movs	r3, #99	; 0x63
   c4bb2:	7103      	strb	r3, [r0, #4]
}
   c4bb4:	4770      	bx	lr

000c4bb6 <_ZN5SVCS34initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVCS3::init(int address){
   c4bb6:	b538      	push	{r3, r4, r5, lr}
   c4bb8:	4604      	mov	r4, r0
   c4bba:	460d      	mov	r5, r1
  _wire = &Wire;
   c4bbc:	f002 fd9c 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c4bc0:	6020      	str	r0, [r4, #0]
  _wire->begin();
   c4bc2:	f001 fb6b 	bl	c629c <_ZN7TwoWire5beginEv>
  addr = address;
   c4bc6:	7125      	strb	r5, [r4, #4]
  return 0;
}
   c4bc8:	2000      	movs	r0, #0
   c4bca:	bd38      	pop	{r3, r4, r5, pc}

000c4bcc <_ZN5SVCS38i2cdelayEi>:


bool SVCS3::i2cdelay(int size){
   c4bcc:	b570      	push	{r4, r5, r6, lr}
   c4bce:	4606      	mov	r6, r0
   c4bd0:	460d      	mov	r5, r1
  int i=0;
   c4bd2:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
   c4bd4:	6830      	ldr	r0, [r6, #0]
   c4bd6:	6803      	ldr	r3, [r0, #0]
   c4bd8:	691b      	ldr	r3, [r3, #16]
   c4bda:	4798      	blx	r3
   c4bdc:	42a8      	cmp	r0, r5
   c4bde:	da06      	bge.n	c4bee <_ZN5SVCS38i2cdelayEi+0x22>
   c4be0:	42ac      	cmp	r4, r5
   c4be2:	dc09      	bgt.n	c4bf8 <_ZN5SVCS38i2cdelayEi+0x2c>
	  delay(2);
   c4be4:	2002      	movs	r0, #2
   c4be6:	f000 fda3 	bl	c5730 <delay>
  for (;_wire->available() < size && i<=size;i++) {
   c4bea:	3401      	adds	r4, #1
   c4bec:	e7f2      	b.n	c4bd4 <_ZN5SVCS38i2cdelayEi+0x8>
  }
  if(i>=size){
   c4bee:	42ac      	cmp	r4, r5
   c4bf0:	bfac      	ite	ge
   c4bf2:	2000      	movge	r0, #0
   c4bf4:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
   c4bf6:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
   c4bf8:	2000      	movs	r0, #0
   c4bfa:	e7fc      	b.n	c4bf6 <_ZN5SVCS38i2cdelayEi+0x2a>

000c4bfc <_ZN5SVCS38getStateEv>:

int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
   c4bfc:	b510      	push	{r4, lr}
  _wire->requestFrom(addr, (uint8_t)1);
   c4bfe:	2201      	movs	r2, #1
   c4c00:	7901      	ldrb	r1, [r0, #4]
int SVCS3::getState(){ //-1:no data, 0:err, 1:ok
   c4c02:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
   c4c04:	6800      	ldr	r0, [r0, #0]
   c4c06:	f001 fb7c 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
   c4c0a:	2101      	movs	r1, #1
   c4c0c:	4620      	mov	r0, r4
   c4c0e:	f7ff ffdd 	bl	c4bcc <_ZN5SVCS38i2cdelayEi>
   c4c12:	b128      	cbz	r0, c4c20 <_ZN5SVCS38getStateEv+0x24>
    return _wire->read();
   c4c14:	6820      	ldr	r0, [r4, #0]
   c4c16:	6803      	ldr	r3, [r0, #0]
  }else{
    return -1;
  }
}
   c4c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
   c4c1c:	695b      	ldr	r3, [r3, #20]
   c4c1e:	4718      	bx	r3
}
   c4c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4c24:	bd10      	pop	{r4, pc}

000c4c26 <_ZN5SVCS36getValEh>:

int16_t SVCS3::getVal(byte reg){
   c4c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c4c28:	4604      	mov	r4, r0
   c4c2a:	460d      	mov	r5, r1

  _wire->beginTransmission(addr); // transmit to device
   c4c2c:	7901      	ldrb	r1, [r0, #4]
   c4c2e:	6800      	ldr	r0, [r0, #0]
   c4c30:	f001 fb6a 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(reg);              // sends one byte
   c4c34:	6820      	ldr	r0, [r4, #0]
   c4c36:	6803      	ldr	r3, [r0, #0]
   c4c38:	4629      	mov	r1, r5
   c4c3a:	689b      	ldr	r3, [r3, #8]
   c4c3c:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
   c4c3e:	6820      	ldr	r0, [r4, #0]
   c4c40:	f001 fb87 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
 
  _wire->requestFrom(addr, (uint8_t)2);
   c4c44:	7921      	ldrb	r1, [r4, #4]
   c4c46:	6820      	ldr	r0, [r4, #0]
   c4c48:	2202      	movs	r2, #2
   c4c4a:	f001 fb5a 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
  int16_t ret=0;
   c4c4e:	2300      	movs	r3, #0
  if(i2cdelay(2)){
   c4c50:	2102      	movs	r1, #2
   c4c52:	4620      	mov	r0, r4
  int16_t ret=0;
   c4c54:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(i2cdelay(2)){
   c4c58:	f7ff ffb8 	bl	c4bcc <_ZN5SVCS38i2cdelayEi>
   c4c5c:	b158      	cbz	r0, c4c76 <_ZN5SVCS36getValEh+0x50>
	byte *pointer = (byte *)&ret;
    pointer[0] = _wire->read();
   c4c5e:	6820      	ldr	r0, [r4, #0]
   c4c60:	6803      	ldr	r3, [r0, #0]
   c4c62:	695b      	ldr	r3, [r3, #20]
   c4c64:	4798      	blx	r3
   c4c66:	f88d 0006 	strb.w	r0, [sp, #6]
    pointer[1] = _wire->read();
   c4c6a:	6820      	ldr	r0, [r4, #0]
   c4c6c:	6803      	ldr	r3, [r0, #0]
   c4c6e:	695b      	ldr	r3, [r3, #20]
   c4c70:	4798      	blx	r3
   c4c72:	f88d 0007 	strb.w	r0, [sp, #7]
  }
  return ret;
}
   c4c76:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
   c4c7a:	b003      	add	sp, #12
   c4c7c:	bd30      	pop	{r4, r5, pc}

000c4c7e <_ZN5SVCS310newReadingEv>:
    return 0;
  }
  return 1;
}

int SVCS3::newReading(){
   c4c7e:	b510      	push	{r4, lr}
   c4c80:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
   c4c82:	7901      	ldrb	r1, [r0, #4]
   c4c84:	6800      	ldr	r0, [r0, #0]
   c4c86:	f001 fb3f 	bl	c6308 <_ZN7TwoWire17beginTransmissionEh>
  _wire->write(REG_READ_START);              // sends one byte
   c4c8a:	6820      	ldr	r0, [r4, #0]
   c4c8c:	2101      	movs	r1, #1
   c4c8e:	f7ff ff8b 	bl	c4ba8 <_ZN7TwoWire5writeEi.isra.0>
  _wire->endTransmission();    // stop transmitting
   c4c92:	6820      	ldr	r0, [r4, #0]
   c4c94:	f001 fb5d 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  delay(300);
   c4c98:	f44f 7096 	mov.w	r0, #300	; 0x12c
   c4c9c:	f000 fd48 	bl	c5730 <delay>
  return getState();
   c4ca0:	4620      	mov	r0, r4
}
   c4ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
   c4ca6:	f7ff bfa9 	b.w	c4bfc <_ZN5SVCS38getStateEv>
	...

000c4cac <_ZN5SVCS36getE25Ev>:

float SVCS3::getE25()
{
   c4cac:	b508      	push	{r3, lr}
  return getVal(REG_READ_E25)/100.0;
   c4cae:	2102      	movs	r1, #2
   c4cb0:	f7ff ffb9 	bl	c4c26 <_ZN5SVCS36getValEh>
   c4cb4:	f7ef fb06 	bl	b42c4 <__aeabi_i2d>
   c4cb8:	4b04      	ldr	r3, [pc, #16]	; (c4ccc <_ZN5SVCS36getE25Ev+0x20>)
   c4cba:	2200      	movs	r2, #0
   c4cbc:	f7ef fc96 	bl	b45ec <__aeabi_ddiv>
   c4cc0:	f7ef fe62 	bl	b4988 <__aeabi_d2f>
}
   c4cc4:	ee00 0a10 	vmov	s0, r0
   c4cc8:	bd08      	pop	{r3, pc}
   c4cca:	bf00      	nop
   c4ccc:	40590000 	.word	0x40590000

000c4cd0 <_ZN5SVCS35getECEv>:

float SVCS3::getEC()
{
   c4cd0:	b508      	push	{r3, lr}
  return getVal(REG_READ_EC)/10.0;
   c4cd2:	2103      	movs	r1, #3
   c4cd4:	f7ff ffa7 	bl	c4c26 <_ZN5SVCS36getValEh>
   c4cd8:	f7ef faf4 	bl	b42c4 <__aeabi_i2d>
   c4cdc:	4b04      	ldr	r3, [pc, #16]	; (c4cf0 <_ZN5SVCS35getECEv+0x20>)
   c4cde:	2200      	movs	r2, #0
   c4ce0:	f7ef fc84 	bl	b45ec <__aeabi_ddiv>
   c4ce4:	f7ef fe50 	bl	b4988 <__aeabi_d2f>
}
   c4ce8:	ee00 0a10 	vmov	s0, r0
   c4cec:	bd08      	pop	{r3, pc}
   c4cee:	bf00      	nop
   c4cf0:	40240000 	.word	0x40240000

000c4cf4 <_ZN5SVCS37getTempEv>:

float SVCS3::getTemp()
{
   c4cf4:	b508      	push	{r3, lr}
  return getVal(REG_READ_TEMP)/100.0;
   c4cf6:	2104      	movs	r1, #4
   c4cf8:	f7ff ff95 	bl	c4c26 <_ZN5SVCS36getValEh>
   c4cfc:	f7ef fae2 	bl	b42c4 <__aeabi_i2d>
   c4d00:	4b04      	ldr	r3, [pc, #16]	; (c4d14 <_ZN5SVCS37getTempEv+0x20>)
   c4d02:	2200      	movs	r2, #0
   c4d04:	f7ef fc72 	bl	b45ec <__aeabi_ddiv>
   c4d08:	f7ef fe3e 	bl	b4988 <__aeabi_d2f>
}
   c4d0c:	ee00 0a10 	vmov	s0, r0
   c4d10:	bd08      	pop	{r3, pc}
   c4d12:	bf00      	nop
   c4d14:	40590000 	.word	0x40590000

000c4d18 <_ZN5SVCS36getVWCEv>:

float SVCS3::getVWC()
{
   c4d18:	b508      	push	{r3, lr}
  return getVal(REG_READ_VWC)/10.0;
   c4d1a:	2105      	movs	r1, #5
   c4d1c:	f7ff ff83 	bl	c4c26 <_ZN5SVCS36getValEh>
   c4d20:	f7ef fad0 	bl	b42c4 <__aeabi_i2d>
   c4d24:	4b04      	ldr	r3, [pc, #16]	; (c4d38 <_ZN5SVCS36getVWCEv+0x20>)
   c4d26:	2200      	movs	r2, #0
   c4d28:	f7ef fc60 	bl	b45ec <__aeabi_ddiv>
   c4d2c:	f7ef fe2c 	bl	b4988 <__aeabi_d2f>
}
   c4d30:	ee00 0a10 	vmov	s0, r0
   c4d34:	bd08      	pop	{r3, pc}
   c4d36:	bf00      	nop
   c4d38:	40240000 	.word	0x40240000

000c4d3c <_ZN7SVMULTIC1Ev>:
 */
#include "i2cMultiSm.h"


SVMULTI::SVMULTI(){
  addr=101;
   c4d3c:	2365      	movs	r3, #101	; 0x65
   c4d3e:	8083      	strh	r3, [r0, #4]
}
   c4d40:	4770      	bx	lr

000c4d42 <_ZN7SVMULTI4initEi>:
  _wire = the_wire;
  addr = address;
  return 0;
}

int SVMULTI::init(int address){
   c4d42:	b538      	push	{r3, r4, r5, lr}
   c4d44:	4604      	mov	r4, r0
   c4d46:	460d      	mov	r5, r1
  _wire = &Wire;
   c4d48:	f002 fcd6 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c4d4c:	6020      	str	r0, [r4, #0]
  _wire->begin();
   c4d4e:	f001 faa5 	bl	c629c <_ZN7TwoWire5beginEv>
  addr = address;
   c4d52:	80a5      	strh	r5, [r4, #4]
  return 0;
}
   c4d54:	2000      	movs	r0, #0
   c4d56:	bd38      	pop	{r3, r4, r5, pc}

000c4d58 <_ZN7SVMULTI8i2cdelayEi>:


bool SVMULTI::i2cdelay(int size){
   c4d58:	b570      	push	{r4, r5, r6, lr}
   c4d5a:	4606      	mov	r6, r0
   c4d5c:	460d      	mov	r5, r1
  int i=0;
   c4d5e:	2400      	movs	r4, #0
  for (;_wire->available() < size && i<=size;i++) {
   c4d60:	6830      	ldr	r0, [r6, #0]
   c4d62:	6803      	ldr	r3, [r0, #0]
   c4d64:	691b      	ldr	r3, [r3, #16]
   c4d66:	4798      	blx	r3
   c4d68:	42a8      	cmp	r0, r5
   c4d6a:	da06      	bge.n	c4d7a <_ZN7SVMULTI8i2cdelayEi+0x22>
   c4d6c:	42ac      	cmp	r4, r5
   c4d6e:	dc09      	bgt.n	c4d84 <_ZN7SVMULTI8i2cdelayEi+0x2c>
	  delay(2);
   c4d70:	2002      	movs	r0, #2
   c4d72:	f000 fcdd 	bl	c5730 <delay>
  for (;_wire->available() < size && i<=size;i++) {
   c4d76:	3401      	adds	r4, #1
   c4d78:	e7f2      	b.n	c4d60 <_ZN7SVMULTI8i2cdelayEi+0x8>
  }
  if(i>=size){
   c4d7a:	42ac      	cmp	r4, r5
   c4d7c:	bfac      	ite	ge
   c4d7e:	2000      	movge	r0, #0
   c4d80:	2001      	movlt	r0, #1
	  return false;
  }else{
	  return true;
  }
}
   c4d82:	bd70      	pop	{r4, r5, r6, pc}
	  return false;
   c4d84:	2000      	movs	r0, #0
   c4d86:	e7fc      	b.n	c4d82 <_ZN7SVMULTI8i2cdelayEi+0x2a>

000c4d88 <_ZN7SVMULTI8getStateEv>:

int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
   c4d88:	b510      	push	{r4, lr}
  _wire->requestFrom(addr, (uint8_t)1);
   c4d8a:	2201      	movs	r2, #1
   c4d8c:	7901      	ldrb	r1, [r0, #4]
int SVMULTI::getState(){ //-1:no data, 0:err, 1:ok
   c4d8e:	4604      	mov	r4, r0
  _wire->requestFrom(addr, (uint8_t)1);
   c4d90:	6800      	ldr	r0, [r0, #0]
   c4d92:	f001 fab6 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   if(i2cdelay(1)){
   c4d96:	2101      	movs	r1, #1
   c4d98:	4620      	mov	r0, r4
   c4d9a:	f7ff ffdd 	bl	c4d58 <_ZN7SVMULTI8i2cdelayEi>
   c4d9e:	b128      	cbz	r0, c4dac <_ZN7SVMULTI8getStateEv+0x24>
    return _wire->read();
   c4da0:	6820      	ldr	r0, [r4, #0]
   c4da2:	6803      	ldr	r3, [r0, #0]
  }else{
    return -1;
  }
}
   c4da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return _wire->read();
   c4da8:	695b      	ldr	r3, [r3, #20]
   c4daa:	4718      	bx	r3
}
   c4dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c4db0:	bd10      	pop	{r4, pc}

000c4db2 <_ZN7SVMULTI10newReadingEv>:
    return 0;
  }
  return 1;
}

int SVMULTI::newReading(){
   c4db2:	b510      	push	{r4, lr}
   c4db4:	4604      	mov	r4, r0
  _wire->beginTransmission(addr); // transmit to device
   c4db6:	8881      	ldrh	r1, [r0, #4]
   c4db8:	6800      	ldr	r0, [r0, #0]
   c4dba:	f001 faa9 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_READ_START);              // sends one byte
   c4dbe:	6820      	ldr	r0, [r4, #0]
   c4dc0:	6803      	ldr	r3, [r0, #0]
   c4dc2:	2101      	movs	r1, #1
   c4dc4:	689b      	ldr	r3, [r3, #8]
   c4dc6:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
   c4dc8:	6820      	ldr	r0, [r4, #0]
   c4dca:	f001 fac2 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  delay(300);
   c4dce:	f44f 7096 	mov.w	r0, #300	; 0x12c
   c4dd2:	f000 fcad 	bl	c5730 <delay>
  return getState();
   c4dd6:	4620      	mov	r0, r4
}
   c4dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return getState();
   c4ddc:	f7ff bfd4 	b.w	c4d88 <_ZN7SVMULTI8getStateEv>

000c4de0 <_ZN7SVMULTI6getRawEP6vals_t>:
	}

}


void SVMULTI::getRaw(vals_t *vals){
   c4de0:	b570      	push	{r4, r5, r6, lr}
   c4de2:	4604      	mov	r4, r0
   c4de4:	460d      	mov	r5, r1
  _wire->beginTransmission(addr); // transmit to device
   c4de6:	8881      	ldrh	r1, [r0, #4]
   c4de8:	6800      	ldr	r0, [r0, #0]
   c4dea:	f001 fa91 	bl	c6310 <_ZN7TwoWire17beginTransmissionEi>
  _wire->write(REG_GET_DATA);              // sends one byte
   c4dee:	6820      	ldr	r0, [r4, #0]
   c4df0:	6803      	ldr	r3, [r0, #0]
   c4df2:	2109      	movs	r1, #9
   c4df4:	689b      	ldr	r3, [r3, #8]
   c4df6:	4798      	blx	r3
  _wire->endTransmission();    // stop transmitting
   c4df8:	6820      	ldr	r0, [r4, #0]
   c4dfa:	f001 faaa 	bl	c6352 <_ZN7TwoWire15endTransmissionEv>
  _wire->requestFrom(addr, (uint8_t)14);
   c4dfe:	7921      	ldrb	r1, [r4, #4]
   c4e00:	6820      	ldr	r0, [r4, #0]
   c4e02:	220e      	movs	r2, #14
   c4e04:	f001 fa7d 	bl	c6302 <_ZN7TwoWire11requestFromEhj>
   byte *p1 = (byte*)vals;
  if(i2cdelay(14)){
   c4e08:	210e      	movs	r1, #14
   c4e0a:	4620      	mov	r0, r4
   c4e0c:	f7ff ffa4 	bl	c4d58 <_ZN7SVMULTI8i2cdelayEi>
   c4e10:	b148      	cbz	r0, c4e26 <_ZN7SVMULTI6getRawEP6vals_t+0x46>
   c4e12:	1e6e      	subs	r6, r5, #1
   c4e14:	350d      	adds	r5, #13
    // Wire.readBytes((byte*)&vals, 14);
	  for(int i = 0; i<14; i++){
		  p1[i] = _wire->read();
   c4e16:	6820      	ldr	r0, [r4, #0]
   c4e18:	6803      	ldr	r3, [r0, #0]
   c4e1a:	695b      	ldr	r3, [r3, #20]
   c4e1c:	4798      	blx	r3
   c4e1e:	f806 0f01 	strb.w	r0, [r6, #1]!
	  for(int i = 0; i<14; i++){
   c4e22:	42ae      	cmp	r6, r5
   c4e24:	d1f7      	bne.n	c4e16 <_ZN7SVMULTI6getRawEP6vals_t+0x36>
	  }
  }
}
   c4e26:	bd70      	pop	{r4, r5, r6, pc}

000c4e28 <_ZN7SVMULTI7getDataEP10soil_ret_t>:
void SVMULTI::getData(soil_ret_t *data){
   c4e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c4e2c:	ed2d 8b02 	vpush	{d8}
   c4e30:	b085      	sub	sp, #20
   c4e32:	460c      	mov	r4, r1
  getRaw(&vals);
   c4e34:	4669      	mov	r1, sp
   c4e36:	f7ff ffd3 	bl	c4de0 <_ZN7SVMULTI6getRawEP6vals_t>
   c4e3a:	ed9f 8b3b 	vldr	d8, [pc, #236]	; c4f28 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x100>
   c4e3e:	f10d 0a04 	add.w	sl, sp, #4
   c4e42:	f104 0508 	add.w	r5, r4, #8
   c4e46:	f104 0b1c 	add.w	fp, r4, #28
		  data->dp[a] = vals.dp[a]/100.0;
   c4e4a:	f93a 0b02 	ldrsh.w	r0, [sl], #2
   c4e4e:	f7ef fa39 	bl	b42c4 <__aeabi_i2d>
   c4e52:	4b3f      	ldr	r3, [pc, #252]	; (c4f50 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
   c4e54:	2200      	movs	r2, #0
   c4e56:	f7ef fbc9 	bl	b45ec <__aeabi_ddiv>
   c4e5a:	f7ef fd95 	bl	b4988 <__aeabi_d2f>
   c4e5e:	6028      	str	r0, [r5, #0]
   c4e60:	f7ef fa42 	bl	b42e8 <__aeabi_f2d>
   c4e64:	eeb0 1a48 	vmov.f32	s2, s16
   c4e68:	eef0 1a68 	vmov.f32	s3, s17
   c4e6c:	ec41 0b10 	vmov	d0, r0, r1
   c4e70:	f002 ffa6 	bl	c7dc0 <pow>
   c4e74:	f855 0b04 	ldr.w	r0, [r5], #4
   c4e78:	ec59 8b10 	vmov	r8, r9, d0
   c4e7c:	f7ef fa34 	bl	b42e8 <__aeabi_f2d>
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
   c4e80:	a32b      	add	r3, pc, #172	; (adr r3, c4f30 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x108>)
   c4e82:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4e86:	4606      	mov	r6, r0
   c4e88:	460f      	mov	r7, r1
   c4e8a:	4640      	mov	r0, r8
   c4e8c:	4649      	mov	r1, r9
   c4e8e:	f7ef fa83 	bl	b4398 <__aeabi_dmul>
   c4e92:	4632      	mov	r2, r6
   c4e94:	4680      	mov	r8, r0
   c4e96:	4689      	mov	r9, r1
   c4e98:	463b      	mov	r3, r7
   c4e9a:	4630      	mov	r0, r6
   c4e9c:	4639      	mov	r1, r7
   c4e9e:	f7ef fa7b 	bl	b4398 <__aeabi_dmul>
   c4ea2:	a325      	add	r3, pc, #148	; (adr r3, c4f38 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x110>)
   c4ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4ea8:	f7ef fa76 	bl	b4398 <__aeabi_dmul>
   c4eac:	4602      	mov	r2, r0
   c4eae:	460b      	mov	r3, r1
   c4eb0:	4640      	mov	r0, r8
   c4eb2:	4649      	mov	r1, r9
   c4eb4:	f7ef f8b8 	bl	b4028 <__aeabi_dsub>
   c4eb8:	a321      	add	r3, pc, #132	; (adr r3, c4f40 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x118>)
   c4eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4ebe:	4680      	mov	r8, r0
   c4ec0:	4689      	mov	r9, r1
   c4ec2:	4630      	mov	r0, r6
   c4ec4:	4639      	mov	r1, r7
   c4ec6:	f7ef fa67 	bl	b4398 <__aeabi_dmul>
   c4eca:	4602      	mov	r2, r0
   c4ecc:	460b      	mov	r3, r1
   c4ece:	4640      	mov	r0, r8
   c4ed0:	4649      	mov	r1, r9
   c4ed2:	f7ef f8ab 	bl	b402c <__adddf3>
   c4ed6:	a31c      	add	r3, pc, #112	; (adr r3, c4f48 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x120>)
   c4ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c4edc:	f7ef f8a4 	bl	b4028 <__aeabi_dsub>
   c4ee0:	4b1b      	ldr	r3, [pc, #108]	; (c4f50 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
   c4ee2:	2200      	movs	r2, #0
   c4ee4:	f7ef fa58 	bl	b4398 <__aeabi_dmul>
   c4ee8:	f7ef fd4e 	bl	b4988 <__aeabi_d2f>
  for(int a=0;a<MULTI_ZONES;a++){
   c4eec:	45ab      	cmp	fp, r5
		  data->vwc[a] = (4.3e-6 * pow(data->dp[a],3) - 5.5e-4*pow(data->dp[a],2) + 2.92e-2*data->dp[a] - 5.3e-2)* 100.0;
   c4eee:	6128      	str	r0, [r5, #16]
  for(int a=0;a<MULTI_ZONES;a++){
   c4ef0:	d1ab      	bne.n	c4e4a <_ZN7SVMULTI7getDataEP10soil_ret_t+0x22>
		  data->temp[a] = vals.temp[a]/100.0;
   c4ef2:	f9bd 0000 	ldrsh.w	r0, [sp]
   c4ef6:	f7ef f9e5 	bl	b42c4 <__aeabi_i2d>
   c4efa:	4b15      	ldr	r3, [pc, #84]	; (c4f50 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
   c4efc:	2200      	movs	r2, #0
   c4efe:	f7ef fb75 	bl	b45ec <__aeabi_ddiv>
   c4f02:	f7ef fd41 	bl	b4988 <__aeabi_d2f>
   c4f06:	6020      	str	r0, [r4, #0]
   c4f08:	f9bd 0002 	ldrsh.w	r0, [sp, #2]
   c4f0c:	f7ef f9da 	bl	b42c4 <__aeabi_i2d>
   c4f10:	4b0f      	ldr	r3, [pc, #60]	; (c4f50 <_ZN7SVMULTI7getDataEP10soil_ret_t+0x128>)
   c4f12:	2200      	movs	r2, #0
   c4f14:	f7ef fb6a 	bl	b45ec <__aeabi_ddiv>
   c4f18:	f7ef fd36 	bl	b4988 <__aeabi_d2f>
   c4f1c:	6060      	str	r0, [r4, #4]
}
   c4f1e:	b005      	add	sp, #20
   c4f20:	ecbd 8b02 	vpop	{d8}
   c4f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c4f28:	00000000 	.word	0x00000000
   c4f2c:	40080000 	.word	0x40080000
   c4f30:	fff6c5c5 	.word	0xfff6c5c5
   c4f34:	3ed20916 	.word	0x3ed20916
   c4f38:	01a36e2f 	.word	0x01a36e2f
   c4f3c:	3f4205bc 	.word	0x3f4205bc
   c4f40:	d42c3c9f 	.word	0xd42c3c9f
   c4f44:	3f9de69a 	.word	0x3f9de69a
   c4f48:	e5604189 	.word	0xe5604189
   c4f4c:	3fab22d0 	.word	0x3fab22d0
   c4f50:	40590000 	.word	0x40590000

000c4f54 <cellular_credentials_set>:
DYNALIB_FN(5, hal_cellular, cellular_pdp_deactivate, cellular_result_t(void*))
DYNALIB_FN(6, hal_cellular, cellular_gprs_attach, cellular_result_t(CellularCredentials*, void*))
DYNALIB_FN(7, hal_cellular, cellular_gprs_detach, cellular_result_t(void*))
DYNALIB_FN(8, hal_cellular, cellular_fetch_ipconfig, cellular_result_t(CellularConfig*, void*))
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
   c4f54:	b508      	push	{r3, lr}
   c4f56:	4b02      	ldr	r3, [pc, #8]	; (c4f60 <cellular_credentials_set+0xc>)
   c4f58:	681b      	ldr	r3, [r3, #0]
   c4f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c4f5c:	9301      	str	r3, [sp, #4]
   c4f5e:	bd08      	pop	{r3, pc}
   c4f60:	00030274 	.word	0x00030274

000c4f64 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   c4f64:	b508      	push	{r3, lr}
   c4f66:	4b02      	ldr	r3, [pc, #8]	; (c4f70 <cellular_signal+0xc>)
   c4f68:	681b      	ldr	r3, [r3, #0]
   c4f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c4f6c:	9301      	str	r3, [sp, #4]
   c4f6e:	bd08      	pop	{r3, pc}
   c4f70:	00030274 	.word	0x00030274

000c4f74 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
   c4f74:	b508      	push	{r3, lr}
   c4f76:	4b02      	ldr	r3, [pc, #8]	; (c4f80 <cellular_command+0xc>)
   c4f78:	681b      	ldr	r3, [r3, #0]
   c4f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   c4f7c:	9301      	str	r3, [sp, #4]
   c4f7e:	bd08      	pop	{r3, pc}
   c4f80:	00030274 	.word	0x00030274

000c4f84 <cellular_set_active_sim>:
DYNALIB_FN(29, hal_cellular, cellular_sim_to_network_provider, cellular_result_t(void*))
DYNALIB_FN(30, hal_cellular, cellular_network_provider_data_get, CellularNetProvData(void*))
DYNALIB_FN(31, hal_cellular, cellular_lock, int(void*))
DYNALIB_FN(32, hal_cellular, cellular_unlock, void(void*))
DYNALIB_FN(33, hal_cellular, cellular_set_power_mode, void(int mode, void* reserved))
DYNALIB_FN(34, hal_cellular, cellular_set_active_sim, cellular_result_t(int, void*))
   c4f84:	b508      	push	{r3, lr}
   c4f86:	4b03      	ldr	r3, [pc, #12]	; (c4f94 <cellular_set_active_sim+0x10>)
   c4f88:	681b      	ldr	r3, [r3, #0]
   c4f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   c4f8e:	9301      	str	r3, [sp, #4]
   c4f90:	bd08      	pop	{r3, pc}
   c4f92:	0000      	.short	0x0000
   c4f94:	00030274 	.word	0x00030274

000c4f98 <cellular_get_active_sim>:
DYNALIB_FN(35, hal_cellular, cellular_get_active_sim, cellular_result_t(int*, void*))
   c4f98:	b508      	push	{r3, lr}
   c4f9a:	4b03      	ldr	r3, [pc, #12]	; (c4fa8 <cellular_get_active_sim+0x10>)
   c4f9c:	681b      	ldr	r3, [r3, #0]
   c4f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   c4fa2:	9301      	str	r3, [sp, #4]
   c4fa4:	bd08      	pop	{r3, pc}
   c4fa6:	0000      	.short	0x0000
   c4fa8:	00030274 	.word	0x00030274

000c4fac <cellular_credentials_clear>:
DYNALIB_FN(36, hal_cellular, cellular_credentials_clear, int(void*))
   c4fac:	b508      	push	{r3, lr}
   c4fae:	4b03      	ldr	r3, [pc, #12]	; (c4fbc <cellular_credentials_clear+0x10>)
   c4fb0:	681b      	ldr	r3, [r3, #0]
   c4fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   c4fb6:	9301      	str	r3, [sp, #4]
   c4fb8:	bd08      	pop	{r3, pc}
   c4fba:	0000      	.short	0x0000
   c4fbc:	00030274 	.word	0x00030274

000c4fc0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   c4fc0:	b508      	push	{r3, lr}
   c4fc2:	4b02      	ldr	r3, [pc, #8]	; (c4fcc <os_mutex_recursive_create+0xc>)
   c4fc4:	681b      	ldr	r3, [r3, #0]
   c4fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c4fc8:	9301      	str	r3, [sp, #4]
   c4fca:	bd08      	pop	{r3, pc}
   c4fcc:	00030248 	.word	0x00030248

000c4fd0 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   c4fd0:	b508      	push	{r3, lr}
   c4fd2:	4b02      	ldr	r3, [pc, #8]	; (c4fdc <HAL_Core_Runtime_Info+0xc>)
   c4fd4:	681b      	ldr	r3, [r3, #0]
   c4fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c4fd8:	9301      	str	r3, [sp, #4]
   c4fda:	bd08      	pop	{r3, pc}
   c4fdc:	00030234 	.word	0x00030234

000c4fe0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   c4fe0:	b508      	push	{r3, lr}
   c4fe2:	4b02      	ldr	r3, [pc, #8]	; (c4fec <HAL_RNG_GetRandomNumber+0xc>)
   c4fe4:	681b      	ldr	r3, [r3, #0]
   c4fe6:	685b      	ldr	r3, [r3, #4]
   c4fe8:	9301      	str	r3, [sp, #4]
   c4fea:	bd08      	pop	{r3, pc}
   c4fec:	00030218 	.word	0x00030218

000c4ff0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   c4ff0:	b508      	push	{r3, lr}
   c4ff2:	4b02      	ldr	r3, [pc, #8]	; (c4ffc <HAL_Delay_Microseconds+0xc>)
   c4ff4:	681b      	ldr	r3, [r3, #0]
   c4ff6:	68db      	ldr	r3, [r3, #12]
   c4ff8:	9301      	str	r3, [sp, #4]
   c4ffa:	bd08      	pop	{r3, pc}
   c4ffc:	00030218 	.word	0x00030218

000c5000 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   c5000:	b508      	push	{r3, lr}
   c5002:	4b02      	ldr	r3, [pc, #8]	; (c500c <HAL_Timer_Get_Micro_Seconds+0xc>)
   c5004:	681b      	ldr	r3, [r3, #0]
   c5006:	691b      	ldr	r3, [r3, #16]
   c5008:	9301      	str	r3, [sp, #4]
   c500a:	bd08      	pop	{r3, pc}
   c500c:	00030218 	.word	0x00030218

000c5010 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   c5010:	b508      	push	{r3, lr}
   c5012:	4b02      	ldr	r3, [pc, #8]	; (c501c <HAL_Timer_Get_Milli_Seconds+0xc>)
   c5014:	681b      	ldr	r3, [r3, #0]
   c5016:	695b      	ldr	r3, [r3, #20]
   c5018:	9301      	str	r3, [sp, #4]
   c501a:	bd08      	pop	{r3, pc}
   c501c:	00030218 	.word	0x00030218

000c5020 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   c5020:	b508      	push	{r3, lr}
   c5022:	4b02      	ldr	r3, [pc, #8]	; (c502c <HAL_EEPROM_Init+0xc>)
   c5024:	681b      	ldr	r3, [r3, #0]
   c5026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c5028:	9301      	str	r3, [sp, #4]
   c502a:	bd08      	pop	{r3, pc}
   c502c:	00030218 	.word	0x00030218

000c5030 <HAL_EEPROM_Length>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
DYNALIB_FN(BASE_IDX + 11, hal, HAL_EEPROM_Length, size_t(void))
   c5030:	b508      	push	{r3, lr}
   c5032:	4b02      	ldr	r3, [pc, #8]	; (c503c <HAL_EEPROM_Length+0xc>)
   c5034:	681b      	ldr	r3, [r3, #0]
   c5036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c5038:	9301      	str	r3, [sp, #4]
   c503a:	bd08      	pop	{r3, pc}
   c503c:	00030218 	.word	0x00030218

000c5040 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   c5040:	b508      	push	{r3, lr}
   c5042:	4b02      	ldr	r3, [pc, #8]	; (c504c <HAL_EEPROM_Get+0xc>)
   c5044:	681b      	ldr	r3, [r3, #0]
   c5046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c5048:	9301      	str	r3, [sp, #4]
   c504a:	bd08      	pop	{r3, pc}
   c504c:	00030218 	.word	0x00030218

000c5050 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   c5050:	b508      	push	{r3, lr}
   c5052:	4b02      	ldr	r3, [pc, #8]	; (c505c <HAL_EEPROM_Put+0xc>)
   c5054:	681b      	ldr	r3, [r3, #0]
   c5056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   c5058:	9301      	str	r3, [sp, #4]
   c505a:	bd08      	pop	{r3, pc}
   c505c:	00030218 	.word	0x00030218

000c5060 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   c5060:	b508      	push	{r3, lr}
   c5062:	4b02      	ldr	r3, [pc, #8]	; (c506c <hal_rtc_time_is_valid+0xc>)
   c5064:	681b      	ldr	r3, [r3, #0]
   c5066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   c5068:	9301      	str	r3, [sp, #4]
   c506a:	bd08      	pop	{r3, pc}
   c506c:	00030218 	.word	0x00030218

000c5070 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   c5070:	b508      	push	{r3, lr}
   c5072:	4b02      	ldr	r3, [pc, #8]	; (c507c <hal_timer_millis+0xc>)
   c5074:	681b      	ldr	r3, [r3, #0]
   c5076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   c5078:	9301      	str	r3, [sp, #4]
   c507a:	bd08      	pop	{r3, pc}
   c507c:	00030218 	.word	0x00030218

000c5080 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   c5080:	b508      	push	{r3, lr}
   c5082:	4b02      	ldr	r3, [pc, #8]	; (c508c <hal_rtc_get_time+0xc>)
   c5084:	681b      	ldr	r3, [r3, #0]
   c5086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   c5088:	9301      	str	r3, [sp, #4]
   c508a:	bd08      	pop	{r3, pc}
   c508c:	00030218 	.word	0x00030218

000c5090 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   c5090:	b508      	push	{r3, lr}
   c5092:	4b02      	ldr	r3, [pc, #8]	; (c509c <hal_rtc_set_time+0xc>)
   c5094:	681b      	ldr	r3, [r3, #0]
   c5096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   c5098:	9301      	str	r3, [sp, #4]
   c509a:	bd08      	pop	{r3, pc}
   c509c:	00030218 	.word	0x00030218

000c50a0 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   c50a0:	b508      	push	{r3, lr}
   c50a2:	4b02      	ldr	r3, [pc, #8]	; (c50ac <hal_pin_map+0xc>)
   c50a4:	681b      	ldr	r3, [r3, #0]
   c50a6:	681b      	ldr	r3, [r3, #0]
   c50a8:	9301      	str	r3, [sp, #4]
   c50aa:	bd08      	pop	{r3, pc}
   c50ac:	0003022c 	.word	0x0003022c

000c50b0 <hal_pin_validate_function>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   c50b0:	b508      	push	{r3, lr}
   c50b2:	4b02      	ldr	r3, [pc, #8]	; (c50bc <hal_pin_validate_function+0xc>)
   c50b4:	681b      	ldr	r3, [r3, #0]
   c50b6:	685b      	ldr	r3, [r3, #4]
   c50b8:	9301      	str	r3, [sp, #4]
   c50ba:	bd08      	pop	{r3, pc}
   c50bc:	0003022c 	.word	0x0003022c

000c50c0 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   c50c0:	b508      	push	{r3, lr}
   c50c2:	4b02      	ldr	r3, [pc, #8]	; (c50cc <hal_gpio_mode+0xc>)
   c50c4:	681b      	ldr	r3, [r3, #0]
   c50c6:	689b      	ldr	r3, [r3, #8]
   c50c8:	9301      	str	r3, [sp, #4]
   c50ca:	bd08      	pop	{r3, pc}
   c50cc:	0003022c 	.word	0x0003022c

000c50d0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   c50d0:	b508      	push	{r3, lr}
   c50d2:	4b02      	ldr	r3, [pc, #8]	; (c50dc <hal_gpio_get_mode+0xc>)
   c50d4:	681b      	ldr	r3, [r3, #0]
   c50d6:	68db      	ldr	r3, [r3, #12]
   c50d8:	9301      	str	r3, [sp, #4]
   c50da:	bd08      	pop	{r3, pc}
   c50dc:	0003022c 	.word	0x0003022c

000c50e0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   c50e0:	b508      	push	{r3, lr}
   c50e2:	4b02      	ldr	r3, [pc, #8]	; (c50ec <hal_gpio_write+0xc>)
   c50e4:	681b      	ldr	r3, [r3, #0]
   c50e6:	691b      	ldr	r3, [r3, #16]
   c50e8:	9301      	str	r3, [sp, #4]
   c50ea:	bd08      	pop	{r3, pc}
   c50ec:	0003022c 	.word	0x0003022c

000c50f0 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   c50f0:	b508      	push	{r3, lr}
   c50f2:	4b02      	ldr	r3, [pc, #8]	; (c50fc <hal_gpio_read+0xc>)
   c50f4:	681b      	ldr	r3, [r3, #0]
   c50f6:	695b      	ldr	r3, [r3, #20]
   c50f8:	9301      	str	r3, [sp, #4]
   c50fa:	bd08      	pop	{r3, pc}
   c50fc:	0003022c 	.word	0x0003022c

000c5100 <hal_interrupt_attach>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
   c5100:	b508      	push	{r3, lr}
   c5102:	4b02      	ldr	r3, [pc, #8]	; (c510c <hal_interrupt_attach+0xc>)
   c5104:	681b      	ldr	r3, [r3, #0]
   c5106:	699b      	ldr	r3, [r3, #24]
   c5108:	9301      	str	r3, [sp, #4]
   c510a:	bd08      	pop	{r3, pc}
   c510c:	0003022c 	.word	0x0003022c

000c5110 <hal_interrupt_detach>:
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
   c5110:	b508      	push	{r3, lr}
   c5112:	4b02      	ldr	r3, [pc, #8]	; (c511c <hal_interrupt_detach+0xc>)
   c5114:	681b      	ldr	r3, [r3, #0]
   c5116:	69db      	ldr	r3, [r3, #28]
   c5118:	9301      	str	r3, [sp, #4]
   c511a:	bd08      	pop	{r3, pc}
   c511c:	0003022c 	.word	0x0003022c

000c5120 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   c5120:	b508      	push	{r3, lr}
   c5122:	4b02      	ldr	r3, [pc, #8]	; (c512c <hal_adc_read+0xc>)
   c5124:	681b      	ldr	r3, [r3, #0]
   c5126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c5128:	9301      	str	r3, [sp, #4]
   c512a:	bd08      	pop	{r3, pc}
   c512c:	0003022c 	.word	0x0003022c

000c5130 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   c5130:	b508      	push	{r3, lr}
   c5132:	4b02      	ldr	r3, [pc, #8]	; (c513c <hal_i2c_set_speed+0xc>)
   c5134:	681b      	ldr	r3, [r3, #0]
   c5136:	681b      	ldr	r3, [r3, #0]
   c5138:	9301      	str	r3, [sp, #4]
   c513a:	bd08      	pop	{r3, pc}
   c513c:	00030228 	.word	0x00030228

000c5140 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   c5140:	b508      	push	{r3, lr}
   c5142:	4b02      	ldr	r3, [pc, #8]	; (c514c <hal_i2c_begin+0xc>)
   c5144:	681b      	ldr	r3, [r3, #0]
   c5146:	68db      	ldr	r3, [r3, #12]
   c5148:	9301      	str	r3, [sp, #4]
   c514a:	bd08      	pop	{r3, pc}
   c514c:	00030228 	.word	0x00030228

000c5150 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   c5150:	b508      	push	{r3, lr}
   c5152:	4b02      	ldr	r3, [pc, #8]	; (c515c <hal_i2c_begin_transmission+0xc>)
   c5154:	681b      	ldr	r3, [r3, #0]
   c5156:	699b      	ldr	r3, [r3, #24]
   c5158:	9301      	str	r3, [sp, #4]
   c515a:	bd08      	pop	{r3, pc}
   c515c:	00030228 	.word	0x00030228

000c5160 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   c5160:	b508      	push	{r3, lr}
   c5162:	4b02      	ldr	r3, [pc, #8]	; (c516c <hal_i2c_end_transmission+0xc>)
   c5164:	681b      	ldr	r3, [r3, #0]
   c5166:	69db      	ldr	r3, [r3, #28]
   c5168:	9301      	str	r3, [sp, #4]
   c516a:	bd08      	pop	{r3, pc}
   c516c:	00030228 	.word	0x00030228

000c5170 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   c5170:	b508      	push	{r3, lr}
   c5172:	4b02      	ldr	r3, [pc, #8]	; (c517c <hal_i2c_write+0xc>)
   c5174:	681b      	ldr	r3, [r3, #0]
   c5176:	6a1b      	ldr	r3, [r3, #32]
   c5178:	9301      	str	r3, [sp, #4]
   c517a:	bd08      	pop	{r3, pc}
   c517c:	00030228 	.word	0x00030228

000c5180 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   c5180:	b508      	push	{r3, lr}
   c5182:	4b02      	ldr	r3, [pc, #8]	; (c518c <hal_i2c_available+0xc>)
   c5184:	681b      	ldr	r3, [r3, #0]
   c5186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c5188:	9301      	str	r3, [sp, #4]
   c518a:	bd08      	pop	{r3, pc}
   c518c:	00030228 	.word	0x00030228

000c5190 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   c5190:	b508      	push	{r3, lr}
   c5192:	4b02      	ldr	r3, [pc, #8]	; (c519c <hal_i2c_read+0xc>)
   c5194:	681b      	ldr	r3, [r3, #0]
   c5196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c5198:	9301      	str	r3, [sp, #4]
   c519a:	bd08      	pop	{r3, pc}
   c519c:	00030228 	.word	0x00030228

000c51a0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   c51a0:	b508      	push	{r3, lr}
   c51a2:	4b02      	ldr	r3, [pc, #8]	; (c51ac <hal_i2c_peek+0xc>)
   c51a4:	681b      	ldr	r3, [r3, #0]
   c51a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c51a8:	9301      	str	r3, [sp, #4]
   c51aa:	bd08      	pop	{r3, pc}
   c51ac:	00030228 	.word	0x00030228

000c51b0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   c51b0:	b508      	push	{r3, lr}
   c51b2:	4b02      	ldr	r3, [pc, #8]	; (c51bc <hal_i2c_flush+0xc>)
   c51b4:	681b      	ldr	r3, [r3, #0]
   c51b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c51b8:	9301      	str	r3, [sp, #4]
   c51ba:	bd08      	pop	{r3, pc}
   c51bc:	00030228 	.word	0x00030228

000c51c0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   c51c0:	b508      	push	{r3, lr}
   c51c2:	4b02      	ldr	r3, [pc, #8]	; (c51cc <hal_i2c_is_enabled+0xc>)
   c51c4:	681b      	ldr	r3, [r3, #0]
   c51c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c51c8:	9301      	str	r3, [sp, #4]
   c51ca:	bd08      	pop	{r3, pc}
   c51cc:	00030228 	.word	0x00030228

000c51d0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   c51d0:	b508      	push	{r3, lr}
   c51d2:	4b02      	ldr	r3, [pc, #8]	; (c51dc <hal_i2c_init+0xc>)
   c51d4:	681b      	ldr	r3, [r3, #0]
   c51d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c51d8:	9301      	str	r3, [sp, #4]
   c51da:	bd08      	pop	{r3, pc}
   c51dc:	00030228 	.word	0x00030228

000c51e0 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   c51e0:	b508      	push	{r3, lr}
   c51e2:	4b02      	ldr	r3, [pc, #8]	; (c51ec <hal_i2c_lock+0xc>)
   c51e4:	681b      	ldr	r3, [r3, #0]
   c51e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   c51e8:	9301      	str	r3, [sp, #4]
   c51ea:	bd08      	pop	{r3, pc}
   c51ec:	00030228 	.word	0x00030228

000c51f0 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   c51f0:	b508      	push	{r3, lr}
   c51f2:	4b02      	ldr	r3, [pc, #8]	; (c51fc <hal_i2c_unlock+0xc>)
   c51f4:	681b      	ldr	r3, [r3, #0]
   c51f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   c51f8:	9301      	str	r3, [sp, #4]
   c51fa:	bd08      	pop	{r3, pc}
   c51fc:	00030228 	.word	0x00030228

000c5200 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   c5200:	b508      	push	{r3, lr}
   c5202:	4b02      	ldr	r3, [pc, #8]	; (c520c <hal_i2c_request_ex+0xc>)
   c5204:	681b      	ldr	r3, [r3, #0]
   c5206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   c5208:	9301      	str	r3, [sp, #4]
   c520a:	bd08      	pop	{r3, pc}
   c520c:	00030228 	.word	0x00030228

000c5210 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   c5210:	b508      	push	{r3, lr}
   c5212:	4b02      	ldr	r3, [pc, #8]	; (c521c <inet_inet_ntop+0xc>)
   c5214:	681b      	ldr	r3, [r3, #0]
   c5216:	695b      	ldr	r3, [r3, #20]
   c5218:	9301      	str	r3, [sp, #4]
   c521a:	bd08      	pop	{r3, pc}
   c521c:	00030264 	.word	0x00030264

000c5220 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   c5220:	b508      	push	{r3, lr}
   c5222:	4b02      	ldr	r3, [pc, #8]	; (c522c <netdb_freeaddrinfo+0xc>)
   c5224:	681b      	ldr	r3, [r3, #0]
   c5226:	689b      	ldr	r3, [r3, #8]
   c5228:	9301      	str	r3, [sp, #4]
   c522a:	bd08      	pop	{r3, pc}
   c522c:	00030268 	.word	0x00030268

000c5230 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   c5230:	b508      	push	{r3, lr}
   c5232:	4b02      	ldr	r3, [pc, #8]	; (c523c <netdb_getaddrinfo+0xc>)
   c5234:	681b      	ldr	r3, [r3, #0]
   c5236:	68db      	ldr	r3, [r3, #12]
   c5238:	9301      	str	r3, [sp, #4]
   c523a:	bd08      	pop	{r3, pc}
   c523c:	00030268 	.word	0x00030268

000c5240 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   c5240:	b508      	push	{r3, lr}
   c5242:	4b02      	ldr	r3, [pc, #8]	; (c524c <hal_spi_begin+0xc>)
   c5244:	681b      	ldr	r3, [r3, #0]
   c5246:	681b      	ldr	r3, [r3, #0]
   c5248:	9301      	str	r3, [sp, #4]
   c524a:	bd08      	pop	{r3, pc}
   c524c:	00030230 	.word	0x00030230

000c5250 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   c5250:	b508      	push	{r3, lr}
   c5252:	4b02      	ldr	r3, [pc, #8]	; (c525c <hal_spi_end+0xc>)
   c5254:	681b      	ldr	r3, [r3, #0]
   c5256:	685b      	ldr	r3, [r3, #4]
   c5258:	9301      	str	r3, [sp, #4]
   c525a:	bd08      	pop	{r3, pc}
   c525c:	00030230 	.word	0x00030230

000c5260 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   c5260:	b508      	push	{r3, lr}
   c5262:	4b02      	ldr	r3, [pc, #8]	; (c526c <hal_spi_transfer+0xc>)
   c5264:	681b      	ldr	r3, [r3, #0]
   c5266:	695b      	ldr	r3, [r3, #20]
   c5268:	9301      	str	r3, [sp, #4]
   c526a:	bd08      	pop	{r3, pc}
   c526c:	00030230 	.word	0x00030230

000c5270 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   c5270:	b508      	push	{r3, lr}
   c5272:	4b02      	ldr	r3, [pc, #8]	; (c527c <hal_spi_init+0xc>)
   c5274:	681b      	ldr	r3, [r3, #0]
   c5276:	69db      	ldr	r3, [r3, #28]
   c5278:	9301      	str	r3, [sp, #4]
   c527a:	bd08      	pop	{r3, pc}
   c527c:	00030230 	.word	0x00030230

000c5280 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   c5280:	b508      	push	{r3, lr}
   c5282:	4b02      	ldr	r3, [pc, #8]	; (c528c <hal_spi_is_enabled+0xc>)
   c5284:	681b      	ldr	r3, [r3, #0]
   c5286:	6a1b      	ldr	r3, [r3, #32]
   c5288:	9301      	str	r3, [sp, #4]
   c528a:	bd08      	pop	{r3, pc}
   c528c:	00030230 	.word	0x00030230

000c5290 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   c5290:	b508      	push	{r3, lr}
   c5292:	4b02      	ldr	r3, [pc, #8]	; (c529c <hal_spi_info+0xc>)
   c5294:	681b      	ldr	r3, [r3, #0]
   c5296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c5298:	9301      	str	r3, [sp, #4]
   c529a:	bd08      	pop	{r3, pc}
   c529c:	00030230 	.word	0x00030230

000c52a0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   c52a0:	b508      	push	{r3, lr}
   c52a2:	4b02      	ldr	r3, [pc, #8]	; (c52ac <hal_spi_transfer_dma+0xc>)
   c52a4:	681b      	ldr	r3, [r3, #0]
   c52a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c52a8:	9301      	str	r3, [sp, #4]
   c52aa:	bd08      	pop	{r3, pc}
   c52ac:	00030230 	.word	0x00030230

000c52b0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   c52b0:	b508      	push	{r3, lr}
   c52b2:	4b02      	ldr	r3, [pc, #8]	; (c52bc <hal_spi_transfer_dma_status+0xc>)
   c52b4:	681b      	ldr	r3, [r3, #0]
   c52b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   c52b8:	9301      	str	r3, [sp, #4]
   c52ba:	bd08      	pop	{r3, pc}
   c52bc:	00030230 	.word	0x00030230

000c52c0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   c52c0:	b508      	push	{r3, lr}
   c52c2:	4b02      	ldr	r3, [pc, #8]	; (c52cc <hal_spi_set_settings+0xc>)
   c52c4:	681b      	ldr	r3, [r3, #0]
   c52c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c52c8:	9301      	str	r3, [sp, #4]
   c52ca:	bd08      	pop	{r3, pc}
   c52cc:	00030230 	.word	0x00030230

000c52d0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   c52d0:	b508      	push	{r3, lr}
   c52d2:	4b02      	ldr	r3, [pc, #8]	; (c52dc <hal_spi_acquire+0xc>)
   c52d4:	681b      	ldr	r3, [r3, #0]
   c52d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c52d8:	9301      	str	r3, [sp, #4]
   c52da:	bd08      	pop	{r3, pc}
   c52dc:	00030230 	.word	0x00030230

000c52e0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   c52e0:	b508      	push	{r3, lr}
   c52e2:	4b02      	ldr	r3, [pc, #8]	; (c52ec <hal_spi_release+0xc>)
   c52e4:	681b      	ldr	r3, [r3, #0]
   c52e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c52e8:	9301      	str	r3, [sp, #4]
   c52ea:	bd08      	pop	{r3, pc}
   c52ec:	00030230 	.word	0x00030230

000c52f0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   c52f0:	b508      	push	{r3, lr}
   c52f2:	4b02      	ldr	r3, [pc, #8]	; (c52fc <hal_usart_write+0xc>)
   c52f4:	681b      	ldr	r3, [r3, #0]
   c52f6:	68db      	ldr	r3, [r3, #12]
   c52f8:	9301      	str	r3, [sp, #4]
   c52fa:	bd08      	pop	{r3, pc}
   c52fc:	0003023c 	.word	0x0003023c

000c5300 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   c5300:	b508      	push	{r3, lr}
   c5302:	4b02      	ldr	r3, [pc, #8]	; (c530c <hal_usart_available+0xc>)
   c5304:	681b      	ldr	r3, [r3, #0]
   c5306:	691b      	ldr	r3, [r3, #16]
   c5308:	9301      	str	r3, [sp, #4]
   c530a:	bd08      	pop	{r3, pc}
   c530c:	0003023c 	.word	0x0003023c

000c5310 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   c5310:	b508      	push	{r3, lr}
   c5312:	4b02      	ldr	r3, [pc, #8]	; (c531c <hal_usart_read+0xc>)
   c5314:	681b      	ldr	r3, [r3, #0]
   c5316:	695b      	ldr	r3, [r3, #20]
   c5318:	9301      	str	r3, [sp, #4]
   c531a:	bd08      	pop	{r3, pc}
   c531c:	0003023c 	.word	0x0003023c

000c5320 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   c5320:	b508      	push	{r3, lr}
   c5322:	4b02      	ldr	r3, [pc, #8]	; (c532c <hal_usart_peek+0xc>)
   c5324:	681b      	ldr	r3, [r3, #0]
   c5326:	699b      	ldr	r3, [r3, #24]
   c5328:	9301      	str	r3, [sp, #4]
   c532a:	bd08      	pop	{r3, pc}
   c532c:	0003023c 	.word	0x0003023c

000c5330 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   c5330:	b508      	push	{r3, lr}
   c5332:	4b02      	ldr	r3, [pc, #8]	; (c533c <hal_usart_flush+0xc>)
   c5334:	681b      	ldr	r3, [r3, #0]
   c5336:	69db      	ldr	r3, [r3, #28]
   c5338:	9301      	str	r3, [sp, #4]
   c533a:	bd08      	pop	{r3, pc}
   c533c:	0003023c 	.word	0x0003023c

000c5340 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   c5340:	b508      	push	{r3, lr}
   c5342:	4b02      	ldr	r3, [pc, #8]	; (c534c <hal_usart_is_enabled+0xc>)
   c5344:	681b      	ldr	r3, [r3, #0]
   c5346:	6a1b      	ldr	r3, [r3, #32]
   c5348:	9301      	str	r3, [sp, #4]
   c534a:	bd08      	pop	{r3, pc}
   c534c:	0003023c 	.word	0x0003023c

000c5350 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   c5350:	b508      	push	{r3, lr}
   c5352:	4b02      	ldr	r3, [pc, #8]	; (c535c <hal_usart_available_data_for_write+0xc>)
   c5354:	681b      	ldr	r3, [r3, #0]
   c5356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c5358:	9301      	str	r3, [sp, #4]
   c535a:	bd08      	pop	{r3, pc}
   c535c:	0003023c 	.word	0x0003023c

000c5360 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   c5360:	b508      	push	{r3, lr}
   c5362:	4b02      	ldr	r3, [pc, #8]	; (c536c <hal_usart_init_ex+0xc>)
   c5364:	681b      	ldr	r3, [r3, #0]
   c5366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c5368:	9301      	str	r3, [sp, #4]
   c536a:	bd08      	pop	{r3, pc}
   c536c:	0003023c 	.word	0x0003023c

000c5370 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   c5370:	b508      	push	{r3, lr}
   c5372:	4b02      	ldr	r3, [pc, #8]	; (c537c <HAL_USB_USART_Init+0xc>)
   c5374:	681b      	ldr	r3, [r3, #0]
   c5376:	681b      	ldr	r3, [r3, #0]
   c5378:	9301      	str	r3, [sp, #4]
   c537a:	bd08      	pop	{r3, pc}
   c537c:	0003024c 	.word	0x0003024c

000c5380 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   c5380:	b508      	push	{r3, lr}
   c5382:	4b02      	ldr	r3, [pc, #8]	; (c538c <HAL_USB_USART_Begin+0xc>)
   c5384:	681b      	ldr	r3, [r3, #0]
   c5386:	685b      	ldr	r3, [r3, #4]
   c5388:	9301      	str	r3, [sp, #4]
   c538a:	bd08      	pop	{r3, pc}
   c538c:	0003024c 	.word	0x0003024c

000c5390 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   c5390:	b508      	push	{r3, lr}
   c5392:	4b02      	ldr	r3, [pc, #8]	; (c539c <HAL_USB_USART_Available_Data+0xc>)
   c5394:	681b      	ldr	r3, [r3, #0]
   c5396:	691b      	ldr	r3, [r3, #16]
   c5398:	9301      	str	r3, [sp, #4]
   c539a:	bd08      	pop	{r3, pc}
   c539c:	0003024c 	.word	0x0003024c

000c53a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   c53a0:	b508      	push	{r3, lr}
   c53a2:	4b02      	ldr	r3, [pc, #8]	; (c53ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
   c53a4:	681b      	ldr	r3, [r3, #0]
   c53a6:	695b      	ldr	r3, [r3, #20]
   c53a8:	9301      	str	r3, [sp, #4]
   c53aa:	bd08      	pop	{r3, pc}
   c53ac:	0003024c 	.word	0x0003024c

000c53b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   c53b0:	b508      	push	{r3, lr}
   c53b2:	4b02      	ldr	r3, [pc, #8]	; (c53bc <HAL_USB_USART_Receive_Data+0xc>)
   c53b4:	681b      	ldr	r3, [r3, #0]
   c53b6:	699b      	ldr	r3, [r3, #24]
   c53b8:	9301      	str	r3, [sp, #4]
   c53ba:	bd08      	pop	{r3, pc}
   c53bc:	0003024c 	.word	0x0003024c

000c53c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   c53c0:	b508      	push	{r3, lr}
   c53c2:	4b02      	ldr	r3, [pc, #8]	; (c53cc <HAL_USB_USART_Send_Data+0xc>)
   c53c4:	681b      	ldr	r3, [r3, #0]
   c53c6:	69db      	ldr	r3, [r3, #28]
   c53c8:	9301      	str	r3, [sp, #4]
   c53ca:	bd08      	pop	{r3, pc}
   c53cc:	0003024c 	.word	0x0003024c

000c53d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   c53d0:	b508      	push	{r3, lr}
   c53d2:	4b02      	ldr	r3, [pc, #8]	; (c53dc <HAL_USB_USART_Flush_Data+0xc>)
   c53d4:	681b      	ldr	r3, [r3, #0]
   c53d6:	6a1b      	ldr	r3, [r3, #32]
   c53d8:	9301      	str	r3, [sp, #4]
   c53da:	bd08      	pop	{r3, pc}
   c53dc:	0003024c 	.word	0x0003024c

000c53e0 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   c53e0:	b508      	push	{r3, lr}
   c53e2:	4b02      	ldr	r3, [pc, #8]	; (c53ec <HAL_USB_USART_Is_Connected+0xc>)
   c53e4:	681b      	ldr	r3, [r3, #0]
   c53e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   c53e8:	9301      	str	r3, [sp, #4]
   c53ea:	bd08      	pop	{r3, pc}
   c53ec:	0003024c 	.word	0x0003024c

000c53f0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   c53f0:	b508      	push	{r3, lr}
   c53f2:	4b02      	ldr	r3, [pc, #8]	; (c53fc <panic_+0xc>)
   c53f4:	681b      	ldr	r3, [r3, #0]
   c53f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c53f8:	9301      	str	r3, [sp, #4]
   c53fa:	bd08      	pop	{r3, pc}
   c53fc:	00030260 	.word	0x00030260

000c5400 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   c5400:	b508      	push	{r3, lr}
   c5402:	4b03      	ldr	r3, [pc, #12]	; (c5410 <diag_get_source+0x10>)
   c5404:	681b      	ldr	r3, [r3, #0]
   c5406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   c540a:	9301      	str	r3, [sp, #4]
   c540c:	bd08      	pop	{r3, pc}
   c540e:	0000      	.short	0x0000
   c5410:	00030260 	.word	0x00030260

000c5414 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   c5414:	b508      	push	{r3, lr}
   c5416:	4b02      	ldr	r3, [pc, #8]	; (c5420 <system_mode+0xc>)
   c5418:	681b      	ldr	r3, [r3, #0]
   c541a:	681b      	ldr	r3, [r3, #0]
   c541c:	9301      	str	r3, [sp, #4]
   c541e:	bd08      	pop	{r3, pc}
   c5420:	00030220 	.word	0x00030220

000c5424 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   c5424:	b508      	push	{r3, lr}
   c5426:	4b02      	ldr	r3, [pc, #8]	; (c5430 <set_system_mode+0xc>)
   c5428:	681b      	ldr	r3, [r3, #0]
   c542a:	685b      	ldr	r3, [r3, #4]
   c542c:	9301      	str	r3, [sp, #4]
   c542e:	bd08      	pop	{r3, pc}
   c5430:	00030220 	.word	0x00030220

000c5434 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   c5434:	b508      	push	{r3, lr}
   c5436:	4b02      	ldr	r3, [pc, #8]	; (c5440 <system_delay_ms+0xc>)
   c5438:	681b      	ldr	r3, [r3, #0]
   c543a:	695b      	ldr	r3, [r3, #20]
   c543c:	9301      	str	r3, [sp, #4]
   c543e:	bd08      	pop	{r3, pc}
   c5440:	00030220 	.word	0x00030220

000c5444 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   c5444:	b508      	push	{r3, lr}
   c5446:	4b02      	ldr	r3, [pc, #8]	; (c5450 <system_thread_set_state+0xc>)
   c5448:	681b      	ldr	r3, [r3, #0]
   c544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c544c:	9301      	str	r3, [sp, #4]
   c544e:	bd08      	pop	{r3, pc}
   c5450:	00030220 	.word	0x00030220

000c5454 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   c5454:	b508      	push	{r3, lr}
   c5456:	4b02      	ldr	r3, [pc, #8]	; (c5460 <system_version_info+0xc>)
   c5458:	681b      	ldr	r3, [r3, #0]
   c545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c545c:	9301      	str	r3, [sp, #4]
   c545e:	bd08      	pop	{r3, pc}
   c5460:	00030220 	.word	0x00030220

000c5464 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN_WRAP(16, system, Spark_Prepare_For_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   c5464:	b508      	push	{r3, lr}
   c5466:	4b02      	ldr	r3, [pc, #8]	; (c5470 <application_thread_current+0xc>)
   c5468:	681b      	ldr	r3, [r3, #0]
   c546a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   c546c:	9301      	str	r3, [sp, #4]
   c546e:	bd08      	pop	{r3, pc}
   c5470:	00030220 	.word	0x00030220

000c5474 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   c5474:	b508      	push	{r3, lr}
   c5476:	4b02      	ldr	r3, [pc, #8]	; (c5480 <application_thread_invoke+0xc>)
   c5478:	681b      	ldr	r3, [r3, #0]
   c547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c547c:	9301      	str	r3, [sp, #4]
   c547e:	bd08      	pop	{r3, pc}
   c5480:	00030220 	.word	0x00030220

000c5484 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   c5484:	b508      	push	{r3, lr}
   c5486:	4b02      	ldr	r3, [pc, #8]	; (c5490 <system_thread_get_state+0xc>)
   c5488:	681b      	ldr	r3, [r3, #0]
   c548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   c548c:	9301      	str	r3, [sp, #4]
   c548e:	bd08      	pop	{r3, pc}
   c5490:	00030220 	.word	0x00030220

000c5494 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   c5494:	b508      	push	{r3, lr}
   c5496:	4b02      	ldr	r3, [pc, #8]	; (c54a0 <system_notify_time_changed+0xc>)
   c5498:	681b      	ldr	r3, [r3, #0]
   c549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   c549c:	9301      	str	r3, [sp, #4]
   c549e:	bd08      	pop	{r3, pc}
   c54a0:	00030220 	.word	0x00030220

000c54a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   c54a4:	b508      	push	{r3, lr}
   c54a6:	4b03      	ldr	r3, [pc, #12]	; (c54b4 <system_ctrl_set_app_request_handler+0x10>)
   c54a8:	681b      	ldr	r3, [r3, #0]
   c54aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   c54ae:	9301      	str	r3, [sp, #4]
   c54b0:	bd08      	pop	{r3, pc}
   c54b2:	0000      	.short	0x0000
   c54b4:	00030220 	.word	0x00030220

000c54b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   c54b8:	b508      	push	{r3, lr}
   c54ba:	4b03      	ldr	r3, [pc, #12]	; (c54c8 <system_ctrl_set_result+0x10>)
   c54bc:	681b      	ldr	r3, [r3, #0]
   c54be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   c54c2:	9301      	str	r3, [sp, #4]
   c54c4:	bd08      	pop	{r3, pc}
   c54c6:	0000      	.short	0x0000
   c54c8:	00030220 	.word	0x00030220

000c54cc <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   c54cc:	b508      	push	{r3, lr}
   c54ce:	4b03      	ldr	r3, [pc, #12]	; (c54dc <system_reset+0x10>)
   c54d0:	681b      	ldr	r3, [r3, #0]
   c54d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   c54d6:	9301      	str	r3, [sp, #4]
   c54d8:	bd08      	pop	{r3, pc}
   c54da:	0000      	.short	0x0000
   c54dc:	00030220 	.word	0x00030220

000c54e0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   c54e0:	b508      	push	{r3, lr}
   c54e2:	4b02      	ldr	r3, [pc, #8]	; (c54ec <spark_function+0xc>)
   c54e4:	681b      	ldr	r3, [r3, #0]
   c54e6:	685b      	ldr	r3, [r3, #4]
   c54e8:	9301      	str	r3, [sp, #4]
   c54ea:	bd08      	pop	{r3, pc}
   c54ec:	00030244 	.word	0x00030244

000c54f0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   c54f0:	b508      	push	{r3, lr}
   c54f2:	4b02      	ldr	r3, [pc, #8]	; (c54fc <spark_process+0xc>)
   c54f4:	681b      	ldr	r3, [r3, #0]
   c54f6:	689b      	ldr	r3, [r3, #8]
   c54f8:	9301      	str	r3, [sp, #4]
   c54fa:	bd08      	pop	{r3, pc}
   c54fc:	00030244 	.word	0x00030244

000c5500 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   c5500:	b508      	push	{r3, lr}
   c5502:	4b02      	ldr	r3, [pc, #8]	; (c550c <spark_cloud_flag_connect+0xc>)
   c5504:	681b      	ldr	r3, [r3, #0]
   c5506:	68db      	ldr	r3, [r3, #12]
   c5508:	9301      	str	r3, [sp, #4]
   c550a:	bd08      	pop	{r3, pc}
   c550c:	00030244 	.word	0x00030244

000c5510 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   c5510:	b508      	push	{r3, lr}
   c5512:	4b02      	ldr	r3, [pc, #8]	; (c551c <spark_cloud_flag_connected+0xc>)
   c5514:	681b      	ldr	r3, [r3, #0]
   c5516:	695b      	ldr	r3, [r3, #20]
   c5518:	9301      	str	r3, [sp, #4]
   c551a:	bd08      	pop	{r3, pc}
   c551c:	00030244 	.word	0x00030244

000c5520 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   c5520:	b508      	push	{r3, lr}
   c5522:	4b02      	ldr	r3, [pc, #8]	; (c552c <spark_deviceID+0xc>)
   c5524:	681b      	ldr	r3, [r3, #0]
   c5526:	69db      	ldr	r3, [r3, #28]
   c5528:	9301      	str	r3, [sp, #4]
   c552a:	bd08      	pop	{r3, pc}
   c552c:	00030244 	.word	0x00030244

000c5530 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   c5530:	b508      	push	{r3, lr}
   c5532:	4b02      	ldr	r3, [pc, #8]	; (c553c <spark_send_event+0xc>)
   c5534:	681b      	ldr	r3, [r3, #0]
   c5536:	6a1b      	ldr	r3, [r3, #32]
   c5538:	9301      	str	r3, [sp, #4]
   c553a:	bd08      	pop	{r3, pc}
   c553c:	00030244 	.word	0x00030244

000c5540 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   c5540:	b508      	push	{r3, lr}
   c5542:	4b02      	ldr	r3, [pc, #8]	; (c554c <spark_sync_time+0xc>)
   c5544:	681b      	ldr	r3, [r3, #0]
   c5546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c5548:	9301      	str	r3, [sp, #4]
   c554a:	bd08      	pop	{r3, pc}
   c554c:	00030244 	.word	0x00030244

000c5550 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   c5550:	b508      	push	{r3, lr}
   c5552:	4b02      	ldr	r3, [pc, #8]	; (c555c <spark_sync_time_pending+0xc>)
   c5554:	681b      	ldr	r3, [r3, #0]
   c5556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c5558:	9301      	str	r3, [sp, #4]
   c555a:	bd08      	pop	{r3, pc}
   c555c:	00030244 	.word	0x00030244

000c5560 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   c5560:	b508      	push	{r3, lr}
   c5562:	4b02      	ldr	r3, [pc, #8]	; (c556c <spark_set_connection_property+0xc>)
   c5564:	681b      	ldr	r3, [r3, #0]
   c5566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   c5568:	9301      	str	r3, [sp, #4]
   c556a:	bd08      	pop	{r3, pc}
   c556c:	00030244 	.word	0x00030244

000c5570 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   c5570:	b508      	push	{r3, lr}
   c5572:	4b02      	ldr	r3, [pc, #8]	; (c557c <spark_set_random_seed_from_cloud_handler+0xc>)
   c5574:	681b      	ldr	r3, [r3, #0]
   c5576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c5578:	9301      	str	r3, [sp, #4]
   c557a:	bd08      	pop	{r3, pc}
   c557c:	00030244 	.word	0x00030244

000c5580 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   c5580:	b508      	push	{r3, lr}
   c5582:	4b02      	ldr	r3, [pc, #8]	; (c558c <spark_cloud_disconnect+0xc>)
   c5584:	681b      	ldr	r3, [r3, #0]
   c5586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c5588:	9301      	str	r3, [sp, #4]
   c558a:	bd08      	pop	{r3, pc}
   c558c:	00030244 	.word	0x00030244

000c5590 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   c5590:	b508      	push	{r3, lr}
   c5592:	4b02      	ldr	r3, [pc, #8]	; (c559c <network_connect+0xc>)
   c5594:	681b      	ldr	r3, [r3, #0]
   c5596:	685b      	ldr	r3, [r3, #4]
   c5598:	9301      	str	r3, [sp, #4]
   c559a:	bd08      	pop	{r3, pc}
   c559c:	00030240 	.word	0x00030240

000c55a0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   c55a0:	b508      	push	{r3, lr}
   c55a2:	4b02      	ldr	r3, [pc, #8]	; (c55ac <network_connecting+0xc>)
   c55a4:	681b      	ldr	r3, [r3, #0]
   c55a6:	689b      	ldr	r3, [r3, #8]
   c55a8:	9301      	str	r3, [sp, #4]
   c55aa:	bd08      	pop	{r3, pc}
   c55ac:	00030240 	.word	0x00030240

000c55b0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   c55b0:	b508      	push	{r3, lr}
   c55b2:	4b02      	ldr	r3, [pc, #8]	; (c55bc <network_disconnect+0xc>)
   c55b4:	681b      	ldr	r3, [r3, #0]
   c55b6:	68db      	ldr	r3, [r3, #12]
   c55b8:	9301      	str	r3, [sp, #4]
   c55ba:	bd08      	pop	{r3, pc}
   c55bc:	00030240 	.word	0x00030240

000c55c0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   c55c0:	b508      	push	{r3, lr}
   c55c2:	4b02      	ldr	r3, [pc, #8]	; (c55cc <network_ready+0xc>)
   c55c4:	681b      	ldr	r3, [r3, #0]
   c55c6:	691b      	ldr	r3, [r3, #16]
   c55c8:	9301      	str	r3, [sp, #4]
   c55ca:	bd08      	pop	{r3, pc}
   c55cc:	00030240 	.word	0x00030240

000c55d0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   c55d0:	b508      	push	{r3, lr}
   c55d2:	4b02      	ldr	r3, [pc, #8]	; (c55dc <network_on+0xc>)
   c55d4:	681b      	ldr	r3, [r3, #0]
   c55d6:	695b      	ldr	r3, [r3, #20]
   c55d8:	9301      	str	r3, [sp, #4]
   c55da:	bd08      	pop	{r3, pc}
   c55dc:	00030240 	.word	0x00030240

000c55e0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   c55e0:	b508      	push	{r3, lr}
   c55e2:	4b02      	ldr	r3, [pc, #8]	; (c55ec <network_off+0xc>)
   c55e4:	681b      	ldr	r3, [r3, #0]
   c55e6:	699b      	ldr	r3, [r3, #24]
   c55e8:	9301      	str	r3, [sp, #4]
   c55ea:	bd08      	pop	{r3, pc}
   c55ec:	00030240 	.word	0x00030240

000c55f0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   c55f0:	b508      	push	{r3, lr}
   c55f2:	4b02      	ldr	r3, [pc, #8]	; (c55fc <network_listen+0xc>)
   c55f4:	681b      	ldr	r3, [r3, #0]
   c55f6:	69db      	ldr	r3, [r3, #28]
   c55f8:	9301      	str	r3, [sp, #4]
   c55fa:	bd08      	pop	{r3, pc}
   c55fc:	00030240 	.word	0x00030240

000c5600 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   c5600:	b508      	push	{r3, lr}
   c5602:	4b02      	ldr	r3, [pc, #8]	; (c560c <network_listening+0xc>)
   c5604:	681b      	ldr	r3, [r3, #0]
   c5606:	6a1b      	ldr	r3, [r3, #32]
   c5608:	9301      	str	r3, [sp, #4]
   c560a:	bd08      	pop	{r3, pc}
   c560c:	00030240 	.word	0x00030240

000c5610 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   c5610:	b508      	push	{r3, lr}
   c5612:	4b02      	ldr	r3, [pc, #8]	; (c561c <network_set_listen_timeout+0xc>)
   c5614:	681b      	ldr	r3, [r3, #0]
   c5616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c5618:	9301      	str	r3, [sp, #4]
   c561a:	bd08      	pop	{r3, pc}
   c561c:	00030240 	.word	0x00030240

000c5620 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   c5620:	b508      	push	{r3, lr}
   c5622:	4b02      	ldr	r3, [pc, #8]	; (c562c <network_get_listen_timeout+0xc>)
   c5624:	681b      	ldr	r3, [r3, #0]
   c5626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   c5628:	9301      	str	r3, [sp, #4]
   c562a:	bd08      	pop	{r3, pc}
   c562c:	00030240 	.word	0x00030240

000c5630 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   c5630:	b508      	push	{r3, lr}
   c5632:	4b02      	ldr	r3, [pc, #8]	; (c563c <network_is_on+0xc>)
   c5634:	681b      	ldr	r3, [r3, #0]
   c5636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c5638:	9301      	str	r3, [sp, #4]
   c563a:	bd08      	pop	{r3, pc}
   c563c:	00030240 	.word	0x00030240

000c5640 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   c5640:	b508      	push	{r3, lr}
   c5642:	4b02      	ldr	r3, [pc, #8]	; (c564c <network_is_off+0xc>)
   c5644:	681b      	ldr	r3, [r3, #0]
   c5646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c5648:	9301      	str	r3, [sp, #4]
   c564a:	bd08      	pop	{r3, pc}
   c564c:	00030240 	.word	0x00030240

000c5650 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   c5650:	b508      	push	{r3, lr}
   c5652:	4b02      	ldr	r3, [pc, #8]	; (c565c <network_prefer+0xc>)
   c5654:	681b      	ldr	r3, [r3, #0]
   c5656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   c5658:	9301      	str	r3, [sp, #4]
   c565a:	bd08      	pop	{r3, pc}
   c565c:	00030240 	.word	0x00030240

000c5660 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   c5660:	b508      	push	{r3, lr}
   c5662:	4b02      	ldr	r3, [pc, #8]	; (c566c <network_is_preferred+0xc>)
   c5664:	681b      	ldr	r3, [r3, #0]
   c5666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   c5668:	9301      	str	r3, [sp, #4]
   c566a:	bd08      	pop	{r3, pc}
   c566c:	00030240 	.word	0x00030240

000c5670 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   c5670:	b508      	push	{r3, lr}
   c5672:	4b02      	ldr	r3, [pc, #8]	; (c567c <malloc+0xc>)
   c5674:	681b      	ldr	r3, [r3, #0]
   c5676:	681b      	ldr	r3, [r3, #0]
   c5678:	9301      	str	r3, [sp, #4]
   c567a:	bd08      	pop	{r3, pc}
   c567c:	0003021c 	.word	0x0003021c

000c5680 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   c5680:	b508      	push	{r3, lr}
   c5682:	4b02      	ldr	r3, [pc, #8]	; (c568c <free+0xc>)
   c5684:	681b      	ldr	r3, [r3, #0]
   c5686:	685b      	ldr	r3, [r3, #4]
   c5688:	9301      	str	r3, [sp, #4]
   c568a:	bd08      	pop	{r3, pc}
   c568c:	0003021c 	.word	0x0003021c

000c5690 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   c5690:	b508      	push	{r3, lr}
   c5692:	4b02      	ldr	r3, [pc, #8]	; (c569c <realloc+0xc>)
   c5694:	681b      	ldr	r3, [r3, #0]
   c5696:	689b      	ldr	r3, [r3, #8]
   c5698:	9301      	str	r3, [sp, #4]
   c569a:	bd08      	pop	{r3, pc}
   c569c:	0003021c 	.word	0x0003021c

000c56a0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   c56a0:	b508      	push	{r3, lr}
   c56a2:	4b02      	ldr	r3, [pc, #8]	; (c56ac <sprintf+0xc>)
   c56a4:	681b      	ldr	r3, [r3, #0]
   c56a6:	68db      	ldr	r3, [r3, #12]
   c56a8:	9301      	str	r3, [sp, #4]
   c56aa:	bd08      	pop	{r3, pc}
   c56ac:	0003021c 	.word	0x0003021c

000c56b0 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   c56b0:	b508      	push	{r3, lr}
   c56b2:	4b02      	ldr	r3, [pc, #8]	; (c56bc <sscanf+0xc>)
   c56b4:	681b      	ldr	r3, [r3, #0]
   c56b6:	695b      	ldr	r3, [r3, #20]
   c56b8:	9301      	str	r3, [sp, #4]
   c56ba:	bd08      	pop	{r3, pc}
   c56bc:	0003021c 	.word	0x0003021c

000c56c0 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   c56c0:	b508      	push	{r3, lr}
   c56c2:	4b02      	ldr	r3, [pc, #8]	; (c56cc <vsnprintf+0xc>)
   c56c4:	681b      	ldr	r3, [r3, #0]
   c56c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   c56c8:	9301      	str	r3, [sp, #4]
   c56ca:	bd08      	pop	{r3, pc}
   c56cc:	0003021c 	.word	0x0003021c

000c56d0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   c56d0:	b508      	push	{r3, lr}
   c56d2:	4b02      	ldr	r3, [pc, #8]	; (c56dc <abort+0xc>)
   c56d4:	681b      	ldr	r3, [r3, #0]
   c56d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   c56d8:	9301      	str	r3, [sp, #4]
   c56da:	bd08      	pop	{r3, pc}
   c56dc:	0003021c 	.word	0x0003021c

000c56e0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   c56e0:	b508      	push	{r3, lr}
   c56e2:	4b02      	ldr	r3, [pc, #8]	; (c56ec <_malloc_r+0xc>)
   c56e4:	681b      	ldr	r3, [r3, #0]
   c56e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   c56e8:	9301      	str	r3, [sp, #4]
   c56ea:	bd08      	pop	{r3, pc}
   c56ec:	0003021c 	.word	0x0003021c

000c56f0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   c56f0:	b508      	push	{r3, lr}
   c56f2:	4b02      	ldr	r3, [pc, #8]	; (c56fc <__errno+0xc>)
   c56f4:	681b      	ldr	r3, [r3, #0]
   c56f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   c56f8:	9301      	str	r3, [sp, #4]
   c56fa:	bd08      	pop	{r3, pc}
   c56fc:	0003021c 	.word	0x0003021c

000c5700 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   c5700:	b508      	push	{r3, lr}
   c5702:	4b02      	ldr	r3, [pc, #8]	; (c570c <__assert_func+0xc>)
   c5704:	681b      	ldr	r3, [r3, #0]
   c5706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   c5708:	9301      	str	r3, [sp, #4]
   c570a:	bd08      	pop	{r3, pc}
   c570c:	0003021c 	.word	0x0003021c

000c5710 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   c5710:	b508      	push	{r3, lr}
   c5712:	4b02      	ldr	r3, [pc, #8]	; (c571c <newlib_impure_ptr_callback+0xc>)
   c5714:	681b      	ldr	r3, [r3, #0]
   c5716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   c5718:	9301      	str	r3, [sp, #4]
   c571a:	bd08      	pop	{r3, pc}
   c571c:	0003021c 	.word	0x0003021c

000c5720 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   c5720:	b508      	push	{r3, lr}
   c5722:	4b02      	ldr	r3, [pc, #8]	; (c572c <localtime_r+0xc>)
   c5724:	681b      	ldr	r3, [r3, #0]
   c5726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   c5728:	9301      	str	r3, [sp, #4]
   c572a:	bd08      	pop	{r3, pc}
   c572c:	0003021c 	.word	0x0003021c

000c5730 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   c5730:	2100      	movs	r1, #0
   c5732:	f7ff be7f 	b.w	c5434 <system_delay_ms>

000c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   c5736:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   c5738:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   c573a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   c573c:	b17c      	cbz	r4, c575e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   c573e:	6863      	ldr	r3, [r4, #4]
   c5740:	3b01      	subs	r3, #1
   c5742:	6063      	str	r3, [r4, #4]
   c5744:	b95b      	cbnz	r3, c575e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   c5746:	6823      	ldr	r3, [r4, #0]
   c5748:	4620      	mov	r0, r4
   c574a:	689b      	ldr	r3, [r3, #8]
   c574c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   c574e:	68a3      	ldr	r3, [r4, #8]
   c5750:	3b01      	subs	r3, #1
   c5752:	60a3      	str	r3, [r4, #8]
   c5754:	b91b      	cbnz	r3, c575e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   c5756:	6823      	ldr	r3, [r4, #0]
   c5758:	4620      	mov	r0, r4
   c575a:	68db      	ldr	r3, [r3, #12]
   c575c:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   c575e:	4628      	mov	r0, r5
   c5760:	bd38      	pop	{r3, r4, r5, pc}

000c5762 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   c5762:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   c5764:	6883      	ldr	r3, [r0, #8]
   c5766:	4604      	mov	r4, r0
   c5768:	b90b      	cbnz	r3, c576e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   c576a:	f002 f84f 	bl	c780c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c576e:	68c3      	ldr	r3, [r0, #12]
   c5770:	4798      	blx	r3
      if (_M_manager)
   c5772:	68a3      	ldr	r3, [r4, #8]
   c5774:	b11b      	cbz	r3, c577e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c5776:	2203      	movs	r2, #3
   c5778:	4621      	mov	r1, r4
   c577a:	4620      	mov	r0, r4
   c577c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   c577e:	4620      	mov	r0, r4
   c5780:	2110      	movs	r1, #16
}
   c5782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   c5786:	f7ef bc80 	b.w	b508a <_ZdlPvj>

000c578a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   c578a:	b510      	push	{r4, lr}
      if (_M_manager)
   c578c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   c578e:	4604      	mov	r4, r0
      if (_M_manager)
   c5790:	b113      	cbz	r3, c5798 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   c5792:	2203      	movs	r2, #3
   c5794:	4601      	mov	r1, r0
   c5796:	4798      	blx	r3
    }
   c5798:	4620      	mov	r0, r4
   c579a:	bd10      	pop	{r4, pc}

000c579c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   c579c:	b513      	push	{r0, r1, r4, lr}
   c579e:	460b      	mov	r3, r1
   c57a0:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c57a2:	e9d0 0100 	ldrd	r0, r1, [r0]
   c57a6:	466c      	mov	r4, sp
   c57a8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   c57ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   c57b0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   c57b4:	e894 0003 	ldmia.w	r4, {r0, r1}
   c57b8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   c57bc:	b002      	add	sp, #8
   c57be:	bd10      	pop	{r4, pc}

000c57c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   c57c0:	4802      	ldr	r0, [pc, #8]	; (c57cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   c57c2:	2300      	movs	r3, #0
   c57c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   c57c6:	f7ff bbfb 	b.w	c4fc0 <os_mutex_recursive_create>
   c57ca:	bf00      	nop
   c57cc:	2003e62c 	.word	0x2003e62c

000c57d0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   c57d0:	2200      	movs	r2, #0
   c57d2:	6840      	ldr	r0, [r0, #4]
   c57d4:	4611      	mov	r1, r2
   c57d6:	f7ff bef3 	b.w	c55c0 <network_ready>

000c57da <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   c57da:	2200      	movs	r2, #0
   c57dc:	6840      	ldr	r0, [r0, #4]
   c57de:	4611      	mov	r1, r2
   c57e0:	f7ff bf0e 	b.w	c5600 <network_listening>

000c57e4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c57e4:	2200      	movs	r2, #0
   c57e6:	6840      	ldr	r0, [r0, #4]
   c57e8:	4611      	mov	r1, r2
   c57ea:	f7ff bf19 	b.w	c5620 <network_get_listen_timeout>

000c57ee <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c57ee:	6840      	ldr	r0, [r0, #4]
   c57f0:	2200      	movs	r2, #0
   c57f2:	f7ff bf0d 	b.w	c5610 <network_set_listen_timeout>

000c57f6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c57f6:	6840      	ldr	r0, [r0, #4]
   c57f8:	2200      	movs	r2, #0
   c57fa:	f081 0101 	eor.w	r1, r1, #1
   c57fe:	f7ff bef7 	b.w	c55f0 <network_listen>

000c5802 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c5802:	2200      	movs	r2, #0
   c5804:	6840      	ldr	r0, [r0, #4]
   c5806:	4611      	mov	r1, r2
   c5808:	f7ff beca 	b.w	c55a0 <network_connecting>

000c580c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c580c:	6840      	ldr	r0, [r0, #4]
   c580e:	2200      	movs	r2, #0
   c5810:	2102      	movs	r1, #2
   c5812:	f7ff becd 	b.w	c55b0 <network_disconnect>

000c5816 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c5816:	2300      	movs	r3, #0
   c5818:	6840      	ldr	r0, [r0, #4]
   c581a:	461a      	mov	r2, r3
   c581c:	f7ff beb8 	b.w	c5590 <network_connect>

000c5820 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   c5820:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   c5822:	4b13      	ldr	r3, [pc, #76]	; (c5870 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   c5824:	6003      	str	r3, [r0, #0]
   c5826:	2518      	movs	r5, #24
   c5828:	3330      	adds	r3, #48	; 0x30
   c582a:	b086      	sub	sp, #24
   c582c:	460e      	mov	r6, r1
   c582e:	6043      	str	r3, [r0, #4]
   c5830:	462a      	mov	r2, r5
   c5832:	2100      	movs	r1, #0
   c5834:	4604      	mov	r4, r0
   c5836:	3008      	adds	r0, #8
   c5838:	f004 fcc4 	bl	ca1c4 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   c583c:	2200      	movs	r2, #0
   c583e:	6870      	ldr	r0, [r6, #4]
   c5840:	4611      	mov	r1, r2
   c5842:	f7ff febd 	bl	c55c0 <network_ready>
   c5846:	b178      	cbz	r0, c5868 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   c5848:	2100      	movs	r1, #0
   c584a:	462a      	mov	r2, r5
   c584c:	4668      	mov	r0, sp
   c584e:	f004 fcb9 	bl	ca1c4 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   c5852:	4669      	mov	r1, sp
   c5854:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   c5856:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   c585a:	f7ff fb83 	bl	c4f64 <cellular_signal>
   c585e:	b918      	cbnz	r0, c5868 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   c5860:	4669      	mov	r1, sp
   c5862:	4620      	mov	r0, r4
   c5864:	f000 f990 	bl	c5b88 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   c5868:	4620      	mov	r0, r4
   c586a:	b006      	add	sp, #24
   c586c:	bd70      	pop	{r4, r5, r6, pc}
   c586e:	bf00      	nop
   c5870:	000cce04 	.word	0x000cce04

000c5874 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   c5874:	4b08      	ldr	r3, [pc, #32]	; (c5898 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   c5876:	b510      	push	{r4, lr}
   c5878:	2428      	movs	r4, #40	; 0x28
   c587a:	4622      	mov	r2, r4
   c587c:	4618      	mov	r0, r3
   c587e:	2100      	movs	r1, #0
   c5880:	f004 fca0 	bl	ca1c4 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   c5884:	4b05      	ldr	r3, [pc, #20]	; (c589c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   c5886:	8004      	strh	r4, [r0, #0]
        cid = -1;
   c5888:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c588c:	6042      	str	r2, [r0, #4]
   c588e:	2204      	movs	r2, #4
   c5890:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   c5892:	4a03      	ldr	r2, [pc, #12]	; (c58a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   c5894:	601a      	str	r2, [r3, #0]
   c5896:	bd10      	pop	{r4, pc}
   c5898:	2003e638 	.word	0x2003e638
   c589c:	2003e630 	.word	0x2003e630
   c58a0:	000ccdb4 	.word	0x000ccdb4

000c58a4 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   c58a4:	4770      	bx	lr

000c58a6 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   c58a6:	7b00      	ldrb	r0, [r0, #12]
   c58a8:	4770      	bx	lr

000c58aa <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   c58aa:	7b03      	ldrb	r3, [r0, #12]
   c58ac:	b14b      	cbz	r3, c58c2 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   c58ae:	6903      	ldr	r3, [r0, #16]
   c58b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   c58b4:	d005      	beq.n	c58c2 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   c58b6:	6980      	ldr	r0, [r0, #24]
   c58b8:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   c58bc:	bf18      	it	ne
   c58be:	2001      	movne	r0, #1
   c58c0:	4770      	bx	lr
   c58c2:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   c58c4:	4770      	bx	lr

000c58c6 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   c58c6:	6803      	ldr	r3, [r0, #0]
   c58c8:	6a1b      	ldr	r3, [r3, #32]
   c58ca:	4718      	bx	r3

000c58cc <_ZN14CellularSignalD0Ev>:
   c58cc:	b510      	push	{r4, lr}
   c58ce:	2120      	movs	r1, #32
   c58d0:	4604      	mov	r4, r0
   c58d2:	f7ef fbda 	bl	b508a <_ZdlPvj>
   c58d6:	4620      	mov	r0, r4
   c58d8:	bd10      	pop	{r4, pc}
	...

000c58dc <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   c58dc:	7b03      	ldrb	r3, [r0, #12]
   c58de:	b17b      	cbz	r3, c5900 <_ZNK14CellularSignal11getStrengthEv+0x24>
   c58e0:	6943      	ldr	r3, [r0, #20]
   c58e2:	2b00      	cmp	r3, #0
   c58e4:	db0c      	blt.n	c5900 <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   c58e6:	ee07 3a90 	vmov	s15, r3
   c58ea:	ed9f 7a07 	vldr	s14, [pc, #28]	; c5908 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   c58ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c58f2:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c58f6:	eddf 7a05 	vldr	s15, [pc, #20]	; c590c <_ZNK14CellularSignal11getStrengthEv+0x30>
   c58fa:	ee20 0a27 	vmul.f32	s0, s0, s15
   c58fe:	4770      	bx	lr
    return -1.0f;
   c5900:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   c5904:	4770      	bx	lr
   c5906:	bf00      	nop
   c5908:	477fff00 	.word	0x477fff00
   c590c:	42c80000 	.word	0x42c80000

000c5910 <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   c5910:	7b03      	ldrb	r3, [r0, #12]
   c5912:	b163      	cbz	r3, c592e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   c5914:	6903      	ldr	r3, [r0, #16]
   c5916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   c591a:	d008      	beq.n	c592e <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   c591c:	ee07 3a90 	vmov	s15, r3
   c5920:	ed9f 7a04 	vldr	s14, [pc, #16]	; c5934 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   c5924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5928:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c592c:	4770      	bx	lr
    return 0.0f;
   c592e:	ed9f 0a02 	vldr	s0, [pc, #8]	; c5938 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   c5932:	4770      	bx	lr
   c5934:	42c80000 	.word	0x42c80000
   c5938:	00000000 	.word	0x00000000

000c593c <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   c593c:	7b03      	ldrb	r3, [r0, #12]
   c593e:	b17b      	cbz	r3, c5960 <_ZNK14CellularSignal10getQualityEv+0x24>
   c5940:	69c3      	ldr	r3, [r0, #28]
   c5942:	2b00      	cmp	r3, #0
   c5944:	db0c      	blt.n	c5960 <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   c5946:	ee07 3a90 	vmov	s15, r3
   c594a:	ed9f 7a07 	vldr	s14, [pc, #28]	; c5968 <_ZNK14CellularSignal10getQualityEv+0x2c>
   c594e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5952:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c5956:	eddf 7a05 	vldr	s15, [pc, #20]	; c596c <_ZNK14CellularSignal10getQualityEv+0x30>
   c595a:	ee20 0a27 	vmul.f32	s0, s0, s15
   c595e:	4770      	bx	lr
    return -1.0f;
   c5960:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   c5964:	4770      	bx	lr
   c5966:	bf00      	nop
   c5968:	477fff00 	.word	0x477fff00
   c596c:	42c80000 	.word	0x42c80000

000c5970 <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   c5970:	7b03      	ldrb	r3, [r0, #12]
   c5972:	b163      	cbz	r3, c598e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   c5974:	6983      	ldr	r3, [r0, #24]
   c5976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   c597a:	d008      	beq.n	c598e <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   c597c:	ee07 3a90 	vmov	s15, r3
   c5980:	ed9f 7a04 	vldr	s14, [pc, #16]	; c5994 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   c5984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   c5988:	ee87 0a87 	vdiv.f32	s0, s15, s14
   c598c:	4770      	bx	lr
    return 0.0f;
   c598e:	ed9f 0a02 	vldr	s0, [pc, #8]	; c5998 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   c5992:	4770      	bx	lr
   c5994:	42c80000 	.word	0x42c80000
   c5998:	00000000 	.word	0x00000000

000c599c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>:

} // namespace particle

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
inline size_t Print::print(T n, int base)
   c599c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   c599e:	1e0c      	subs	r4, r1, #0
inline size_t Print::print(T n, int base)
   c59a0:	4606      	mov	r6, r0
        if (n < 0 && base == 10) {
   c59a2:	da0a      	bge.n	c59ba <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x1e>
            t = print('-');
   c59a4:	212d      	movs	r1, #45	; 0x2d
   c59a6:	f001 f893 	bl	c6ad0 <_ZN5Print5printEc>
            val = -n;
   c59aa:	4261      	negs	r1, r4
            t = print('-');
   c59ac:	4605      	mov	r5, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   c59ae:	220a      	movs	r2, #10
   c59b0:	4630      	mov	r0, r6
   c59b2:	f001 f8aa 	bl	c6b0a <_ZN5Print11printNumberEmh>
    }
}
   c59b6:	4428      	add	r0, r5
   c59b8:	bd70      	pop	{r4, r5, r6, pc}
            val = n;
   c59ba:	4621      	mov	r1, r4
        size_t t = 0;
   c59bc:	2500      	movs	r5, #0
   c59be:	e7f6      	b.n	c59ae <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0+0x12>

000c59c0 <_ZN5Print10printFloatEdh>:
    size_t printFloat(double number, uint8_t digits) {
   c59c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c59c4:	ec55 4b10 	vmov	r4, r5, d0
   c59c8:	4607      	mov	r7, r0
   c59ca:	460e      	mov	r6, r1
        if (std::isnan(number)) {
   c59cc:	ee10 2a10 	vmov	r2, s0
   c59d0:	ee10 0a10 	vmov	r0, s0
   c59d4:	462b      	mov	r3, r5
   c59d6:	4629      	mov	r1, r5
   c59d8:	f7ee ff78 	bl	b48cc <__aeabi_dcmpun>
   c59dc:	b128      	cbz	r0, c59ea <_ZN5Print10printFloatEdh+0x2a>
            return print("nan");
   c59de:	494c      	ldr	r1, [pc, #304]	; (c5b10 <_ZN5Print10printFloatEdh+0x150>)
            return print ("ovf"); // constant determined empirically
   c59e0:	4638      	mov	r0, r7
    }
   c59e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            return print ("ovf"); // constant determined empirically
   c59e6:	f001 b86f 	b.w	c6ac8 <_ZN5Print5printEPKc>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   c59ea:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
        if (std::isinf(number)) {
   c59ee:	4b49      	ldr	r3, [pc, #292]	; (c5b14 <_ZN5Print10printFloatEdh+0x154>)
   c59f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c59f4:	4620      	mov	r0, r4
   c59f6:	4649      	mov	r1, r9
   c59f8:	f7ee ff68 	bl	b48cc <__aeabi_dcmpun>
   c59fc:	b948      	cbnz	r0, c5a12 <_ZN5Print10printFloatEdh+0x52>
   c59fe:	4b45      	ldr	r3, [pc, #276]	; (c5b14 <_ZN5Print10printFloatEdh+0x154>)
   c5a00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c5a04:	4620      	mov	r0, r4
   c5a06:	4649      	mov	r1, r9
   c5a08:	f7ee ff42 	bl	b4890 <__aeabi_dcmple>
   c5a0c:	b908      	cbnz	r0, c5a12 <_ZN5Print10printFloatEdh+0x52>
            return print("inf");
   c5a0e:	4942      	ldr	r1, [pc, #264]	; (c5b18 <_ZN5Print10printFloatEdh+0x158>)
   c5a10:	e7e6      	b.n	c59e0 <_ZN5Print10printFloatEdh+0x20>
        if (number > 4294967040.0) {
   c5a12:	4b42      	ldr	r3, [pc, #264]	; (c5b1c <_ZN5Print10printFloatEdh+0x15c>)
   c5a14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   c5a18:	4620      	mov	r0, r4
   c5a1a:	4629      	mov	r1, r5
   c5a1c:	f7ee ff4c 	bl	b48b8 <__aeabi_dcmpgt>
   c5a20:	b108      	cbz	r0, c5a26 <_ZN5Print10printFloatEdh+0x66>
            return print ("ovf"); // constant determined empirically
   c5a22:	493f      	ldr	r1, [pc, #252]	; (c5b20 <_ZN5Print10printFloatEdh+0x160>)
   c5a24:	e7dc      	b.n	c59e0 <_ZN5Print10printFloatEdh+0x20>
        if (number <-4294967040.0) {
   c5a26:	4b3f      	ldr	r3, [pc, #252]	; (c5b24 <_ZN5Print10printFloatEdh+0x164>)
   c5a28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   c5a2c:	4620      	mov	r0, r4
   c5a2e:	4629      	mov	r1, r5
   c5a30:	f7ee ff24 	bl	b487c <__aeabi_dcmplt>
   c5a34:	2800      	cmp	r0, #0
   c5a36:	d1f4      	bne.n	c5a22 <_ZN5Print10printFloatEdh+0x62>
        if (number < 0.0) {
   c5a38:	2200      	movs	r2, #0
   c5a3a:	2300      	movs	r3, #0
   c5a3c:	4620      	mov	r0, r4
   c5a3e:	4629      	mov	r1, r5
   c5a40:	f7ee ff1c 	bl	b487c <__aeabi_dcmplt>
   c5a44:	b1d0      	cbz	r0, c5a7c <_ZN5Print10printFloatEdh+0xbc>
            n += print('-');
   c5a46:	212d      	movs	r1, #45	; 0x2d
   c5a48:	4638      	mov	r0, r7
   c5a4a:	f001 f841 	bl	c6ad0 <_ZN5Print5printEc>
            number = -number;
   c5a4e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
            n += print('-');
   c5a52:	4682      	mov	sl, r0
            number = -number;
   c5a54:	461d      	mov	r5, r3
        double rounding = 0.5;
   c5a56:	4934      	ldr	r1, [pc, #208]	; (c5b28 <_ZN5Print10printFloatEdh+0x168>)
            rounding /= 10.0;
   c5a58:	f8df 90d4 	ldr.w	r9, [pc, #212]	; c5b30 <_ZN5Print10printFloatEdh+0x170>
        size_t n = 0;
   c5a5c:	f04f 0b00 	mov.w	fp, #0
        double rounding = 0.5;
   c5a60:	2000      	movs	r0, #0
            rounding /= 10.0;
   c5a62:	f04f 0800 	mov.w	r8, #0
        for (uint8_t i = 0; i < digits; ++i) {
   c5a66:	fa5f f38b 	uxtb.w	r3, fp
   c5a6a:	429e      	cmp	r6, r3
   c5a6c:	d908      	bls.n	c5a80 <_ZN5Print10printFloatEdh+0xc0>
            rounding /= 10.0;
   c5a6e:	4642      	mov	r2, r8
   c5a70:	464b      	mov	r3, r9
   c5a72:	f7ee fdbb 	bl	b45ec <__aeabi_ddiv>
        for (uint8_t i = 0; i < digits; ++i) {
   c5a76:	f10b 0b01 	add.w	fp, fp, #1
   c5a7a:	e7f4      	b.n	c5a66 <_ZN5Print10printFloatEdh+0xa6>
        size_t n = 0;
   c5a7c:	4682      	mov	sl, r0
   c5a7e:	e7ea      	b.n	c5a56 <_ZN5Print10printFloatEdh+0x96>
        number += rounding;
   c5a80:	4602      	mov	r2, r0
   c5a82:	460b      	mov	r3, r1
   c5a84:	4620      	mov	r0, r4
   c5a86:	4629      	mov	r1, r5
   c5a88:	f7ee fad0 	bl	b402c <__adddf3>
   c5a8c:	460d      	mov	r5, r1
   c5a8e:	4604      	mov	r4, r0
        unsigned long int_part = (unsigned long)number;
   c5a90:	f7ee ff5a 	bl	b4948 <__aeabi_d2uiz>
   c5a94:	4680      	mov	r8, r0
        double remainder = number - (double)int_part;
   c5a96:	f7ee fc05 	bl	b42a4 <__aeabi_ui2d>
   c5a9a:	4602      	mov	r2, r0
   c5a9c:	460b      	mov	r3, r1
   c5a9e:	4620      	mov	r0, r4
   c5aa0:	4629      	mov	r1, r5
   c5aa2:	f7ee fac1 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   c5aa6:	220a      	movs	r2, #10
        double remainder = number - (double)int_part;
   c5aa8:	4604      	mov	r4, r0
   c5aaa:	460d      	mov	r5, r1
        return printNumber(val, base) + t;
   c5aac:	4638      	mov	r0, r7
   c5aae:	4641      	mov	r1, r8
   c5ab0:	f001 f82b 	bl	c6b0a <_ZN5Print11printNumberEmh>
        n += print(int_part);
   c5ab4:	4482      	add	sl, r0
        if (digits > 0) {
   c5ab6:	b33e      	cbz	r6, c5b08 <_ZN5Print10printFloatEdh+0x148>
            n += print(".");
   c5ab8:	491c      	ldr	r1, [pc, #112]	; (c5b2c <_ZN5Print10printFloatEdh+0x16c>)
            remainder *= 10.0;
   c5aba:	f8df 9074 	ldr.w	r9, [pc, #116]	; c5b30 <_ZN5Print10printFloatEdh+0x170>
            n += print(".");
   c5abe:	4638      	mov	r0, r7
   c5ac0:	f001 f802 	bl	c6ac8 <_ZN5Print5printEPKc>
            remainder *= 10.0;
   c5ac4:	f04f 0800 	mov.w	r8, #0
            n += print(".");
   c5ac8:	4482      	add	sl, r0
        while (digits-- > 0) {
   c5aca:	b1ee      	cbz	r6, c5b08 <_ZN5Print10printFloatEdh+0x148>
            remainder *= 10.0;
   c5acc:	4642      	mov	r2, r8
   c5ace:	464b      	mov	r3, r9
   c5ad0:	4620      	mov	r0, r4
   c5ad2:	4629      	mov	r1, r5
   c5ad4:	f7ee fc60 	bl	b4398 <__aeabi_dmul>
   c5ad8:	460d      	mov	r5, r1
   c5ada:	4604      	mov	r4, r0
            int toPrint = int(remainder);
   c5adc:	f7ee ff0c 	bl	b48f8 <__aeabi_d2iz>
   c5ae0:	4601      	mov	r1, r0
   c5ae2:	4683      	mov	fp, r0
inline size_t Print::print(T n, int base)
   c5ae4:	4638      	mov	r0, r7
   c5ae6:	f7ff ff59 	bl	c599c <_ZN5Print5printIiLi0EEEjT_i.part.0.constprop.0>
            n += print(toPrint);
   c5aea:	4482      	add	sl, r0
            remainder -= toPrint;
   c5aec:	4658      	mov	r0, fp
   c5aee:	f7ee fbe9 	bl	b42c4 <__aeabi_i2d>
   c5af2:	4602      	mov	r2, r0
   c5af4:	460b      	mov	r3, r1
   c5af6:	4620      	mov	r0, r4
   c5af8:	4629      	mov	r1, r5
   c5afa:	f7ee fa95 	bl	b4028 <__aeabi_dsub>
   c5afe:	3e01      	subs	r6, #1
   c5b00:	4604      	mov	r4, r0
   c5b02:	460d      	mov	r5, r1
   c5b04:	b2f6      	uxtb	r6, r6
        while (digits-- > 0) {
   c5b06:	e7e0      	b.n	c5aca <_ZN5Print10printFloatEdh+0x10a>
    }
   c5b08:	4650      	mov	r0, sl
   c5b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c5b0e:	bf00      	nop
   c5b10:	000ccdf0 	.word	0x000ccdf0
   c5b14:	7fefffff 	.word	0x7fefffff
   c5b18:	000ccdf4 	.word	0x000ccdf4
   c5b1c:	41efffff 	.word	0x41efffff
   c5b20:	000ccdf8 	.word	0x000ccdf8
   c5b24:	c1efffff 	.word	0xc1efffff
   c5b28:	3fe00000 	.word	0x3fe00000
   c5b2c:	000cba4e 	.word	0x000cba4e
   c5b30:	40240000 	.word	0x40240000

000c5b34 <_ZNK14CellularSignal7printToER5Print>:
{
   c5b34:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   c5b36:	6803      	ldr	r3, [r0, #0]
   c5b38:	691b      	ldr	r3, [r3, #16]
{
   c5b3a:	460c      	mov	r4, r1
   c5b3c:	4605      	mov	r5, r0
    n += p.print(this->getStrengthValue(), 2);
   c5b3e:	4798      	blx	r3
   c5b40:	ee10 0a10 	vmov	r0, s0
        return printFloat((double)n, digits);
   c5b44:	f7ee fbd0 	bl	b42e8 <__aeabi_f2d>
   c5b48:	ec41 0b10 	vmov	d0, r0, r1
   c5b4c:	2102      	movs	r1, #2
   c5b4e:	4620      	mov	r0, r4
   c5b50:	f7ff ff36 	bl	c59c0 <_ZN5Print10printFloatEdh>
    n += p.print(',');
   c5b54:	212c      	movs	r1, #44	; 0x2c
   c5b56:	4606      	mov	r6, r0
   c5b58:	4620      	mov	r0, r4
   c5b5a:	f000 ffb9 	bl	c6ad0 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   c5b5e:	682b      	ldr	r3, [r5, #0]
    n += p.print(',');
   c5b60:	4406      	add	r6, r0
    n += p.print(this->getQualityValue(), 2);
   c5b62:	699b      	ldr	r3, [r3, #24]
   c5b64:	4628      	mov	r0, r5
   c5b66:	4798      	blx	r3
   c5b68:	ee10 0a10 	vmov	r0, s0
   c5b6c:	f7ee fbbc 	bl	b42e8 <__aeabi_f2d>
   c5b70:	ec41 0b10 	vmov	d0, r0, r1
   c5b74:	2102      	movs	r1, #2
   c5b76:	4620      	mov	r0, r4
   c5b78:	f7ff ff22 	bl	c59c0 <_ZN5Print10printFloatEdh>
}
   c5b7c:	4430      	add	r0, r6
   c5b7e:	bd70      	pop	{r4, r5, r6, pc}

000c5b80 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   c5b80:	f1a0 0004 	sub.w	r0, r0, #4
   c5b84:	f7ff bfd6 	b.w	c5b34 <_ZNK14CellularSignal7printToER5Print>

000c5b88 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   c5b88:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   c5b8a:	460d      	mov	r5, r1
   c5b8c:	f100 0408 	add.w	r4, r0, #8
   c5b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c5b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c5b94:	e895 0003 	ldmia.w	r5, {r0, r1}
   c5b98:	e884 0003 	stmia.w	r4, {r0, r1}
}
   c5b9c:	2001      	movs	r0, #1
   c5b9e:	bd30      	pop	{r4, r5, pc}

000c5ba0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c5ba0:	4770      	bx	lr

000c5ba2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   c5ba2:	2000      	movs	r0, #0
   c5ba4:	4770      	bx	lr

000c5ba6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   c5ba6:	b510      	push	{r4, lr}
   c5ba8:	2110      	movs	r1, #16
   c5baa:	4604      	mov	r4, r0
   c5bac:	f7ef fa6d 	bl	b508a <_ZdlPvj>
   c5bb0:	4620      	mov	r0, r4
   c5bb2:	bd10      	pop	{r4, pc}

000c5bb4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   c5bb4:	b508      	push	{r3, lr}
      { delete this; }
   c5bb6:	f7ff fff6 	bl	c5ba6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   c5bba:	bd08      	pop	{r3, pc}

000c5bbc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   c5bbc:	b530      	push	{r4, r5, lr}
        type_(type) {
   c5bbe:	2200      	movs	r2, #0
   c5bc0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   c5bc4:	6002      	str	r2, [r0, #0]
   c5bc6:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   c5bc8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   c5bca:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   c5bcc:	680c      	ldr	r4, [r1, #0]
   c5bce:	8085      	strh	r5, [r0, #4]
   c5bd0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   c5bd2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   c5bd4:	bd30      	pop	{r4, r5, pc}

000c5bd6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   c5bd6:	b510      	push	{r4, lr}
   c5bd8:	4604      	mov	r4, r0
    free((void*)msg_);
   c5bda:	6800      	ldr	r0, [r0, #0]
   c5bdc:	f7ff fd50 	bl	c5680 <free>
}
   c5be0:	4620      	mov	r0, r4
   c5be2:	bd10      	pop	{r4, pc}

000c5be4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   c5be4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   c5be6:	68c4      	ldr	r4, [r0, #12]
   c5be8:	b1f4      	cbz	r4, c5c28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   c5bea:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   c5bec:	2b02      	cmp	r3, #2
   c5bee:	d103      	bne.n	c5bf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   c5bf0:	f104 000c 	add.w	r0, r4, #12
   c5bf4:	f7ff ffef 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   c5bf8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   c5bfa:	b135      	cbz	r5, c5c0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   c5bfc:	4628      	mov	r0, r5
   c5bfe:	f7ff fdc4 	bl	c578a <_ZNSt14_Function_baseD1Ev>
   c5c02:	2110      	movs	r1, #16
   c5c04:	4628      	mov	r0, r5
   c5c06:	f7ef fa40 	bl	b508a <_ZdlPvj>
   c5c0a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   c5c0c:	b135      	cbz	r5, c5c1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   c5c0e:	4628      	mov	r0, r5
   c5c10:	f7ff fdbb 	bl	c578a <_ZNSt14_Function_baseD1Ev>
   c5c14:	2110      	movs	r1, #16
   c5c16:	4628      	mov	r0, r5
   c5c18:	f7ef fa37 	bl	b508a <_ZdlPvj>
   c5c1c:	4620      	mov	r0, r4
   c5c1e:	2114      	movs	r1, #20
   c5c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c5c24:	f7ef ba31 	b.w	b508a <_ZdlPvj>
   c5c28:	bd38      	pop	{r3, r4, r5, pc}

000c5c2a <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
   c5c2a:	2200      	movs	r2, #0
   c5c2c:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
   c5c2e:	220c      	movs	r2, #12
   c5c30:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
   c5c32:	680a      	ldr	r2, [r1, #0]
   c5c34:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
   c5c36:	7a0a      	ldrb	r2, [r1, #8]
   c5c38:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
   c5c3a:	684a      	ldr	r2, [r1, #4]
   c5c3c:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
   c5c3e:	7a4a      	ldrb	r2, [r1, #9]
   c5c40:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
   c5c42:	7a8a      	ldrb	r2, [r1, #10]
   c5c44:	7242      	strb	r2, [r0, #9]
    return opts;
}
   c5c46:	4770      	bx	lr

000c5c48 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   c5c48:	b510      	push	{r4, lr}
   c5c4a:	b088      	sub	sp, #32
   c5c4c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   c5c4e:	4668      	mov	r0, sp
   c5c50:	f001 f940 	bl	c6ed4 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   c5c54:	4669      	mov	r1, sp
   c5c56:	a804      	add	r0, sp, #16
   c5c58:	f001 f95f 	bl	c6f1a <_ZN6StringC1ERKS_>
   c5c5c:	a804      	add	r0, sp, #16
   c5c5e:	47a0      	blx	r4
   c5c60:	4604      	mov	r4, r0
   c5c62:	a804      	add	r0, sp, #16
   c5c64:	f001 f8eb 	bl	c6e3e <_ZN6StringD1Ev>
    String p(param);
   c5c68:	4668      	mov	r0, sp
   c5c6a:	f001 f8e8 	bl	c6e3e <_ZN6StringD1Ev>
}
   c5c6e:	4620      	mov	r0, r4
   c5c70:	b008      	add	sp, #32
   c5c72:	bd10      	pop	{r4, pc}

000c5c74 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   c5c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   c5c76:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   c5c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   c5c7c:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   c5c7e:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   c5c80:	461a      	mov	r2, r3
   c5c82:	4669      	mov	r1, sp
   c5c84:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   c5c86:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   c5c8a:	f8ad 4000 	strh.w	r4, [sp]
   c5c8e:	f7ff fc27 	bl	c54e0 <spark_function>
}
   c5c92:	b004      	add	sp, #16
   c5c94:	bd10      	pop	{r4, pc}

000c5c96 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   c5c96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c5c98:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
   c5c9a:	a801      	add	r0, sp, #4
   c5c9c:	f7ff ffc5 	bl	c5c2a <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   c5ca0:	2100      	movs	r1, #0
   c5ca2:	f7ff fc6d 	bl	c5580 <spark_cloud_disconnect>
}
   c5ca6:	b005      	add	sp, #20
   c5ca8:	f85d fb04 	ldr.w	pc, [sp], #4

000c5cac <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   c5cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c5cae:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   c5cb0:	2300      	movs	r3, #0
    const auto opts = options.toSystemOptions();
   c5cb2:	a801      	add	r0, sp, #4
   c5cb4:	f7ff ffb9 	bl	c5c2a <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   c5cb8:	4602      	mov	r2, r0
   c5cba:	4619      	mov	r1, r3
   c5cbc:	2002      	movs	r0, #2
   c5cbe:	f7ff fc4f 	bl	c5560 <spark_set_connection_property>
}
   c5cc2:	b005      	add	sp, #20
   c5cc4:	f85d fb04 	ldr.w	pc, [sp], #4

000c5cc8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   c5cc8:	680b      	ldr	r3, [r1, #0]
   c5cca:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   c5ccc:	684b      	ldr	r3, [r1, #4]
   c5cce:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   c5cd0:	b113      	cbz	r3, c5cd8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   c5cd2:	685a      	ldr	r2, [r3, #4]
   c5cd4:	3201      	adds	r2, #1
   c5cd6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   c5cd8:	4770      	bx	lr

000c5cda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   c5cda:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c5cdc:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   c5cde:	4668      	mov	r0, sp
   c5ce0:	460d      	mov	r5, r1
   c5ce2:	f7ff fff1 	bl	c5cc8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   c5ce6:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c5ce8:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c5cea:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c5cec:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c5cee:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c5cf0:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   c5cf2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   c5cf4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   c5cf6:	f7ff fd1e 	bl	c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   c5cfa:	b135      	cbz	r5, c5d0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   c5cfc:	1d28      	adds	r0, r5, #4
   c5cfe:	f7ff fd1a 	bl	c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c5d02:	2108      	movs	r1, #8
   c5d04:	4628      	mov	r0, r5
   c5d06:	f7ef f9c0 	bl	b508a <_ZdlPvj>
        return p;
    }
   c5d0a:	4620      	mov	r0, r4
   c5d0c:	b003      	add	sp, #12
   c5d0e:	bd30      	pop	{r4, r5, pc}

000c5d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   c5d10:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c5d12:	b510      	push	{r4, lr}
      if (_M_empty())
   c5d14:	b90a      	cbnz	r2, c5d1a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   c5d16:	f001 fd79 	bl	c780c <_ZSt25__throw_bad_function_callv>
    }
   c5d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c5d1e:	68c3      	ldr	r3, [r0, #12]
   c5d20:	4718      	bx	r3

000c5d22 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c5d22:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c5d24:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   c5d26:	f100 0110 	add.w	r1, r0, #16
   c5d2a:	f7ff fff1 	bl	c5d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   c5d2e:	bd08      	pop	{r3, pc}

000c5d30 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   c5d30:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   c5d32:	b510      	push	{r4, lr}
      if (_M_empty())
   c5d34:	b90a      	cbnz	r2, c5d3a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   c5d36:	f001 fd69 	bl	c780c <_ZSt25__throw_bad_function_callv>
    }
   c5d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   c5d3e:	68c3      	ldr	r3, [r0, #12]
   c5d40:	4718      	bx	r3

000c5d42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   c5d42:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   c5d44:	6800      	ldr	r0, [r0, #0]
   c5d46:	f100 0110 	add.w	r1, r0, #16
   c5d4a:	f7ff fff1 	bl	c5d30 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   c5d4e:	bd08      	pop	{r3, pc}

000c5d50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   c5d50:	b538      	push	{r3, r4, r5, lr}
   c5d52:	2300      	movs	r3, #0
   c5d54:	4604      	mov	r4, r0
   c5d56:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c5d58:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   c5d5a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c5d5c:	f7ef f991 	bl	b5082 <_Znwj>
   c5d60:	b128      	cbz	r0, c5d6e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   c5d62:	2301      	movs	r3, #1
   c5d64:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   c5d68:	4b02      	ldr	r3, [pc, #8]	; (c5d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   c5d6a:	6003      	str	r3, [r0, #0]
   c5d6c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   c5d6e:	6020      	str	r0, [r4, #0]
	}
   c5d70:	4620      	mov	r0, r4
   c5d72:	bd38      	pop	{r3, r4, r5, pc}
   c5d74:	000cce40 	.word	0x000cce40

000c5d78 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>:
    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
    }

    explicit FutureBase(Error::Type error) :
   c5d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   c5d7a:	4605      	mov	r5, r0
        type_(type) {
   c5d7c:	f8ad 1004 	strh.w	r1, [sp, #4]
   c5d80:	2600      	movs	r6, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c5d82:	4669      	mov	r1, sp
   c5d84:	a802      	add	r0, sp, #8
   c5d86:	9600      	str	r6, [sp, #0]
   c5d88:	f7ff ff18 	bl	c5bbc <_ZN8particle5ErrorC1EOS0_>
   c5d8c:	2014      	movs	r0, #20
   c5d8e:	f7ef f978 	bl	b5082 <_Znwj>
   c5d92:	4604      	mov	r4, r0
   c5d94:	b148      	cbz	r0, c5daa <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE+0x32>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c5d96:	2302      	movs	r3, #2
   c5d98:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c5d9a:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c5d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c5da0:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   c5da2:	a902      	add	r1, sp, #8
   c5da4:	300c      	adds	r0, #12
   c5da6:	f7ff ff09 	bl	c5bbc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c5daa:	4628      	mov	r0, r5
	: __shared_count(__p)
   c5dac:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c5dae:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   c5db2:	f7ff ffcd 	bl	c5d50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   c5db6:	a802      	add	r0, sp, #8
   c5db8:	f7ff ff0d 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
            FutureBase(Error(error)) {
   c5dbc:	4668      	mov	r0, sp
   c5dbe:	f7ff ff0a 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
    }
   c5dc2:	4628      	mov	r0, r5
   c5dc4:	b004      	add	sp, #16
   c5dc6:	bd70      	pop	{r4, r5, r6, pc}

000c5dc8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   c5dc8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c5dca:	2300      	movs	r3, #0
   c5dcc:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c5dce:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c5dd0:	4604      	mov	r4, r0
   c5dd2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c5dd4:	b12b      	cbz	r3, c5de2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c5dd6:	2202      	movs	r2, #2
   c5dd8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c5dda:	68eb      	ldr	r3, [r5, #12]
   c5ddc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c5dde:	68ab      	ldr	r3, [r5, #8]
   c5de0:	60a3      	str	r3, [r4, #8]
    }
   c5de2:	4620      	mov	r0, r4
   c5de4:	bd38      	pop	{r3, r4, r5, pc}
	...

000c5de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   c5de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   c5dea:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   c5dec:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   c5dee:	4668      	mov	r0, sp
   c5df0:	f7ff fee4 	bl	c5bbc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c5df4:	f04f 0302 	mov.w	r3, #2
   c5df8:	e8d4 2f4f 	ldrexb	r2, [r4]
   c5dfc:	2a00      	cmp	r2, #0
   c5dfe:	d103      	bne.n	c5e08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   c5e00:	e8c4 3f41 	strexb	r1, r3, [r4]
   c5e04:	2900      	cmp	r1, #0
   c5e06:	d1f7      	bne.n	c5df8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   c5e08:	d125      	bne.n	c5e56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   c5e0a:	f104 050c 	add.w	r5, r4, #12
   c5e0e:	4669      	mov	r1, sp
   c5e10:	4628      	mov	r0, r5
   c5e12:	f7ff fed3 	bl	c5bbc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   c5e16:	f3bf 8f5b 	dmb	ish
   c5e1a:	2301      	movs	r3, #1
   c5e1c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c5e1e:	2000      	movs	r0, #0
   c5e20:	f104 0308 	add.w	r3, r4, #8
   c5e24:	f3bf 8f5b 	dmb	ish
   c5e28:	e853 6f00 	ldrex	r6, [r3]
   c5e2c:	e843 0200 	strex	r2, r0, [r3]
   c5e30:	2a00      	cmp	r2, #0
   c5e32:	d1f9      	bne.n	c5e28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   c5e34:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c5e38:	b16e      	cbz	r6, c5e56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   c5e3a:	f7ff fb13 	bl	c5464 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c5e3e:	b178      	cbz	r0, c5e60 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c5e40:	4629      	mov	r1, r5
   c5e42:	4630      	mov	r0, r6
   c5e44:	f7ff ff64 	bl	c5d10 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   c5e48:	4630      	mov	r0, r6
   c5e4a:	f7ff fc9e 	bl	c578a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c5e4e:	2110      	movs	r1, #16
   c5e50:	4630      	mov	r0, r6
   c5e52:	f7ef f91a 	bl	b508a <_ZdlPvj>
        p_->setError(std::move(error));
   c5e56:	4668      	mov	r0, sp
   c5e58:	f7ff febd 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
    }
   c5e5c:	b009      	add	sp, #36	; 0x24
   c5e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c5e60:	4631      	mov	r1, r6
   c5e62:	a802      	add	r0, sp, #8
   c5e64:	f7ff ffb0 	bl	c5dc8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c5e68:	68e0      	ldr	r0, [r4, #12]
   c5e6a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c5e6e:	b108      	cbz	r0, c5e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   c5e70:	f004 fa24 	bl	ca2bc <strdup>
        type_(type) {
   c5e74:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c5e76:	2010      	movs	r0, #16
   c5e78:	f8ad 501c 	strh.w	r5, [sp, #28]
   c5e7c:	f7ef f901 	bl	b5082 <_Znwj>
   c5e80:	4605      	mov	r5, r0
   c5e82:	b1e8      	cbz	r0, c5ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   c5e84:	2700      	movs	r7, #0
   c5e86:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c5e88:	2018      	movs	r0, #24
   c5e8a:	f7ef f8fa 	bl	b5082 <_Znwj>
   c5e8e:	4604      	mov	r4, r0
   c5e90:	b188      	cbz	r0, c5eb6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   c5e92:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   c5e94:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c5e96:	a802      	add	r0, sp, #8
   c5e98:	f7ff fc80 	bl	c579c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c5e9c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   c5e9e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c5ea0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c5ea2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c5ea4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c5ea6:	a906      	add	r1, sp, #24
   c5ea8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c5eaa:	60e3      	str	r3, [r4, #12]
   c5eac:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   c5eb0:	9205      	str	r2, [sp, #20]
   c5eb2:	f7ff fe83 	bl	c5bbc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   c5eb6:	4b08      	ldr	r3, [pc, #32]	; (c5ed8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   c5eb8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c5eba:	4b08      	ldr	r3, [pc, #32]	; (c5edc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c5ebc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c5ebe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   c5ec0:	a806      	add	r0, sp, #24
   c5ec2:	f7ff fe88 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c5ec6:	a802      	add	r0, sp, #8
   c5ec8:	f7ff fc5f 	bl	c578a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c5ecc:	2200      	movs	r2, #0
   c5ece:	4629      	mov	r1, r5
   c5ed0:	4803      	ldr	r0, [pc, #12]	; (c5ee0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   c5ed2:	f7ff facf 	bl	c5474 <application_thread_invoke>
   c5ed6:	e7b7      	b.n	c5e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   c5ed8:	000c5d23 	.word	0x000c5d23
   c5edc:	000c5fbd 	.word	0x000c5fbd
   c5ee0:	000c5763 	.word	0x000c5763

000c5ee4 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE>:
        PublishFlags flags) {
   c5ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c5ee8:	b08d      	sub	sp, #52	; 0x34
   c5eea:	4604      	mov	r4, r0
   c5eec:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
   c5ef0:	460e      	mov	r6, r1
   c5ef2:	4617      	mov	r7, r2
   c5ef4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   c5ef6:	f7ff fb0b 	bl	c5510 <spark_cloud_flag_connected>
    if (!connected()) {
   c5efa:	b940      	cbnz	r0, c5f0e <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x2a>
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   c5efc:	f06f 01d1 	mvn.w	r1, #209	; 0xd1
   c5f00:	4620      	mov	r0, r4
   c5f02:	f7ff ff39 	bl	c5d78 <_ZN8particle10FutureBaseIbNS_6detail13FutureContextEEC1ENS_5Error4TypeE>
}
   c5f06:	4620      	mov	r0, r4
   c5f08:	b00d      	add	sp, #52	; 0x34
   c5f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    d.content_type = static_cast<int>(type);
   c5f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d.data_size = size;
   c5f10:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    d.size = sizeof(spark_send_event_data);
   c5f14:	2014      	movs	r0, #20
    spark_send_event_data d = {};
   c5f16:	2500      	movs	r5, #0
   c5f18:	e9cd 5508 	strd	r5, r5, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   c5f1c:	9007      	str	r0, [sp, #28]
    d.content_type = static_cast<int>(type);
   c5f1e:	930b      	str	r3, [sp, #44]	; 0x2c
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   c5f20:	f7ef f8af 	bl	b5082 <_Znwj>
   c5f24:	4601      	mov	r1, r0
   c5f26:	b118      	cbz	r0, c5f30 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   c5f28:	e9c0 5501 	strd	r5, r5, [r0, #4]
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   c5f2c:	7005      	strb	r5, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   c5f2e:	7045      	strb	r5, [r0, #1]
	: __shared_count(__p)
   c5f30:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   c5f32:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   c5f34:	f7ff ff0c 	bl	c5d50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   c5f38:	4b1f      	ldr	r3, [pc, #124]	; (c5fb8 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xd4>)
   c5f3a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   c5f3c:	2008      	movs	r0, #8
   c5f3e:	f7ef f8a0 	bl	b5082 <_Znwj>
   c5f42:	4605      	mov	r5, r0
   c5f44:	b110      	cbz	r0, c5f4c <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x68>
   c5f46:	a903      	add	r1, sp, #12
   c5f48:	f7ff febe 	bl	c5cc8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
   c5f4c:	ab07      	add	r3, sp, #28
   c5f4e:	9300      	str	r3, [sp, #0]
   c5f50:	9a15      	ldr	r2, [sp, #84]	; 0x54
    d.handler_data = p.dataPtr();
   c5f52:	9509      	str	r5, [sp, #36]	; 0x24
    if (!spark_send_event(name, data, ttl, flags.value(), &d) && !p.isDone()) {
   c5f54:	fa5f f388 	uxtb.w	r3, r8
   c5f58:	4639      	mov	r1, r7
   c5f5a:	4630      	mov	r0, r6
   c5f5c:	f7ff fae8 	bl	c5530 <spark_send_event>
   c5f60:	b9b8      	cbnz	r0, c5f92 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
	return __atomic_load_n(&_M_i, int(__m));
   c5f62:	9b03      	ldr	r3, [sp, #12]
   c5f64:	785b      	ldrb	r3, [r3, #1]
   c5f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   c5f6a:	b993      	cbnz	r3, c5f92 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0xae>
        type_(type) {
   c5f6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   c5f70:	a905      	add	r1, sp, #20
   c5f72:	a803      	add	r0, sp, #12
   c5f74:	9205      	str	r2, [sp, #20]
   c5f76:	f8ad 3018 	strh.w	r3, [sp, #24]
   c5f7a:	f7ff ff35 	bl	c5de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c5f7e:	a805      	add	r0, sp, #20
   c5f80:	f7ff fe29 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   c5f84:	a805      	add	r0, sp, #20
   c5f86:	9909      	ldr	r1, [sp, #36]	; 0x24
   c5f88:	f7ff fea7 	bl	c5cda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   c5f8c:	a806      	add	r0, sp, #24
   c5f8e:	f7ff fbd2 	bl	c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c5f92:	a903      	add	r1, sp, #12
   c5f94:	a805      	add	r0, sp, #20
   c5f96:	f7ff fe97 	bl	c5cc8 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   c5f9a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   c5f9c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   c5f9e:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   c5fa0:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   c5fa2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   c5fa4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   c5fa6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   c5fa8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   c5faa:	f7ff fbc4 	bl	c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   c5fae:	a804      	add	r0, sp, #16
   c5fb0:	f7ff fbc1 	bl	c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   c5fb4:	e7a7      	b.n	c5f06 <_ZN10CloudClass13publish_eventEPKcS1_jiiN8particle5FlagsI15PublishFlagTypehEE+0x22>
   c5fb6:	bf00      	nop
   c5fb8:	000c6081 	.word	0x000c6081

000c5fbc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   c5fbc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c5fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c5fc0:	4605      	mov	r5, r0
	switch (__op)
   c5fc2:	d103      	bne.n	c5fcc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c5fc4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c5fc6:	6003      	str	r3, [r0, #0]
      }
   c5fc8:	2000      	movs	r0, #0
   c5fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   c5fcc:	2a02      	cmp	r2, #2
   c5fce:	d010      	beq.n	c5ff2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   c5fd0:	2a03      	cmp	r2, #3
   c5fd2:	d1f9      	bne.n	c5fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c5fd4:	6804      	ldr	r4, [r0, #0]
   c5fd6:	2c00      	cmp	r4, #0
   c5fd8:	d0f6      	beq.n	c5fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   c5fda:	f104 0010 	add.w	r0, r4, #16
   c5fde:	f7ff fdfa 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   c5fe2:	4620      	mov	r0, r4
   c5fe4:	f7ff fbd1 	bl	c578a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c5fe8:	2118      	movs	r1, #24
   c5fea:	4620      	mov	r0, r4
   c5fec:	f7ef f84d 	bl	b508a <_ZdlPvj>
   c5ff0:	e7ea      	b.n	c5fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c5ff2:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   c5ff4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c5ff6:	f7ef f844 	bl	b5082 <_Znwj>
   c5ffa:	4604      	mov	r4, r0
   c5ffc:	b150      	cbz	r0, c6014 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   c5ffe:	4631      	mov	r1, r6
   c6000:	f7ff fee2 	bl	c5dc8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   c6004:	6930      	ldr	r0, [r6, #16]
   c6006:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c600a:	b108      	cbz	r0, c6010 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   c600c:	f004 f956 	bl	ca2bc <strdup>
        type_(type) {
   c6010:	6120      	str	r0, [r4, #16]
   c6012:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   c6014:	602c      	str	r4, [r5, #0]
	}
   c6016:	e7d7      	b.n	c5fc8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000c6018 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   c6018:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   c601a:	2300      	movs	r3, #0
   c601c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   c601e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   c6020:	4604      	mov	r4, r0
   c6022:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   c6024:	b12b      	cbz	r3, c6032 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   c6026:	2202      	movs	r2, #2
   c6028:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   c602a:	68eb      	ldr	r3, [r5, #12]
   c602c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   c602e:	68ab      	ldr	r3, [r5, #8]
   c6030:	60a3      	str	r3, [r4, #8]
    }
   c6032:	4620      	mov	r0, r4
   c6034:	bd38      	pop	{r3, r4, r5, pc}

000c6036 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   c6036:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   c6038:	b570      	push	{r4, r5, r6, lr}
   c603a:	4604      	mov	r4, r0
	switch (__op)
   c603c:	d103      	bne.n	c6046 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   c603e:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   c6040:	6003      	str	r3, [r0, #0]
      }
   c6042:	2000      	movs	r0, #0
   c6044:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   c6046:	2a02      	cmp	r2, #2
   c6048:	d00c      	beq.n	c6064 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   c604a:	2a03      	cmp	r2, #3
   c604c:	d1f9      	bne.n	c6042 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   c604e:	6804      	ldr	r4, [r0, #0]
   c6050:	2c00      	cmp	r4, #0
   c6052:	d0f6      	beq.n	c6042 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   c6054:	4620      	mov	r0, r4
   c6056:	f7ff fb98 	bl	c578a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   c605a:	2114      	movs	r1, #20
   c605c:	4620      	mov	r0, r4
   c605e:	f7ef f814 	bl	b508a <_ZdlPvj>
   c6062:	e7ee      	b.n	c6042 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   c6064:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   c6066:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   c6068:	f7ef f80b 	bl	b5082 <_Znwj>
   c606c:	4605      	mov	r5, r0
   c606e:	b120      	cbz	r0, c607a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
   c6070:	4631      	mov	r1, r6
   c6072:	f7ff ffd1 	bl	c6018 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   c6076:	7c33      	ldrb	r3, [r6, #16]
   c6078:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   c607a:	6025      	str	r5, [r4, #0]
	}
   c607c:	e7e1      	b.n	c6042 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	...

000c6080 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   c6080:	b5f0      	push	{r4, r5, r6, r7, lr}
   c6082:	b089      	sub	sp, #36	; 0x24
   c6084:	4604      	mov	r4, r0
   c6086:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   c6088:	a801      	add	r0, sp, #4
   c608a:	4611      	mov	r1, r2
   c608c:	f7ff fe25 	bl	c5cda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   c6090:	b1a4      	cbz	r4, c60bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   c6092:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   c6094:	b11d      	cbz	r5, c609e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   c6096:	4628      	mov	r0, r5
   c6098:	f004 f910 	bl	ca2bc <strdup>
   c609c:	4605      	mov	r5, r0
   c609e:	a801      	add	r0, sp, #4
   c60a0:	a903      	add	r1, sp, #12
        type_(type) {
   c60a2:	9503      	str	r5, [sp, #12]
   c60a4:	f8ad 4010 	strh.w	r4, [sp, #16]
   c60a8:	f7ff fe9e 	bl	c5de8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   c60ac:	a803      	add	r0, sp, #12
   c60ae:	f7ff fd92 	bl	c5bd6 <_ZN8particle5ErrorD1Ev>
   c60b2:	a802      	add	r0, sp, #8
   c60b4:	f7ff fb3f 	bl	c5736 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   c60b8:	b009      	add	sp, #36	; 0x24
   c60ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   c60bc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   c60be:	2301      	movs	r3, #1
   c60c0:	e8d5 2f4f 	ldrexb	r2, [r5]
   c60c4:	2a00      	cmp	r2, #0
   c60c6:	d103      	bne.n	c60d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   c60c8:	e8c5 3f41 	strexb	r1, r3, [r5]
   c60cc:	2900      	cmp	r1, #0
   c60ce:	d1f7      	bne.n	c60c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   c60d0:	d1ef      	bne.n	c60b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   c60d2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   c60d4:	f3bf 8f5b 	dmb	ish
   c60d8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   c60da:	1d2b      	adds	r3, r5, #4
   c60dc:	f3bf 8f5b 	dmb	ish
   c60e0:	e853 6f00 	ldrex	r6, [r3]
   c60e4:	e843 4200 	strex	r2, r4, [r3]
   c60e8:	2a00      	cmp	r2, #0
   c60ea:	d1f9      	bne.n	c60e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   c60ec:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   c60f0:	2e00      	cmp	r6, #0
   c60f2:	d0de      	beq.n	c60b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   c60f4:	4620      	mov	r0, r4
   c60f6:	f7ff f9b5 	bl	c5464 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   c60fa:	4607      	mov	r7, r0
   c60fc:	b160      	cbz	r0, c6118 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   c60fe:	f105 010c 	add.w	r1, r5, #12
   c6102:	4630      	mov	r0, r6
   c6104:	f7ff fe14 	bl	c5d30 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   c6108:	4630      	mov	r0, r6
   c610a:	f7ff fb3e 	bl	c578a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   c610e:	2110      	movs	r1, #16
   c6110:	4630      	mov	r0, r6
   c6112:	f7ee ffba 	bl	b508a <_ZdlPvj>
   c6116:	e7cc      	b.n	c60b2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   c6118:	4631      	mov	r1, r6
   c611a:	a803      	add	r0, sp, #12
   c611c:	f7ff ff7c 	bl	c6018 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   c6120:	7b2b      	ldrb	r3, [r5, #12]
   c6122:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   c6126:	2010      	movs	r0, #16
   c6128:	f7ee ffab 	bl	b5082 <_Znwj>
   c612c:	4605      	mov	r5, r0
   c612e:	b1d0      	cbz	r0, c6166 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   c6130:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c6132:	2014      	movs	r0, #20
   c6134:	f7ee ffa5 	bl	b5082 <_Znwj>
   c6138:	4604      	mov	r4, r0
   c613a:	b178      	cbz	r0, c615c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   c613c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   c613e:	4601      	mov	r1, r0
   c6140:	a803      	add	r0, sp, #12
   c6142:	f7ff fb2b 	bl	c579c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c6146:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   c6148:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   c614a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   c614c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   c614e:	9205      	str	r2, [sp, #20]
   c6150:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   c6152:	60e3      	str	r3, [r4, #12]
   c6154:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   c6158:	9206      	str	r2, [sp, #24]
   c615a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   c615c:	4b06      	ldr	r3, [pc, #24]	; (c6178 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   c615e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   c6160:	4b06      	ldr	r3, [pc, #24]	; (c617c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   c6162:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   c6164:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   c6166:	a803      	add	r0, sp, #12
   c6168:	f7ff fb0f 	bl	c578a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   c616c:	2200      	movs	r2, #0
   c616e:	4629      	mov	r1, r5
   c6170:	4803      	ldr	r0, [pc, #12]	; (c6180 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   c6172:	f7ff f97f 	bl	c5474 <application_thread_invoke>
   c6176:	e7c7      	b.n	c6108 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   c6178:	000c5d43 	.word	0x000c5d43
   c617c:	000c6037 	.word	0x000c6037
   c6180:	000c5763 	.word	0x000c5763

000c6184 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c6184:	2200      	movs	r2, #0
   c6186:	6840      	ldr	r0, [r0, #4]
   c6188:	4611      	mov	r1, r2
   c618a:	f7ff ba39 	b.w	c5600 <network_listening>

000c618e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c618e:	2200      	movs	r2, #0
   c6190:	6840      	ldr	r0, [r0, #4]
   c6192:	4611      	mov	r1, r2
   c6194:	f7ff ba44 	b.w	c5620 <network_get_listen_timeout>

000c6198 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c6198:	6840      	ldr	r0, [r0, #4]
   c619a:	2200      	movs	r2, #0
   c619c:	f7ff ba38 	b.w	c5610 <network_set_listen_timeout>

000c61a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c61a0:	6840      	ldr	r0, [r0, #4]
   c61a2:	2200      	movs	r2, #0
   c61a4:	f081 0101 	eor.w	r1, r1, #1
   c61a8:	f7ff ba22 	b.w	c55f0 <network_listen>

000c61ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c61ac:	2300      	movs	r3, #0
   c61ae:	6840      	ldr	r0, [r0, #4]
   c61b0:	461a      	mov	r2, r3
   c61b2:	4619      	mov	r1, r3
   c61b4:	f7ff ba14 	b.w	c55e0 <network_off>

000c61b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c61b8:	2300      	movs	r3, #0
   c61ba:	6840      	ldr	r0, [r0, #4]
   c61bc:	461a      	mov	r2, r3
   c61be:	4619      	mov	r1, r3
   c61c0:	f7ff ba06 	b.w	c55d0 <network_on>

000c61c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   c61c4:	2200      	movs	r2, #0
   c61c6:	6840      	ldr	r0, [r0, #4]
   c61c8:	4611      	mov	r1, r2
   c61ca:	f7ff b9f9 	b.w	c55c0 <network_ready>

000c61ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c61ce:	2200      	movs	r2, #0
   c61d0:	6840      	ldr	r0, [r0, #4]
   c61d2:	4611      	mov	r1, r2
   c61d4:	f7ff b9e4 	b.w	c55a0 <network_connecting>

000c61d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c61d8:	6840      	ldr	r0, [r0, #4]
   c61da:	2200      	movs	r2, #0
   c61dc:	2102      	movs	r1, #2
   c61de:	f7ff b9e7 	b.w	c55b0 <network_disconnect>

000c61e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c61e2:	2300      	movs	r3, #0
   c61e4:	6840      	ldr	r0, [r0, #4]
   c61e6:	461a      	mov	r2, r3
   c61e8:	f7ff b9d2 	b.w	c5590 <network_connect>

000c61ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   c61ec:	4b02      	ldr	r3, [pc, #8]	; (c61f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   c61ee:	2203      	movs	r2, #3
   c61f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   c61f2:	4a02      	ldr	r2, [pc, #8]	; (c61fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   c61f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   c61f6:	4770      	bx	lr
   c61f8:	2003e660 	.word	0x2003e660
   c61fc:	000cce5c 	.word	0x000cce5c

000c6200 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   c6200:	4770      	bx	lr

000c6202 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   c6202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c6204:	4606      	mov	r6, r0
   c6206:	4615      	mov	r5, r2
   c6208:	460c      	mov	r4, r1
   c620a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   c620c:	42bc      	cmp	r4, r7
   c620e:	d006      	beq.n	c621e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   c6210:	6833      	ldr	r3, [r6, #0]
   c6212:	f814 1b01 	ldrb.w	r1, [r4], #1
   c6216:	689b      	ldr	r3, [r3, #8]
   c6218:	4630      	mov	r0, r6
   c621a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   c621c:	e7f6      	b.n	c620c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   c621e:	4628      	mov	r0, r5
   c6220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c6222 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   c6222:	7c00      	ldrb	r0, [r0, #16]
   c6224:	2200      	movs	r2, #0
   c6226:	f7fe bfa3 	b.w	c5170 <hal_i2c_write>

000c622a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   c622a:	7c00      	ldrb	r0, [r0, #16]
   c622c:	2100      	movs	r1, #0
   c622e:	f7fe bfa7 	b.w	c5180 <hal_i2c_available>

000c6232 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   c6232:	7c00      	ldrb	r0, [r0, #16]
   c6234:	2100      	movs	r1, #0
   c6236:	f7fe bfab 	b.w	c5190 <hal_i2c_read>

000c623a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   c623a:	7c00      	ldrb	r0, [r0, #16]
   c623c:	2100      	movs	r1, #0
   c623e:	f7fe bfaf 	b.w	c51a0 <hal_i2c_peek>

000c6242 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   c6242:	7c00      	ldrb	r0, [r0, #16]
   c6244:	2100      	movs	r1, #0
   c6246:	f7fe bfb3 	b.w	c51b0 <hal_i2c_flush>

000c624a <_ZN7TwoWireD0Ev>:
   c624a:	b510      	push	{r4, lr}
   c624c:	2114      	movs	r1, #20
   c624e:	4604      	mov	r4, r0
   c6250:	f7ee ff1b 	bl	b508a <_ZdlPvj>
   c6254:	4620      	mov	r0, r4
   c6256:	bd10      	pop	{r4, pc}

000c6258 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c6258:	b538      	push	{r3, r4, r5, lr}
   c625a:	4604      	mov	r4, r0
   c625c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   c625e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c6262:	2200      	movs	r2, #0
   c6264:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c6268:	4b09      	ldr	r3, [pc, #36]	; (c6290 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   c626a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   c626c:	4608      	mov	r0, r1
   c626e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   c6270:	4629      	mov	r1, r5
   c6272:	f7fe ffad 	bl	c51d0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   c6276:	30bf      	adds	r0, #191	; 0xbf
   c6278:	d108      	bne.n	c628c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   c627a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   c627c:	07db      	lsls	r3, r3, #31
   c627e:	d505      	bpl.n	c628c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   c6280:	6868      	ldr	r0, [r5, #4]
   c6282:	f7ff f9fd 	bl	c5680 <free>
    free(conf.tx_buffer);
   c6286:	68e8      	ldr	r0, [r5, #12]
   c6288:	f7ff f9fa 	bl	c5680 <free>
}
   c628c:	4620      	mov	r0, r4
   c628e:	bd38      	pop	{r3, r4, r5, pc}
   c6290:	000ccea0 	.word	0x000ccea0

000c6294 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   c6294:	7c00      	ldrb	r0, [r0, #16]
   c6296:	2200      	movs	r2, #0
   c6298:	f7fe bf4a 	b.w	c5130 <hal_i2c_set_speed>

000c629c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   c629c:	2300      	movs	r3, #0
   c629e:	7c00      	ldrb	r0, [r0, #16]
   c62a0:	461a      	mov	r2, r3
   c62a2:	4619      	mov	r1, r3
   c62a4:	f7fe bf4c 	b.w	c5140 <hal_i2c_begin>

000c62a8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   c62a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c62aa:	2200      	movs	r2, #0
   c62ac:	2318      	movs	r3, #24
   c62ae:	e9cd 2200 	strd	r2, r2, [sp]
   c62b2:	f8ad 3000 	strh.w	r3, [sp]
    };
   c62b6:	780b      	ldrb	r3, [r1, #0]
   c62b8:	f88d 3004 	strb.w	r3, [sp, #4]
   c62bc:	684b      	ldr	r3, [r1, #4]
   c62be:	9302      	str	r3, [sp, #8]
   c62c0:	68cb      	ldr	r3, [r1, #12]
   c62c2:	9303      	str	r3, [sp, #12]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
   c62c4:	7a0b      	ldrb	r3, [r1, #8]
   c62c6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   c62c8:	7c00      	ldrb	r0, [r0, #16]
    };
   c62ca:	690b      	ldr	r3, [r1, #16]
   c62cc:	9305      	str	r3, [sp, #20]
   c62ce:	4669      	mov	r1, sp
   c62d0:	f7fe ff96 	bl	c5200 <hal_i2c_request_ex>
}
   c62d4:	b007      	add	sp, #28
   c62d6:	f85d fb04 	ldr.w	pc, [sp], #4

000c62da <_ZN7TwoWire11requestFromEhjh>:
{
   c62da:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        buffer_(nullptr) {
   c62dc:	f88d 1004 	strb.w	r1, [sp, #4]
   c62e0:	2100      	movs	r1, #0
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   c62e2:	1a5b      	subs	r3, r3, r1
   c62e4:	f04f 0c64 	mov.w	ip, #100	; 0x64
   c62e8:	e9cd c104 	strd	ip, r1, [sp, #16]
   c62ec:	bf18      	it	ne
   c62ee:	2301      	movne	r3, #1
   c62f0:	a901      	add	r1, sp, #4
    size_ = size;
   c62f2:	9202      	str	r2, [sp, #8]
   c62f4:	f88d 300c 	strb.w	r3, [sp, #12]
   c62f8:	f7ff ffd6 	bl	c62a8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   c62fc:	b007      	add	sp, #28
   c62fe:	f85d fb04 	ldr.w	pc, [sp], #4

000c6302 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   c6302:	2301      	movs	r3, #1
   c6304:	f7ff bfe9 	b.w	c62da <_ZN7TwoWire11requestFromEhjh>

000c6308 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   c6308:	7c00      	ldrb	r0, [r0, #16]
   c630a:	2200      	movs	r2, #0
   c630c:	f7fe bf20 	b.w	c5150 <hal_i2c_begin_transmission>

000c6310 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   c6310:	b2c9      	uxtb	r1, r1
   c6312:	f7ff bff9 	b.w	c6308 <_ZN7TwoWire17beginTransmissionEh>

000c6316 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   c6316:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   c6318:	2300      	movs	r3, #0
    };
   c631a:	684a      	ldr	r2, [r1, #4]
   c631c:	9202      	str	r2, [sp, #8]
    hal_i2c_transmission_config_t conf = {
   c631e:	e9cd 3300 	strd	r3, r3, [sp]
    };
   c6322:	68ca      	ldr	r2, [r1, #12]
   c6324:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   c6326:	2318      	movs	r3, #24
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
   c6328:	7a0a      	ldrb	r2, [r1, #8]
    hal_i2c_transmission_config_t conf = {
   c632a:	f8ad 3000 	strh.w	r3, [sp]
      .address = address_,
   c632e:	780b      	ldrb	r3, [r1, #0]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0),
   c6330:	9204      	str	r2, [sp, #16]
    };
   c6332:	690a      	ldr	r2, [r1, #16]
   c6334:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   c6336:	7c00      	ldrb	r0, [r0, #16]
   c6338:	f88d 3004 	strb.w	r3, [sp, #4]
   c633c:	466a      	mov	r2, sp
   c633e:	4619      	mov	r1, r3
   c6340:	f7fe ff06 	bl	c5150 <hal_i2c_begin_transmission>
}
   c6344:	b007      	add	sp, #28
   c6346:	f85d fb04 	ldr.w	pc, [sp], #4

000c634a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   c634a:	7c00      	ldrb	r0, [r0, #16]
   c634c:	2200      	movs	r2, #0
   c634e:	f7fe bf07 	b.w	c5160 <hal_i2c_end_transmission>

000c6352 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   c6352:	2101      	movs	r1, #1
   c6354:	f7ff bff9 	b.w	c634a <_ZN7TwoWire15endTransmissionEh>

000c6358 <_ZN7TwoWire4lockEv>:
{
  return hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   c6358:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   c635a:	2100      	movs	r1, #0
   c635c:	7c00      	ldrb	r0, [r0, #16]
   c635e:	f7fe ff3f 	bl	c51e0 <hal_i2c_lock>
}
   c6362:	fab0 f080 	clz	r0, r0
   c6366:	0940      	lsrs	r0, r0, #5
   c6368:	bd08      	pop	{r3, pc}

000c636a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   c636a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   c636c:	2100      	movs	r1, #0
   c636e:	7c00      	ldrb	r0, [r0, #16]
   c6370:	f7fe ff3e 	bl	c51f0 <hal_i2c_unlock>
}
   c6374:	fab0 f080 	clz	r0, r0
   c6378:	0940      	lsrs	r0, r0, #5
   c637a:	bd08      	pop	{r3, pc}

000c637c <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
      : address_{address},
   c637c:	4b05      	ldr	r3, [pc, #20]	; (c6394 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
   c637e:	21ff      	movs	r1, #255	; 0xff
   c6380:	2200      	movs	r2, #0
   c6382:	e9c3 1200 	strd	r1, r2, [r3]
   c6386:	2001      	movs	r0, #1
   c6388:	2164      	movs	r1, #100	; 0x64
   c638a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   c638e:	611a      	str	r2, [r3, #16]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
   c6390:	4770      	bx	lr
   c6392:	bf00      	nop
   c6394:	2003e668 	.word	0x2003e668

000c6398 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   c6398:	4700      	bx	r0
	...

000c639c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   c639c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    hal_interrupt_detach(pin);
    hal_interrupt_extra_configuration_t extra = {};
   c63a0:	2400      	movs	r4, #0
{
   c63a2:	461d      	mov	r5, r3
   c63a4:	460f      	mov	r7, r1
   c63a6:	4690      	mov	r8, r2
   c63a8:	4606      	mov	r6, r0
    hal_interrupt_detach(pin);
   c63aa:	f7fe feb1 	bl	c5110 <hal_interrupt_detach>
  if (priority >= 0) {
   c63ae:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c63b0:	f04f 0304 	mov.w	r3, #4
    hal_interrupt_extra_configuration_t extra = {};
   c63b4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   c63b8:	f88d 300c 	strb.w	r3, [sp, #12]
    hal_interrupt_extra_configuration_t extra = {};
   c63bc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   c63c0:	bfa2      	ittt	ge
   c63c2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   c63c6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   c63ca:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c63cc:	4907      	ldr	r1, [pc, #28]	; (c63ec <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   c63ce:	9400      	str	r4, [sp, #0]
   c63d0:	4643      	mov	r3, r8
   c63d2:	463a      	mov	r2, r7
   c63d4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   c63d6:	bfa8      	it	ge
   c63d8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != hal_interrupt_attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   c63dc:	f7fe fe90 	bl	c5100 <hal_interrupt_attach>
        return false;
    }
    return true;
}
   c63e0:	fab0 f080 	clz	r0, r0
   c63e4:	0940      	lsrs	r0, r0, #5
   c63e6:	b004      	add	sp, #16
   c63e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c63ec:	000c6399 	.word	0x000c6399

000c63f0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   c63f0:	4770      	bx	lr

000c63f2 <_ZN9IPAddressD0Ev>:
   c63f2:	b510      	push	{r4, lr}
   c63f4:	2118      	movs	r1, #24
   c63f6:	4604      	mov	r4, r0
   c63f8:	f7ee fe47 	bl	b508a <_ZdlPvj>
   c63fc:	4620      	mov	r0, r4
   c63fe:	bd10      	pop	{r4, pc}

000c6400 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   c6400:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   c6402:	7d03      	ldrb	r3, [r0, #20]
   c6404:	2b06      	cmp	r3, #6
{
   c6406:	b08d      	sub	sp, #52	; 0x34
   c6408:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c640a:	f100 0704 	add.w	r7, r0, #4
   c640e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   c6412:	d012      	beq.n	c643a <_ZNK9IPAddress7printToER5Print+0x3a>
   c6414:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   c6418:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   c641c:	220a      	movs	r2, #10
   c641e:	4630      	mov	r0, r6
   c6420:	f000 fb73 	bl	c6b0a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   c6424:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   c6426:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   c6428:	d019      	beq.n	c645e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   c642a:	2c00      	cmp	r4, #0
   c642c:	d0f4      	beq.n	c6418 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   c642e:	212e      	movs	r1, #46	; 0x2e
   c6430:	4630      	mov	r0, r6
   c6432:	f000 fb4d 	bl	c6ad0 <_ZN5Print5printEc>
   c6436:	4404      	add	r4, r0
   c6438:	e7ee      	b.n	c6418 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c643a:	232f      	movs	r3, #47	; 0x2f
   c643c:	466a      	mov	r2, sp
   c643e:	4639      	mov	r1, r7
   c6440:	200a      	movs	r0, #10
		buf[0] = 0;
   c6442:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   c6446:	f7fe fee3 	bl	c5210 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   c644a:	4668      	mov	r0, sp
   c644c:	f7ee fdd6 	bl	b4ffc <strlen>
   c6450:	6833      	ldr	r3, [r6, #0]
   c6452:	4602      	mov	r2, r0
   c6454:	68db      	ldr	r3, [r3, #12]
   c6456:	4669      	mov	r1, sp
   c6458:	4630      	mov	r0, r6
   c645a:	4798      	blx	r3
   c645c:	4604      	mov	r4, r0
    }
    return n;
}
   c645e:	4620      	mov	r0, r4
   c6460:	b00d      	add	sp, #52	; 0x34
   c6462:	bdf0      	pop	{r4, r5, r6, r7, pc}

000c6464 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   c6464:	b510      	push	{r4, lr}
   c6466:	4b05      	ldr	r3, [pc, #20]	; (c647c <_ZN9IPAddressC1Ev+0x18>)
   c6468:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   c646a:	2211      	movs	r2, #17
   c646c:	f840 3b04 	str.w	r3, [r0], #4
   c6470:	2100      	movs	r1, #0
   c6472:	f003 fea7 	bl	ca1c4 <memset>
}
   c6476:	4620      	mov	r0, r4
   c6478:	bd10      	pop	{r4, pc}
   c647a:	bf00      	nop
   c647c:	000ccecc 	.word	0x000ccecc

000c6480 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   c6480:	4603      	mov	r3, r0
   c6482:	4a07      	ldr	r2, [pc, #28]	; (c64a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   c6484:	b510      	push	{r4, lr}
   c6486:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   c648a:	f101 0210 	add.w	r2, r1, #16
   c648e:	f851 4b04 	ldr.w	r4, [r1], #4
   c6492:	f843 4b04 	str.w	r4, [r3], #4
   c6496:	4291      	cmp	r1, r2
   c6498:	d1f9      	bne.n	c648e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   c649a:	780a      	ldrb	r2, [r1, #0]
   c649c:	701a      	strb	r2, [r3, #0]
}
   c649e:	bd10      	pop	{r4, pc}
   c64a0:	000ccecc 	.word	0x000ccecc

000c64a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   c64a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   c64a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   c64aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   c64ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   c64b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   c64b6:	2304      	movs	r3, #4
   c64b8:	6041      	str	r1, [r0, #4]
   c64ba:	7503      	strb	r3, [r0, #20]
}
   c64bc:	bd10      	pop	{r4, pc}
	...

000c64c0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   c64c0:	b507      	push	{r0, r1, r2, lr}
   c64c2:	4b06      	ldr	r3, [pc, #24]	; (c64dc <_ZN9IPAddressC1EPKh+0x1c>)
   c64c4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   c64c6:	78cb      	ldrb	r3, [r1, #3]
   c64c8:	9300      	str	r3, [sp, #0]
   c64ca:	788b      	ldrb	r3, [r1, #2]
   c64cc:	784a      	ldrb	r2, [r1, #1]
   c64ce:	7809      	ldrb	r1, [r1, #0]
   c64d0:	f7ff ffe8 	bl	c64a4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   c64d4:	b003      	add	sp, #12
   c64d6:	f85d fb04 	ldr.w	pc, [sp], #4
   c64da:	bf00      	nop
   c64dc:	000ccecc 	.word	0x000ccecc

000c64e0 <_ZN5spark16JSONBufferWriterD1Ev>:
private:
    Print &strm_;
    size_t bytesWritten_;
};

class JSONBufferWriter: public JSONWriter {
   c64e0:	4770      	bx	lr

000c64e2 <_ZN5spark16JSONBufferWriterD0Ev>:
   c64e2:	b510      	push	{r4, lr}
   c64e4:	2114      	movs	r1, #20
   c64e6:	4604      	mov	r4, r0
   c64e8:	f7ee fdcf 	bl	b508a <_ZdlPvj>
   c64ec:	4620      	mov	r0, r4
   c64ee:	bd10      	pop	{r4, pc}

000c64f0 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   c64f0:	b538      	push	{r3, r4, r5, lr}
   c64f2:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
   c64f4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   c64f8:	4293      	cmp	r3, r2
void spark::JSONBufferWriter::write(const char *data, size_t size) {
   c64fa:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
   c64fc:	d207      	bcs.n	c650e <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
   c64fe:	1ad2      	subs	r2, r2, r3
   c6500:	6880      	ldr	r0, [r0, #8]
   c6502:	42aa      	cmp	r2, r5
   c6504:	bf28      	it	cs
   c6506:	462a      	movcs	r2, r5
   c6508:	4418      	add	r0, r3
   c650a:	f003 fe4d 	bl	ca1a8 <memcpy>
    }
    n_ += size;
   c650e:	6922      	ldr	r2, [r4, #16]
   c6510:	442a      	add	r2, r5
   c6512:	6122      	str	r2, [r4, #16]
}
   c6514:	bd38      	pop	{r3, r4, r5, pc}

000c6516 <_ZN5spark16JSONBufferWriter6printfEPKcz>:

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
   c6516:	b40e      	push	{r1, r2, r3}
   c6518:	b517      	push	{r0, r1, r2, r4, lr}
   c651a:	ab05      	add	r3, sp, #20
   c651c:	4604      	mov	r4, r0
   c651e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   c6522:	68e1      	ldr	r1, [r4, #12]
    va_start(args, fmt);
   c6524:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
   c6526:	6903      	ldr	r3, [r0, #16]
   c6528:	6880      	ldr	r0, [r0, #8]
   c652a:	428b      	cmp	r3, r1
   c652c:	bf38      	it	cc
   c652e:	1ac9      	subcc	r1, r1, r3
   c6530:	4418      	add	r0, r3
   c6532:	bf28      	it	cs
   c6534:	2100      	movcs	r1, #0
   c6536:	9b01      	ldr	r3, [sp, #4]
   c6538:	f7ff f8c2 	bl	c56c0 <vsnprintf>
    va_end(args);
    n_ += n;
   c653c:	6923      	ldr	r3, [r4, #16]
   c653e:	4418      	add	r0, r3
   c6540:	6120      	str	r0, [r4, #16]
}
   c6542:	b003      	add	sp, #12
   c6544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c6548:	b003      	add	sp, #12
   c654a:	4770      	bx	lr

000c654c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   c654c:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   c654e:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   c6550:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   c6554:	689b      	ldr	r3, [r3, #8]
   c6556:	2201      	movs	r2, #1
   c6558:	f10d 0107 	add.w	r1, sp, #7
   c655c:	4798      	blx	r3
}
   c655e:	b003      	add	sp, #12
   c6560:	f85d fb04 	ldr.w	pc, [sp], #4

000c6564 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   c6564:	b510      	push	{r4, lr}
    write('}');
   c6566:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   c6568:	4604      	mov	r4, r0
    write('}');
   c656a:	f7ff ffef 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   c656e:	2301      	movs	r3, #1
   c6570:	7123      	strb	r3, [r4, #4]
}
   c6572:	4620      	mov	r0, r4
   c6574:	bd10      	pop	{r4, pc}

000c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>:
void spark::JSONWriter::writeSeparator() {
   c6576:	b508      	push	{r3, lr}
    switch (state_) {
   c6578:	7903      	ldrb	r3, [r0, #4]
   c657a:	2b01      	cmp	r3, #1
   c657c:	d002      	beq.n	c6584 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   c657e:	2b02      	cmp	r3, #2
   c6580:	d004      	beq.n	c658c <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
}
   c6582:	bd08      	pop	{r3, pc}
        write(',');
   c6584:	212c      	movs	r1, #44	; 0x2c
        write(':');
   c6586:	f7ff ffe1 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
}
   c658a:	e7fa      	b.n	c6582 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   c658c:	213a      	movs	r1, #58	; 0x3a
   c658e:	e7fa      	b.n	c6586 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000c6590 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   c6590:	b510      	push	{r4, lr}
   c6592:	4604      	mov	r4, r0
    writeSeparator();
   c6594:	f7ff ffef 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   c6598:	4620      	mov	r0, r4
   c659a:	217b      	movs	r1, #123	; 0x7b
   c659c:	f7ff ffd6 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   c65a0:	2300      	movs	r3, #0
   c65a2:	7123      	strb	r3, [r4, #4]
}
   c65a4:	4620      	mov	r0, r4
   c65a6:	bd10      	pop	{r4, pc}

000c65a8 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   c65a8:	b513      	push	{r0, r1, r4, lr}
   c65aa:	4604      	mov	r4, r0
   c65ac:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c65ae:	f7ff ffe2 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   c65b2:	6823      	ldr	r3, [r4, #0]
   c65b4:	9a01      	ldr	r2, [sp, #4]
   c65b6:	68db      	ldr	r3, [r3, #12]
   c65b8:	4903      	ldr	r1, [pc, #12]	; (c65c8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   c65ba:	4620      	mov	r0, r4
   c65bc:	4798      	blx	r3
    state_ = NEXT;
   c65be:	2301      	movs	r3, #1
}
   c65c0:	4620      	mov	r0, r4
    state_ = NEXT;
   c65c2:	7123      	strb	r3, [r4, #4]
}
   c65c4:	b002      	add	sp, #8
   c65c6:	bd10      	pop	{r4, pc}
   c65c8:	000cae37 	.word	0x000cae37

000c65cc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   c65cc:	b513      	push	{r0, r1, r4, lr}
   c65ce:	4604      	mov	r4, r0
   c65d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c65d2:	f7ff ffd0 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   c65d6:	6823      	ldr	r3, [r4, #0]
   c65d8:	9a01      	ldr	r2, [sp, #4]
   c65da:	68db      	ldr	r3, [r3, #12]
   c65dc:	4903      	ldr	r1, [pc, #12]	; (c65ec <_ZN5spark10JSONWriter5valueEj+0x20>)
   c65de:	4620      	mov	r0, r4
   c65e0:	4798      	blx	r3
    state_ = NEXT;
   c65e2:	2301      	movs	r3, #1
}
   c65e4:	4620      	mov	r0, r4
    state_ = NEXT;
   c65e6:	7123      	strb	r3, [r4, #4]
}
   c65e8:	b002      	add	sp, #8
   c65ea:	bd10      	pop	{r4, pc}
   c65ec:	000cced8 	.word	0x000cced8

000c65f0 <_ZN5spark10JSONWriter5valueEm>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long val) {
   c65f0:	b513      	push	{r0, r1, r4, lr}
   c65f2:	4604      	mov	r4, r0
   c65f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   c65f6:	f7ff ffbe 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lu", val);
   c65fa:	6823      	ldr	r3, [r4, #0]
   c65fc:	9a01      	ldr	r2, [sp, #4]
   c65fe:	68db      	ldr	r3, [r3, #12]
   c6600:	4903      	ldr	r1, [pc, #12]	; (c6610 <_ZN5spark10JSONWriter5valueEm+0x20>)
   c6602:	4620      	mov	r0, r4
   c6604:	4798      	blx	r3
    state_ = NEXT;
   c6606:	2301      	movs	r3, #1
}
   c6608:	4620      	mov	r0, r4
    state_ = NEXT;
   c660a:	7123      	strb	r3, [r4, #4]
}
   c660c:	b002      	add	sp, #8
   c660e:	bd10      	pop	{r4, pc}
   c6610:	000cae90 	.word	0x000cae90

000c6614 <_ZN5spark10JSONWriter5valueEdi>:
spark::JSONWriter& spark::JSONWriter::value(double val, int precision) {
   c6614:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   c6618:	4606      	mov	r6, r0
   c661a:	ec55 4b10 	vmov	r4, r5, d0
   c661e:	460f      	mov	r7, r1
    writeSeparator();
   c6620:	f7ff ffa9 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
   c6624:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
   c6626:	4622      	mov	r2, r4
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
   c6628:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    if (std::isnan(val)) {
   c662c:	4620      	mov	r0, r4
   c662e:	462b      	mov	r3, r5
   c6630:	4629      	mov	r1, r5
   c6632:	f7ee f94b 	bl	b48cc <__aeabi_dcmpun>
   c6636:	bb38      	cbnz	r0, c6688 <_ZN5spark10JSONWriter5valueEdi+0x74>
   c6638:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
   c663c:	4b15      	ldr	r3, [pc, #84]	; (c6694 <_ZN5spark10JSONWriter5valueEdi+0x80>)
   c663e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c6642:	4620      	mov	r0, r4
   c6644:	4649      	mov	r1, r9
   c6646:	f7ee f941 	bl	b48cc <__aeabi_dcmpun>
   c664a:	b988      	cbnz	r0, c6670 <_ZN5spark10JSONWriter5valueEdi+0x5c>
   c664c:	4b11      	ldr	r3, [pc, #68]	; (c6694 <_ZN5spark10JSONWriter5valueEdi+0x80>)
   c664e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c6652:	4620      	mov	r0, r4
   c6654:	4649      	mov	r1, r9
   c6656:	f7ee f91b 	bl	b4890 <__aeabi_dcmple>
   c665a:	b948      	cbnz	r0, c6670 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
   c665c:	4620      	mov	r0, r4
   c665e:	2200      	movs	r2, #0
   c6660:	2300      	movs	r3, #0
   c6662:	4629      	mov	r1, r5
   c6664:	f7ee f90a 	bl	b487c <__aeabi_dcmplt>
   c6668:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c666c:	b978      	cbnz	r0, c668e <_ZN5spark10JSONWriter5valueEdi+0x7a>
   c666e:	4d09      	ldr	r5, [pc, #36]	; (c6694 <_ZN5spark10JSONWriter5valueEdi+0x80>)
    printf("%.*lf", precision, toFinite(val)); // NaN and infinite values are not permitted by the spec
   c6670:	4909      	ldr	r1, [pc, #36]	; (c6698 <_ZN5spark10JSONWriter5valueEdi+0x84>)
   c6672:	4630      	mov	r0, r6
   c6674:	e9cd 4500 	strd	r4, r5, [sp]
   c6678:	463a      	mov	r2, r7
   c667a:	47d0      	blx	sl
    state_ = NEXT;
   c667c:	2301      	movs	r3, #1
}
   c667e:	4630      	mov	r0, r6
    state_ = NEXT;
   c6680:	7133      	strb	r3, [r6, #4]
}
   c6682:	b002      	add	sp, #8
   c6684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 0;
   c6688:	2400      	movs	r4, #0
   c668a:	2500      	movs	r5, #0
   c668c:	e7f0      	b.n	c6670 <_ZN5spark10JSONWriter5valueEdi+0x5c>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
   c668e:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
   c6692:	e7ed      	b.n	c6670 <_ZN5spark10JSONWriter5valueEdi+0x5c>
   c6694:	7fefffff 	.word	0x7fefffff
   c6698:	000ccedb 	.word	0x000ccedb

000c669c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c66a0:	460d      	mov	r5, r1
    write('"');
   c66a2:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   c66a4:	4690      	mov	r8, r2
   c66a6:	4604      	mov	r4, r0
    write('"');
   c66a8:	f7ff ff50 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
                printf("u%04x", (unsigned)c);
   c66ac:	f8df 90a4 	ldr.w	r9, [pc, #164]	; c6754 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   c66b0:	44a8      	add	r8, r5
    const char *s = str;
   c66b2:	462f      	mov	r7, r5
    while (s != end) {
   c66b4:	4547      	cmp	r7, r8
   c66b6:	46ba      	mov	sl, r7
   c66b8:	d03d      	beq.n	c6736 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   c66ba:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   c66be:	2e22      	cmp	r6, #34	; 0x22
   c66c0:	d006      	beq.n	c66d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c66c2:	2e5c      	cmp	r6, #92	; 0x5c
   c66c4:	d004      	beq.n	c66d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   c66c6:	4630      	mov	r0, r6
   c66c8:	f003 fd56 	bl	ca178 <isprint>
   c66cc:	2800      	cmp	r0, #0
   c66ce:	d1f1      	bne.n	c66b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   c66d0:	6823      	ldr	r3, [r4, #0]
   c66d2:	ebaa 0205 	sub.w	r2, sl, r5
   c66d6:	689b      	ldr	r3, [r3, #8]
   c66d8:	4629      	mov	r1, r5
   c66da:	4620      	mov	r0, r4
   c66dc:	4798      	blx	r3
            write('\\');
   c66de:	215c      	movs	r1, #92	; 0x5c
   c66e0:	4620      	mov	r0, r4
   c66e2:	f7ff ff33 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   c66e6:	2e0d      	cmp	r6, #13
   c66e8:	d80a      	bhi.n	c6700 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   c66ea:	2e07      	cmp	r6, #7
   c66ec:	d91c      	bls.n	c6728 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c66ee:	f1a6 0308 	sub.w	r3, r6, #8
   c66f2:	2b05      	cmp	r3, #5
   c66f4:	d818      	bhi.n	c6728 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   c66f6:	e8df f003 	tbb	[pc, r3]
   c66fa:	0f0d      	.short	0x0f0d
   c66fc:	15131711 	.word	0x15131711
   c6700:	2e22      	cmp	r6, #34	; 0x22
   c6702:	d001      	beq.n	c6708 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   c6704:	2e5c      	cmp	r6, #92	; 0x5c
   c6706:	d10f      	bne.n	c6728 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   c6708:	4631      	mov	r1, r6
                write('b');
   c670a:	4620      	mov	r0, r4
   c670c:	f7ff ff1e 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
            str = s + 1;
   c6710:	463d      	mov	r5, r7
    while (s != end) {
   c6712:	e7cf      	b.n	c66b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   c6714:	2162      	movs	r1, #98	; 0x62
   c6716:	e7f8      	b.n	c670a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   c6718:	2174      	movs	r1, #116	; 0x74
   c671a:	e7f6      	b.n	c670a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   c671c:	216e      	movs	r1, #110	; 0x6e
   c671e:	e7f4      	b.n	c670a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   c6720:	2166      	movs	r1, #102	; 0x66
   c6722:	e7f2      	b.n	c670a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   c6724:	2172      	movs	r1, #114	; 0x72
   c6726:	e7f0      	b.n	c670a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   c6728:	6823      	ldr	r3, [r4, #0]
   c672a:	4632      	mov	r2, r6
   c672c:	68db      	ldr	r3, [r3, #12]
   c672e:	4649      	mov	r1, r9
   c6730:	4620      	mov	r0, r4
   c6732:	4798      	blx	r3
                break;
   c6734:	e7ec      	b.n	c6710 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
    if (s != str) {
   c6736:	42bd      	cmp	r5, r7
   c6738:	d005      	beq.n	c6746 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   c673a:	6823      	ldr	r3, [r4, #0]
   c673c:	1b7a      	subs	r2, r7, r5
   c673e:	689b      	ldr	r3, [r3, #8]
   c6740:	4629      	mov	r1, r5
   c6742:	4620      	mov	r0, r4
   c6744:	4798      	blx	r3
    write('"');
   c6746:	2122      	movs	r1, #34	; 0x22
   c6748:	4620      	mov	r0, r4
   c674a:	f7ff feff 	bl	c654c <_ZN5spark10JSONWriter5writeEc>
}
   c674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c6752:	bf00      	nop
   c6754:	000ccee1 	.word	0x000ccee1

000c6758 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   c6758:	b513      	push	{r0, r1, r4, lr}
   c675a:	4604      	mov	r4, r0
   c675c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c6760:	f7ff ff09 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   c6764:	4620      	mov	r0, r4
   c6766:	e9dd 2100 	ldrd	r2, r1, [sp]
   c676a:	f7ff ff97 	bl	c669c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   c676e:	2302      	movs	r3, #2
}
   c6770:	4620      	mov	r0, r4
    state_ = VALUE;
   c6772:	7123      	strb	r3, [r4, #4]
}
   c6774:	b002      	add	sp, #8
   c6776:	bd10      	pop	{r4, pc}

000c6778 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   c6778:	b513      	push	{r0, r1, r4, lr}
   c677a:	4604      	mov	r4, r0
   c677c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   c6780:	f7ff fef9 	bl	c6576 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   c6784:	4620      	mov	r0, r4
   c6786:	e9dd 2100 	ldrd	r2, r1, [sp]
   c678a:	f7ff ff87 	bl	c669c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   c678e:	2301      	movs	r3, #1
}
   c6790:	4620      	mov	r0, r4
    state_ = NEXT;
   c6792:	7123      	strb	r3, [r4, #4]
}
   c6794:	b002      	add	sp, #8
   c6796:	bd10      	pop	{r4, pc}

000c6798 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   c6798:	4b01      	ldr	r3, [pc, #4]	; (c67a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   c679a:	4a02      	ldr	r2, [pc, #8]	; (c67a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   c679c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   c679e:	4770      	bx	lr
   c67a0:	2003e67c 	.word	0x2003e67c
   c67a4:	000ccf00 	.word	0x000ccf00

000c67a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   c67a8:	2300      	movs	r3, #0
   c67aa:	6840      	ldr	r0, [r0, #4]
   c67ac:	461a      	mov	r2, r3
   c67ae:	f7fe beef 	b.w	c5590 <network_connect>

000c67b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   c67b2:	6840      	ldr	r0, [r0, #4]
   c67b4:	2200      	movs	r2, #0
   c67b6:	2102      	movs	r1, #2
   c67b8:	f7fe befa 	b.w	c55b0 <network_disconnect>

000c67bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   c67bc:	2200      	movs	r2, #0
   c67be:	6840      	ldr	r0, [r0, #4]
   c67c0:	4611      	mov	r1, r2
   c67c2:	f7fe beed 	b.w	c55a0 <network_connecting>

000c67c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   c67c6:	2200      	movs	r2, #0
   c67c8:	6840      	ldr	r0, [r0, #4]
   c67ca:	4611      	mov	r1, r2
   c67cc:	f7fe bef8 	b.w	c55c0 <network_ready>

000c67d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   c67d0:	2300      	movs	r3, #0
   c67d2:	6840      	ldr	r0, [r0, #4]
   c67d4:	461a      	mov	r2, r3
   c67d6:	4619      	mov	r1, r3
   c67d8:	f7fe befa 	b.w	c55d0 <network_on>

000c67dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   c67dc:	2300      	movs	r3, #0
   c67de:	6840      	ldr	r0, [r0, #4]
   c67e0:	461a      	mov	r2, r3
   c67e2:	4619      	mov	r1, r3
   c67e4:	f7fe befc 	b.w	c55e0 <network_off>

000c67e8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   c67e8:	6840      	ldr	r0, [r0, #4]
   c67ea:	2100      	movs	r1, #0
   c67ec:	f7fe bf20 	b.w	c5630 <network_is_on>

000c67f0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   c67f0:	6840      	ldr	r0, [r0, #4]
   c67f2:	2100      	movs	r1, #0
   c67f4:	f7fe bf24 	b.w	c5640 <network_is_off>

000c67f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   c67f8:	6840      	ldr	r0, [r0, #4]
   c67fa:	2200      	movs	r2, #0
   c67fc:	f081 0101 	eor.w	r1, r1, #1
   c6800:	f7fe bef6 	b.w	c55f0 <network_listen>

000c6804 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   c6804:	6840      	ldr	r0, [r0, #4]
   c6806:	2200      	movs	r2, #0
   c6808:	f7fe bf02 	b.w	c5610 <network_set_listen_timeout>

000c680c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   c680c:	2200      	movs	r2, #0
   c680e:	6840      	ldr	r0, [r0, #4]
   c6810:	4611      	mov	r1, r2
   c6812:	f7fe bf05 	b.w	c5620 <network_get_listen_timeout>

000c6816 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   c6816:	2200      	movs	r2, #0
   c6818:	6840      	ldr	r0, [r0, #4]
   c681a:	4611      	mov	r1, r2
   c681c:	f7fe bef0 	b.w	c5600 <network_listening>

000c6820 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   c6820:	6840      	ldr	r0, [r0, #4]
   c6822:	2100      	movs	r1, #0
   c6824:	f7fe bf1c 	b.w	c5660 <network_is_preferred>

000c6828 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   c6828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c682c:	b095      	sub	sp, #84	; 0x54
   c682e:	4614      	mov	r4, r2
   c6830:	460d      	mov	r5, r1
   c6832:	4607      	mov	r7, r0
    IPAddress addr;
   c6834:	f7ff fe16 	bl	c6464 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   c6838:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   c683a:	221c      	movs	r2, #28
   c683c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   c683e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   c6840:	f003 fcc0 	bl	ca1c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   c6844:	2340      	movs	r3, #64	; 0x40
   c6846:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   c6848:	4620      	mov	r0, r4
   c684a:	466b      	mov	r3, sp
   c684c:	aa0c      	add	r2, sp, #48	; 0x30
   c684e:	2100      	movs	r1, #0
   c6850:	f7fe fcee 	bl	c5230 <netdb_getaddrinfo>
    if (!r) {
   c6854:	4604      	mov	r4, r0
   c6856:	2800      	cmp	r0, #0
   c6858:	d14b      	bne.n	c68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c685a:	4602      	mov	r2, r0
   c685c:	2101      	movs	r1, #1
   c685e:	6868      	ldr	r0, [r5, #4]
   c6860:	f7fe feae 	bl	c55c0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c6864:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   c6866:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c6868:	4622      	mov	r2, r4
   c686a:	6868      	ldr	r0, [r5, #4]
   c686c:	f7fe fea8 	bl	c55c0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c6870:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   c6872:	4681      	mov	r9, r0
        bool ok = false;
   c6874:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c6876:	2e00      	cmp	r6, #0
   c6878:	d03b      	beq.n	c68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   c687a:	2900      	cmp	r1, #0
   c687c:	d139      	bne.n	c68f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   c687e:	6873      	ldr	r3, [r6, #4]
   c6880:	2b02      	cmp	r3, #2
   c6882:	d003      	beq.n	c688c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   c6884:	2b0a      	cmp	r3, #10
   c6886:	d011      	beq.n	c68ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   c6888:	69f6      	ldr	r6, [r6, #28]
   c688a:	e7f4      	b.n	c6876 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   c688c:	f1b8 0f00 	cmp.w	r8, #0
   c6890:	d0fa      	beq.n	c6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   c6892:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   c6894:	a806      	add	r0, sp, #24
   c6896:	3104      	adds	r1, #4
class IPAddress : public Printable {
   c6898:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   c689a:	f7ff fe11 	bl	c64c0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   c689e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c68a0:	1d3c      	adds	r4, r7, #4
   c68a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c68a4:	682b      	ldr	r3, [r5, #0]
   c68a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c68a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   c68aa:	e7ed      	b.n	c6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   c68ac:	f1b9 0f00 	cmp.w	r9, #0
   c68b0:	d0ea      	beq.n	c6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   c68b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   c68b4:	2210      	movs	r2, #16
   c68b6:	a801      	add	r0, sp, #4
   c68b8:	f003 fc84 	bl	ca1c4 <memset>
                    a.v = 6;
   c68bc:	2306      	movs	r3, #6
   c68be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   c68c2:	ad01      	add	r5, sp, #4
   c68c4:	f104 0308 	add.w	r3, r4, #8
   c68c8:	3418      	adds	r4, #24
   c68ca:	6818      	ldr	r0, [r3, #0]
   c68cc:	6859      	ldr	r1, [r3, #4]
   c68ce:	462a      	mov	r2, r5
   c68d0:	c203      	stmia	r2!, {r0, r1}
   c68d2:	3308      	adds	r3, #8
   c68d4:	42a3      	cmp	r3, r4
   c68d6:	4615      	mov	r5, r2
   c68d8:	d1f7      	bne.n	c68ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   c68da:	a901      	add	r1, sp, #4
   c68dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   c68de:	ad07      	add	r5, sp, #28
   c68e0:	f7ff fdce 	bl	c6480 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   c68e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   c68e6:	1d3c      	adds	r4, r7, #4
   c68e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   c68ea:	682b      	ldr	r3, [r5, #0]
   c68ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   c68ee:	4649      	mov	r1, r9
   c68f0:	e7ca      	b.n	c6888 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   c68f2:	9800      	ldr	r0, [sp, #0]
   c68f4:	f7fe fc94 	bl	c5220 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   c68f8:	4638      	mov	r0, r7
   c68fa:	b015      	add	sp, #84	; 0x54
   c68fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000c6900 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   c6900:	3803      	subs	r0, #3
   c6902:	2803      	cmp	r0, #3
   c6904:	bf9a      	itte	ls
   c6906:	4b02      	ldrls	r3, [pc, #8]	; (c6910 <_ZN5spark12NetworkClass4fromEm+0x10>)
   c6908:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   c690c:	4801      	ldrhi	r0, [pc, #4]	; (c6914 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   c690e:	4770      	bx	lr
   c6910:	000ccf04 	.word	0x000ccf04
   c6914:	2003e680 	.word	0x2003e680

000c6918 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   c6918:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   c691a:	2200      	movs	r2, #0
   c691c:	6840      	ldr	r0, [r0, #4]
   c691e:	f7fe fe97 	bl	c5650 <network_prefer>
}
   c6922:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   c6926:	f7ff bfeb 	b.w	c6900 <_ZN5spark12NetworkClass4fromEm>
	...

000c692c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   c692c:	4b02      	ldr	r3, [pc, #8]	; (c6938 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   c692e:	4a03      	ldr	r2, [pc, #12]	; (c693c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   c6930:	601a      	str	r2, [r3, #0]
   c6932:	2200      	movs	r2, #0
   c6934:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   c6936:	4770      	bx	lr
   c6938:	2003e680 	.word	0x2003e680
   c693c:	000ccf1c 	.word	0x000ccf1c

000c6940 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    config.quantity(sizeof(buf));
    pmicWireInstance()->transaction(config);
#endif // (HAL_PLATFORM_I2C_NUM != 1)
}

bool PMIC::lock() {
   c6940:	b508      	push	{r3, lr}
            return &Wire1;
   c6942:	f000 fefd 	bl	c7740 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   c6946:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   c694a:	f7ff bd05 	b.w	c6358 <_ZN7TwoWire4lockEv>

000c694e <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   c694e:	b510      	push	{r4, lr}
   c6950:	4604      	mov	r4, r0
    lock_(_lock)
   c6952:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   c6954:	b109      	cbz	r1, c695a <_ZN4PMICC1Eb+0xc>
        lock();
   c6956:	f7ff fff3 	bl	c6940 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   c695a:	4620      	mov	r0, r4
   c695c:	bd10      	pop	{r4, pc}

000c695e <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   c695e:	b508      	push	{r3, lr}
            return &Wire1;
   c6960:	f000 feee 	bl	c7740 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   c6964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   c6968:	f7ff bcff 	b.w	c636a <_ZN7TwoWire6unlockEv>

000c696c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   c696c:	b510      	push	{r4, lr}
   c696e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   c6970:	6800      	ldr	r0, [r0, #0]
   c6972:	f7ff fff4 	bl	c695e <_ZN4PMIC6unlockEv>
   c6976:	4620      	mov	r0, r4
   c6978:	bd10      	pop	{r4, pc}

000c697a <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   c697a:	b530      	push	{r4, r5, lr}
   c697c:	b087      	sub	sp, #28
   c697e:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c6980:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   c6982:	f7ff ffdd 	bl	c6940 <_ZN4PMIC4lockEv.constprop.0.isra.0>
   c6986:	2300      	movs	r3, #0
   c6988:	226b      	movs	r2, #107	; 0x6b
   c698a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    timeout_ = ms;
   c698e:	2401      	movs	r4, #1
   c6990:	220a      	movs	r2, #10
   c6992:	e9cd 4203 	strd	r4, r2, [sp, #12]
        buffer_(nullptr) {
   c6996:	9305      	str	r3, [sp, #20]
            return &Wire1;
   c6998:	f000 fed2 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   c699c:	a901      	add	r1, sp, #4
   c699e:	f7ff fcba 	bl	c6316 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   c69a2:	f000 fecd 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   c69a6:	6803      	ldr	r3, [r0, #0]
   c69a8:	4629      	mov	r1, r5
   c69aa:	689b      	ldr	r3, [r3, #8]
   c69ac:	4798      	blx	r3
            return &Wire1;
   c69ae:	f000 fec7 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   c69b2:	4621      	mov	r1, r4
   c69b4:	f7ff fcc9 	bl	c634a <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   c69b8:	9402      	str	r4, [sp, #8]
            return &Wire1;
   c69ba:	f000 fec1 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   c69be:	a901      	add	r1, sp, #4
   c69c0:	f7ff fc72 	bl	c62a8 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   c69c4:	f000 febc 	bl	c7740 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   c69c8:	6803      	ldr	r3, [r0, #0]
   c69ca:	695b      	ldr	r3, [r3, #20]
   c69cc:	4798      	blx	r3
   c69ce:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   c69d0:	4668      	mov	r0, sp
   c69d2:	f7ff ffcb 	bl	c696c <_ZNSt10lock_guardI4PMICED1Ev>
}
   c69d6:	b2e0      	uxtb	r0, r4
   c69d8:	b007      	add	sp, #28
   c69da:	bd30      	pop	{r4, r5, pc}

000c69dc <_ZN4PMIC11isPowerGoodEv>:
bool PMIC::isPowerGood(void) {
   c69dc:	b508      	push	{r3, lr}
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
   c69de:	2108      	movs	r1, #8
   c69e0:	f7ff ffcb 	bl	c697a <_ZN4PMIC12readRegisterEh>
}
   c69e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
   c69e8:	bd08      	pop	{r3, pc}

000c69ea <_ZN4PMIC8getFaultEv>:
    DATA = readRegister(FAULT_REGISTER);
   c69ea:	2109      	movs	r1, #9
   c69ec:	f7ff bfc5 	b.w	c697a <_ZN4PMIC12readRegisterEh>

000c69f0 <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   c69f0:	b570      	push	{r4, r5, r6, lr}
   c69f2:	b086      	sub	sp, #24
   c69f4:	460d      	mov	r5, r1
   c69f6:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c69f8:	9000      	str	r0, [sp, #0]
      { _M_device.lock(); }
   c69fa:	f7ff ffa1 	bl	c6940 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        buffer_(nullptr) {
   c69fe:	2300      	movs	r3, #0
   c6a00:	226b      	movs	r2, #107	; 0x6b
   c6a02:	e9cd 2301 	strd	r2, r3, [sp, #4]
    timeout_ = ms;
   c6a06:	2601      	movs	r6, #1
   c6a08:	220a      	movs	r2, #10
   c6a0a:	e9cd 6203 	strd	r6, r2, [sp, #12]
        buffer_(nullptr) {
   c6a0e:	9305      	str	r3, [sp, #20]
            return &Wire1;
   c6a10:	f000 fe96 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   c6a14:	a901      	add	r1, sp, #4
   c6a16:	f7ff fc7e 	bl	c6316 <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   c6a1a:	f000 fe91 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   c6a1e:	6803      	ldr	r3, [r0, #0]
   c6a20:	4629      	mov	r1, r5
   c6a22:	689b      	ldr	r3, [r3, #8]
   c6a24:	4798      	blx	r3
            return &Wire1;
   c6a26:	f000 fe8b 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   c6a2a:	6803      	ldr	r3, [r0, #0]
   c6a2c:	4621      	mov	r1, r4
   c6a2e:	689b      	ldr	r3, [r3, #8]
   c6a30:	4798      	blx	r3
            return &Wire1;
   c6a32:	f000 fe85 	bl	c7740 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   c6a36:	4631      	mov	r1, r6
   c6a38:	f7ff fc87 	bl	c634a <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   c6a3c:	4668      	mov	r0, sp
   c6a3e:	f7ff ff95 	bl	c696c <_ZNSt10lock_guardI4PMICED1Ev>
}
   c6a42:	b006      	add	sp, #24
   c6a44:	bd70      	pop	{r4, r5, r6, pc}

000c6a46 <_ZN4PMIC12enableBATFETEv>:
bool PMIC::enableBATFET(void) {
   c6a46:	b513      	push	{r0, r1, r4, lr}
   c6a48:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c6a4a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   c6a4c:	f7ff ff78 	bl	c6940 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
   c6a50:	2107      	movs	r1, #7
   c6a52:	4620      	mov	r0, r4
   c6a54:	f7ff ff91 	bl	c697a <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA & 0b11011111));
   c6a58:	2107      	movs	r1, #7
   c6a5a:	f000 02df 	and.w	r2, r0, #223	; 0xdf
   c6a5e:	4620      	mov	r0, r4
   c6a60:	f7ff ffc6 	bl	c69f0 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   c6a64:	a801      	add	r0, sp, #4
   c6a66:	f7ff ff81 	bl	c696c <_ZNSt10lock_guardI4PMICED1Ev>
}
   c6a6a:	2001      	movs	r0, #1
   c6a6c:	b002      	add	sp, #8
   c6a6e:	bd10      	pop	{r4, pc}

000c6a70 <_ZN4PMIC13disableBATFETEv>:
bool PMIC::disableBATFET(void) {
   c6a70:	b513      	push	{r0, r1, r4, lr}
   c6a72:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   c6a74:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   c6a76:	f7ff ff63 	bl	c6940 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(MISC_CONTROL_REGISTER);
   c6a7a:	2107      	movs	r1, #7
   c6a7c:	4620      	mov	r0, r4
   c6a7e:	f7ff ff7c 	bl	c697a <_ZN4PMIC12readRegisterEh>
    writeRegister(MISC_CONTROL_REGISTER, (DATA | 0b00100000));
   c6a82:	f040 0020 	orr.w	r0, r0, #32
   c6a86:	b2c2      	uxtb	r2, r0
   c6a88:	2107      	movs	r1, #7
   c6a8a:	4620      	mov	r0, r4
   c6a8c:	f7ff ffb0 	bl	c69f0 <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   c6a90:	a801      	add	r0, sp, #4
   c6a92:	f7ff ff6b 	bl	c696c <_ZNSt10lock_guardI4PMICED1Ev>
}
   c6a96:	2001      	movs	r0, #1
   c6a98:	b002      	add	sp, #8
   c6a9a:	bd10      	pop	{r4, pc}

000c6a9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   c6a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c6a9e:	4606      	mov	r6, r0
   c6aa0:	460d      	mov	r5, r1
  size_t n = 0;
   c6aa2:	188f      	adds	r7, r1, r2
   c6aa4:	2400      	movs	r4, #0
  while (size--) {
   c6aa6:	42bd      	cmp	r5, r7
   c6aa8:	d00c      	beq.n	c6ac4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   c6aaa:	6833      	ldr	r3, [r6, #0]
   c6aac:	f815 1b01 	ldrb.w	r1, [r5], #1
   c6ab0:	689b      	ldr	r3, [r3, #8]
   c6ab2:	4630      	mov	r0, r6
   c6ab4:	4798      	blx	r3
     if (chunk>=0)
   c6ab6:	1e03      	subs	r3, r0, #0
   c6ab8:	db01      	blt.n	c6abe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   c6aba:	441c      	add	r4, r3
  while (size--) {
   c6abc:	e7f3      	b.n	c6aa6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   c6abe:	2c00      	cmp	r4, #0
   c6ac0:	bf08      	it	eq
   c6ac2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   c6ac4:	4620      	mov	r0, r4
   c6ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000c6ac8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   c6ac8:	b508      	push	{r3, lr}
  return write(str);
   c6aca:	f7fd fbe5 	bl	c4298 <_ZN5Print5writeEPKc>
}
   c6ace:	bd08      	pop	{r3, pc}

000c6ad0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   c6ad0:	6803      	ldr	r3, [r0, #0]
   c6ad2:	689b      	ldr	r3, [r3, #8]
   c6ad4:	4718      	bx	r3

000c6ad6 <_ZN5Print5printEPK19__FlashStringHelper>:
   c6ad6:	b508      	push	{r3, lr}
   c6ad8:	f7fd fbde 	bl	c4298 <_ZN5Print5writeEPKc>
   c6adc:	bd08      	pop	{r3, pc}

000c6ade <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   c6ade:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   c6ae0:	210d      	movs	r1, #13
{
   c6ae2:	4605      	mov	r5, r0
  size_t n = print('\r');
   c6ae4:	f7ff fff4 	bl	c6ad0 <_ZN5Print5printEc>
  n += print('\n');
   c6ae8:	210a      	movs	r1, #10
  size_t n = print('\r');
   c6aea:	4604      	mov	r4, r0
  n += print('\n');
   c6aec:	4628      	mov	r0, r5
   c6aee:	f7ff ffef 	bl	c6ad0 <_ZN5Print5printEc>
  return n;
}
   c6af2:	4420      	add	r0, r4
   c6af4:	bd38      	pop	{r3, r4, r5, pc}

000c6af6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   c6af6:	b538      	push	{r3, r4, r5, lr}
   c6af8:	4605      	mov	r5, r0
  return write(str);
   c6afa:	f7fd fbcd 	bl	c4298 <_ZN5Print5writeEPKc>
   c6afe:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   c6b00:	4628      	mov	r0, r5
   c6b02:	f7ff ffec 	bl	c6ade <_ZN5Print7printlnEv>
  return n;
}
   c6b06:	4420      	add	r0, r4
   c6b08:	bd38      	pop	{r3, r4, r5, pc}

000c6b0a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   c6b0a:	b530      	push	{r4, r5, lr}
   c6b0c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   c6b0e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   c6b10:	2a01      	cmp	r2, #1
  *str = '\0';
   c6b12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   c6b16:	bf98      	it	ls
   c6b18:	220a      	movls	r2, #10
   c6b1a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   c6b1c:	460d      	mov	r5, r1
   c6b1e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   c6b22:	fb01 5312 	mls	r3, r1, r2, r5
   c6b26:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c6b2a:	2b09      	cmp	r3, #9
   c6b2c:	bf94      	ite	ls
   c6b2e:	3330      	addls	r3, #48	; 0x30
   c6b30:	3337      	addhi	r3, #55	; 0x37
   c6b32:	b2db      	uxtb	r3, r3
  } while(n);
   c6b34:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   c6b36:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   c6b3a:	d9ef      	bls.n	c6b1c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   c6b3c:	4621      	mov	r1, r4
   c6b3e:	f7fd fbab 	bl	c4298 <_ZN5Print5writeEPKc>
}
   c6b42:	b00b      	add	sp, #44	; 0x2c
   c6b44:	bd30      	pop	{r4, r5, pc}

000c6b46 <_ZN5Print7vprintfEbPKcSt9__va_list>:
    writeVariant(var, writer);
    return writer.bytesWritten();
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   c6b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c6b4a:	b086      	sub	sp, #24
   c6b4c:	af00      	add	r7, sp, #0
   c6b4e:	4605      	mov	r5, r0
   c6b50:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   c6b52:	1d38      	adds	r0, r7, #4
   c6b54:	2114      	movs	r1, #20
{
   c6b56:	4614      	mov	r4, r2
    va_copy(args2, args);
   c6b58:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   c6b5a:	f7fe fdb1 	bl	c56c0 <vsnprintf>

    if (n<bufsize)
   c6b5e:	2813      	cmp	r0, #19
   c6b60:	d80e      	bhi.n	c6b80 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   c6b62:	1d39      	adds	r1, r7, #4
   c6b64:	4628      	mov	r0, r5
   c6b66:	f7fd fb97 	bl	c4298 <_ZN5Print5writeEPKc>
   c6b6a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   c6b6c:	b11e      	cbz	r6, c6b76 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   c6b6e:	4628      	mov	r0, r5
   c6b70:	f7ff ffb5 	bl	c6ade <_ZN5Print7printlnEv>
   c6b74:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   c6b76:	4620      	mov	r0, r4
   c6b78:	3718      	adds	r7, #24
   c6b7a:	46bd      	mov	sp, r7
   c6b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   c6b80:	f100 0308 	add.w	r3, r0, #8
   c6b84:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   c6b88:	46e8      	mov	r8, sp
        char bigger[n+1];
   c6b8a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   c6b8e:	4622      	mov	r2, r4
   c6b90:	1c41      	adds	r1, r0, #1
   c6b92:	683b      	ldr	r3, [r7, #0]
   c6b94:	4668      	mov	r0, sp
   c6b96:	f7fe fd93 	bl	c56c0 <vsnprintf>
  return write(str);
   c6b9a:	4669      	mov	r1, sp
   c6b9c:	4628      	mov	r0, r5
   c6b9e:	f7fd fb7b 	bl	c4298 <_ZN5Print5writeEPKc>
   c6ba2:	4604      	mov	r4, r0
   c6ba4:	46c5      	mov	sp, r8
   c6ba6:	e7e1      	b.n	c6b6c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000c6ba8 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   c6ba8:	b510      	push	{r4, lr}
  if (0 == max) {
   c6baa:	4604      	mov	r4, r0
   c6bac:	b128      	cbz	r0, c6bba <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   c6bae:	f003 fb3f 	bl	ca230 <rand>
   c6bb2:	fb90 f3f4 	sdiv	r3, r0, r4
   c6bb6:	fb03 0414 	mls	r4, r3, r4, r0
}
   c6bba:	4620      	mov	r0, r4
   c6bbc:	bd10      	pop	{r4, pc}

000c6bbe <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   c6bbe:	4288      	cmp	r0, r1
{
   c6bc0:	b510      	push	{r4, lr}
   c6bc2:	4604      	mov	r4, r0
  if (min >= max) {
   c6bc4:	da03      	bge.n	c6bce <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   c6bc6:	1a08      	subs	r0, r1, r0
   c6bc8:	f7ff ffee 	bl	c6ba8 <_Z6randomi>
   c6bcc:	4404      	add	r4, r0
}
   c6bce:	4620      	mov	r0, r4
   c6bd0:	bd10      	pop	{r4, pc}
	...

000c6bd4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   c6bd4:	4b01      	ldr	r3, [pc, #4]	; (c6bdc <_GLOBAL__sub_I_RGB+0x8>)
   c6bd6:	2200      	movs	r2, #0
   c6bd8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   c6bda:	4770      	bx	lr
   c6bdc:	2003e688 	.word	0x2003e688

000c6be0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   c6be0:	2100      	movs	r1, #0
   c6be2:	f7fe bb7d 	b.w	c52e0 <hal_spi_release>

000c6be6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   c6be6:	2100      	movs	r1, #0
   c6be8:	f7fe bb72 	b.w	c52d0 <hal_spi_acquire>

000c6bec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   c6bec:	b510      	push	{r4, lr}
   c6bee:	4604      	mov	r4, r0
   c6bf0:	4608      	mov	r0, r1
{
    _spi = spi;
   c6bf2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   c6bf4:	f7fe fb3c 	bl	c5270 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   c6bf8:	2300      	movs	r3, #0
   c6bfa:	6063      	str	r3, [r4, #4]
}
   c6bfc:	4620      	mov	r0, r4
   c6bfe:	bd10      	pop	{r4, pc}

000c6c00 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   c6c00:	b513      	push	{r0, r1, r4, lr}
   c6c02:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   c6c04:	7800      	ldrb	r0, [r0, #0]
   c6c06:	f7ff ffee 	bl	c6be6 <_ZN8SPIClass4lockEv.isra.0>
   c6c0a:	b958      	cbnz	r0, c6c24 <_ZN8SPIClass5beginEv+0x24>
   c6c0c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   c6c0e:	9001      	str	r0, [sp, #4]
   c6c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
   c6c14:	f7fe fb14 	bl	c5240 <hal_spi_begin>
        unlock();
   c6c18:	9801      	ldr	r0, [sp, #4]
    }
}
   c6c1a:	b002      	add	sp, #8
   c6c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c6c20:	f7ff bfde 	b.w	c6be0 <_ZN8SPIClass6unlockEv.isra.0>
   c6c24:	b002      	add	sp, #8
   c6c26:	bd10      	pop	{r4, pc}

000c6c28 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
   c6c28:	b513      	push	{r0, r1, r4, lr}
   c6c2a:	4604      	mov	r4, r0
    if (!lock())
   c6c2c:	7800      	ldrb	r0, [r0, #0]
{
   c6c2e:	9101      	str	r1, [sp, #4]
    if (!lock())
   c6c30:	f7ff ffd9 	bl	c6be6 <_ZN8SPIClass4lockEv.isra.0>
   c6c34:	9901      	ldr	r1, [sp, #4]
   c6c36:	b948      	cbnz	r0, c6c4c <_ZN8SPIClass5beginEt+0x24>
   c6c38:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   c6c3a:	9001      	str	r0, [sp, #4]
   c6c3c:	f7fe fb00 	bl	c5240 <hal_spi_begin>
        unlock();
   c6c40:	9801      	ldr	r0, [sp, #4]
    }
}
   c6c42:	b002      	add	sp, #8
   c6c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c6c48:	f7ff bfca 	b.w	c6be0 <_ZN8SPIClass6unlockEv.isra.0>
   c6c4c:	b002      	add	sp, #8
   c6c4e:	bd10      	pop	{r4, pc}

000c6c50 <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   c6c50:	b513      	push	{r0, r1, r4, lr}
   c6c52:	4604      	mov	r4, r0
    if (!lock())
   c6c54:	7800      	ldrb	r0, [r0, #0]
   c6c56:	f7ff ffc6 	bl	c6be6 <_ZN8SPIClass4lockEv.isra.0>
   c6c5a:	b948      	cbnz	r0, c6c70 <_ZN8SPIClass3endEv+0x20>
   c6c5c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   c6c5e:	9001      	str	r0, [sp, #4]
   c6c60:	f7fe faf6 	bl	c5250 <hal_spi_end>
        unlock();
   c6c64:	9801      	ldr	r0, [sp, #4]
    }
}
   c6c66:	b002      	add	sp, #8
   c6c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   c6c6c:	f7ff bfb8 	b.w	c6be0 <_ZN8SPIClass6unlockEv.isra.0>
   c6c70:	b002      	add	sp, #8
   c6c72:	bd10      	pop	{r4, pc}

000c6c74 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   c6c74:	7800      	ldrb	r0, [r0, #0]
   c6c76:	f7ff bfb3 	b.w	c6be0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000c6c7c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   c6c7c:	0840      	lsrs	r0, r0, #1
{
   c6c7e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   c6c80:	6018      	str	r0, [r3, #0]
   c6c82:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   c6c84:	6818      	ldr	r0, [r3, #0]
   c6c86:	4288      	cmp	r0, r1
   c6c88:	b2e5      	uxtb	r5, r4
   c6c8a:	d906      	bls.n	c6c9a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   c6c8c:	3401      	adds	r4, #1
   c6c8e:	2c08      	cmp	r4, #8
   c6c90:	d002      	beq.n	c6c98 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   c6c92:	0840      	lsrs	r0, r0, #1
   c6c94:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   c6c96:	e7f5      	b.n	c6c84 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   c6c98:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   c6c9a:	4b02      	ldr	r3, [pc, #8]	; (c6ca4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   c6c9c:	5d5b      	ldrb	r3, [r3, r5]
   c6c9e:	7013      	strb	r3, [r2, #0]
}
   c6ca0:	bd30      	pop	{r4, r5, pc}
   c6ca2:	bf00      	nop
   c6ca4:	000ccf58 	.word	0x000ccf58

000c6ca8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   c6ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c6cac:	4606      	mov	r6, r0
   c6cae:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   c6cb0:	7800      	ldrb	r0, [r0, #0]
{
   c6cb2:	460c      	mov	r4, r1
    CHECK(lock());
   c6cb4:	f7ff ff97 	bl	c6be6 <_ZN8SPIClass4lockEv.isra.0>
   c6cb8:	2800      	cmp	r0, #0
   c6cba:	db1b      	blt.n	c6cf4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   c6cbc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   c6cbe:	2214      	movs	r2, #20
   c6cc0:	2100      	movs	r1, #0
   c6cc2:	a809      	add	r0, sp, #36	; 0x24
   c6cc4:	f003 fa7e 	bl	ca1c4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   c6cc8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   c6cca:	2200      	movs	r2, #0
   c6ccc:	a909      	add	r1, sp, #36	; 0x24
   c6cce:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   c6cd0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   c6cd4:	f7fe fadc 	bl	c5290 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   c6cd8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   c6cdc:	b113      	cbz	r3, c6ce4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   c6cde:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   c6ce2:	b155      	cbz	r5, c6cfa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   c6ce4:	2700      	movs	r7, #0
   c6ce6:	46b9      	mov	r9, r7
   c6ce8:	46b8      	mov	r8, r7
   c6cea:	2501      	movs	r5, #1
    if (default_ && other.default_)
   c6cec:	7923      	ldrb	r3, [r4, #4]
   c6cee:	b15d      	cbz	r5, c6d08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   c6cf0:	b1c3      	cbz	r3, c6d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   c6cf2:	2000      	movs	r0, #0
}
   c6cf4:	b00f      	add	sp, #60	; 0x3c
   c6cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   c6cfa:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   c6cfe:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   c6d02:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   c6d06:	e7f1      	b.n	c6cec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   c6d08:	2b00      	cmp	r3, #0
   c6d0a:	d135      	bne.n	c6d78 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   c6d0c:	68a3      	ldr	r3, [r4, #8]
   c6d0e:	4543      	cmp	r3, r8
   c6d10:	d108      	bne.n	c6d24 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   c6d12:	f88d 9020 	strb.w	r9, [sp, #32]
   c6d16:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c6d1a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c6d1e:	89a3      	ldrh	r3, [r4, #12]
   c6d20:	429a      	cmp	r2, r3
   c6d22:	d0e6      	beq.n	c6cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   c6d24:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c6d26:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   c6d28:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   c6d2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   c6d2e:	ab04      	add	r3, sp, #16
   c6d30:	f10d 020f 	add.w	r2, sp, #15
   c6d34:	f7ff ffa2 	bl	c6c7c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   c6d38:	7921      	ldrb	r1, [r4, #4]
   c6d3a:	b985      	cbnz	r5, c6d5e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   c6d3c:	b989      	cbnz	r1, c6d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c6d3e:	68a3      	ldr	r3, [r4, #8]
   c6d40:	4543      	cmp	r3, r8
   c6d42:	d30e      	bcc.n	c6d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   c6d44:	f88d 9020 	strb.w	r9, [sp, #32]
   c6d48:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   c6d4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   c6d50:	89a3      	ldrh	r3, [r4, #12]
   c6d52:	429a      	cmp	r2, r3
   c6d54:	d105      	bne.n	c6d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   c6d56:	9b04      	ldr	r3, [sp, #16]
   c6d58:	4543      	cmp	r3, r8
   c6d5a:	d102      	bne.n	c6d62 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   c6d5c:	e7c9      	b.n	c6cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   c6d5e:	2900      	cmp	r1, #0
   c6d60:	d1f9      	bne.n	c6d56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   c6d62:	2300      	movs	r3, #0
   c6d64:	9301      	str	r3, [sp, #4]
   c6d66:	7b63      	ldrb	r3, [r4, #13]
   c6d68:	9300      	str	r3, [sp, #0]
   c6d6a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   c6d6e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   c6d70:	7830      	ldrb	r0, [r6, #0]
   c6d72:	f7fe faa5 	bl	c52c0 <hal_spi_set_settings>
   c6d76:	e7bc      	b.n	c6cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   c6d78:	e9cd 5500 	strd	r5, r5, [sp]
   c6d7c:	462b      	mov	r3, r5
   c6d7e:	462a      	mov	r2, r5
   c6d80:	2101      	movs	r1, #1
   c6d82:	e7f5      	b.n	c6d70 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000c6d84 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   c6d84:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   c6d86:	7800      	ldrb	r0, [r0, #0]
   c6d88:	f7fe fa6a 	bl	c5260 <hal_spi_transfer>
}
   c6d8c:	b2c0      	uxtb	r0, r0
   c6d8e:	bd08      	pop	{r3, pc}

000c6d90 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   c6d90:	b530      	push	{r4, r5, lr}
   c6d92:	b087      	sub	sp, #28
   c6d94:	4604      	mov	r4, r0
   c6d96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   c6d98:	9500      	str	r5, [sp, #0]
   c6d9a:	7800      	ldrb	r0, [r0, #0]
   c6d9c:	f7fe fa80 	bl	c52a0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   c6da0:	b93d      	cbnz	r5, c6db2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   c6da2:	7820      	ldrb	r0, [r4, #0]
   c6da4:	a902      	add	r1, sp, #8
   c6da6:	f7fe fa83 	bl	c52b0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   c6daa:	f89d 3014 	ldrb.w	r3, [sp, #20]
   c6dae:	07db      	lsls	r3, r3, #31
   c6db0:	d4f7      	bmi.n	c6da2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   c6db2:	b007      	add	sp, #28
   c6db4:	bd30      	pop	{r4, r5, pc}

000c6db6 <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   c6db6:	4770      	bx	lr

000c6db8 <_ZN8SPIClass15detachInterruptEv>:
   c6db8:	4770      	bx	lr

000c6dba <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   c6dba:	b510      	push	{r4, lr}
   c6dbc:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   c6dbe:	f7fe f927 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   c6dc2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   c6dc4:	6823      	ldr	r3, [r4, #0]
   c6dc6:	4620      	mov	r0, r4
   c6dc8:	695b      	ldr	r3, [r3, #20]
   c6dca:	4798      	blx	r3
    if (c >= 0) return c;
   c6dcc:	2800      	cmp	r0, #0
   c6dce:	da08      	bge.n	c6de2 <_ZN6Stream9timedReadEv+0x28>
   c6dd0:	f7fe f91e 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   c6dd4:	68e3      	ldr	r3, [r4, #12]
   c6dd6:	1ac0      	subs	r0, r0, r3
   c6dd8:	68a3      	ldr	r3, [r4, #8]
   c6dda:	4298      	cmp	r0, r3
   c6ddc:	d3f2      	bcc.n	c6dc4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   c6dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   c6de2:	bd10      	pop	{r4, pc}

000c6de4 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   c6de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c6de8:	4607      	mov	r7, r0
   c6dea:	460c      	mov	r4, r1
   c6dec:	188e      	adds	r6, r1, r2
   c6dee:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   c6df0:	42b5      	cmp	r5, r6
   c6df2:	eba5 0804 	sub.w	r8, r5, r4
   c6df6:	d007      	beq.n	c6e08 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   c6df8:	4638      	mov	r0, r7
   c6dfa:	f7ff ffde 	bl	c6dba <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   c6dfe:	1e03      	subs	r3, r0, #0
   c6e00:	db02      	blt.n	c6e08 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   c6e02:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   c6e06:	e7f3      	b.n	c6df0 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   c6e08:	4640      	mov	r0, r8
   c6e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000c6e0e <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   c6e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c6e12:	4607      	mov	r7, r0
   c6e14:	4688      	mov	r8, r1
   c6e16:	4616      	mov	r6, r2
  if (length < 1) return 0;
   c6e18:	461d      	mov	r5, r3
   c6e1a:	b173      	cbz	r3, c6e3a <_ZN6Stream14readBytesUntilEcPcj+0x2c>
  size_t index = 0;
   c6e1c:	2400      	movs	r4, #0
  while (index < length) {
    int c = timedRead();
   c6e1e:	4638      	mov	r0, r7
   c6e20:	f7ff ffcb 	bl	c6dba <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   c6e24:	1e03      	subs	r3, r0, #0
   c6e26:	db05      	blt.n	c6e34 <_ZN6Stream14readBytesUntilEcPcj+0x26>
   c6e28:	4543      	cmp	r3, r8
   c6e2a:	d003      	beq.n	c6e34 <_ZN6Stream14readBytesUntilEcPcj+0x26>
    *buffer++ = (char)c;
   c6e2c:	5533      	strb	r3, [r6, r4]
    index++;
   c6e2e:	3401      	adds	r4, #1
  while (index < length) {
   c6e30:	42a5      	cmp	r5, r4
   c6e32:	d1f4      	bne.n	c6e1e <_ZN6Stream14readBytesUntilEcPcj+0x10>
  }
  return index; // return number of characters, not including null terminator
}
   c6e34:	4620      	mov	r0, r4
   c6e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (length < 1) return 0;
   c6e3a:	461c      	mov	r4, r3
   c6e3c:	e7fa      	b.n	c6e34 <_ZN6Stream14readBytesUntilEcPcj+0x26>

000c6e3e <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
   c6e3e:	b510      	push	{r4, lr}
   c6e40:	4604      	mov	r4, r0
{
    free(buffer);
   c6e42:	6800      	ldr	r0, [r0, #0]
   c6e44:	f7fe fc1c 	bl	c5680 <free>
}
   c6e48:	4620      	mov	r0, r4
   c6e4a:	bd10      	pop	{r4, pc}

000c6e4c <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
   c6e4c:	b510      	push	{r4, lr}
   c6e4e:	4604      	mov	r4, r0
    if (buffer) {
   c6e50:	6800      	ldr	r0, [r0, #0]
   c6e52:	b108      	cbz	r0, c6e58 <_ZN6String10invalidateEv+0xc>
        free(buffer);
   c6e54:	f7fe fc14 	bl	c5680 <free>
    }
    buffer = nullptr;
   c6e58:	2300      	movs	r3, #0
    capacity_ = len = 0;
   c6e5a:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
   c6e5e:	6023      	str	r3, [r4, #0]
}
   c6e60:	bd10      	pop	{r4, pc}

000c6e62 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   c6e62:	b538      	push	{r3, r4, r5, lr}
   c6e64:	4604      	mov	r4, r0
   c6e66:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c6e68:	6800      	ldr	r0, [r0, #0]
   c6e6a:	3101      	adds	r1, #1
   c6e6c:	f7fe fc10 	bl	c5690 <realloc>
    if (newbuffer) {
   c6e70:	b110      	cbz	r0, c6e78 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
   c6e72:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
   c6e76:	2001      	movs	r0, #1
    }
    return 0;
}
   c6e78:	bd38      	pop	{r3, r4, r5, pc}

000c6e7a <_ZN6String7reserveEj>:
{
   c6e7a:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
   c6e7c:	6803      	ldr	r3, [r0, #0]
{
   c6e7e:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
   c6e80:	b123      	cbz	r3, c6e8c <_ZN6String7reserveEj+0x12>
   c6e82:	6843      	ldr	r3, [r0, #4]
   c6e84:	428b      	cmp	r3, r1
   c6e86:	d301      	bcc.n	c6e8c <_ZN6String7reserveEj+0x12>
   c6e88:	2001      	movs	r0, #1
}
   c6e8a:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
   c6e8c:	4620      	mov	r0, r4
   c6e8e:	f7ff ffe8 	bl	c6e62 <_ZN6String12changeBufferEj>
   c6e92:	2800      	cmp	r0, #0
   c6e94:	d0f9      	beq.n	c6e8a <_ZN6String7reserveEj+0x10>
        if (len == 0) {
   c6e96:	68a3      	ldr	r3, [r4, #8]
   c6e98:	2b00      	cmp	r3, #0
   c6e9a:	d1f5      	bne.n	c6e88 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
   c6e9c:	6822      	ldr	r2, [r4, #0]
   c6e9e:	7013      	strb	r3, [r2, #0]
   c6ea0:	e7f2      	b.n	c6e88 <_ZN6String7reserveEj+0xe>

000c6ea2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   c6ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c6ea4:	460d      	mov	r5, r1
    if (!reserve(length)) {
   c6ea6:	4611      	mov	r1, r2
   c6ea8:	9201      	str	r2, [sp, #4]
{
   c6eaa:	4604      	mov	r4, r0
    if (!reserve(length)) {
   c6eac:	f7ff ffe5 	bl	c6e7a <_ZN6String7reserveEj>
   c6eb0:	9a01      	ldr	r2, [sp, #4]
   c6eb2:	b928      	cbnz	r0, c6ec0 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
   c6eb4:	4620      	mov	r0, r4
   c6eb6:	f7ff ffc9 	bl	c6e4c <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
   c6eba:	4620      	mov	r0, r4
   c6ebc:	b003      	add	sp, #12
   c6ebe:	bd30      	pop	{r4, r5, pc}
    len = length;
   c6ec0:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
   c6ec2:	4629      	mov	r1, r5
   c6ec4:	6820      	ldr	r0, [r4, #0]
   c6ec6:	f003 f96f 	bl	ca1a8 <memcpy>
    buffer[len] = 0;
   c6eca:	6822      	ldr	r2, [r4, #0]
   c6ecc:	68a3      	ldr	r3, [r4, #8]
   c6ece:	2100      	movs	r1, #0
   c6ed0:	54d1      	strb	r1, [r2, r3]
    return *this;
   c6ed2:	e7f2      	b.n	c6eba <_ZN6String4copyEPKcj+0x18>

000c6ed4 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
   c6ed4:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   c6ed6:	b513      	push	{r0, r1, r4, lr}
    capacity_ = 0;
   c6ed8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   c6edc:	4604      	mov	r4, r0
    len = 0;
   c6ede:	6083      	str	r3, [r0, #8]
    flags = 0;
   c6ee0:	7303      	strb	r3, [r0, #12]
    if (cstr) {
   c6ee2:	b141      	cbz	r1, c6ef6 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
   c6ee4:	4608      	mov	r0, r1
   c6ee6:	9101      	str	r1, [sp, #4]
   c6ee8:	f7ee f888 	bl	b4ffc <strlen>
   c6eec:	9901      	ldr	r1, [sp, #4]
   c6eee:	4602      	mov	r2, r0
   c6ef0:	4620      	mov	r0, r4
   c6ef2:	f7ff ffd6 	bl	c6ea2 <_ZN6String4copyEPKcj>
}
   c6ef6:	4620      	mov	r0, r4
   c6ef8:	b002      	add	sp, #8
   c6efa:	bd10      	pop	{r4, pc}

000c6efc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
   c6efc:	4288      	cmp	r0, r1
{
   c6efe:	b510      	push	{r4, lr}
   c6f00:	4604      	mov	r4, r0
    if (this == &rhs) {
   c6f02:	d005      	beq.n	c6f10 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
   c6f04:	680b      	ldr	r3, [r1, #0]
   c6f06:	b12b      	cbz	r3, c6f14 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
   c6f08:	688a      	ldr	r2, [r1, #8]
   c6f0a:	4619      	mov	r1, r3
   c6f0c:	f7ff ffc9 	bl	c6ea2 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
   c6f10:	4620      	mov	r0, r4
   c6f12:	bd10      	pop	{r4, pc}
        invalidate();
   c6f14:	f7ff ff9a 	bl	c6e4c <_ZN6String10invalidateEv>
   c6f18:	e7fa      	b.n	c6f10 <_ZN6StringaSERKS_+0x14>

000c6f1a <_ZN6StringC1ERKS_>:
String::String(const String &value)
   c6f1a:	b510      	push	{r4, lr}
    buffer = nullptr;
   c6f1c:	2300      	movs	r3, #0
String::String(const String &value)
   c6f1e:	4604      	mov	r4, r0
    capacity_ = 0;
   c6f20:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
   c6f24:	6083      	str	r3, [r0, #8]
    flags = 0;
   c6f26:	7303      	strb	r3, [r0, #12]
    *this = value;
   c6f28:	f7ff ffe8 	bl	c6efc <_ZN6StringaSERKS_>
}
   c6f2c:	4620      	mov	r0, r4
   c6f2e:	bd10      	pop	{r4, pc}

000c6f30 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   c6f30:	b507      	push	{r0, r1, r2, lr}
   c6f32:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   c6f34:	2100      	movs	r1, #0
{
   c6f36:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   c6f38:	9100      	str	r1, [sp, #0]
   c6f3a:	2001      	movs	r0, #1
   c6f3c:	218c      	movs	r1, #140	; 0x8c
   c6f3e:	f7fe fac5 	bl	c54cc <system_reset>
}
   c6f42:	b003      	add	sp, #12
   c6f44:	f85d fb04 	ldr.w	pc, [sp], #4

000c6f48 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   c6f48:	4601      	mov	r1, r0
    reset(0, flags);
   c6f4a:	2000      	movs	r0, #0
   c6f4c:	f7ff bff0 	b.w	c6f30 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000c6f50 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   c6f50:	2000      	movs	r0, #0
   c6f52:	f7ff bff9 	b.w	c6f48 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000c6f56 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   c6f56:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   c6f58:	2420      	movs	r4, #32
{
   c6f5a:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   c6f5c:	4622      	mov	r2, r4
   c6f5e:	2100      	movs	r1, #0
   c6f60:	4668      	mov	r0, sp
   c6f62:	f003 f92f 	bl	ca1c4 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   c6f66:	2100      	movs	r1, #0
   c6f68:	4668      	mov	r0, sp
    info.size = sizeof(info);
   c6f6a:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   c6f6e:	f7fe f82f 	bl	c4fd0 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   c6f72:	9801      	ldr	r0, [sp, #4]
   c6f74:	b008      	add	sp, #32
   c6f76:	bd10      	pop	{r4, pc}

000c6f78 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   c6f78:	4b05      	ldr	r3, [pc, #20]	; (c6f90 <_GLOBAL__sub_I_System+0x18>)
   c6f7a:	2202      	movs	r2, #2
   c6f7c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   c6f7e:	4b05      	ldr	r3, [pc, #20]	; (c6f94 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   c6f80:	4a05      	ldr	r2, [pc, #20]	; (c6f98 <_GLOBAL__sub_I_System+0x20>)
   c6f82:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   c6f84:	2000      	movs	r0, #0
   c6f86:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   c6f8a:	f7fe ba4b 	b.w	c5424 <set_system_mode>
   c6f8e:	bf00      	nop
   c6f90:	2003e6a4 	.word	0x2003e6a4
   c6f94:	2003e698 	.word	0x2003e698
   c6f98:	ffff0000 	.word	0xffff0000

000c6f9c <_ZN8particle11TetherClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   c6f9c:	2200      	movs	r2, #0
   c6f9e:	6840      	ldr	r0, [r0, #4]
   c6fa0:	4611      	mov	r1, r2
   c6fa2:	f7fe bb2d 	b.w	c5600 <network_listening>

000c6fa6 <_ZN8particle11TetherClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   c6fa6:	2200      	movs	r2, #0
   c6fa8:	6840      	ldr	r0, [r0, #4]
   c6faa:	4611      	mov	r1, r2
   c6fac:	f7fe bb38 	b.w	c5620 <network_get_listen_timeout>

000c6fb0 <_ZN8particle11TetherClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   c6fb0:	6840      	ldr	r0, [r0, #4]
   c6fb2:	2200      	movs	r2, #0
   c6fb4:	f7fe bb2c 	b.w	c5610 <network_set_listen_timeout>

000c6fb8 <_ZN8particle11TetherClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   c6fb8:	6840      	ldr	r0, [r0, #4]
   c6fba:	2200      	movs	r2, #0
   c6fbc:	f081 0101 	eor.w	r1, r1, #1
   c6fc0:	f7fe bb16 	b.w	c55f0 <network_listen>

000c6fc4 <_ZN8particle11TetherClass3offEv>:
        network_off(*this, 0, 0, NULL);
   c6fc4:	2300      	movs	r3, #0
   c6fc6:	6840      	ldr	r0, [r0, #4]
   c6fc8:	461a      	mov	r2, r3
   c6fca:	4619      	mov	r1, r3
   c6fcc:	f7fe bb08 	b.w	c55e0 <network_off>

000c6fd0 <_ZN8particle11TetherClass2onEv>:
        network_on(*this, 0, 0, NULL);
   c6fd0:	2300      	movs	r3, #0
   c6fd2:	6840      	ldr	r0, [r0, #4]
   c6fd4:	461a      	mov	r2, r3
   c6fd6:	4619      	mov	r1, r3
   c6fd8:	f7fe bafa 	b.w	c55d0 <network_on>

000c6fdc <_ZN8particle11TetherClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   c6fdc:	2200      	movs	r2, #0
   c6fde:	6840      	ldr	r0, [r0, #4]
   c6fe0:	4611      	mov	r1, r2
   c6fe2:	f7fe baed 	b.w	c55c0 <network_ready>

000c6fe6 <_ZN8particle11TetherClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   c6fe6:	2200      	movs	r2, #0
   c6fe8:	6840      	ldr	r0, [r0, #4]
   c6fea:	4611      	mov	r1, r2
   c6fec:	f7fe bad8 	b.w	c55a0 <network_connecting>

000c6ff0 <_ZN8particle11TetherClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   c6ff0:	6840      	ldr	r0, [r0, #4]
   c6ff2:	2200      	movs	r2, #0
   c6ff4:	2102      	movs	r1, #2
   c6ff6:	f7fe badb 	b.w	c55b0 <network_disconnect>

000c6ffa <_ZN8particle11TetherClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   c6ffa:	2300      	movs	r3, #0
   c6ffc:	6840      	ldr	r0, [r0, #4]
   c6ffe:	461a      	mov	r2, r3
   c7000:	f7fe bac6 	b.w	c5590 <network_connect>

000c7004 <_GLOBAL__sub_I__ZN8particle6TetherE>:
   c7004:	4b02      	ldr	r3, [pc, #8]	; (c7010 <_GLOBAL__sub_I__ZN8particle6TetherE+0xc>)
   c7006:	2206      	movs	r2, #6
   c7008:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_PPP_SERVER) {
   c700a:	4a02      	ldr	r2, [pc, #8]	; (c7014 <_GLOBAL__sub_I__ZN8particle6TetherE+0x10>)
   c700c:	601a      	str	r2, [r3, #0]
        return if_request(iface, IF_REQ_DRIVER_SPECIFIC, &settings, sizeof(settings), nullptr);
    }
    return SYSTEM_ERROR_NOT_FOUND;
}

} // spark
   c700e:	4770      	bx	lr
   c7010:	2003e6a8 	.word	0x2003e6a8
   c7014:	000ccf68 	.word	0x000ccf68

000c7018 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   c7018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   c701c:	4a15      	ldr	r2, [pc, #84]	; (c7074 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   c701e:	f8df 8060 	ldr.w	r8, [pc, #96]	; c7080 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   c7022:	e9d2 6300 	ldrd	r6, r3, [r2]
   c7026:	1980      	adds	r0, r0, r6
   c7028:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   c702c:	4b12      	ldr	r3, [pc, #72]	; (c7078 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   c702e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   c7032:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   c7036:	1986      	adds	r6, r0, r6
   c7038:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   c703c:	42bb      	cmp	r3, r7
   c703e:	bf08      	it	eq
   c7040:	42b2      	cmpeq	r2, r6
{
   c7042:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   c7044:	d013      	beq.n	c706e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   c7046:	a903      	add	r1, sp, #12
   c7048:	4668      	mov	r0, sp
   c704a:	e9cd 6700 	strd	r6, r7, [sp]
   c704e:	f7fe fb67 	bl	c5720 <localtime_r>
	calendar_time.tm_year += 1900;
   c7052:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c7054:	4d09      	ldr	r5, [pc, #36]	; (c707c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   c7056:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c705a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   c705c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c705e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c7060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   c7062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   c7064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   c7066:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   c706a:	6823      	ldr	r3, [r4, #0]
   c706c:	602b      	str	r3, [r5, #0]
    }
}
   c706e:	b00c      	add	sp, #48	; 0x30
   c7070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c7074:	2003e6e0 	.word	0x2003e6e0
   c7078:	2003e6d8 	.word	0x2003e6d8
   c707c:	2003e6b4 	.word	0x2003e6b4
   c7080:	2003e6e8 	.word	0x2003e6e8

000c7084 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   c7084:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c7086:	2000      	movs	r0, #0
   c7088:	f7fe fa62 	bl	c5550 <spark_sync_time_pending>
   c708c:	b128      	cbz	r0, c709a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   c708e:	f7fe fa3f 	bl	c5510 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   c7092:	f080 0001 	eor.w	r0, r0, #1
   c7096:	b2c0      	uxtb	r0, r0
    }
   c7098:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   c709a:	2001      	movs	r0, #1
   c709c:	e7fc      	b.n	c7098 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000c70a0 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   c70a0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c70a2:	f7ff ffb9 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   c70a6:	4b01      	ldr	r3, [pc, #4]	; (c70ac <_ZN9TimeClass4hourEx+0xc>)
   c70a8:	6898      	ldr	r0, [r3, #8]
   c70aa:	bd08      	pop	{r3, pc}
   c70ac:	2003e6b4 	.word	0x2003e6b4

000c70b0 <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   c70b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c70b2:	f7ff ffb1 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
   c70b6:	4b01      	ldr	r3, [pc, #4]	; (c70bc <_ZN9TimeClass6minuteEx+0xc>)
   c70b8:	6858      	ldr	r0, [r3, #4]
   c70ba:	bd08      	pop	{r3, pc}
   c70bc:	2003e6b4 	.word	0x2003e6b4

000c70c0 <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   c70c0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c70c2:	f7ff ffa9 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
   c70c6:	4b01      	ldr	r3, [pc, #4]	; (c70cc <_ZN9TimeClass6secondEx+0xc>)
   c70c8:	6818      	ldr	r0, [r3, #0]
   c70ca:	bd08      	pop	{r3, pc}
   c70cc:	2003e6b4 	.word	0x2003e6b4

000c70d0 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   c70d0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c70d2:	f7ff ffa1 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   c70d6:	4b01      	ldr	r3, [pc, #4]	; (c70dc <_ZN9TimeClass3dayEx+0xc>)
   c70d8:	68d8      	ldr	r0, [r3, #12]
   c70da:	bd08      	pop	{r3, pc}
   c70dc:	2003e6b4 	.word	0x2003e6b4

000c70e0 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   c70e0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c70e2:	f7ff ff99 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   c70e6:	4b02      	ldr	r3, [pc, #8]	; (c70f0 <_ZN9TimeClass5monthEx+0x10>)
   c70e8:	6918      	ldr	r0, [r3, #16]
}
   c70ea:	3001      	adds	r0, #1
   c70ec:	bd08      	pop	{r3, pc}
   c70ee:	bf00      	nop
   c70f0:	2003e6b4 	.word	0x2003e6b4

000c70f4 <_ZN9TimeClass4yearEx>:
	return year(now());
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
   c70f4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   c70f6:	f7ff ff8f 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_year;
}
   c70fa:	4b01      	ldr	r3, [pc, #4]	; (c7100 <_ZN9TimeClass4yearEx+0xc>)
   c70fc:	6958      	ldr	r0, [r3, #20]
   c70fe:	bd08      	pop	{r3, pc}
   c7100:	2003e6b4 	.word	0x2003e6b4

000c7104 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   c7104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   c7106:	4602      	mov	r2, r0
   c7108:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c710a:	4668      	mov	r0, sp
    struct timeval tv = {
   c710c:	2100      	movs	r1, #0
    };
   c710e:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   c7112:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   c7116:	f7fd ffbb 	bl	c5090 <hal_rtc_set_time>
   c711a:	4602      	mov	r2, r0
   c711c:	b910      	cbnz	r0, c7124 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   c711e:	4601      	mov	r1, r0
   c7120:	f7fe f9b8 	bl	c5494 <system_notify_time_changed>
    }
}
   c7124:	b005      	add	sp, #20
   c7126:	f85d fb04 	ldr.w	pc, [sp], #4

000c712a <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   c712a:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c712c:	2000      	movs	r0, #0
   c712e:	f7fd ff97 	bl	c5060 <hal_rtc_time_is_valid>
    if (rtcstate)
   c7132:	4604      	mov	r4, r0
   c7134:	b9a0      	cbnz	r0, c7160 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c7136:	f7fe f96d 	bl	c5414 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c713a:	2801      	cmp	r0, #1
   c713c:	d110      	bne.n	c7160 <_ZN9TimeClass7isValidEv+0x36>
   c713e:	4620      	mov	r0, r4
   c7140:	f7fe f9a0 	bl	c5484 <system_thread_get_state>
   c7144:	b960      	cbnz	r0, c7160 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c7146:	f7ff ff9d 	bl	c7084 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c714a:	b910      	cbnz	r0, c7152 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c714c:	f7fe f9d0 	bl	c54f0 <spark_process>
        while (_while() && !_condition()) {
   c7150:	e7f9      	b.n	c7146 <_ZN9TimeClass7isValidEv+0x1c>
   c7152:	f7ff ff97 	bl	c7084 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c7156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c715a:	2000      	movs	r0, #0
   c715c:	f7fd bf80 	b.w	c5060 <hal_rtc_time_is_valid>
}
   c7160:	4620      	mov	r0, r4
   c7162:	bd10      	pop	{r4, pc}

000c7164 <_ZN9TimeClass3nowEv>:
{
   c7164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c7166:	f7ff ffe0 	bl	c712a <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c716a:	2210      	movs	r2, #16
   c716c:	2100      	movs	r1, #0
   c716e:	4668      	mov	r0, sp
   c7170:	f003 f828 	bl	ca1c4 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c7174:	2100      	movs	r1, #0
   c7176:	4668      	mov	r0, sp
   c7178:	f7fd ff82 	bl	c5080 <hal_rtc_get_time>
}
   c717c:	9800      	ldr	r0, [sp, #0]
   c717e:	b005      	add	sp, #20
   c7180:	f85d fb04 	ldr.w	pc, [sp], #4

000c7184 <_ZN9TimeClass4hourEv>:
{
   c7184:	b508      	push	{r3, lr}
	return hour(now());
   c7186:	f7ff ffed 	bl	c7164 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c718a:	17c1      	asrs	r1, r0, #31
   c718c:	f7ff ff44 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
}
   c7190:	4b01      	ldr	r3, [pc, #4]	; (c7198 <_ZN9TimeClass4hourEv+0x14>)
   c7192:	6898      	ldr	r0, [r3, #8]
   c7194:	bd08      	pop	{r3, pc}
   c7196:	bf00      	nop
   c7198:	2003e6b4 	.word	0x2003e6b4

000c719c <_ZN9TimeClass6minuteEv>:
{
   c719c:	b508      	push	{r3, lr}
	return minute(now());
   c719e:	f7ff ffe1 	bl	c7164 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c71a2:	17c1      	asrs	r1, r0, #31
   c71a4:	f7ff ff38 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
}
   c71a8:	4b01      	ldr	r3, [pc, #4]	; (c71b0 <_ZN9TimeClass6minuteEv+0x14>)
   c71aa:	6858      	ldr	r0, [r3, #4]
   c71ac:	bd08      	pop	{r3, pc}
   c71ae:	bf00      	nop
   c71b0:	2003e6b4 	.word	0x2003e6b4

000c71b4 <_ZN9TimeClass6secondEv>:
{
   c71b4:	b508      	push	{r3, lr}
	return second(now());
   c71b6:	f7ff ffd5 	bl	c7164 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c71ba:	17c1      	asrs	r1, r0, #31
   c71bc:	f7ff ff2c 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
}
   c71c0:	4b01      	ldr	r3, [pc, #4]	; (c71c8 <_ZN9TimeClass6secondEv+0x14>)
   c71c2:	6818      	ldr	r0, [r3, #0]
   c71c4:	bd08      	pop	{r3, pc}
   c71c6:	bf00      	nop
   c71c8:	2003e6b4 	.word	0x2003e6b4

000c71cc <_ZN9TimeClass3dayEv>:
{
   c71cc:	b508      	push	{r3, lr}
	return day(now());
   c71ce:	f7ff ffc9 	bl	c7164 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c71d2:	17c1      	asrs	r1, r0, #31
   c71d4:	f7ff ff20 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
}
   c71d8:	4b01      	ldr	r3, [pc, #4]	; (c71e0 <_ZN9TimeClass3dayEv+0x14>)
   c71da:	68d8      	ldr	r0, [r3, #12]
   c71dc:	bd08      	pop	{r3, pc}
   c71de:	bf00      	nop
   c71e0:	2003e6b4 	.word	0x2003e6b4

000c71e4 <_ZN9TimeClass5monthEv>:
{
   c71e4:	b508      	push	{r3, lr}
	return month(now());
   c71e6:	f7ff ffbd 	bl	c7164 <_ZN9TimeClass3nowEv>
}
   c71ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   c71ee:	17c1      	asrs	r1, r0, #31
   c71f0:	f7ff bf76 	b.w	c70e0 <_ZN9TimeClass5monthEx>

000c71f4 <_ZN9TimeClass4yearEv>:
{
   c71f4:	b508      	push	{r3, lr}
	return year(now());
   c71f6:	f7ff ffb5 	bl	c7164 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c71fa:	17c1      	asrs	r1, r0, #31
   c71fc:	f7ff ff0c 	bl	c7018 <_ZL22Refresh_UnixTime_Cachex>
}
   c7200:	4b01      	ldr	r3, [pc, #4]	; (c7208 <_ZN9TimeClass4yearEv+0x14>)
   c7202:	6958      	ldr	r0, [r3, #20]
   c7204:	bd08      	pop	{r3, pc}
   c7206:	bf00      	nop
   c7208:	2003e6b4 	.word	0x2003e6b4

000c720c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c720c:	4b02      	ldr	r3, [pc, #8]	; (c7218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c720e:	681a      	ldr	r2, [r3, #0]
   c7210:	4b02      	ldr	r3, [pc, #8]	; (c721c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c7212:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c7214:	4770      	bx	lr
   c7216:	bf00      	nop
   c7218:	2002d9d8 	.word	0x2002d9d8
   c721c:	2003e6b0 	.word	0x2003e6b0

000c7220 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c7220:	4770      	bx	lr

000c7222 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c7222:	7441      	strb	r1, [r0, #17]
}
   c7224:	4770      	bx	lr

000c7226 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c7226:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c7228:	7c00      	ldrb	r0, [r0, #16]
   c722a:	f7fe f891 	bl	c5350 <hal_usart_available_data_for_write>
}
   c722e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c7232:	bd08      	pop	{r3, pc}

000c7234 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c7234:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c7236:	7c00      	ldrb	r0, [r0, #16]
   c7238:	f7fe f862 	bl	c5300 <hal_usart_available>
}
   c723c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c7240:	bd08      	pop	{r3, pc}

000c7242 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c7242:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c7244:	7c00      	ldrb	r0, [r0, #16]
   c7246:	f7fe f86b 	bl	c5320 <hal_usart_peek>
}
   c724a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c724e:	bd08      	pop	{r3, pc}

000c7250 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c7250:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c7252:	7c00      	ldrb	r0, [r0, #16]
   c7254:	f7fe f85c 	bl	c5310 <hal_usart_read>
}
   c7258:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c725c:	bd08      	pop	{r3, pc}

000c725e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c725e:	7c00      	ldrb	r0, [r0, #16]
   c7260:	f7fe b866 	b.w	c5330 <hal_usart_flush>

000c7264 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c7264:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c7266:	7c45      	ldrb	r5, [r0, #17]
{
   c7268:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c726a:	b12d      	cbz	r5, c7278 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c726c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c726e:	b003      	add	sp, #12
   c7270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c7274:	f7fe b83c 	b.w	c52f0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c7278:	7c00      	ldrb	r0, [r0, #16]
   c727a:	9101      	str	r1, [sp, #4]
   c727c:	f7fe f868 	bl	c5350 <hal_usart_available_data_for_write>
   c7280:	2800      	cmp	r0, #0
   c7282:	9901      	ldr	r1, [sp, #4]
   c7284:	dcf2      	bgt.n	c726c <_ZN11USARTSerial5writeEh+0x8>
}
   c7286:	4628      	mov	r0, r5
   c7288:	b003      	add	sp, #12
   c728a:	bd30      	pop	{r4, r5, pc}

000c728c <_ZN11USARTSerialD0Ev>:
   c728c:	b510      	push	{r4, lr}
   c728e:	2114      	movs	r1, #20
   c7290:	4604      	mov	r4, r0
   c7292:	f7ed fefa 	bl	b508a <_ZdlPvj>
   c7296:	4620      	mov	r0, r4
   c7298:	bd10      	pop	{r4, pc}
	...

000c729c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c729c:	b510      	push	{r4, lr}
   c729e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c72a2:	4604      	mov	r4, r0
   c72a4:	4608      	mov	r0, r1
   c72a6:	4611      	mov	r1, r2
   c72a8:	2200      	movs	r2, #0
   c72aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c72ae:	4b04      	ldr	r3, [pc, #16]	; (c72c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c72b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c72b2:	2301      	movs	r3, #1
  _serial = serial;
   c72b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c72b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c72b8:	f7fe f852 	bl	c5360 <hal_usart_init_ex>
}
   c72bc:	4620      	mov	r0, r4
   c72be:	bd10      	pop	{r4, pc}
   c72c0:	000ccfc8 	.word	0x000ccfc8

000c72c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c72c4:	7441      	strb	r1, [r0, #17]
}
   c72c6:	4770      	bx	lr

000c72c8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c72c8:	4770      	bx	lr

000c72ca <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c72ca:	4770      	bx	lr

000c72cc <_ZN9USBSerial4readEv>:
{
   c72cc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c72ce:	2100      	movs	r1, #0
   c72d0:	7c00      	ldrb	r0, [r0, #16]
   c72d2:	f7fe f86d 	bl	c53b0 <HAL_USB_USART_Receive_Data>
}
   c72d6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c72da:	bd08      	pop	{r3, pc}

000c72dc <_ZN9USBSerial4peekEv>:
{
   c72dc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c72de:	2101      	movs	r1, #1
   c72e0:	7c00      	ldrb	r0, [r0, #16]
   c72e2:	f7fe f865 	bl	c53b0 <HAL_USB_USART_Receive_Data>
}
   c72e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c72ea:	bd08      	pop	{r3, pc}

000c72ec <_ZN9USBSerial17availableForWriteEv>:
{
   c72ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c72ee:	7c00      	ldrb	r0, [r0, #16]
   c72f0:	f7fe f856 	bl	c53a0 <HAL_USB_USART_Available_Data_For_Write>
}
   c72f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c72f8:	bd08      	pop	{r3, pc}

000c72fa <_ZN9USBSerial9availableEv>:
{
   c72fa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c72fc:	7c00      	ldrb	r0, [r0, #16]
   c72fe:	f7fe f847 	bl	c5390 <HAL_USB_USART_Available_Data>
}
   c7302:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c7306:	bd08      	pop	{r3, pc}

000c7308 <_ZN9USBSerial5writeEh>:
{
   c7308:	b513      	push	{r0, r1, r4, lr}
   c730a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c730c:	7c00      	ldrb	r0, [r0, #16]
{
   c730e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c7310:	f7fe f846 	bl	c53a0 <HAL_USB_USART_Available_Data_For_Write>
   c7314:	2800      	cmp	r0, #0
   c7316:	9901      	ldr	r1, [sp, #4]
   c7318:	dc01      	bgt.n	c731e <_ZN9USBSerial5writeEh+0x16>
   c731a:	7c60      	ldrb	r0, [r4, #17]
   c731c:	b120      	cbz	r0, c7328 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c731e:	7c20      	ldrb	r0, [r4, #16]
   c7320:	f7fe f84e 	bl	c53c0 <HAL_USB_USART_Send_Data>
   c7324:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c7328:	b002      	add	sp, #8
   c732a:	bd10      	pop	{r4, pc}

000c732c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c732c:	7c00      	ldrb	r0, [r0, #16]
   c732e:	f7fe b84f 	b.w	c53d0 <HAL_USB_USART_Flush_Data>

000c7332 <_ZN9USBSerialD0Ev>:
   c7332:	b510      	push	{r4, lr}
   c7334:	2114      	movs	r1, #20
   c7336:	4604      	mov	r4, r0
   c7338:	f7ed fea7 	bl	b508a <_ZdlPvj>
   c733c:	4620      	mov	r0, r4
   c733e:	bd10      	pop	{r4, pc}

000c7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c7340:	b510      	push	{r4, lr}
   c7342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c7346:	4604      	mov	r4, r0
   c7348:	4608      	mov	r0, r1
   c734a:	2100      	movs	r1, #0
   c734c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c7350:	4b04      	ldr	r3, [pc, #16]	; (c7364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c7352:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c7354:	2301      	movs	r3, #1
  _serial = serial;
   c7356:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c7358:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c735a:	4611      	mov	r1, r2
   c735c:	f7fe f808 	bl	c5370 <HAL_USB_USART_Init>
}
   c7360:	4620      	mov	r0, r4
   c7362:	bd10      	pop	{r4, pc}
   c7364:	000ccffc 	.word	0x000ccffc

000c7368 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c7368:	7c00      	ldrb	r0, [r0, #16]
   c736a:	2200      	movs	r2, #0
   c736c:	f7fe b808 	b.w	c5380 <HAL_USB_USART_Begin>

000c7370 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c7370:	7c00      	ldrb	r0, [r0, #16]
   c7372:	f7fe b835 	b.w	c53e0 <HAL_USB_USART_Is_Connected>

000c7376 <_Z19acquireSerialBufferv>:
{
   c7376:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c7378:	2214      	movs	r2, #20
{
   c737a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c737c:	2100      	movs	r1, #0
   c737e:	f002 ff21 	bl	ca1c4 <memset>
}
   c7382:	4620      	mov	r0, r4
   c7384:	bd10      	pop	{r4, pc}
	...

000c7388 <_Z16_fetch_usbserialv>:
{
   c7388:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c738a:	4c0f      	ldr	r4, [pc, #60]	; (c73c8 <_Z16_fetch_usbserialv+0x40>)
{
   c738c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c738e:	a803      	add	r0, sp, #12
   c7390:	f7ff fff1 	bl	c7376 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c7394:	7821      	ldrb	r1, [r4, #0]
   c7396:	f3bf 8f5b 	dmb	ish
   c739a:	f011 0101 	ands.w	r1, r1, #1
   c739e:	d10f      	bne.n	c73c0 <_Z16_fetch_usbserialv+0x38>
   c73a0:	4620      	mov	r0, r4
   c73a2:	9101      	str	r1, [sp, #4]
   c73a4:	f7ed fe80 	bl	b50a8 <__cxa_guard_acquire>
   c73a8:	9901      	ldr	r1, [sp, #4]
   c73aa:	b148      	cbz	r0, c73c0 <_Z16_fetch_usbserialv+0x38>
   c73ac:	aa03      	add	r2, sp, #12
   c73ae:	4807      	ldr	r0, [pc, #28]	; (c73cc <_Z16_fetch_usbserialv+0x44>)
   c73b0:	f7ff ffc6 	bl	c7340 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c73b4:	4620      	mov	r0, r4
   c73b6:	f7ed fe7c 	bl	b50b2 <__cxa_guard_release>
   c73ba:	4805      	ldr	r0, [pc, #20]	; (c73d0 <_Z16_fetch_usbserialv+0x48>)
   c73bc:	f002 fed2 	bl	ca164 <atexit>
	return _usbserial;
}
   c73c0:	4802      	ldr	r0, [pc, #8]	; (c73cc <_Z16_fetch_usbserialv+0x44>)
   c73c2:	b008      	add	sp, #32
   c73c4:	bd10      	pop	{r4, pc}
   c73c6:	bf00      	nop
   c73c8:	2003e6f0 	.word	0x2003e6f0
   c73cc:	2003e6f4 	.word	0x2003e6f4
   c73d0:	000c72c9 	.word	0x000c72c9

000c73d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c73d4:	4b01      	ldr	r3, [pc, #4]	; (c73dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c73d6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c73d8:	4770      	bx	lr
   c73da:	bf00      	nop
   c73dc:	2002d9e4 	.word	0x2002d9e4

000c73e0 <serialEventRun>:
{
   c73e0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c73e2:	4b0b      	ldr	r3, [pc, #44]	; (c7410 <serialEventRun+0x30>)
   c73e4:	b143      	cbz	r3, c73f8 <serialEventRun+0x18>
   c73e6:	f7ff ffcf 	bl	c7388 <_Z16_fetch_usbserialv>
   c73ea:	6803      	ldr	r3, [r0, #0]
   c73ec:	691b      	ldr	r3, [r3, #16]
   c73ee:	4798      	blx	r3
   c73f0:	2800      	cmp	r0, #0
   c73f2:	dd01      	ble.n	c73f8 <serialEventRun+0x18>
        serialEvent();
   c73f4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c73f8:	4b06      	ldr	r3, [pc, #24]	; (c7414 <serialEventRun+0x34>)
   c73fa:	b143      	cbz	r3, c740e <serialEventRun+0x2e>
   c73fc:	f000 f9e0 	bl	c77c0 <_Z22__fetch_global_Serial1v>
   c7400:	6803      	ldr	r3, [r0, #0]
   c7402:	691b      	ldr	r3, [r3, #16]
   c7404:	4798      	blx	r3
   c7406:	2800      	cmp	r0, #0
   c7408:	dd01      	ble.n	c740e <serialEventRun+0x2e>
        serialEvent1();
   c740a:	f3af 8000 	nop.w
}
   c740e:	bd08      	pop	{r3, pc}
	...

000c7418 <_post_loop>:
{
   c7418:	b508      	push	{r3, lr}
	serialEventRun();
   c741a:	f7ff ffe1 	bl	c73e0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c741e:	f7fd fdf7 	bl	c5010 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c7422:	4b01      	ldr	r3, [pc, #4]	; (c7428 <_post_loop+0x10>)
   c7424:	6018      	str	r0, [r3, #0]
}
   c7426:	bd08      	pop	{r3, pc}
   c7428:	2003e710 	.word	0x2003e710

000c742c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c742c:	4805      	ldr	r0, [pc, #20]	; (c7444 <_Z33system_initialize_user_backup_ramv+0x18>)
   c742e:	4a06      	ldr	r2, [pc, #24]	; (c7448 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c7430:	4906      	ldr	r1, [pc, #24]	; (c744c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c7432:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c7434:	1a12      	subs	r2, r2, r0
   c7436:	f002 feb7 	bl	ca1a8 <memcpy>
    __backup_sram_signature = signature;
   c743a:	4b05      	ldr	r3, [pc, #20]	; (c7450 <_Z33system_initialize_user_backup_ramv+0x24>)
   c743c:	4a05      	ldr	r2, [pc, #20]	; (c7454 <_Z33system_initialize_user_backup_ramv+0x28>)
   c743e:	601a      	str	r2, [r3, #0]
}
   c7440:	bd08      	pop	{r3, pc}
   c7442:	bf00      	nop
   c7444:	2003f400 	.word	0x2003f400
   c7448:	2003f404 	.word	0x2003f404
   c744c:	000cd634 	.word	0x000cd634
   c7450:	2003f400 	.word	0x2003f400
   c7454:	9a271c1e 	.word	0x9a271c1e

000c7458 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c7458:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c745a:	2300      	movs	r3, #0
   c745c:	9300      	str	r3, [sp, #0]
   c745e:	461a      	mov	r2, r3
   c7460:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c7464:	f7fe f828 	bl	c54b8 <system_ctrl_set_result>
}
   c7468:	b003      	add	sp, #12
   c746a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c7470 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c7470:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c7472:	8843      	ldrh	r3, [r0, #2]
   c7474:	2b0a      	cmp	r3, #10
   c7476:	d008      	beq.n	c748a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c7478:	2b50      	cmp	r3, #80	; 0x50
   c747a:	d10b      	bne.n	c7494 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c747c:	4b09      	ldr	r3, [pc, #36]	; (c74a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c747e:	681b      	ldr	r3, [r3, #0]
   c7480:	b14b      	cbz	r3, c7496 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c7482:	b003      	add	sp, #12
   c7484:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c7488:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c748a:	f7ff ffe5 	bl	c7458 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c748e:	b003      	add	sp, #12
   c7490:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c7494:	2300      	movs	r3, #0
   c7496:	9300      	str	r3, [sp, #0]
   c7498:	461a      	mov	r2, r3
   c749a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c749e:	f7fe f80b 	bl	c54b8 <system_ctrl_set_result>
}
   c74a2:	e7f4      	b.n	c748e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c74a4:	2003e70c 	.word	0x2003e70c

000c74a8 <module_user_init_hook>:
{
   c74a8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c74aa:	4812      	ldr	r0, [pc, #72]	; (c74f4 <module_user_init_hook+0x4c>)
   c74ac:	2100      	movs	r1, #0
   c74ae:	f7fe f92f 	bl	c5710 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c74b2:	4b11      	ldr	r3, [pc, #68]	; (c74f8 <module_user_init_hook+0x50>)
   c74b4:	681a      	ldr	r2, [r3, #0]
   c74b6:	4b11      	ldr	r3, [pc, #68]	; (c74fc <module_user_init_hook+0x54>)
   c74b8:	429a      	cmp	r2, r3
   c74ba:	4b11      	ldr	r3, [pc, #68]	; (c7500 <module_user_init_hook+0x58>)
   c74bc:	bf0c      	ite	eq
   c74be:	2201      	moveq	r2, #1
   c74c0:	2200      	movne	r2, #0
   c74c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c74c4:	d001      	beq.n	c74ca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c74c6:	f7ff ffb1 	bl	c742c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c74ca:	f7fd fd89 	bl	c4fe0 <HAL_RNG_GetRandomNumber>
   c74ce:	4604      	mov	r4, r0
    srand(seed);
   c74d0:	f002 fe80 	bl	ca1d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c74d4:	4b0b      	ldr	r3, [pc, #44]	; (c7504 <module_user_init_hook+0x5c>)
   c74d6:	b113      	cbz	r3, c74de <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c74d8:	4620      	mov	r0, r4
   c74da:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c74de:	2100      	movs	r1, #0
   c74e0:	4808      	ldr	r0, [pc, #32]	; (c7504 <module_user_init_hook+0x5c>)
   c74e2:	f7fe f845 	bl	c5570 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c74e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c74ea:	4807      	ldr	r0, [pc, #28]	; (c7508 <module_user_init_hook+0x60>)
   c74ec:	2100      	movs	r1, #0
   c74ee:	f7fd bfd9 	b.w	c54a4 <system_ctrl_set_app_request_handler>
   c74f2:	bf00      	nop
   c74f4:	000c73d5 	.word	0x000c73d5
   c74f8:	2003f400 	.word	0x2003f400
   c74fc:	9a271c1e 	.word	0x9a271c1e
   c7500:	2003e708 	.word	0x2003e708
   c7504:	00000000 	.word	0x00000000
   c7508:	000c7471 	.word	0x000c7471

000c750c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c750c:	b508      	push	{r3, lr}
   c750e:	4b02      	ldr	r3, [pc, #8]	; (c7518 <spark_protocol_instance+0xc>)
   c7510:	681b      	ldr	r3, [r3, #0]
   c7512:	681b      	ldr	r3, [r3, #0]
   c7514:	9301      	str	r3, [sp, #4]
   c7516:	bd08      	pop	{r3, pc}
   c7518:	0003025c 	.word	0x0003025c

000c751c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c751c:	b508      	push	{r3, lr}
   c751e:	4b02      	ldr	r3, [pc, #8]	; (c7528 <spark_protocol_set_product_id+0xc>)
   c7520:	681b      	ldr	r3, [r3, #0]
   c7522:	685b      	ldr	r3, [r3, #4]
   c7524:	9301      	str	r3, [sp, #4]
   c7526:	bd08      	pop	{r3, pc}
   c7528:	0003025c 	.word	0x0003025c

000c752c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c752c:	b508      	push	{r3, lr}
   c752e:	4b02      	ldr	r3, [pc, #8]	; (c7538 <spark_protocol_set_product_firmware_version+0xc>)
   c7530:	681b      	ldr	r3, [r3, #0]
   c7532:	689b      	ldr	r3, [r3, #8]
   c7534:	9301      	str	r3, [sp, #4]
   c7536:	bd08      	pop	{r3, pc}
   c7538:	0003025c 	.word	0x0003025c

000c753c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c753c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c753e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c7540:	d902      	bls.n	c7548 <pinAvailable+0xc>
    return false;
   c7542:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c7544:	b002      	add	sp, #8
   c7546:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c7548:	f1a0 030b 	sub.w	r3, r0, #11
   c754c:	2b02      	cmp	r3, #2
   c754e:	d81a      	bhi.n	c7586 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c7550:	4c17      	ldr	r4, [pc, #92]	; (c75b0 <pinAvailable+0x74>)
   c7552:	7821      	ldrb	r1, [r4, #0]
   c7554:	f3bf 8f5b 	dmb	ish
   c7558:	f011 0101 	ands.w	r1, r1, #1
   c755c:	d10b      	bne.n	c7576 <pinAvailable+0x3a>
   c755e:	4620      	mov	r0, r4
   c7560:	9101      	str	r1, [sp, #4]
   c7562:	f7ed fda1 	bl	b50a8 <__cxa_guard_acquire>
   c7566:	9901      	ldr	r1, [sp, #4]
   c7568:	b128      	cbz	r0, c7576 <pinAvailable+0x3a>
   c756a:	4812      	ldr	r0, [pc, #72]	; (c75b4 <pinAvailable+0x78>)
   c756c:	f7ff fb3e 	bl	c6bec <_ZN8SPIClassC1E19hal_spi_interface_t>
   c7570:	4620      	mov	r0, r4
   c7572:	f7ed fd9e 	bl	b50b2 <__cxa_guard_release>
   c7576:	4b0f      	ldr	r3, [pc, #60]	; (c75b4 <pinAvailable+0x78>)
   c7578:	7818      	ldrb	r0, [r3, #0]
   c757a:	f7fd fe81 	bl	c5280 <hal_spi_is_enabled>
   c757e:	2800      	cmp	r0, #0
   c7580:	d1df      	bne.n	c7542 <pinAvailable+0x6>
  return true; // 'pin' is available
   c7582:	2001      	movs	r0, #1
   c7584:	e7de      	b.n	c7544 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c7586:	2801      	cmp	r0, #1
   c7588:	d809      	bhi.n	c759e <pinAvailable+0x62>
   c758a:	f000 f8b5 	bl	c76f8 <_Z19__fetch_global_Wirev>
   c758e:	2100      	movs	r1, #0
   c7590:	7c00      	ldrb	r0, [r0, #16]
   c7592:	f7fd fe15 	bl	c51c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c7596:	f080 0001 	eor.w	r0, r0, #1
   c759a:	b2c0      	uxtb	r0, r0
   c759c:	e7d2      	b.n	c7544 <pinAvailable+0x8>
   c759e:	3809      	subs	r0, #9
   c75a0:	2801      	cmp	r0, #1
   c75a2:	d8ee      	bhi.n	c7582 <pinAvailable+0x46>
   c75a4:	f000 f90c 	bl	c77c0 <_Z22__fetch_global_Serial1v>
   c75a8:	7c00      	ldrb	r0, [r0, #16]
   c75aa:	f7fd fec9 	bl	c5340 <hal_usart_is_enabled>
   c75ae:	e7f2      	b.n	c7596 <pinAvailable+0x5a>
   c75b0:	2002da50 	.word	0x2002da50
   c75b4:	2002da54 	.word	0x2002da54

000c75b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c75b8:	2823      	cmp	r0, #35	; 0x23
{
   c75ba:	b538      	push	{r3, r4, r5, lr}
   c75bc:	4604      	mov	r4, r0
   c75be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c75c0:	d80a      	bhi.n	c75d8 <pinMode+0x20>
   c75c2:	29ff      	cmp	r1, #255	; 0xff
   c75c4:	d008      	beq.n	c75d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c75c6:	f7ff ffb9 	bl	c753c <pinAvailable>
   c75ca:	b128      	cbz	r0, c75d8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   c75cc:	4629      	mov	r1, r5
   c75ce:	4620      	mov	r0, r4
}
   c75d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   c75d4:	f7fd bd74 	b.w	c50c0 <hal_gpio_mode>
}
   c75d8:	bd38      	pop	{r3, r4, r5, pc}

000c75da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   c75da:	b538      	push	{r3, r4, r5, lr}
   c75dc:	4604      	mov	r4, r0
   c75de:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   c75e0:	f7fd fd76 	bl	c50d0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c75e4:	28ff      	cmp	r0, #255	; 0xff
   c75e6:	d010      	beq.n	c760a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c75e8:	2806      	cmp	r0, #6
   c75ea:	d804      	bhi.n	c75f6 <digitalWrite+0x1c>
   c75ec:	234d      	movs	r3, #77	; 0x4d
   c75ee:	fa23 f000 	lsr.w	r0, r3, r0
   c75f2:	07c3      	lsls	r3, r0, #31
   c75f4:	d409      	bmi.n	c760a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c75f6:	4620      	mov	r0, r4
   c75f8:	f7ff ffa0 	bl	c753c <pinAvailable>
   c75fc:	b128      	cbz	r0, c760a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   c75fe:	4629      	mov	r1, r5
   c7600:	4620      	mov	r0, r4
}
   c7602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   c7606:	f7fd bd6b 	b.w	c50e0 <hal_gpio_write>
}
   c760a:	bd38      	pop	{r3, r4, r5, pc}

000c760c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   c760c:	b510      	push	{r4, lr}
   c760e:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   c7610:	f7fd fd5e 	bl	c50d0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c7614:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c7616:	b2db      	uxtb	r3, r3
   c7618:	2b01      	cmp	r3, #1
   c761a:	d908      	bls.n	c762e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c761c:	4620      	mov	r0, r4
   c761e:	f7ff ff8d 	bl	c753c <pinAvailable>
   c7622:	b120      	cbz	r0, c762e <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   c7624:	4620      	mov	r0, r4
}
   c7626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   c762a:	f7fd bd61 	b.w	c50f0 <hal_gpio_read>
}
   c762e:	2000      	movs	r0, #0
   c7630:	bd10      	pop	{r4, pc}

000c7632 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c7632:	280d      	cmp	r0, #13
{
   c7634:	b510      	push	{r4, lr}
   c7636:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c7638:	bf9c      	itt	ls
   c763a:	340e      	addls	r4, #14
   c763c:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   c763e:	4620      	mov	r0, r4
   c7640:	f7ff ff7c 	bl	c753c <pinAvailable>
   c7644:	b150      	cbz	r0, c765c <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   c7646:	2103      	movs	r1, #3
   c7648:	4620      	mov	r0, r4
   c764a:	f7fd fd31 	bl	c50b0 <hal_pin_validate_function>
   c764e:	2803      	cmp	r0, #3
   c7650:	d104      	bne.n	c765c <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c7652:	4620      	mov	r0, r4
}
   c7654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c7658:	f7fd bd62 	b.w	c5120 <hal_adc_read>
}
   c765c:	2000      	movs	r0, #0
   c765e:	bd10      	pop	{r4, pc}

000c7660 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   c7660:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   c7662:	4c08      	ldr	r4, [pc, #32]	; (c7684 <_Z21__fetch_global_EEPROMv+0x24>)
   c7664:	7823      	ldrb	r3, [r4, #0]
   c7666:	f3bf 8f5b 	dmb	ish
   c766a:	07db      	lsls	r3, r3, #31
   c766c:	d408      	bmi.n	c7680 <_Z21__fetch_global_EEPROMv+0x20>
   c766e:	4620      	mov	r0, r4
   c7670:	f7ed fd1a 	bl	b50a8 <__cxa_guard_acquire>
   c7674:	b120      	cbz	r0, c7680 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   c7676:	f7fd fcd3 	bl	c5020 <HAL_EEPROM_Init>
   c767a:	4620      	mov	r0, r4
   c767c:	f7ed fd19 	bl	b50b2 <__cxa_guard_release>
	return eeprom;
}
   c7680:	4801      	ldr	r0, [pc, #4]	; (c7688 <_Z21__fetch_global_EEPROMv+0x28>)
   c7682:	bd10      	pop	{r4, pc}
   c7684:	2003e714 	.word	0x2003e714
   c7688:	2003e718 	.word	0x2003e718

000c768c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c768c:	4770      	bx	lr

000c768e <__tcf_1>:
   c768e:	4770      	bx	lr

000c7690 <_Z17acquireWireBufferv>:
{
   c7690:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c7692:	4b0a      	ldr	r3, [pc, #40]	; (c76bc <_Z17acquireWireBufferv+0x2c>)
   c7694:	6003      	str	r3, [r0, #0]
   c7696:	2301      	movs	r3, #1
{
   c7698:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c769a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c769c:	4908      	ldr	r1, [pc, #32]	; (c76c0 <_Z17acquireWireBufferv+0x30>)
   c769e:	2020      	movs	r0, #32
   c76a0:	f000 f8b2 	bl	c7808 <_ZnajRKSt9nothrow_t>
	};
   c76a4:	2520      	movs	r5, #32
   c76a6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c76a8:	4905      	ldr	r1, [pc, #20]	; (c76c0 <_Z17acquireWireBufferv+0x30>)
	};
   c76aa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c76ac:	4628      	mov	r0, r5
   c76ae:	f000 f8ab 	bl	c7808 <_ZnajRKSt9nothrow_t>
	};
   c76b2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c76b6:	4620      	mov	r0, r4
   c76b8:	bd38      	pop	{r3, r4, r5, pc}
   c76ba:	bf00      	nop
   c76bc:	00010018 	.word	0x00010018
   c76c0:	000cd028 	.word	0x000cd028

000c76c4 <_Z18acquireWire1Bufferv>:
{
   c76c4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c76c6:	4b0a      	ldr	r3, [pc, #40]	; (c76f0 <_Z18acquireWire1Bufferv+0x2c>)
   c76c8:	6003      	str	r3, [r0, #0]
   c76ca:	2301      	movs	r3, #1
{
   c76cc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c76ce:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c76d0:	4908      	ldr	r1, [pc, #32]	; (c76f4 <_Z18acquireWire1Bufferv+0x30>)
   c76d2:	2020      	movs	r0, #32
   c76d4:	f000 f898 	bl	c7808 <_ZnajRKSt9nothrow_t>
	};
   c76d8:	2520      	movs	r5, #32
   c76da:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c76dc:	4905      	ldr	r1, [pc, #20]	; (c76f4 <_Z18acquireWire1Bufferv+0x30>)
	};
   c76de:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c76e0:	4628      	mov	r0, r5
   c76e2:	f000 f891 	bl	c7808 <_ZnajRKSt9nothrow_t>
	};
   c76e6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c76ea:	4620      	mov	r0, r4
   c76ec:	bd38      	pop	{r3, r4, r5, pc}
   c76ee:	bf00      	nop
   c76f0:	00010018 	.word	0x00010018
   c76f4:	000cd028 	.word	0x000cd028

000c76f8 <_Z19__fetch_global_Wirev>:
{
   c76f8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c76fa:	4d0e      	ldr	r5, [pc, #56]	; (c7734 <_Z19__fetch_global_Wirev+0x3c>)
   c76fc:	7829      	ldrb	r1, [r5, #0]
   c76fe:	f3bf 8f5b 	dmb	ish
   c7702:	f011 0401 	ands.w	r4, r1, #1
{
   c7706:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c7708:	d111      	bne.n	c772e <_Z19__fetch_global_Wirev+0x36>
   c770a:	4628      	mov	r0, r5
   c770c:	f7ed fccc 	bl	b50a8 <__cxa_guard_acquire>
   c7710:	b168      	cbz	r0, c772e <_Z19__fetch_global_Wirev+0x36>
   c7712:	4668      	mov	r0, sp
   c7714:	f7ff ffbc 	bl	c7690 <_Z17acquireWireBufferv>
   c7718:	466a      	mov	r2, sp
   c771a:	4621      	mov	r1, r4
   c771c:	4806      	ldr	r0, [pc, #24]	; (c7738 <_Z19__fetch_global_Wirev+0x40>)
   c771e:	f7fe fd9b 	bl	c6258 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c7722:	4628      	mov	r0, r5
   c7724:	f7ed fcc5 	bl	b50b2 <__cxa_guard_release>
   c7728:	4804      	ldr	r0, [pc, #16]	; (c773c <_Z19__fetch_global_Wirev+0x44>)
   c772a:	f002 fd1b 	bl	ca164 <atexit>
	return wire;
}
   c772e:	4802      	ldr	r0, [pc, #8]	; (c7738 <_Z19__fetch_global_Wirev+0x40>)
   c7730:	b007      	add	sp, #28
   c7732:	bd30      	pop	{r4, r5, pc}
   c7734:	2003e71c 	.word	0x2003e71c
   c7738:	2003e724 	.word	0x2003e724
   c773c:	000c768d 	.word	0x000c768d

000c7740 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c7740:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c7742:	4c0e      	ldr	r4, [pc, #56]	; (c777c <_Z20__fetch_global_Wire1v+0x3c>)
   c7744:	7823      	ldrb	r3, [r4, #0]
   c7746:	f3bf 8f5b 	dmb	ish
   c774a:	07db      	lsls	r3, r3, #31
{
   c774c:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c774e:	d411      	bmi.n	c7774 <_Z20__fetch_global_Wire1v+0x34>
   c7750:	4620      	mov	r0, r4
   c7752:	f7ed fca9 	bl	b50a8 <__cxa_guard_acquire>
   c7756:	b168      	cbz	r0, c7774 <_Z20__fetch_global_Wire1v+0x34>
   c7758:	4668      	mov	r0, sp
   c775a:	f7ff ffb3 	bl	c76c4 <_Z18acquireWire1Bufferv>
   c775e:	466a      	mov	r2, sp
   c7760:	2101      	movs	r1, #1
   c7762:	4807      	ldr	r0, [pc, #28]	; (c7780 <_Z20__fetch_global_Wire1v+0x40>)
   c7764:	f7fe fd78 	bl	c6258 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c7768:	4620      	mov	r0, r4
   c776a:	f7ed fca2 	bl	b50b2 <__cxa_guard_release>
   c776e:	4805      	ldr	r0, [pc, #20]	; (c7784 <_Z20__fetch_global_Wire1v+0x44>)
   c7770:	f002 fcf8 	bl	ca164 <atexit>
	return wire;
}
   c7774:	4802      	ldr	r0, [pc, #8]	; (c7780 <_Z20__fetch_global_Wire1v+0x40>)
   c7776:	b006      	add	sp, #24
   c7778:	bd10      	pop	{r4, pc}
   c777a:	bf00      	nop
   c777c:	2003e720 	.word	0x2003e720
   c7780:	2003e738 	.word	0x2003e738
   c7784:	000c768f 	.word	0x000c768f

000c7788 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c7788:	4770      	bx	lr
	...

000c778c <_Z20acquireSerial1Bufferv>:
{
   c778c:	b538      	push	{r3, r4, r5, lr}
   c778e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c7790:	2514      	movs	r5, #20
   c7792:	462a      	mov	r2, r5
   c7794:	2100      	movs	r1, #0
   c7796:	f002 fd15 	bl	ca1c4 <memset>
   c779a:	8025      	strh	r5, [r4, #0]
   c779c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c779e:	4907      	ldr	r1, [pc, #28]	; (c77bc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c77a0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c77a2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c77a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c77a6:	f000 f82f 	bl	c7808 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c77aa:	4904      	ldr	r1, [pc, #16]	; (c77bc <_Z20acquireSerial1Bufferv+0x30>)
    };
   c77ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c77ae:	4628      	mov	r0, r5
   c77b0:	f000 f82a 	bl	c7808 <_ZnajRKSt9nothrow_t>
    };
   c77b4:	60e0      	str	r0, [r4, #12]
}
   c77b6:	4620      	mov	r0, r4
   c77b8:	bd38      	pop	{r3, r4, r5, pc}
   c77ba:	bf00      	nop
   c77bc:	000cd028 	.word	0x000cd028

000c77c0 <_Z22__fetch_global_Serial1v>:
{
   c77c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c77c2:	4d0e      	ldr	r5, [pc, #56]	; (c77fc <_Z22__fetch_global_Serial1v+0x3c>)
   c77c4:	7829      	ldrb	r1, [r5, #0]
   c77c6:	f3bf 8f5b 	dmb	ish
   c77ca:	f011 0401 	ands.w	r4, r1, #1
{
   c77ce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c77d0:	d111      	bne.n	c77f6 <_Z22__fetch_global_Serial1v+0x36>
   c77d2:	4628      	mov	r0, r5
   c77d4:	f7ed fc68 	bl	b50a8 <__cxa_guard_acquire>
   c77d8:	b168      	cbz	r0, c77f6 <_Z22__fetch_global_Serial1v+0x36>
   c77da:	a801      	add	r0, sp, #4
   c77dc:	f7ff ffd6 	bl	c778c <_Z20acquireSerial1Bufferv>
   c77e0:	aa01      	add	r2, sp, #4
   c77e2:	4621      	mov	r1, r4
   c77e4:	4806      	ldr	r0, [pc, #24]	; (c7800 <_Z22__fetch_global_Serial1v+0x40>)
   c77e6:	f7ff fd59 	bl	c729c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c77ea:	4628      	mov	r0, r5
   c77ec:	f7ed fc61 	bl	b50b2 <__cxa_guard_release>
   c77f0:	4804      	ldr	r0, [pc, #16]	; (c7804 <_Z22__fetch_global_Serial1v+0x44>)
   c77f2:	f002 fcb7 	bl	ca164 <atexit>
    return serial1;
}
   c77f6:	4802      	ldr	r0, [pc, #8]	; (c7800 <_Z22__fetch_global_Serial1v+0x40>)
   c77f8:	b007      	add	sp, #28
   c77fa:	bd30      	pop	{r4, r5, pc}
   c77fc:	2003e74c 	.word	0x2003e74c
   c7800:	2003e750 	.word	0x2003e750
   c7804:	000c7789 	.word	0x000c7789

000c7808 <_ZnajRKSt9nothrow_t>:
   c7808:	f7ed bc3d 	b.w	b5086 <_Znaj>

000c780c <_ZSt25__throw_bad_function_callv>:
   c780c:	b508      	push	{r3, lr}
   c780e:	f7fd ff5f 	bl	c56d0 <abort>
   c7812:	0000      	movs	r0, r0
   c7814:	0000      	movs	r0, r0
	...

000c7818 <atan>:
   c7818:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c781c:	ec55 4b10 	vmov	r4, r5, d0
   c7820:	4bc3      	ldr	r3, [pc, #780]	; (c7b30 <atan+0x318>)
   c7822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
   c7826:	429e      	cmp	r6, r3
   c7828:	46aa      	mov	sl, r5
   c782a:	dd17      	ble.n	c785c <atan+0x44>
   c782c:	4bc1      	ldr	r3, [pc, #772]	; (c7b34 <atan+0x31c>)
   c782e:	429e      	cmp	r6, r3
   c7830:	dc0a      	bgt.n	c7848 <atan+0x30>
   c7832:	d007      	beq.n	c7844 <atan+0x2c>
   c7834:	f1ba 0f00 	cmp.w	sl, #0
   c7838:	f340 80cb 	ble.w	c79d2 <atan+0x1ba>
   c783c:	ed9f 0ba0 	vldr	d0, [pc, #640]	; c7ac0 <atan+0x2a8>
   c7840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c7844:	2c00      	cmp	r4, #0
   c7846:	d0f5      	beq.n	c7834 <atan+0x1c>
   c7848:	4622      	mov	r2, r4
   c784a:	462b      	mov	r3, r5
   c784c:	4620      	mov	r0, r4
   c784e:	4629      	mov	r1, r5
   c7850:	f7ec fbec 	bl	b402c <__adddf3>
   c7854:	ec41 0b10 	vmov	d0, r0, r1
   c7858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c785c:	4bb6      	ldr	r3, [pc, #728]	; (c7b38 <atan+0x320>)
   c785e:	429e      	cmp	r6, r3
   c7860:	f300 80bb 	bgt.w	c79da <atan+0x1c2>
   c7864:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   c7868:	429e      	cmp	r6, r3
   c786a:	f340 80a0 	ble.w	c79ae <atan+0x196>
   c786e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   c7872:	4622      	mov	r2, r4
   c7874:	462b      	mov	r3, r5
   c7876:	4620      	mov	r0, r4
   c7878:	4629      	mov	r1, r5
   c787a:	f7ec fd8d 	bl	b4398 <__aeabi_dmul>
   c787e:	4602      	mov	r2, r0
   c7880:	460b      	mov	r3, r1
   c7882:	4680      	mov	r8, r0
   c7884:	4689      	mov	r9, r1
   c7886:	f7ec fd87 	bl	b4398 <__aeabi_dmul>
   c788a:	a38f      	add	r3, pc, #572	; (adr r3, c7ac8 <atan+0x2b0>)
   c788c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c7890:	4606      	mov	r6, r0
   c7892:	460f      	mov	r7, r1
   c7894:	f7ec fd80 	bl	b4398 <__aeabi_dmul>
   c7898:	a38d      	add	r3, pc, #564	; (adr r3, c7ad0 <atan+0x2b8>)
   c789a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c789e:	f7ec fbc5 	bl	b402c <__adddf3>
   c78a2:	4632      	mov	r2, r6
   c78a4:	463b      	mov	r3, r7
   c78a6:	f7ec fd77 	bl	b4398 <__aeabi_dmul>
   c78aa:	a38b      	add	r3, pc, #556	; (adr r3, c7ad8 <atan+0x2c0>)
   c78ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   c78b0:	f7ec fbbc 	bl	b402c <__adddf3>
   c78b4:	4632      	mov	r2, r6
   c78b6:	463b      	mov	r3, r7
   c78b8:	f7ec fd6e 	bl	b4398 <__aeabi_dmul>
   c78bc:	a388      	add	r3, pc, #544	; (adr r3, c7ae0 <atan+0x2c8>)
   c78be:	e9d3 2300 	ldrd	r2, r3, [r3]
   c78c2:	f7ec fbb3 	bl	b402c <__adddf3>
   c78c6:	4632      	mov	r2, r6
   c78c8:	463b      	mov	r3, r7
   c78ca:	f7ec fd65 	bl	b4398 <__aeabi_dmul>
   c78ce:	a386      	add	r3, pc, #536	; (adr r3, c7ae8 <atan+0x2d0>)
   c78d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c78d4:	f7ec fbaa 	bl	b402c <__adddf3>
   c78d8:	4632      	mov	r2, r6
   c78da:	463b      	mov	r3, r7
   c78dc:	f7ec fd5c 	bl	b4398 <__aeabi_dmul>
   c78e0:	a383      	add	r3, pc, #524	; (adr r3, c7af0 <atan+0x2d8>)
   c78e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c78e6:	f7ec fba1 	bl	b402c <__adddf3>
   c78ea:	4642      	mov	r2, r8
   c78ec:	464b      	mov	r3, r9
   c78ee:	f7ec fd53 	bl	b4398 <__aeabi_dmul>
   c78f2:	a381      	add	r3, pc, #516	; (adr r3, c7af8 <atan+0x2e0>)
   c78f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c78f8:	4680      	mov	r8, r0
   c78fa:	4689      	mov	r9, r1
   c78fc:	4630      	mov	r0, r6
   c78fe:	4639      	mov	r1, r7
   c7900:	f7ec fd4a 	bl	b4398 <__aeabi_dmul>
   c7904:	a37e      	add	r3, pc, #504	; (adr r3, c7b00 <atan+0x2e8>)
   c7906:	e9d3 2300 	ldrd	r2, r3, [r3]
   c790a:	f7ec fb8d 	bl	b4028 <__aeabi_dsub>
   c790e:	4632      	mov	r2, r6
   c7910:	463b      	mov	r3, r7
   c7912:	f7ec fd41 	bl	b4398 <__aeabi_dmul>
   c7916:	a37c      	add	r3, pc, #496	; (adr r3, c7b08 <atan+0x2f0>)
   c7918:	e9d3 2300 	ldrd	r2, r3, [r3]
   c791c:	f7ec fb84 	bl	b4028 <__aeabi_dsub>
   c7920:	4632      	mov	r2, r6
   c7922:	463b      	mov	r3, r7
   c7924:	f7ec fd38 	bl	b4398 <__aeabi_dmul>
   c7928:	a379      	add	r3, pc, #484	; (adr r3, c7b10 <atan+0x2f8>)
   c792a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c792e:	f7ec fb7b 	bl	b4028 <__aeabi_dsub>
   c7932:	4632      	mov	r2, r6
   c7934:	463b      	mov	r3, r7
   c7936:	f7ec fd2f 	bl	b4398 <__aeabi_dmul>
   c793a:	a377      	add	r3, pc, #476	; (adr r3, c7b18 <atan+0x300>)
   c793c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c7940:	f7ec fb72 	bl	b4028 <__aeabi_dsub>
   c7944:	4632      	mov	r2, r6
   c7946:	463b      	mov	r3, r7
   c7948:	f7ec fd26 	bl	b4398 <__aeabi_dmul>
   c794c:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   c7950:	4602      	mov	r2, r0
   c7952:	460b      	mov	r3, r1
   c7954:	4640      	mov	r0, r8
   c7956:	4649      	mov	r1, r9
   c7958:	d062      	beq.n	c7a20 <atan+0x208>
   c795a:	f7ec fb67 	bl	b402c <__adddf3>
   c795e:	4e77      	ldr	r6, [pc, #476]	; (c7b3c <atan+0x324>)
   c7960:	4622      	mov	r2, r4
   c7962:	462b      	mov	r3, r5
   c7964:	f7ec fd18 	bl	b4398 <__aeabi_dmul>
   c7968:	4b75      	ldr	r3, [pc, #468]	; (c7b40 <atan+0x328>)
   c796a:	eb06 06cb 	add.w	r6, r6, fp, lsl #3
   c796e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   c7972:	449b      	add	fp, r3
   c7974:	e9db 2300 	ldrd	r2, r3, [fp]
   c7978:	f7ec fb56 	bl	b4028 <__aeabi_dsub>
   c797c:	4622      	mov	r2, r4
   c797e:	462b      	mov	r3, r5
   c7980:	f7ec fb52 	bl	b4028 <__aeabi_dsub>
   c7984:	4602      	mov	r2, r0
   c7986:	460b      	mov	r3, r1
   c7988:	e9d6 0100 	ldrd	r0, r1, [r6]
   c798c:	f7ec fb4c 	bl	b4028 <__aeabi_dsub>
   c7990:	f1ba 0f00 	cmp.w	sl, #0
   c7994:	ec41 0b10 	vmov	d0, r0, r1
   c7998:	f6bf af5e 	bge.w	c7858 <atan+0x40>
   c799c:	ee10 1a90 	vmov	r1, s1
   c79a0:	4602      	mov	r2, r0
   c79a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c79a6:	ec43 2b10 	vmov	d0, r2, r3
   c79aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c79ae:	a35c      	add	r3, pc, #368	; (adr r3, c7b20 <atan+0x308>)
   c79b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c79b4:	ee10 0a10 	vmov	r0, s0
   c79b8:	4629      	mov	r1, r5
   c79ba:	f7ec fb37 	bl	b402c <__adddf3>
   c79be:	4b61      	ldr	r3, [pc, #388]	; (c7b44 <atan+0x32c>)
   c79c0:	2200      	movs	r2, #0
   c79c2:	f7ec ff79 	bl	b48b8 <__aeabi_dcmpgt>
   c79c6:	2800      	cmp	r0, #0
   c79c8:	f43f af51 	beq.w	c786e <atan+0x56>
   c79cc:	ec45 4b10 	vmov	d0, r4, r5
   c79d0:	e742      	b.n	c7858 <atan+0x40>
   c79d2:	ed9f 0b55 	vldr	d0, [pc, #340]	; c7b28 <atan+0x310>
   c79d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c79da:	f000 f905 	bl	c7be8 <fabs>
   c79de:	4b5a      	ldr	r3, [pc, #360]	; (c7b48 <atan+0x330>)
   c79e0:	429e      	cmp	r6, r3
   c79e2:	ec55 4b10 	vmov	r4, r5, d0
   c79e6:	dc2b      	bgt.n	c7a40 <atan+0x228>
   c79e8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   c79ec:	429e      	cmp	r6, r3
   c79ee:	dc56      	bgt.n	c7a9e <atan+0x286>
   c79f0:	ee10 2a10 	vmov	r2, s0
   c79f4:	462b      	mov	r3, r5
   c79f6:	ee10 0a10 	vmov	r0, s0
   c79fa:	4629      	mov	r1, r5
   c79fc:	f7ec fb16 	bl	b402c <__adddf3>
   c7a00:	4b50      	ldr	r3, [pc, #320]	; (c7b44 <atan+0x32c>)
   c7a02:	2200      	movs	r2, #0
   c7a04:	f7ec fb10 	bl	b4028 <__aeabi_dsub>
   c7a08:	4602      	mov	r2, r0
   c7a0a:	460b      	mov	r3, r1
   c7a0c:	4620      	mov	r0, r4
   c7a0e:	4629      	mov	r1, r5
   c7a10:	4614      	mov	r4, r2
   c7a12:	461d      	mov	r5, r3
   c7a14:	f04f 0b00 	mov.w	fp, #0
   c7a18:	2200      	movs	r2, #0
   c7a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c7a1e:	e027      	b.n	c7a70 <atan+0x258>
   c7a20:	f7ec fb04 	bl	b402c <__adddf3>
   c7a24:	4622      	mov	r2, r4
   c7a26:	462b      	mov	r3, r5
   c7a28:	f7ec fcb6 	bl	b4398 <__aeabi_dmul>
   c7a2c:	4602      	mov	r2, r0
   c7a2e:	460b      	mov	r3, r1
   c7a30:	4620      	mov	r0, r4
   c7a32:	4629      	mov	r1, r5
   c7a34:	f7ec faf8 	bl	b4028 <__aeabi_dsub>
   c7a38:	ec41 0b10 	vmov	d0, r0, r1
   c7a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c7a40:	4b42      	ldr	r3, [pc, #264]	; (c7b4c <atan+0x334>)
   c7a42:	429e      	cmp	r6, r3
   c7a44:	da1f      	bge.n	c7a86 <atan+0x26e>
   c7a46:	4b42      	ldr	r3, [pc, #264]	; (c7b50 <atan+0x338>)
   c7a48:	2200      	movs	r2, #0
   c7a4a:	4629      	mov	r1, r5
   c7a4c:	ee10 0a10 	vmov	r0, s0
   c7a50:	f7ec faea 	bl	b4028 <__aeabi_dsub>
   c7a54:	4602      	mov	r2, r0
   c7a56:	460b      	mov	r3, r1
   c7a58:	4620      	mov	r0, r4
   c7a5a:	4629      	mov	r1, r5
   c7a5c:	4614      	mov	r4, r2
   c7a5e:	461d      	mov	r5, r3
   c7a60:	2200      	movs	r2, #0
   c7a62:	4b3b      	ldr	r3, [pc, #236]	; (c7b50 <atan+0x338>)
   c7a64:	f04f 0b02 	mov.w	fp, #2
   c7a68:	f7ec fc96 	bl	b4398 <__aeabi_dmul>
   c7a6c:	4b35      	ldr	r3, [pc, #212]	; (c7b44 <atan+0x32c>)
   c7a6e:	2200      	movs	r2, #0
   c7a70:	f7ec fadc 	bl	b402c <__adddf3>
   c7a74:	4602      	mov	r2, r0
   c7a76:	460b      	mov	r3, r1
   c7a78:	4620      	mov	r0, r4
   c7a7a:	4629      	mov	r1, r5
   c7a7c:	f7ec fdb6 	bl	b45ec <__aeabi_ddiv>
   c7a80:	4604      	mov	r4, r0
   c7a82:	460d      	mov	r5, r1
   c7a84:	e6f5      	b.n	c7872 <atan+0x5a>
   c7a86:	462b      	mov	r3, r5
   c7a88:	4932      	ldr	r1, [pc, #200]	; (c7b54 <atan+0x33c>)
   c7a8a:	ee10 2a10 	vmov	r2, s0
   c7a8e:	2000      	movs	r0, #0
   c7a90:	f7ec fdac 	bl	b45ec <__aeabi_ddiv>
   c7a94:	f04f 0b03 	mov.w	fp, #3
   c7a98:	4604      	mov	r4, r0
   c7a9a:	460d      	mov	r5, r1
   c7a9c:	e6e9      	b.n	c7872 <atan+0x5a>
   c7a9e:	4b29      	ldr	r3, [pc, #164]	; (c7b44 <atan+0x32c>)
   c7aa0:	2200      	movs	r2, #0
   c7aa2:	4629      	mov	r1, r5
   c7aa4:	ee10 0a10 	vmov	r0, s0
   c7aa8:	f7ec fabe 	bl	b4028 <__aeabi_dsub>
   c7aac:	4602      	mov	r2, r0
   c7aae:	460b      	mov	r3, r1
   c7ab0:	4620      	mov	r0, r4
   c7ab2:	4629      	mov	r1, r5
   c7ab4:	f04f 0b01 	mov.w	fp, #1
   c7ab8:	4614      	mov	r4, r2
   c7aba:	461d      	mov	r5, r3
   c7abc:	e7d6      	b.n	c7a6c <atan+0x254>
   c7abe:	bf00      	nop
   c7ac0:	54442d18 	.word	0x54442d18
   c7ac4:	3ff921fb 	.word	0x3ff921fb
   c7ac8:	e322da11 	.word	0xe322da11
   c7acc:	3f90ad3a 	.word	0x3f90ad3a
   c7ad0:	24760deb 	.word	0x24760deb
   c7ad4:	3fa97b4b 	.word	0x3fa97b4b
   c7ad8:	a0d03d51 	.word	0xa0d03d51
   c7adc:	3fb10d66 	.word	0x3fb10d66
   c7ae0:	c54c206e 	.word	0xc54c206e
   c7ae4:	3fb745cd 	.word	0x3fb745cd
   c7ae8:	920083ff 	.word	0x920083ff
   c7aec:	3fc24924 	.word	0x3fc24924
   c7af0:	5555550d 	.word	0x5555550d
   c7af4:	3fd55555 	.word	0x3fd55555
   c7af8:	2c6a6c2f 	.word	0x2c6a6c2f
   c7afc:	bfa2b444 	.word	0xbfa2b444
   c7b00:	52defd9a 	.word	0x52defd9a
   c7b04:	3fadde2d 	.word	0x3fadde2d
   c7b08:	af749a6d 	.word	0xaf749a6d
   c7b0c:	3fb3b0f2 	.word	0x3fb3b0f2
   c7b10:	fe231671 	.word	0xfe231671
   c7b14:	3fbc71c6 	.word	0x3fbc71c6
   c7b18:	9998ebc4 	.word	0x9998ebc4
   c7b1c:	3fc99999 	.word	0x3fc99999
   c7b20:	8800759c 	.word	0x8800759c
   c7b24:	7e37e43c 	.word	0x7e37e43c
   c7b28:	54442d18 	.word	0x54442d18
   c7b2c:	bff921fb 	.word	0xbff921fb
   c7b30:	440fffff 	.word	0x440fffff
   c7b34:	7ff00000 	.word	0x7ff00000
   c7b38:	3fdbffff 	.word	0x3fdbffff
   c7b3c:	000cd030 	.word	0x000cd030
   c7b40:	000cd050 	.word	0x000cd050
   c7b44:	3ff00000 	.word	0x3ff00000
   c7b48:	3ff2ffff 	.word	0x3ff2ffff
   c7b4c:	40038000 	.word	0x40038000
   c7b50:	3ff80000 	.word	0x3ff80000
   c7b54:	bff00000 	.word	0xbff00000

000c7b58 <cos>:
   c7b58:	ec51 0b10 	vmov	r0, r1, d0
   c7b5c:	4a20      	ldr	r2, [pc, #128]	; (c7be0 <cos+0x88>)
   c7b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c7b62:	4293      	cmp	r3, r2
   c7b64:	dd20      	ble.n	c7ba8 <cos+0x50>
   c7b66:	b500      	push	{lr}
   c7b68:	4a1e      	ldr	r2, [pc, #120]	; (c7be4 <cos+0x8c>)
   c7b6a:	4293      	cmp	r3, r2
   c7b6c:	b085      	sub	sp, #20
   c7b6e:	dd09      	ble.n	c7b84 <cos+0x2c>
   c7b70:	ee10 2a10 	vmov	r2, s0
   c7b74:	460b      	mov	r3, r1
   c7b76:	f7ec fa57 	bl	b4028 <__aeabi_dsub>
   c7b7a:	ec41 0b10 	vmov	d0, r0, r1
   c7b7e:	b005      	add	sp, #20
   c7b80:	f85d fb04 	ldr.w	pc, [sp], #4
   c7b84:	4668      	mov	r0, sp
   c7b86:	f001 f89b 	bl	c8cc0 <__ieee754_rem_pio2>
   c7b8a:	f000 0003 	and.w	r0, r0, #3
   c7b8e:	2801      	cmp	r0, #1
   c7b90:	ed9d 1b02 	vldr	d1, [sp, #8]
   c7b94:	ed9d 0b00 	vldr	d0, [sp]
   c7b98:	d00a      	beq.n	c7bb0 <cos+0x58>
   c7b9a:	2802      	cmp	r0, #2
   c7b9c:	d016      	beq.n	c7bcc <cos+0x74>
   c7b9e:	b190      	cbz	r0, c7bc6 <cos+0x6e>
   c7ba0:	2001      	movs	r0, #1
   c7ba2:	f002 f8ed 	bl	c9d80 <__kernel_sin>
   c7ba6:	e7ea      	b.n	c7b7e <cos+0x26>
   c7ba8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; c7bd8 <cos+0x80>
   c7bac:	f001 bb7c 	b.w	c92a8 <__kernel_cos>
   c7bb0:	f002 f8e6 	bl	c9d80 <__kernel_sin>
   c7bb4:	ec53 2b10 	vmov	r2, r3, d0
   c7bb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c7bbc:	ee00 3a90 	vmov	s1, r3
   c7bc0:	b005      	add	sp, #20
   c7bc2:	f85d fb04 	ldr.w	pc, [sp], #4
   c7bc6:	f001 fb6f 	bl	c92a8 <__kernel_cos>
   c7bca:	e7d8      	b.n	c7b7e <cos+0x26>
   c7bcc:	f001 fb6c 	bl	c92a8 <__kernel_cos>
   c7bd0:	e7f0      	b.n	c7bb4 <cos+0x5c>
   c7bd2:	bf00      	nop
   c7bd4:	f3af 8000 	nop.w
	...
   c7be0:	3fe921fb 	.word	0x3fe921fb
   c7be4:	7fefffff 	.word	0x7fefffff

000c7be8 <fabs>:
   c7be8:	ec51 0b10 	vmov	r0, r1, d0
   c7bec:	ee10 2a10 	vmov	r2, s0
   c7bf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c7bf4:	ec43 2b10 	vmov	d0, r2, r3
   c7bf8:	4770      	bx	lr
   c7bfa:	bf00      	nop
   c7bfc:	0000      	movs	r0, r0
	...

000c7c00 <scalbn>:
   c7c00:	b538      	push	{r3, r4, r5, lr}
   c7c02:	ec53 2b10 	vmov	r2, r3, d0
   c7c06:	f3c3 510a 	ubfx	r1, r3, #20, #11
   c7c0a:	4604      	mov	r4, r0
   c7c0c:	469c      	mov	ip, r3
   c7c0e:	bb89      	cbnz	r1, c7c74 <scalbn+0x74>
   c7c10:	ee10 1a10 	vmov	r1, s0
   c7c14:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
   c7c18:	ea5c 0101 	orrs.w	r1, ip, r1
   c7c1c:	d029      	beq.n	c7c72 <scalbn+0x72>
   c7c1e:	4619      	mov	r1, r3
   c7c20:	2200      	movs	r2, #0
   c7c22:	4b3d      	ldr	r3, [pc, #244]	; (c7d18 <scalbn+0x118>)
   c7c24:	4d3d      	ldr	r5, [pc, #244]	; (c7d1c <scalbn+0x11c>)
   c7c26:	ee10 0a10 	vmov	r0, s0
   c7c2a:	f7ec fbb5 	bl	b4398 <__aeabi_dmul>
   c7c2e:	42ac      	cmp	r4, r5
   c7c30:	4602      	mov	r2, r0
   c7c32:	460b      	mov	r3, r1
   c7c34:	db16      	blt.n	c7c64 <scalbn+0x64>
   c7c36:	468c      	mov	ip, r1
   c7c38:	f3c1 510a 	ubfx	r1, r1, #20, #11
   c7c3c:	3936      	subs	r1, #54	; 0x36
   c7c3e:	4421      	add	r1, r4
   c7c40:	f240 70fe 	movw	r0, #2046	; 0x7fe
   c7c44:	4281      	cmp	r1, r0
   c7c46:	dc21      	bgt.n	c7c8c <scalbn+0x8c>
   c7c48:	2900      	cmp	r1, #0
   c7c4a:	dc47      	bgt.n	c7cdc <scalbn+0xdc>
   c7c4c:	f111 0f35 	cmn.w	r1, #53	; 0x35
   c7c50:	da34      	bge.n	c7cbc <scalbn+0xbc>
   c7c52:	f24c 3150 	movw	r1, #50000	; 0xc350
   c7c56:	428c      	cmp	r4, r1
   c7c58:	dc18      	bgt.n	c7c8c <scalbn+0x8c>
   c7c5a:	2b00      	cmp	r3, #0
   c7c5c:	a126      	add	r1, pc, #152	; (adr r1, c7cf8 <scalbn+0xf8>)
   c7c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
   c7c62:	db44      	blt.n	c7cee <scalbn+0xee>
   c7c64:	a324      	add	r3, pc, #144	; (adr r3, c7cf8 <scalbn+0xf8>)
   c7c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   c7c6a:	f7ec fb95 	bl	b4398 <__aeabi_dmul>
   c7c6e:	ec41 0b10 	vmov	d0, r0, r1
   c7c72:	bd38      	pop	{r3, r4, r5, pc}
   c7c74:	f240 70ff 	movw	r0, #2047	; 0x7ff
   c7c78:	4281      	cmp	r1, r0
   c7c7a:	d1e0      	bne.n	c7c3e <scalbn+0x3e>
   c7c7c:	ee10 0a10 	vmov	r0, s0
   c7c80:	4619      	mov	r1, r3
   c7c82:	f7ec f9d3 	bl	b402c <__adddf3>
   c7c86:	ec41 0b10 	vmov	d0, r0, r1
   c7c8a:	bd38      	pop	{r3, r4, r5, pc}
   c7c8c:	2b00      	cmp	r3, #0
   c7c8e:	a11c      	add	r1, pc, #112	; (adr r1, c7d00 <scalbn+0x100>)
   c7c90:	e9d1 0100 	ldrd	r0, r1, [r1]
   c7c94:	db07      	blt.n	c7ca6 <scalbn+0xa6>
   c7c96:	a31a      	add	r3, pc, #104	; (adr r3, c7d00 <scalbn+0x100>)
   c7c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   c7c9c:	f7ec fb7c 	bl	b4398 <__aeabi_dmul>
   c7ca0:	ec41 0b10 	vmov	d0, r0, r1
   c7ca4:	bd38      	pop	{r3, r4, r5, pc}
   c7ca6:	a118      	add	r1, pc, #96	; (adr r1, c7d08 <scalbn+0x108>)
   c7ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
   c7cac:	a314      	add	r3, pc, #80	; (adr r3, c7d00 <scalbn+0x100>)
   c7cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   c7cb2:	f7ec fb71 	bl	b4398 <__aeabi_dmul>
   c7cb6:	ec41 0b10 	vmov	d0, r0, r1
   c7cba:	e7f3      	b.n	c7ca4 <scalbn+0xa4>
   c7cbc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c7cc0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c7cc4:	3136      	adds	r1, #54	; 0x36
   c7cc6:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c7cca:	4610      	mov	r0, r2
   c7ccc:	4619      	mov	r1, r3
   c7cce:	2200      	movs	r2, #0
   c7cd0:	4b13      	ldr	r3, [pc, #76]	; (c7d20 <scalbn+0x120>)
   c7cd2:	f7ec fb61 	bl	b4398 <__aeabi_dmul>
   c7cd6:	ec41 0b10 	vmov	d0, r0, r1
   c7cda:	bd38      	pop	{r3, r4, r5, pc}
   c7cdc:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
   c7ce0:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
   c7ce4:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
   c7ce8:	ec43 2b10 	vmov	d0, r2, r3
   c7cec:	bd38      	pop	{r3, r4, r5, pc}
   c7cee:	a108      	add	r1, pc, #32	; (adr r1, c7d10 <scalbn+0x110>)
   c7cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
   c7cf4:	e7b6      	b.n	c7c64 <scalbn+0x64>
   c7cf6:	bf00      	nop
   c7cf8:	c2f8f359 	.word	0xc2f8f359
   c7cfc:	01a56e1f 	.word	0x01a56e1f
   c7d00:	8800759c 	.word	0x8800759c
   c7d04:	7e37e43c 	.word	0x7e37e43c
   c7d08:	8800759c 	.word	0x8800759c
   c7d0c:	fe37e43c 	.word	0xfe37e43c
   c7d10:	c2f8f359 	.word	0xc2f8f359
   c7d14:	81a56e1f 	.word	0x81a56e1f
   c7d18:	43500000 	.word	0x43500000
   c7d1c:	ffff3cb0 	.word	0xffff3cb0
   c7d20:	3c900000 	.word	0x3c900000
   c7d24:	00000000 	.word	0x00000000

000c7d28 <sin>:
   c7d28:	ec51 0b10 	vmov	r0, r1, d0
   c7d2c:	4a20      	ldr	r2, [pc, #128]	; (c7db0 <sin+0x88>)
   c7d2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c7d32:	4293      	cmp	r3, r2
   c7d34:	dd27      	ble.n	c7d86 <sin+0x5e>
   c7d36:	b500      	push	{lr}
   c7d38:	4a1e      	ldr	r2, [pc, #120]	; (c7db4 <sin+0x8c>)
   c7d3a:	4293      	cmp	r3, r2
   c7d3c:	b085      	sub	sp, #20
   c7d3e:	dd09      	ble.n	c7d54 <sin+0x2c>
   c7d40:	ee10 2a10 	vmov	r2, s0
   c7d44:	460b      	mov	r3, r1
   c7d46:	f7ec f96f 	bl	b4028 <__aeabi_dsub>
   c7d4a:	ec41 0b10 	vmov	d0, r0, r1
   c7d4e:	b005      	add	sp, #20
   c7d50:	f85d fb04 	ldr.w	pc, [sp], #4
   c7d54:	4668      	mov	r0, sp
   c7d56:	f000 ffb3 	bl	c8cc0 <__ieee754_rem_pio2>
   c7d5a:	f000 0003 	and.w	r0, r0, #3
   c7d5e:	2801      	cmp	r0, #1
   c7d60:	ed9d 1b02 	vldr	d1, [sp, #8]
   c7d64:	ed9d 0b00 	vldr	d0, [sp]
   c7d68:	d012      	beq.n	c7d90 <sin+0x68>
   c7d6a:	2802      	cmp	r0, #2
   c7d6c:	d017      	beq.n	c7d9e <sin+0x76>
   c7d6e:	b190      	cbz	r0, c7d96 <sin+0x6e>
   c7d70:	f001 fa9a 	bl	c92a8 <__kernel_cos>
   c7d74:	ec53 2b10 	vmov	r2, r3, d0
   c7d78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   c7d7c:	ee00 3a90 	vmov	s1, r3
   c7d80:	b005      	add	sp, #20
   c7d82:	f85d fb04 	ldr.w	pc, [sp], #4
   c7d86:	ed9f 1b08 	vldr	d1, [pc, #32]	; c7da8 <sin+0x80>
   c7d8a:	2000      	movs	r0, #0
   c7d8c:	f001 bff8 	b.w	c9d80 <__kernel_sin>
   c7d90:	f001 fa8a 	bl	c92a8 <__kernel_cos>
   c7d94:	e7db      	b.n	c7d4e <sin+0x26>
   c7d96:	2001      	movs	r0, #1
   c7d98:	f001 fff2 	bl	c9d80 <__kernel_sin>
   c7d9c:	e7d7      	b.n	c7d4e <sin+0x26>
   c7d9e:	2001      	movs	r0, #1
   c7da0:	f001 ffee 	bl	c9d80 <__kernel_sin>
   c7da4:	e7e6      	b.n	c7d74 <sin+0x4c>
   c7da6:	bf00      	nop
	...
   c7db0:	3fe921fb 	.word	0x3fe921fb
   c7db4:	7fefffff 	.word	0x7fefffff

000c7db8 <atan2>:
   c7db8:	f000 b90e 	b.w	c7fd8 <__ieee754_atan2>
   c7dbc:	0000      	movs	r0, r0
	...

000c7dc0 <pow>:
   c7dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c7dc2:	ed2d 8b02 	vpush	{d8}
   c7dc6:	ec57 6b10 	vmov	r6, r7, d0
   c7dca:	ec55 4b11 	vmov	r4, r5, d1
   c7dce:	f000 f9db 	bl	c8188 <__ieee754_pow>
   c7dd2:	4b63      	ldr	r3, [pc, #396]	; (c7f60 <pow+0x1a0>)
   c7dd4:	eeb0 8a40 	vmov.f32	s16, s0
   c7dd8:	eef0 8a60 	vmov.f32	s17, s1
   c7ddc:	f993 3000 	ldrsb.w	r3, [r3]
   c7de0:	3301      	adds	r3, #1
   c7de2:	d02a      	beq.n	c7e3a <pow+0x7a>
   c7de4:	4622      	mov	r2, r4
   c7de6:	462b      	mov	r3, r5
   c7de8:	4620      	mov	r0, r4
   c7dea:	4629      	mov	r1, r5
   c7dec:	f7ec fd6e 	bl	b48cc <__aeabi_dcmpun>
   c7df0:	bb18      	cbnz	r0, c7e3a <pow+0x7a>
   c7df2:	4632      	mov	r2, r6
   c7df4:	463b      	mov	r3, r7
   c7df6:	4630      	mov	r0, r6
   c7df8:	4639      	mov	r1, r7
   c7dfa:	f7ec fd67 	bl	b48cc <__aeabi_dcmpun>
   c7dfe:	2800      	cmp	r0, #0
   c7e00:	d144      	bne.n	c7e8c <pow+0xcc>
   c7e02:	2200      	movs	r2, #0
   c7e04:	2300      	movs	r3, #0
   c7e06:	4630      	mov	r0, r6
   c7e08:	4639      	mov	r1, r7
   c7e0a:	f7ec fd2d 	bl	b4868 <__aeabi_dcmpeq>
   c7e0e:	b1d8      	cbz	r0, c7e48 <pow+0x88>
   c7e10:	2200      	movs	r2, #0
   c7e12:	2300      	movs	r3, #0
   c7e14:	4620      	mov	r0, r4
   c7e16:	4629      	mov	r1, r5
   c7e18:	f7ec fd26 	bl	b4868 <__aeabi_dcmpeq>
   c7e1c:	2800      	cmp	r0, #0
   c7e1e:	d13d      	bne.n	c7e9c <pow+0xdc>
   c7e20:	ec45 4b10 	vmov	d0, r4, r5
   c7e24:	f002 f86a 	bl	c9efc <finite>
   c7e28:	b138      	cbz	r0, c7e3a <pow+0x7a>
   c7e2a:	4620      	mov	r0, r4
   c7e2c:	4629      	mov	r1, r5
   c7e2e:	2200      	movs	r2, #0
   c7e30:	2300      	movs	r3, #0
   c7e32:	f7ec fd23 	bl	b487c <__aeabi_dcmplt>
   c7e36:	2800      	cmp	r0, #0
   c7e38:	d15c      	bne.n	c7ef4 <pow+0x134>
   c7e3a:	eeb0 0a48 	vmov.f32	s0, s16
   c7e3e:	eef0 0a68 	vmov.f32	s1, s17
   c7e42:	ecbd 8b02 	vpop	{d8}
   c7e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c7e48:	eeb0 0a48 	vmov.f32	s0, s16
   c7e4c:	eef0 0a68 	vmov.f32	s1, s17
   c7e50:	f002 f854 	bl	c9efc <finite>
   c7e54:	b358      	cbz	r0, c7eae <pow+0xee>
   c7e56:	ec51 0b18 	vmov	r0, r1, d8
   c7e5a:	2200      	movs	r2, #0
   c7e5c:	2300      	movs	r3, #0
   c7e5e:	f7ec fd03 	bl	b4868 <__aeabi_dcmpeq>
   c7e62:	2800      	cmp	r0, #0
   c7e64:	d0e9      	beq.n	c7e3a <pow+0x7a>
   c7e66:	ec47 6b10 	vmov	d0, r6, r7
   c7e6a:	f002 f847 	bl	c9efc <finite>
   c7e6e:	2800      	cmp	r0, #0
   c7e70:	d0e3      	beq.n	c7e3a <pow+0x7a>
   c7e72:	ec45 4b10 	vmov	d0, r4, r5
   c7e76:	f002 f841 	bl	c9efc <finite>
   c7e7a:	2800      	cmp	r0, #0
   c7e7c:	d0dd      	beq.n	c7e3a <pow+0x7a>
   c7e7e:	f7fd fc37 	bl	c56f0 <__errno>
   c7e82:	2322      	movs	r3, #34	; 0x22
   c7e84:	ed9f 8b2e 	vldr	d8, [pc, #184]	; c7f40 <pow+0x180>
   c7e88:	6003      	str	r3, [r0, #0]
   c7e8a:	e7d6      	b.n	c7e3a <pow+0x7a>
   c7e8c:	4620      	mov	r0, r4
   c7e8e:	4629      	mov	r1, r5
   c7e90:	2200      	movs	r2, #0
   c7e92:	2300      	movs	r3, #0
   c7e94:	f7ec fce8 	bl	b4868 <__aeabi_dcmpeq>
   c7e98:	2800      	cmp	r0, #0
   c7e9a:	d0ce      	beq.n	c7e3a <pow+0x7a>
   c7e9c:	ed9f 8b2a 	vldr	d8, [pc, #168]	; c7f48 <pow+0x188>
   c7ea0:	eeb0 0a48 	vmov.f32	s0, s16
   c7ea4:	eef0 0a68 	vmov.f32	s1, s17
   c7ea8:	ecbd 8b02 	vpop	{d8}
   c7eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c7eae:	ec47 6b10 	vmov	d0, r6, r7
   c7eb2:	f002 f823 	bl	c9efc <finite>
   c7eb6:	2800      	cmp	r0, #0
   c7eb8:	d0cd      	beq.n	c7e56 <pow+0x96>
   c7eba:	ec45 4b10 	vmov	d0, r4, r5
   c7ebe:	f002 f81d 	bl	c9efc <finite>
   c7ec2:	2800      	cmp	r0, #0
   c7ec4:	d0c7      	beq.n	c7e56 <pow+0x96>
   c7ec6:	ec53 2b18 	vmov	r2, r3, d8
   c7eca:	ee18 0a10 	vmov	r0, s16
   c7ece:	4619      	mov	r1, r3
   c7ed0:	f7ec fcfc 	bl	b48cc <__aeabi_dcmpun>
   c7ed4:	bb20      	cbnz	r0, c7f20 <pow+0x160>
   c7ed6:	f7fd fc0b 	bl	c56f0 <__errno>
   c7eda:	4603      	mov	r3, r0
   c7edc:	2222      	movs	r2, #34	; 0x22
   c7ede:	601a      	str	r2, [r3, #0]
   c7ee0:	4630      	mov	r0, r6
   c7ee2:	4639      	mov	r1, r7
   c7ee4:	2200      	movs	r2, #0
   c7ee6:	2300      	movs	r3, #0
   c7ee8:	f7ec fcc8 	bl	b487c <__aeabi_dcmplt>
   c7eec:	b948      	cbnz	r0, c7f02 <pow+0x142>
   c7eee:	ed9f 8b18 	vldr	d8, [pc, #96]	; c7f50 <pow+0x190>
   c7ef2:	e7a2      	b.n	c7e3a <pow+0x7a>
   c7ef4:	f7fd fbfc 	bl	c56f0 <__errno>
   c7ef8:	2321      	movs	r3, #33	; 0x21
   c7efa:	ed9f 8b17 	vldr	d8, [pc, #92]	; c7f58 <pow+0x198>
   c7efe:	6003      	str	r3, [r0, #0]
   c7f00:	e79b      	b.n	c7e3a <pow+0x7a>
   c7f02:	ec45 4b10 	vmov	d0, r4, r5
   c7f06:	f002 f893 	bl	ca030 <rint>
   c7f0a:	4622      	mov	r2, r4
   c7f0c:	ec51 0b10 	vmov	r0, r1, d0
   c7f10:	462b      	mov	r3, r5
   c7f12:	f7ec fca9 	bl	b4868 <__aeabi_dcmpeq>
   c7f16:	2800      	cmp	r0, #0
   c7f18:	d1e9      	bne.n	c7eee <pow+0x12e>
   c7f1a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; c7f58 <pow+0x198>
   c7f1e:	e78c      	b.n	c7e3a <pow+0x7a>
   c7f20:	f7fd fbe6 	bl	c56f0 <__errno>
   c7f24:	2200      	movs	r2, #0
   c7f26:	2300      	movs	r3, #0
   c7f28:	2121      	movs	r1, #33	; 0x21
   c7f2a:	6001      	str	r1, [r0, #0]
   c7f2c:	4610      	mov	r0, r2
   c7f2e:	4619      	mov	r1, r3
   c7f30:	f7ec fb5c 	bl	b45ec <__aeabi_ddiv>
   c7f34:	ec41 0b18 	vmov	d8, r0, r1
   c7f38:	e77f      	b.n	c7e3a <pow+0x7a>
   c7f3a:	bf00      	nop
   c7f3c:	f3af 8000 	nop.w
	...
   c7f4c:	3ff00000 	.word	0x3ff00000
   c7f50:	00000000 	.word	0x00000000
   c7f54:	7ff00000 	.word	0x7ff00000
   c7f58:	00000000 	.word	0x00000000
   c7f5c:	fff00000 	.word	0xfff00000
   c7f60:	2002d9e0 	.word	0x2002d9e0

000c7f64 <sqrt>:
   c7f64:	b538      	push	{r3, r4, r5, lr}
   c7f66:	ed2d 8b02 	vpush	{d8}
   c7f6a:	ec55 4b10 	vmov	r4, r5, d0
   c7f6e:	f001 f8cd 	bl	c910c <__ieee754_sqrt>
   c7f72:	4b18      	ldr	r3, [pc, #96]	; (c7fd4 <sqrt+0x70>)
   c7f74:	eeb0 8a40 	vmov.f32	s16, s0
   c7f78:	eef0 8a60 	vmov.f32	s17, s1
   c7f7c:	f993 3000 	ldrsb.w	r3, [r3]
   c7f80:	3301      	adds	r3, #1
   c7f82:	d00d      	beq.n	c7fa0 <sqrt+0x3c>
   c7f84:	4622      	mov	r2, r4
   c7f86:	462b      	mov	r3, r5
   c7f88:	4620      	mov	r0, r4
   c7f8a:	4629      	mov	r1, r5
   c7f8c:	f7ec fc9e 	bl	b48cc <__aeabi_dcmpun>
   c7f90:	b930      	cbnz	r0, c7fa0 <sqrt+0x3c>
   c7f92:	2200      	movs	r2, #0
   c7f94:	2300      	movs	r3, #0
   c7f96:	4620      	mov	r0, r4
   c7f98:	4629      	mov	r1, r5
   c7f9a:	f7ec fc6f 	bl	b487c <__aeabi_dcmplt>
   c7f9e:	b930      	cbnz	r0, c7fae <sqrt+0x4a>
   c7fa0:	eeb0 0a48 	vmov.f32	s0, s16
   c7fa4:	eef0 0a68 	vmov.f32	s1, s17
   c7fa8:	ecbd 8b02 	vpop	{d8}
   c7fac:	bd38      	pop	{r3, r4, r5, pc}
   c7fae:	f7fd fb9f 	bl	c56f0 <__errno>
   c7fb2:	2200      	movs	r2, #0
   c7fb4:	2300      	movs	r3, #0
   c7fb6:	2121      	movs	r1, #33	; 0x21
   c7fb8:	6001      	str	r1, [r0, #0]
   c7fba:	4610      	mov	r0, r2
   c7fbc:	4619      	mov	r1, r3
   c7fbe:	f7ec fb15 	bl	b45ec <__aeabi_ddiv>
   c7fc2:	ec41 0b18 	vmov	d8, r0, r1
   c7fc6:	eeb0 0a48 	vmov.f32	s0, s16
   c7fca:	eef0 0a68 	vmov.f32	s1, s17
   c7fce:	ecbd 8b02 	vpop	{d8}
   c7fd2:	bd38      	pop	{r3, r4, r5, pc}
   c7fd4:	2002d9e0 	.word	0x2002d9e0

000c7fd8 <__ieee754_atan2>:
   c7fd8:	ec51 0b11 	vmov	r0, r1, d1
   c7fdc:	4243      	negs	r3, r0
   c7fde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c7fe2:	4303      	orrs	r3, r0
   c7fe4:	4e64      	ldr	r6, [pc, #400]	; (c8178 <__ieee754_atan2+0x1a0>)
   c7fe6:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
   c7fea:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
   c7fee:	42b3      	cmp	r3, r6
   c7ff0:	ec55 4b10 	vmov	r4, r5, d0
   c7ff4:	d83e      	bhi.n	c8074 <__ieee754_atan2+0x9c>
   c7ff6:	4263      	negs	r3, r4
   c7ff8:	4323      	orrs	r3, r4
   c7ffa:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
   c7ffe:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
   c8002:	42b3      	cmp	r3, r6
   c8004:	46a9      	mov	r9, r5
   c8006:	d835      	bhi.n	c8074 <__ieee754_atan2+0x9c>
   c8008:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
   c800c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c8010:	4303      	orrs	r3, r0
   c8012:	d03e      	beq.n	c8092 <__ieee754_atan2+0xba>
   c8014:	178f      	asrs	r7, r1, #30
   c8016:	f007 0702 	and.w	r7, r7, #2
   c801a:	ea5a 0304 	orrs.w	r3, sl, r4
   c801e:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
   c8022:	d02f      	beq.n	c8084 <__ieee754_atan2+0xac>
   c8024:	ea5e 0300 	orrs.w	r3, lr, r0
   c8028:	d037      	beq.n	c809a <__ieee754_atan2+0xc2>
   c802a:	45b6      	cmp	lr, r6
   c802c:	d044      	beq.n	c80b8 <__ieee754_atan2+0xe0>
   c802e:	45b2      	cmp	sl, r6
   c8030:	d033      	beq.n	c809a <__ieee754_atan2+0xc2>
   c8032:	ebaa 0e0e 	sub.w	lr, sl, lr
   c8036:	f1be 7f74 	cmp.w	lr, #63963136	; 0x3d00000
   c803a:	ea4f 532e 	mov.w	r3, lr, asr #20
   c803e:	da38      	bge.n	c80b2 <__ieee754_atan2+0xda>
   c8040:	2900      	cmp	r1, #0
   c8042:	da45      	bge.n	c80d0 <__ieee754_atan2+0xf8>
   c8044:	333c      	adds	r3, #60	; 0x3c
   c8046:	da43      	bge.n	c80d0 <__ieee754_atan2+0xf8>
   c8048:	ed9f 0b3d 	vldr	d0, [pc, #244]	; c8140 <__ieee754_atan2+0x168>
   c804c:	2f01      	cmp	r7, #1
   c804e:	d05d      	beq.n	c810c <__ieee754_atan2+0x134>
   c8050:	2f02      	cmp	r7, #2
   c8052:	d04a      	beq.n	c80ea <__ieee754_atan2+0x112>
   c8054:	b1a7      	cbz	r7, c8080 <__ieee754_atan2+0xa8>
   c8056:	ec51 0b10 	vmov	r0, r1, d0
   c805a:	a33b      	add	r3, pc, #236	; (adr r3, c8148 <__ieee754_atan2+0x170>)
   c805c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8060:	f7eb ffe2 	bl	b4028 <__aeabi_dsub>
   c8064:	a33a      	add	r3, pc, #232	; (adr r3, c8150 <__ieee754_atan2+0x178>)
   c8066:	e9d3 2300 	ldrd	r2, r3, [r3]
   c806a:	f7eb ffdd 	bl	b4028 <__aeabi_dsub>
   c806e:	ec41 0b10 	vmov	d0, r0, r1
   c8072:	e005      	b.n	c8080 <__ieee754_atan2+0xa8>
   c8074:	4622      	mov	r2, r4
   c8076:	462b      	mov	r3, r5
   c8078:	f7eb ffd8 	bl	b402c <__adddf3>
   c807c:	ec41 0b10 	vmov	d0, r0, r1
   c8080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c8084:	2f02      	cmp	r7, #2
   c8086:	d00e      	beq.n	c80a6 <__ieee754_atan2+0xce>
   c8088:	2f03      	cmp	r7, #3
   c808a:	d1f9      	bne.n	c8080 <__ieee754_atan2+0xa8>
   c808c:	ed9f 0b32 	vldr	d0, [pc, #200]	; c8158 <__ieee754_atan2+0x180>
   c8090:	e7f6      	b.n	c8080 <__ieee754_atan2+0xa8>
   c8092:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c8096:	f7ff bbbf 	b.w	c7818 <atan>
   c809a:	f1b9 0f00 	cmp.w	r9, #0
   c809e:	db05      	blt.n	c80ac <__ieee754_atan2+0xd4>
   c80a0:	ed9f 0b2f 	vldr	d0, [pc, #188]	; c8160 <__ieee754_atan2+0x188>
   c80a4:	e7ec      	b.n	c8080 <__ieee754_atan2+0xa8>
   c80a6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; c8150 <__ieee754_atan2+0x178>
   c80aa:	e7e9      	b.n	c8080 <__ieee754_atan2+0xa8>
   c80ac:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c8168 <__ieee754_atan2+0x190>
   c80b0:	e7e6      	b.n	c8080 <__ieee754_atan2+0xa8>
   c80b2:	ed9f 0b2b 	vldr	d0, [pc, #172]	; c8160 <__ieee754_atan2+0x188>
   c80b6:	e7c9      	b.n	c804c <__ieee754_atan2+0x74>
   c80b8:	45f2      	cmp	sl, lr
   c80ba:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   c80be:	d02e      	beq.n	c811e <__ieee754_atan2+0x146>
   c80c0:	2f02      	cmp	r7, #2
   c80c2:	d834      	bhi.n	c812e <__ieee754_atan2+0x156>
   c80c4:	4b2d      	ldr	r3, [pc, #180]	; (c817c <__ieee754_atan2+0x1a4>)
   c80c6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c80ca:	ed97 0b00 	vldr	d0, [r7]
   c80ce:	e7d7      	b.n	c8080 <__ieee754_atan2+0xa8>
   c80d0:	4602      	mov	r2, r0
   c80d2:	460b      	mov	r3, r1
   c80d4:	4620      	mov	r0, r4
   c80d6:	4629      	mov	r1, r5
   c80d8:	f7ec fa88 	bl	b45ec <__aeabi_ddiv>
   c80dc:	ec41 0b10 	vmov	d0, r0, r1
   c80e0:	f7ff fd82 	bl	c7be8 <fabs>
   c80e4:	f7ff fb98 	bl	c7818 <atan>
   c80e8:	e7b0      	b.n	c804c <__ieee754_atan2+0x74>
   c80ea:	a317      	add	r3, pc, #92	; (adr r3, c8148 <__ieee754_atan2+0x170>)
   c80ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   c80f0:	ec51 0b10 	vmov	r0, r1, d0
   c80f4:	f7eb ff98 	bl	b4028 <__aeabi_dsub>
   c80f8:	4602      	mov	r2, r0
   c80fa:	460b      	mov	r3, r1
   c80fc:	a114      	add	r1, pc, #80	; (adr r1, c8150 <__ieee754_atan2+0x178>)
   c80fe:	e9d1 0100 	ldrd	r0, r1, [r1]
   c8102:	f7eb ff91 	bl	b4028 <__aeabi_dsub>
   c8106:	ec41 0b10 	vmov	d0, r0, r1
   c810a:	e7b9      	b.n	c8080 <__ieee754_atan2+0xa8>
   c810c:	ee10 1a90 	vmov	r1, s1
   c8110:	ec53 2b10 	vmov	r2, r3, d0
   c8114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c8118:	ec43 2b10 	vmov	d0, r2, r3
   c811c:	e7b0      	b.n	c8080 <__ieee754_atan2+0xa8>
   c811e:	2f02      	cmp	r7, #2
   c8120:	d808      	bhi.n	c8134 <__ieee754_atan2+0x15c>
   c8122:	4b17      	ldr	r3, [pc, #92]	; (c8180 <__ieee754_atan2+0x1a8>)
   c8124:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   c8128:	ed97 0b00 	vldr	d0, [r7]
   c812c:	e7a8      	b.n	c8080 <__ieee754_atan2+0xa8>
   c812e:	ed9f 0b04 	vldr	d0, [pc, #16]	; c8140 <__ieee754_atan2+0x168>
   c8132:	e7a5      	b.n	c8080 <__ieee754_atan2+0xa8>
   c8134:	ed9f 0b0e 	vldr	d0, [pc, #56]	; c8170 <__ieee754_atan2+0x198>
   c8138:	e7a2      	b.n	c8080 <__ieee754_atan2+0xa8>
   c813a:	bf00      	nop
   c813c:	f3af 8000 	nop.w
	...
   c8148:	33145c07 	.word	0x33145c07
   c814c:	3ca1a626 	.word	0x3ca1a626
   c8150:	54442d18 	.word	0x54442d18
   c8154:	400921fb 	.word	0x400921fb
   c8158:	54442d18 	.word	0x54442d18
   c815c:	c00921fb 	.word	0xc00921fb
   c8160:	54442d18 	.word	0x54442d18
   c8164:	3ff921fb 	.word	0x3ff921fb
   c8168:	54442d18 	.word	0x54442d18
   c816c:	bff921fb 	.word	0xbff921fb
   c8170:	54442d18 	.word	0x54442d18
   c8174:	3fe921fb 	.word	0x3fe921fb
   c8178:	7ff00000 	.word	0x7ff00000
   c817c:	000cd088 	.word	0x000cd088
   c8180:	000cd070 	.word	0x000cd070
   c8184:	00000000 	.word	0x00000000

000c8188 <__ieee754_pow>:
   c8188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c818c:	ec57 6b11 	vmov	r6, r7, d1
   c8190:	ed2d 8b0c 	vpush	{d8-d13}
   c8194:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   c8198:	ea5a 0206 	orrs.w	r2, sl, r6
   c819c:	b087      	sub	sp, #28
   c819e:	d03d      	beq.n	c821c <__ieee754_pow+0x94>
   c81a0:	ec55 4b10 	vmov	r4, r5, d0
   c81a4:	4972      	ldr	r1, [pc, #456]	; (c8370 <__ieee754_pow+0x1e8>)
   c81a6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   c81aa:	4588      	cmp	r8, r1
   c81ac:	ee10 2a10 	vmov	r2, s0
   c81b0:	46a9      	mov	r9, r5
   c81b2:	dc2c      	bgt.n	c820e <__ieee754_pow+0x86>
   c81b4:	ee11 3a10 	vmov	r3, s2
   c81b8:	46bb      	mov	fp, r7
   c81ba:	d036      	beq.n	c822a <__ieee754_pow+0xa2>
   c81bc:	458a      	cmp	sl, r1
   c81be:	dc26      	bgt.n	c820e <__ieee754_pow+0x86>
   c81c0:	496b      	ldr	r1, [pc, #428]	; (c8370 <__ieee754_pow+0x1e8>)
   c81c2:	458a      	cmp	sl, r1
   c81c4:	d021      	beq.n	c820a <__ieee754_pow+0x82>
   c81c6:	f1b9 0f00 	cmp.w	r9, #0
   c81ca:	db39      	blt.n	c8240 <__ieee754_pow+0xb8>
   c81cc:	2100      	movs	r1, #0
   c81ce:	9100      	str	r1, [sp, #0]
   c81d0:	2b00      	cmp	r3, #0
   c81d2:	d151      	bne.n	c8278 <__ieee754_pow+0xf0>
   c81d4:	4b66      	ldr	r3, [pc, #408]	; (c8370 <__ieee754_pow+0x1e8>)
   c81d6:	459a      	cmp	sl, r3
   c81d8:	f000 80a2 	beq.w	c8320 <__ieee754_pow+0x198>
   c81dc:	4b65      	ldr	r3, [pc, #404]	; (c8374 <__ieee754_pow+0x1ec>)
   c81de:	459a      	cmp	sl, r3
   c81e0:	f000 80b0 	beq.w	c8344 <__ieee754_pow+0x1bc>
   c81e4:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   c81e8:	f000 84c0 	beq.w	c8b6c <__ieee754_pow+0x9e4>
   c81ec:	4b62      	ldr	r3, [pc, #392]	; (c8378 <__ieee754_pow+0x1f0>)
   c81ee:	459b      	cmp	fp, r3
   c81f0:	d142      	bne.n	c8278 <__ieee754_pow+0xf0>
   c81f2:	f1b9 0f00 	cmp.w	r9, #0
   c81f6:	db3f      	blt.n	c8278 <__ieee754_pow+0xf0>
   c81f8:	ec45 4b10 	vmov	d0, r4, r5
   c81fc:	b007      	add	sp, #28
   c81fe:	ecbd 8b0c 	vpop	{d8-d13}
   c8202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c8206:	f000 bf81 	b.w	c910c <__ieee754_sqrt>
   c820a:	2b00      	cmp	r3, #0
   c820c:	d0db      	beq.n	c81c6 <__ieee754_pow+0x3e>
   c820e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   c8212:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   c8216:	ea58 0302 	orrs.w	r3, r8, r2
   c821a:	d109      	bne.n	c8230 <__ieee754_pow+0xa8>
   c821c:	ed9f 0b50 	vldr	d0, [pc, #320]	; c8360 <__ieee754_pow+0x1d8>
   c8220:	b007      	add	sp, #28
   c8222:	ecbd 8b0c 	vpop	{d8-d13}
   c8226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c822a:	b90c      	cbnz	r4, c8230 <__ieee754_pow+0xa8>
   c822c:	45c2      	cmp	sl, r8
   c822e:	ddc7      	ble.n	c81c0 <__ieee754_pow+0x38>
   c8230:	4852      	ldr	r0, [pc, #328]	; (c837c <__ieee754_pow+0x1f4>)
   c8232:	b007      	add	sp, #28
   c8234:	ecbd 8b0c 	vpop	{d8-d13}
   c8238:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c823c:	f001 bef0 	b.w	ca020 <nan>
   c8240:	494f      	ldr	r1, [pc, #316]	; (c8380 <__ieee754_pow+0x1f8>)
   c8242:	458a      	cmp	sl, r1
   c8244:	f300 8085 	bgt.w	c8352 <__ieee754_pow+0x1ca>
   c8248:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   c824c:	458a      	cmp	sl, r1
   c824e:	dd0f      	ble.n	c8270 <__ieee754_pow+0xe8>
   c8250:	ea4f 512a 	mov.w	r1, sl, asr #20
   c8254:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   c8258:	2914      	cmp	r1, #20
   c825a:	f340 849b 	ble.w	c8b94 <__ieee754_pow+0xa0c>
   c825e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   c8262:	fa23 f001 	lsr.w	r0, r3, r1
   c8266:	fa00 f101 	lsl.w	r1, r0, r1
   c826a:	4299      	cmp	r1, r3
   c826c:	f000 84ed 	beq.w	c8c4a <__ieee754_pow+0xac2>
   c8270:	2100      	movs	r1, #0
   c8272:	9100      	str	r1, [sp, #0]
   c8274:	2b00      	cmp	r3, #0
   c8276:	d0b1      	beq.n	c81dc <__ieee754_pow+0x54>
   c8278:	ec45 4b10 	vmov	d0, r4, r5
   c827c:	9202      	str	r2, [sp, #8]
   c827e:	f7ff fcb3 	bl	c7be8 <fabs>
   c8282:	9a02      	ldr	r2, [sp, #8]
   c8284:	bb5a      	cbnz	r2, c82de <__ieee754_pow+0x156>
   c8286:	f1b8 0f00 	cmp.w	r8, #0
   c828a:	d004      	beq.n	c8296 <__ieee754_pow+0x10e>
   c828c:	4b39      	ldr	r3, [pc, #228]	; (c8374 <__ieee754_pow+0x1ec>)
   c828e:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   c8292:	429a      	cmp	r2, r3
   c8294:	d123      	bne.n	c82de <__ieee754_pow+0x156>
   c8296:	f1bb 0f00 	cmp.w	fp, #0
   c829a:	da07      	bge.n	c82ac <__ieee754_pow+0x124>
   c829c:	ec53 2b10 	vmov	r2, r3, d0
   c82a0:	4934      	ldr	r1, [pc, #208]	; (c8374 <__ieee754_pow+0x1ec>)
   c82a2:	2000      	movs	r0, #0
   c82a4:	f7ec f9a2 	bl	b45ec <__aeabi_ddiv>
   c82a8:	ec41 0b10 	vmov	d0, r0, r1
   c82ac:	f1b9 0f00 	cmp.w	r9, #0
   c82b0:	dab6      	bge.n	c8220 <__ieee754_pow+0x98>
   c82b2:	9b00      	ldr	r3, [sp, #0]
   c82b4:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   c82b8:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   c82bc:	ea58 0303 	orrs.w	r3, r8, r3
   c82c0:	f040 848d 	bne.w	c8bde <__ieee754_pow+0xa56>
   c82c4:	ec53 2b10 	vmov	r2, r3, d0
   c82c8:	4610      	mov	r0, r2
   c82ca:	4619      	mov	r1, r3
   c82cc:	f7eb feac 	bl	b4028 <__aeabi_dsub>
   c82d0:	4602      	mov	r2, r0
   c82d2:	460b      	mov	r3, r1
   c82d4:	f7ec f98a 	bl	b45ec <__aeabi_ddiv>
   c82d8:	ec41 0b10 	vmov	d0, r0, r1
   c82dc:	e7a0      	b.n	c8220 <__ieee754_pow+0x98>
   c82de:	9a00      	ldr	r2, [sp, #0]
   c82e0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   c82e4:	3b01      	subs	r3, #1
   c82e6:	9304      	str	r3, [sp, #16]
   c82e8:	4313      	orrs	r3, r2
   c82ea:	d035      	beq.n	c8358 <__ieee754_pow+0x1d0>
   c82ec:	4b25      	ldr	r3, [pc, #148]	; (c8384 <__ieee754_pow+0x1fc>)
   c82ee:	459a      	cmp	sl, r3
   c82f0:	dd4c      	ble.n	c838c <__ieee754_pow+0x204>
   c82f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   c82f6:	459a      	cmp	sl, r3
   c82f8:	4b23      	ldr	r3, [pc, #140]	; (c8388 <__ieee754_pow+0x200>)
   c82fa:	f340 83db 	ble.w	c8ab4 <__ieee754_pow+0x92c>
   c82fe:	4598      	cmp	r8, r3
   c8300:	f340 8360 	ble.w	c89c4 <__ieee754_pow+0x83c>
   c8304:	f1bb 0f00 	cmp.w	fp, #0
   c8308:	f340 8360 	ble.w	c89cc <__ieee754_pow+0x844>
   c830c:	a316      	add	r3, pc, #88	; (adr r3, c8368 <__ieee754_pow+0x1e0>)
   c830e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8312:	4610      	mov	r0, r2
   c8314:	4619      	mov	r1, r3
   c8316:	f7ec f83f 	bl	b4398 <__aeabi_dmul>
   c831a:	ec41 0b10 	vmov	d0, r0, r1
   c831e:	e77f      	b.n	c8220 <__ieee754_pow+0x98>
   c8320:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   c8324:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   c8328:	4313      	orrs	r3, r2
   c832a:	f43f af77 	beq.w	c821c <__ieee754_pow+0x94>
   c832e:	4b16      	ldr	r3, [pc, #88]	; (c8388 <__ieee754_pow+0x200>)
   c8330:	4598      	cmp	r8, r3
   c8332:	f340 837a 	ble.w	c8a2a <__ieee754_pow+0x8a2>
   c8336:	f1bb 0f00 	cmp.w	fp, #0
   c833a:	f2c0 8347 	blt.w	c89cc <__ieee754_pow+0x844>
   c833e:	ec47 6b10 	vmov	d0, r6, r7
   c8342:	e76d      	b.n	c8220 <__ieee754_pow+0x98>
   c8344:	f1bb 0f00 	cmp.w	fp, #0
   c8348:	f2c0 841a 	blt.w	c8b80 <__ieee754_pow+0x9f8>
   c834c:	ec45 4b10 	vmov	d0, r4, r5
   c8350:	e766      	b.n	c8220 <__ieee754_pow+0x98>
   c8352:	2102      	movs	r1, #2
   c8354:	9100      	str	r1, [sp, #0]
   c8356:	e73b      	b.n	c81d0 <__ieee754_pow+0x48>
   c8358:	4622      	mov	r2, r4
   c835a:	462b      	mov	r3, r5
   c835c:	e7b4      	b.n	c82c8 <__ieee754_pow+0x140>
   c835e:	bf00      	nop
   c8360:	00000000 	.word	0x00000000
   c8364:	3ff00000 	.word	0x3ff00000
   c8368:	8800759c 	.word	0x8800759c
   c836c:	7e37e43c 	.word	0x7e37e43c
   c8370:	7ff00000 	.word	0x7ff00000
   c8374:	3ff00000 	.word	0x3ff00000
   c8378:	3fe00000 	.word	0x3fe00000
   c837c:	000cd0a0 	.word	0x000cd0a0
   c8380:	433fffff 	.word	0x433fffff
   c8384:	41e00000 	.word	0x41e00000
   c8388:	3fefffff 	.word	0x3fefffff
   c838c:	4be4      	ldr	r3, [pc, #912]	; (c8720 <__ieee754_pow+0x598>)
   c838e:	ea09 0303 	and.w	r3, r9, r3
   c8392:	2200      	movs	r2, #0
   c8394:	b953      	cbnz	r3, c83ac <__ieee754_pow+0x224>
   c8396:	ec51 0b10 	vmov	r0, r1, d0
   c839a:	4be2      	ldr	r3, [pc, #904]	; (c8724 <__ieee754_pow+0x59c>)
   c839c:	f7eb fffc 	bl	b4398 <__aeabi_dmul>
   c83a0:	ec41 0b10 	vmov	d0, r0, r1
   c83a4:	ee10 8a90 	vmov	r8, s1
   c83a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
   c83ac:	ea4f 5328 	mov.w	r3, r8, asr #20
   c83b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   c83b4:	189a      	adds	r2, r3, r2
   c83b6:	4bdc      	ldr	r3, [pc, #880]	; (c8728 <__ieee754_pow+0x5a0>)
   c83b8:	9205      	str	r2, [sp, #20]
   c83ba:	f3c8 0813 	ubfx	r8, r8, #0, #20
   c83be:	f048 547f 	orr.w	r4, r8, #1069547520	; 0x3fc00000
   c83c2:	4598      	cmp	r8, r3
   c83c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   c83c8:	dd07      	ble.n	c83da <__ieee754_pow+0x252>
   c83ca:	4bd8      	ldr	r3, [pc, #864]	; (c872c <__ieee754_pow+0x5a4>)
   c83cc:	4598      	cmp	r8, r3
   c83ce:	f340 8414 	ble.w	c8bfa <__ieee754_pow+0xa72>
   c83d2:	3201      	adds	r2, #1
   c83d4:	9205      	str	r2, [sp, #20]
   c83d6:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   c83da:	ed9f 6bb9 	vldr	d6, [pc, #740]	; c86c0 <__ieee754_pow+0x538>
   c83de:	ed9f 7bba 	vldr	d7, [pc, #744]	; c86c8 <__ieee754_pow+0x540>
   c83e2:	ec53 2b16 	vmov	r2, r3, d6
   c83e6:	eeb0 ca47 	vmov.f32	s24, s14
   c83ea:	eef0 ca67 	vmov.f32	s25, s15
   c83ee:	2500      	movs	r5, #0
   c83f0:	eeb0 da47 	vmov.f32	s26, s14
   c83f4:	eef0 da67 	vmov.f32	s27, s15
   c83f8:	ec5b ab10 	vmov	sl, fp, d0
   c83fc:	46a3      	mov	fp, r4
   c83fe:	4650      	mov	r0, sl
   c8400:	4659      	mov	r1, fp
   c8402:	ec43 2b1a 	vmov	d10, r2, r3
   c8406:	f7eb fe0f 	bl	b4028 <__aeabi_dsub>
   c840a:	ec53 2b1a 	vmov	r2, r3, d10
   c840e:	4680      	mov	r8, r0
   c8410:	4689      	mov	r9, r1
   c8412:	4650      	mov	r0, sl
   c8414:	4659      	mov	r1, fp
   c8416:	f7eb fe09 	bl	b402c <__adddf3>
   c841a:	4602      	mov	r2, r0
   c841c:	460b      	mov	r3, r1
   c841e:	2000      	movs	r0, #0
   c8420:	49c3      	ldr	r1, [pc, #780]	; (c8730 <__ieee754_pow+0x5a8>)
   c8422:	f7ec f8e3 	bl	b45ec <__aeabi_ddiv>
   c8426:	ec41 0b1b 	vmov	d11, r0, r1
   c842a:	4640      	mov	r0, r8
   c842c:	ec53 2b1b 	vmov	r2, r3, d11
   c8430:	4649      	mov	r1, r9
   c8432:	f7eb ffb1 	bl	b4398 <__aeabi_dmul>
   c8436:	ec41 0b18 	vmov	d8, r0, r1
   c843a:	460a      	mov	r2, r1
   c843c:	4601      	mov	r1, r0
   c843e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   c8442:	2100      	movs	r1, #0
   c8444:	9102      	str	r1, [sp, #8]
   c8446:	1064      	asrs	r4, r4, #1
   c8448:	ec4b ab19 	vmov	d9, sl, fp
   c844c:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   c8450:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   c8454:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   c8458:	2000      	movs	r0, #0
   c845a:	1959      	adds	r1, r3, r5
   c845c:	4604      	mov	r4, r0
   c845e:	460d      	mov	r5, r1
   c8460:	4602      	mov	r2, r0
   c8462:	460b      	mov	r3, r1
   c8464:	4650      	mov	r0, sl
   c8466:	4659      	mov	r1, fp
   c8468:	f7eb ff96 	bl	b4398 <__aeabi_dmul>
   c846c:	4602      	mov	r2, r0
   c846e:	460b      	mov	r3, r1
   c8470:	4640      	mov	r0, r8
   c8472:	4649      	mov	r1, r9
   c8474:	f7eb fdd8 	bl	b4028 <__aeabi_dsub>
   c8478:	ec53 2b1a 	vmov	r2, r3, d10
   c847c:	4680      	mov	r8, r0
   c847e:	4689      	mov	r9, r1
   c8480:	4620      	mov	r0, r4
   c8482:	4629      	mov	r1, r5
   c8484:	f7eb fdd0 	bl	b4028 <__aeabi_dsub>
   c8488:	4602      	mov	r2, r0
   c848a:	460b      	mov	r3, r1
   c848c:	ec51 0b19 	vmov	r0, r1, d9
   c8490:	f7eb fdca 	bl	b4028 <__aeabi_dsub>
   c8494:	4652      	mov	r2, sl
   c8496:	465b      	mov	r3, fp
   c8498:	f7eb ff7e 	bl	b4398 <__aeabi_dmul>
   c849c:	4602      	mov	r2, r0
   c849e:	460b      	mov	r3, r1
   c84a0:	4640      	mov	r0, r8
   c84a2:	4649      	mov	r1, r9
   c84a4:	f7eb fdc0 	bl	b4028 <__aeabi_dsub>
   c84a8:	ec53 2b1b 	vmov	r2, r3, d11
   c84ac:	f7eb ff74 	bl	b4398 <__aeabi_dmul>
   c84b0:	ec53 2b18 	vmov	r2, r3, d8
   c84b4:	ec41 0b19 	vmov	d9, r0, r1
   c84b8:	ec51 0b18 	vmov	r0, r1, d8
   c84bc:	f7eb ff6c 	bl	b4398 <__aeabi_dmul>
   c84c0:	a383      	add	r3, pc, #524	; (adr r3, c86d0 <__ieee754_pow+0x548>)
   c84c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c84c6:	4604      	mov	r4, r0
   c84c8:	460d      	mov	r5, r1
   c84ca:	f7eb ff65 	bl	b4398 <__aeabi_dmul>
   c84ce:	a382      	add	r3, pc, #520	; (adr r3, c86d8 <__ieee754_pow+0x550>)
   c84d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c84d4:	f7eb fdaa 	bl	b402c <__adddf3>
   c84d8:	4622      	mov	r2, r4
   c84da:	462b      	mov	r3, r5
   c84dc:	f7eb ff5c 	bl	b4398 <__aeabi_dmul>
   c84e0:	a37f      	add	r3, pc, #508	; (adr r3, c86e0 <__ieee754_pow+0x558>)
   c84e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c84e6:	f7eb fda1 	bl	b402c <__adddf3>
   c84ea:	4622      	mov	r2, r4
   c84ec:	462b      	mov	r3, r5
   c84ee:	f7eb ff53 	bl	b4398 <__aeabi_dmul>
   c84f2:	a37d      	add	r3, pc, #500	; (adr r3, c86e8 <__ieee754_pow+0x560>)
   c84f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   c84f8:	f7eb fd98 	bl	b402c <__adddf3>
   c84fc:	4622      	mov	r2, r4
   c84fe:	462b      	mov	r3, r5
   c8500:	f7eb ff4a 	bl	b4398 <__aeabi_dmul>
   c8504:	a37a      	add	r3, pc, #488	; (adr r3, c86f0 <__ieee754_pow+0x568>)
   c8506:	e9d3 2300 	ldrd	r2, r3, [r3]
   c850a:	f7eb fd8f 	bl	b402c <__adddf3>
   c850e:	4622      	mov	r2, r4
   c8510:	462b      	mov	r3, r5
   c8512:	f7eb ff41 	bl	b4398 <__aeabi_dmul>
   c8516:	a378      	add	r3, pc, #480	; (adr r3, c86f8 <__ieee754_pow+0x570>)
   c8518:	e9d3 2300 	ldrd	r2, r3, [r3]
   c851c:	f7eb fd86 	bl	b402c <__adddf3>
   c8520:	4622      	mov	r2, r4
   c8522:	4680      	mov	r8, r0
   c8524:	4689      	mov	r9, r1
   c8526:	462b      	mov	r3, r5
   c8528:	4620      	mov	r0, r4
   c852a:	4629      	mov	r1, r5
   c852c:	f7eb ff34 	bl	b4398 <__aeabi_dmul>
   c8530:	4602      	mov	r2, r0
   c8532:	460b      	mov	r3, r1
   c8534:	4640      	mov	r0, r8
   c8536:	4649      	mov	r1, r9
   c8538:	f7eb ff2e 	bl	b4398 <__aeabi_dmul>
   c853c:	4652      	mov	r2, sl
   c853e:	4604      	mov	r4, r0
   c8540:	460d      	mov	r5, r1
   c8542:	465b      	mov	r3, fp
   c8544:	ec51 0b18 	vmov	r0, r1, d8
   c8548:	f7eb fd70 	bl	b402c <__adddf3>
   c854c:	ec53 2b19 	vmov	r2, r3, d9
   c8550:	f7eb ff22 	bl	b4398 <__aeabi_dmul>
   c8554:	4622      	mov	r2, r4
   c8556:	462b      	mov	r3, r5
   c8558:	f7eb fd68 	bl	b402c <__adddf3>
   c855c:	4652      	mov	r2, sl
   c855e:	4680      	mov	r8, r0
   c8560:	4689      	mov	r9, r1
   c8562:	465b      	mov	r3, fp
   c8564:	4650      	mov	r0, sl
   c8566:	4659      	mov	r1, fp
   c8568:	f7eb ff16 	bl	b4398 <__aeabi_dmul>
   c856c:	4602      	mov	r2, r0
   c856e:	460b      	mov	r3, r1
   c8570:	ec43 2b1a 	vmov	d10, r2, r3
   c8574:	4b6f      	ldr	r3, [pc, #444]	; (c8734 <__ieee754_pow+0x5ac>)
   c8576:	2200      	movs	r2, #0
   c8578:	f7eb fd58 	bl	b402c <__adddf3>
   c857c:	4642      	mov	r2, r8
   c857e:	464b      	mov	r3, r9
   c8580:	f7eb fd54 	bl	b402c <__adddf3>
   c8584:	2400      	movs	r4, #0
   c8586:	460d      	mov	r5, r1
   c8588:	4622      	mov	r2, r4
   c858a:	462b      	mov	r3, r5
   c858c:	4650      	mov	r0, sl
   c858e:	4659      	mov	r1, fp
   c8590:	f7eb ff02 	bl	b4398 <__aeabi_dmul>
   c8594:	4b67      	ldr	r3, [pc, #412]	; (c8734 <__ieee754_pow+0x5ac>)
   c8596:	4682      	mov	sl, r0
   c8598:	468b      	mov	fp, r1
   c859a:	2200      	movs	r2, #0
   c859c:	4620      	mov	r0, r4
   c859e:	4629      	mov	r1, r5
   c85a0:	f7eb fd42 	bl	b4028 <__aeabi_dsub>
   c85a4:	ec53 2b1a 	vmov	r2, r3, d10
   c85a8:	f7eb fd3e 	bl	b4028 <__aeabi_dsub>
   c85ac:	4602      	mov	r2, r0
   c85ae:	460b      	mov	r3, r1
   c85b0:	4640      	mov	r0, r8
   c85b2:	4649      	mov	r1, r9
   c85b4:	f7eb fd38 	bl	b4028 <__aeabi_dsub>
   c85b8:	ec53 2b18 	vmov	r2, r3, d8
   c85bc:	f7eb feec 	bl	b4398 <__aeabi_dmul>
   c85c0:	4622      	mov	r2, r4
   c85c2:	462b      	mov	r3, r5
   c85c4:	4604      	mov	r4, r0
   c85c6:	460d      	mov	r5, r1
   c85c8:	ec51 0b19 	vmov	r0, r1, d9
   c85cc:	f7eb fee4 	bl	b4398 <__aeabi_dmul>
   c85d0:	4602      	mov	r2, r0
   c85d2:	460b      	mov	r3, r1
   c85d4:	4620      	mov	r0, r4
   c85d6:	4629      	mov	r1, r5
   c85d8:	f7eb fd28 	bl	b402c <__adddf3>
   c85dc:	4680      	mov	r8, r0
   c85de:	4689      	mov	r9, r1
   c85e0:	4642      	mov	r2, r8
   c85e2:	464b      	mov	r3, r9
   c85e4:	4650      	mov	r0, sl
   c85e6:	4659      	mov	r1, fp
   c85e8:	f7eb fd20 	bl	b402c <__adddf3>
   c85ec:	a344      	add	r3, pc, #272	; (adr r3, c8700 <__ieee754_pow+0x578>)
   c85ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c85f2:	2000      	movs	r0, #0
   c85f4:	4604      	mov	r4, r0
   c85f6:	460d      	mov	r5, r1
   c85f8:	f7eb fece 	bl	b4398 <__aeabi_dmul>
   c85fc:	4652      	mov	r2, sl
   c85fe:	ec41 0b19 	vmov	d9, r0, r1
   c8602:	465b      	mov	r3, fp
   c8604:	4620      	mov	r0, r4
   c8606:	4629      	mov	r1, r5
   c8608:	f7eb fd0e 	bl	b4028 <__aeabi_dsub>
   c860c:	4602      	mov	r2, r0
   c860e:	460b      	mov	r3, r1
   c8610:	4640      	mov	r0, r8
   c8612:	4649      	mov	r1, r9
   c8614:	f7eb fd08 	bl	b4028 <__aeabi_dsub>
   c8618:	a33b      	add	r3, pc, #236	; (adr r3, c8708 <__ieee754_pow+0x580>)
   c861a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c861e:	f7eb febb 	bl	b4398 <__aeabi_dmul>
   c8622:	4602      	mov	r2, r0
   c8624:	460b      	mov	r3, r1
   c8626:	4620      	mov	r0, r4
   c8628:	4629      	mov	r1, r5
   c862a:	4614      	mov	r4, r2
   c862c:	461d      	mov	r5, r3
   c862e:	a338      	add	r3, pc, #224	; (adr r3, c8710 <__ieee754_pow+0x588>)
   c8630:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8634:	f7eb feb0 	bl	b4398 <__aeabi_dmul>
   c8638:	4602      	mov	r2, r0
   c863a:	460b      	mov	r3, r1
   c863c:	4620      	mov	r0, r4
   c863e:	4629      	mov	r1, r5
   c8640:	f7eb fcf4 	bl	b402c <__adddf3>
   c8644:	ec53 2b1d 	vmov	r2, r3, d13
   c8648:	f7eb fcf0 	bl	b402c <__adddf3>
   c864c:	4680      	mov	r8, r0
   c864e:	9805      	ldr	r0, [sp, #20]
   c8650:	4689      	mov	r9, r1
   c8652:	f7eb fe37 	bl	b42c4 <__aeabi_i2d>
   c8656:	4642      	mov	r2, r8
   c8658:	4682      	mov	sl, r0
   c865a:	468b      	mov	fp, r1
   c865c:	464b      	mov	r3, r9
   c865e:	ec51 0b19 	vmov	r0, r1, d9
   c8662:	f7eb fce3 	bl	b402c <__adddf3>
   c8666:	ec53 2b1c 	vmov	r2, r3, d12
   c866a:	f7eb fcdf 	bl	b402c <__adddf3>
   c866e:	4652      	mov	r2, sl
   c8670:	465b      	mov	r3, fp
   c8672:	f7eb fcdb 	bl	b402c <__adddf3>
   c8676:	4652      	mov	r2, sl
   c8678:	465b      	mov	r3, fp
   c867a:	2000      	movs	r0, #0
   c867c:	4604      	mov	r4, r0
   c867e:	460d      	mov	r5, r1
   c8680:	f7eb fcd2 	bl	b4028 <__aeabi_dsub>
   c8684:	ec53 2b1c 	vmov	r2, r3, d12
   c8688:	f7eb fcce 	bl	b4028 <__aeabi_dsub>
   c868c:	ec53 2b19 	vmov	r2, r3, d9
   c8690:	f7eb fcca 	bl	b4028 <__aeabi_dsub>
   c8694:	4602      	mov	r2, r0
   c8696:	460b      	mov	r3, r1
   c8698:	4640      	mov	r0, r8
   c869a:	4649      	mov	r1, r9
   c869c:	f7eb fcc4 	bl	b4028 <__aeabi_dsub>
   c86a0:	9b00      	ldr	r3, [sp, #0]
   c86a2:	9a04      	ldr	r2, [sp, #16]
   c86a4:	3b01      	subs	r3, #1
   c86a6:	4313      	orrs	r3, r2
   c86a8:	4682      	mov	sl, r0
   c86aa:	468b      	mov	fp, r1
   c86ac:	f040 81b6 	bne.w	c8a1c <__ieee754_pow+0x894>
   c86b0:	ed9f 7b19 	vldr	d7, [pc, #100]	; c8718 <__ieee754_pow+0x590>
   c86b4:	eeb0 8a47 	vmov.f32	s16, s14
   c86b8:	eef0 8a67 	vmov.f32	s17, s15
   c86bc:	e03c      	b.n	c8738 <__ieee754_pow+0x5b0>
   c86be:	bf00      	nop
   c86c0:	00000000 	.word	0x00000000
   c86c4:	3ff00000 	.word	0x3ff00000
	...
   c86d0:	4a454eef 	.word	0x4a454eef
   c86d4:	3fca7e28 	.word	0x3fca7e28
   c86d8:	93c9db65 	.word	0x93c9db65
   c86dc:	3fcd864a 	.word	0x3fcd864a
   c86e0:	a91d4101 	.word	0xa91d4101
   c86e4:	3fd17460 	.word	0x3fd17460
   c86e8:	518f264d 	.word	0x518f264d
   c86ec:	3fd55555 	.word	0x3fd55555
   c86f0:	db6fabff 	.word	0xdb6fabff
   c86f4:	3fdb6db6 	.word	0x3fdb6db6
   c86f8:	33333303 	.word	0x33333303
   c86fc:	3fe33333 	.word	0x3fe33333
   c8700:	e0000000 	.word	0xe0000000
   c8704:	3feec709 	.word	0x3feec709
   c8708:	dc3a03fd 	.word	0xdc3a03fd
   c870c:	3feec709 	.word	0x3feec709
   c8710:	145b01f5 	.word	0x145b01f5
   c8714:	be3e2fe0 	.word	0xbe3e2fe0
   c8718:	00000000 	.word	0x00000000
   c871c:	bff00000 	.word	0xbff00000
   c8720:	7ff00000 	.word	0x7ff00000
   c8724:	43400000 	.word	0x43400000
   c8728:	0003988e 	.word	0x0003988e
   c872c:	000bb679 	.word	0x000bb679
   c8730:	3ff00000 	.word	0x3ff00000
   c8734:	40080000 	.word	0x40080000
   c8738:	2300      	movs	r3, #0
   c873a:	e9cd 6700 	strd	r6, r7, [sp]
   c873e:	9300      	str	r3, [sp, #0]
   c8740:	e9dd 8900 	ldrd	r8, r9, [sp]
   c8744:	4630      	mov	r0, r6
   c8746:	4642      	mov	r2, r8
   c8748:	464b      	mov	r3, r9
   c874a:	4639      	mov	r1, r7
   c874c:	f7eb fc6c 	bl	b4028 <__aeabi_dsub>
   c8750:	4622      	mov	r2, r4
   c8752:	462b      	mov	r3, r5
   c8754:	f7eb fe20 	bl	b4398 <__aeabi_dmul>
   c8758:	4632      	mov	r2, r6
   c875a:	463b      	mov	r3, r7
   c875c:	4606      	mov	r6, r0
   c875e:	460f      	mov	r7, r1
   c8760:	4650      	mov	r0, sl
   c8762:	4659      	mov	r1, fp
   c8764:	f7eb fe18 	bl	b4398 <__aeabi_dmul>
   c8768:	4602      	mov	r2, r0
   c876a:	460b      	mov	r3, r1
   c876c:	4630      	mov	r0, r6
   c876e:	4639      	mov	r1, r7
   c8770:	f7eb fc5c 	bl	b402c <__adddf3>
   c8774:	4642      	mov	r2, r8
   c8776:	464b      	mov	r3, r9
   c8778:	4606      	mov	r6, r0
   c877a:	460f      	mov	r7, r1
   c877c:	4620      	mov	r0, r4
   c877e:	4629      	mov	r1, r5
   c8780:	f7eb fe0a 	bl	b4398 <__aeabi_dmul>
   c8784:	4604      	mov	r4, r0
   c8786:	460d      	mov	r5, r1
   c8788:	462b      	mov	r3, r5
   c878a:	4630      	mov	r0, r6
   c878c:	4639      	mov	r1, r7
   c878e:	4622      	mov	r2, r4
   c8790:	f7eb fc4c 	bl	b402c <__adddf3>
   c8794:	4bc2      	ldr	r3, [pc, #776]	; (c8aa0 <__ieee754_pow+0x918>)
   c8796:	4299      	cmp	r1, r3
   c8798:	4680      	mov	r8, r0
   c879a:	4689      	mov	r9, r1
   c879c:	468a      	mov	sl, r1
   c879e:	f340 8118 	ble.w	c89d2 <__ieee754_pow+0x84a>
   c87a2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   c87a6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   c87aa:	4303      	orrs	r3, r0
   c87ac:	f040 8207 	bne.w	c8bbe <__ieee754_pow+0xa36>
   c87b0:	a3a3      	add	r3, pc, #652	; (adr r3, c8a40 <__ieee754_pow+0x8b8>)
   c87b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c87b6:	4630      	mov	r0, r6
   c87b8:	4639      	mov	r1, r7
   c87ba:	f7eb fc37 	bl	b402c <__adddf3>
   c87be:	4602      	mov	r2, r0
   c87c0:	460b      	mov	r3, r1
   c87c2:	4640      	mov	r0, r8
   c87c4:	4649      	mov	r1, r9
   c87c6:	4690      	mov	r8, r2
   c87c8:	4699      	mov	r9, r3
   c87ca:	4622      	mov	r2, r4
   c87cc:	462b      	mov	r3, r5
   c87ce:	f7eb fc2b 	bl	b4028 <__aeabi_dsub>
   c87d2:	4602      	mov	r2, r0
   c87d4:	460b      	mov	r3, r1
   c87d6:	4640      	mov	r0, r8
   c87d8:	4649      	mov	r1, r9
   c87da:	f7ec f86d 	bl	b48b8 <__aeabi_dcmpgt>
   c87de:	2800      	cmp	r0, #0
   c87e0:	f040 81ed 	bne.w	c8bbe <__ieee754_pow+0xa36>
   c87e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
   c87e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   c87ec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   c87f0:	fa42 f303 	asr.w	r3, r2, r3
   c87f4:	4453      	add	r3, sl
   c87f6:	49ab      	ldr	r1, [pc, #684]	; (c8aa4 <__ieee754_pow+0x91c>)
   c87f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
   c87fc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   c8800:	fa41 fc02 	asr.w	ip, r1, r2
   c8804:	f3c3 0113 	ubfx	r1, r3, #0, #20
   c8808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c880c:	f1c2 0214 	rsb	r2, r2, #20
   c8810:	fa41 f202 	asr.w	r2, r1, r2
   c8814:	2000      	movs	r0, #0
   c8816:	ea23 010c 	bic.w	r1, r3, ip
   c881a:	f1ba 0f00 	cmp.w	sl, #0
   c881e:	9200      	str	r2, [sp, #0]
   c8820:	460b      	mov	r3, r1
   c8822:	4602      	mov	r2, r0
   c8824:	da02      	bge.n	c882c <__ieee754_pow+0x6a4>
   c8826:	9900      	ldr	r1, [sp, #0]
   c8828:	4249      	negs	r1, r1
   c882a:	9100      	str	r1, [sp, #0]
   c882c:	4620      	mov	r0, r4
   c882e:	4629      	mov	r1, r5
   c8830:	f7eb fbfa 	bl	b4028 <__aeabi_dsub>
   c8834:	9b00      	ldr	r3, [sp, #0]
   c8836:	051b      	lsls	r3, r3, #20
   c8838:	9302      	str	r3, [sp, #8]
   c883a:	4602      	mov	r2, r0
   c883c:	460b      	mov	r3, r1
   c883e:	4604      	mov	r4, r0
   c8840:	460d      	mov	r5, r1
   c8842:	4630      	mov	r0, r6
   c8844:	4639      	mov	r1, r7
   c8846:	f7eb fbf1 	bl	b402c <__adddf3>
   c884a:	4689      	mov	r9, r1
   c884c:	f04f 0800 	mov.w	r8, #0
   c8850:	a37d      	add	r3, pc, #500	; (adr r3, c8a48 <__ieee754_pow+0x8c0>)
   c8852:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8856:	4640      	mov	r0, r8
   c8858:	4649      	mov	r1, r9
   c885a:	f7eb fd9d 	bl	b4398 <__aeabi_dmul>
   c885e:	4622      	mov	r2, r4
   c8860:	462b      	mov	r3, r5
   c8862:	4682      	mov	sl, r0
   c8864:	468b      	mov	fp, r1
   c8866:	4640      	mov	r0, r8
   c8868:	4649      	mov	r1, r9
   c886a:	f7eb fbdd 	bl	b4028 <__aeabi_dsub>
   c886e:	4602      	mov	r2, r0
   c8870:	460b      	mov	r3, r1
   c8872:	4630      	mov	r0, r6
   c8874:	4639      	mov	r1, r7
   c8876:	f7eb fbd7 	bl	b4028 <__aeabi_dsub>
   c887a:	a375      	add	r3, pc, #468	; (adr r3, c8a50 <__ieee754_pow+0x8c8>)
   c887c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8880:	f7eb fd8a 	bl	b4398 <__aeabi_dmul>
   c8884:	a374      	add	r3, pc, #464	; (adr r3, c8a58 <__ieee754_pow+0x8d0>)
   c8886:	e9d3 2300 	ldrd	r2, r3, [r3]
   c888a:	4604      	mov	r4, r0
   c888c:	460d      	mov	r5, r1
   c888e:	4640      	mov	r0, r8
   c8890:	4649      	mov	r1, r9
   c8892:	f7eb fd81 	bl	b4398 <__aeabi_dmul>
   c8896:	4602      	mov	r2, r0
   c8898:	460b      	mov	r3, r1
   c889a:	4620      	mov	r0, r4
   c889c:	4629      	mov	r1, r5
   c889e:	f7eb fbc5 	bl	b402c <__adddf3>
   c88a2:	4606      	mov	r6, r0
   c88a4:	460f      	mov	r7, r1
   c88a6:	4632      	mov	r2, r6
   c88a8:	463b      	mov	r3, r7
   c88aa:	4650      	mov	r0, sl
   c88ac:	4659      	mov	r1, fp
   c88ae:	f7eb fbbd 	bl	b402c <__adddf3>
   c88b2:	4652      	mov	r2, sl
   c88b4:	465b      	mov	r3, fp
   c88b6:	4604      	mov	r4, r0
   c88b8:	460d      	mov	r5, r1
   c88ba:	f7eb fbb5 	bl	b4028 <__aeabi_dsub>
   c88be:	4602      	mov	r2, r0
   c88c0:	460b      	mov	r3, r1
   c88c2:	4630      	mov	r0, r6
   c88c4:	4639      	mov	r1, r7
   c88c6:	f7eb fbaf 	bl	b4028 <__aeabi_dsub>
   c88ca:	4622      	mov	r2, r4
   c88cc:	4680      	mov	r8, r0
   c88ce:	4689      	mov	r9, r1
   c88d0:	462b      	mov	r3, r5
   c88d2:	4620      	mov	r0, r4
   c88d4:	4629      	mov	r1, r5
   c88d6:	f7eb fd5f 	bl	b4398 <__aeabi_dmul>
   c88da:	a361      	add	r3, pc, #388	; (adr r3, c8a60 <__ieee754_pow+0x8d8>)
   c88dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c88e0:	4606      	mov	r6, r0
   c88e2:	460f      	mov	r7, r1
   c88e4:	f7eb fd58 	bl	b4398 <__aeabi_dmul>
   c88e8:	a35f      	add	r3, pc, #380	; (adr r3, c8a68 <__ieee754_pow+0x8e0>)
   c88ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   c88ee:	f7eb fb9b 	bl	b4028 <__aeabi_dsub>
   c88f2:	4632      	mov	r2, r6
   c88f4:	463b      	mov	r3, r7
   c88f6:	f7eb fd4f 	bl	b4398 <__aeabi_dmul>
   c88fa:	a35d      	add	r3, pc, #372	; (adr r3, c8a70 <__ieee754_pow+0x8e8>)
   c88fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8900:	f7eb fb94 	bl	b402c <__adddf3>
   c8904:	4632      	mov	r2, r6
   c8906:	463b      	mov	r3, r7
   c8908:	f7eb fd46 	bl	b4398 <__aeabi_dmul>
   c890c:	a35a      	add	r3, pc, #360	; (adr r3, c8a78 <__ieee754_pow+0x8f0>)
   c890e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8912:	f7eb fb89 	bl	b4028 <__aeabi_dsub>
   c8916:	4632      	mov	r2, r6
   c8918:	463b      	mov	r3, r7
   c891a:	f7eb fd3d 	bl	b4398 <__aeabi_dmul>
   c891e:	a358      	add	r3, pc, #352	; (adr r3, c8a80 <__ieee754_pow+0x8f8>)
   c8920:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8924:	f7eb fb82 	bl	b402c <__adddf3>
   c8928:	4632      	mov	r2, r6
   c892a:	463b      	mov	r3, r7
   c892c:	f7eb fd34 	bl	b4398 <__aeabi_dmul>
   c8930:	4602      	mov	r2, r0
   c8932:	460b      	mov	r3, r1
   c8934:	4620      	mov	r0, r4
   c8936:	4629      	mov	r1, r5
   c8938:	f7eb fb76 	bl	b4028 <__aeabi_dsub>
   c893c:	4606      	mov	r6, r0
   c893e:	460f      	mov	r7, r1
   c8940:	4632      	mov	r2, r6
   c8942:	463b      	mov	r3, r7
   c8944:	4620      	mov	r0, r4
   c8946:	4629      	mov	r1, r5
   c8948:	f7eb fd26 	bl	b4398 <__aeabi_dmul>
   c894c:	4602      	mov	r2, r0
   c894e:	460b      	mov	r3, r1
   c8950:	4630      	mov	r0, r6
   c8952:	4639      	mov	r1, r7
   c8954:	4616      	mov	r6, r2
   c8956:	461f      	mov	r7, r3
   c8958:	2200      	movs	r2, #0
   c895a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c895e:	f7eb fb63 	bl	b4028 <__aeabi_dsub>
   c8962:	4602      	mov	r2, r0
   c8964:	460b      	mov	r3, r1
   c8966:	4630      	mov	r0, r6
   c8968:	4639      	mov	r1, r7
   c896a:	f7eb fe3f 	bl	b45ec <__aeabi_ddiv>
   c896e:	4642      	mov	r2, r8
   c8970:	4606      	mov	r6, r0
   c8972:	460f      	mov	r7, r1
   c8974:	464b      	mov	r3, r9
   c8976:	4620      	mov	r0, r4
   c8978:	4629      	mov	r1, r5
   c897a:	f7eb fd0d 	bl	b4398 <__aeabi_dmul>
   c897e:	4642      	mov	r2, r8
   c8980:	464b      	mov	r3, r9
   c8982:	f7eb fb53 	bl	b402c <__adddf3>
   c8986:	4602      	mov	r2, r0
   c8988:	460b      	mov	r3, r1
   c898a:	4630      	mov	r0, r6
   c898c:	4639      	mov	r1, r7
   c898e:	f7eb fb4b 	bl	b4028 <__aeabi_dsub>
   c8992:	4622      	mov	r2, r4
   c8994:	462b      	mov	r3, r5
   c8996:	f7eb fb47 	bl	b4028 <__aeabi_dsub>
   c899a:	4602      	mov	r2, r0
   c899c:	460b      	mov	r3, r1
   c899e:	2000      	movs	r0, #0
   c89a0:	4941      	ldr	r1, [pc, #260]	; (c8aa8 <__ieee754_pow+0x920>)
   c89a2:	f7eb fb41 	bl	b4028 <__aeabi_dsub>
   c89a6:	9a02      	ldr	r2, [sp, #8]
   c89a8:	460b      	mov	r3, r1
   c89aa:	4413      	add	r3, r2
   c89ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   c89b0:	f2c0 8143 	blt.w	c8c3a <__ieee754_pow+0xab2>
   c89b4:	4619      	mov	r1, r3
   c89b6:	ec53 2b18 	vmov	r2, r3, d8
   c89ba:	f7eb fced 	bl	b4398 <__aeabi_dmul>
   c89be:	ec41 0b10 	vmov	d0, r0, r1
   c89c2:	e42d      	b.n	c8220 <__ieee754_pow+0x98>
   c89c4:	f1bb 0f00 	cmp.w	fp, #0
   c89c8:	f6ff aca0 	blt.w	c830c <__ieee754_pow+0x184>
   c89cc:	ed9f 0b2e 	vldr	d0, [pc, #184]	; c8a88 <__ieee754_pow+0x900>
   c89d0:	e426      	b.n	c8220 <__ieee754_pow+0x98>
   c89d2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; c8ab0 <__ieee754_pow+0x928>
   c89d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   c89da:	4563      	cmp	r3, ip
   c89dc:	f340 80e7 	ble.w	c8bae <__ieee754_pow+0xa26>
   c89e0:	4b32      	ldr	r3, [pc, #200]	; (c8aac <__ieee754_pow+0x924>)
   c89e2:	440b      	add	r3, r1
   c89e4:	4303      	orrs	r3, r0
   c89e6:	d10a      	bne.n	c89fe <__ieee754_pow+0x876>
   c89e8:	4622      	mov	r2, r4
   c89ea:	462b      	mov	r3, r5
   c89ec:	f7eb fb1c 	bl	b4028 <__aeabi_dsub>
   c89f0:	4632      	mov	r2, r6
   c89f2:	463b      	mov	r3, r7
   c89f4:	f7eb ff56 	bl	b48a4 <__aeabi_dcmpge>
   c89f8:	2800      	cmp	r0, #0
   c89fa:	f43f aef3 	beq.w	c87e4 <__ieee754_pow+0x65c>
   c89fe:	a324      	add	r3, pc, #144	; (adr r3, c8a90 <__ieee754_pow+0x908>)
   c8a00:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8a04:	ec51 0b18 	vmov	r0, r1, d8
   c8a08:	f7eb fcc6 	bl	b4398 <__aeabi_dmul>
   c8a0c:	a320      	add	r3, pc, #128	; (adr r3, c8a90 <__ieee754_pow+0x908>)
   c8a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8a12:	f7eb fcc1 	bl	b4398 <__aeabi_dmul>
   c8a16:	ec41 0b10 	vmov	d0, r0, r1
   c8a1a:	e401      	b.n	c8220 <__ieee754_pow+0x98>
   c8a1c:	ed9f 7b1e 	vldr	d7, [pc, #120]	; c8a98 <__ieee754_pow+0x910>
   c8a20:	eeb0 8a47 	vmov.f32	s16, s14
   c8a24:	eef0 8a67 	vmov.f32	s17, s15
   c8a28:	e686      	b.n	c8738 <__ieee754_pow+0x5b0>
   c8a2a:	f1bb 0f00 	cmp.w	fp, #0
   c8a2e:	dacd      	bge.n	c89cc <__ieee754_pow+0x844>
   c8a30:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   c8a34:	ee00 6a10 	vmov	s0, r6
   c8a38:	ee00 3a90 	vmov	s1, r3
   c8a3c:	f7ff bbf0 	b.w	c8220 <__ieee754_pow+0x98>
   c8a40:	652b82fe 	.word	0x652b82fe
   c8a44:	3c971547 	.word	0x3c971547
   c8a48:	00000000 	.word	0x00000000
   c8a4c:	3fe62e43 	.word	0x3fe62e43
   c8a50:	fefa39ef 	.word	0xfefa39ef
   c8a54:	3fe62e42 	.word	0x3fe62e42
   c8a58:	0ca86c39 	.word	0x0ca86c39
   c8a5c:	be205c61 	.word	0xbe205c61
   c8a60:	72bea4d0 	.word	0x72bea4d0
   c8a64:	3e663769 	.word	0x3e663769
   c8a68:	c5d26bf1 	.word	0xc5d26bf1
   c8a6c:	3ebbbd41 	.word	0x3ebbbd41
   c8a70:	af25de2c 	.word	0xaf25de2c
   c8a74:	3f11566a 	.word	0x3f11566a
   c8a78:	16bebd93 	.word	0x16bebd93
   c8a7c:	3f66c16c 	.word	0x3f66c16c
   c8a80:	5555553e 	.word	0x5555553e
   c8a84:	3fc55555 	.word	0x3fc55555
	...
   c8a90:	c2f8f359 	.word	0xc2f8f359
   c8a94:	01a56e1f 	.word	0x01a56e1f
   c8a98:	00000000 	.word	0x00000000
   c8a9c:	3ff00000 	.word	0x3ff00000
   c8aa0:	408fffff 	.word	0x408fffff
   c8aa4:	000fffff 	.word	0x000fffff
   c8aa8:	3ff00000 	.word	0x3ff00000
   c8aac:	3f6f3400 	.word	0x3f6f3400
   c8ab0:	4090cbff 	.word	0x4090cbff
   c8ab4:	4598      	cmp	r8, r3
   c8ab6:	db85      	blt.n	c89c4 <__ieee754_pow+0x83c>
   c8ab8:	4b7d      	ldr	r3, [pc, #500]	; (c8cb0 <__ieee754_pow+0xb28>)
   c8aba:	4598      	cmp	r8, r3
   c8abc:	f73f ac22 	bgt.w	c8304 <__ieee754_pow+0x17c>
   c8ac0:	ec51 0b10 	vmov	r0, r1, d0
   c8ac4:	4b7a      	ldr	r3, [pc, #488]	; (c8cb0 <__ieee754_pow+0xb28>)
   c8ac6:	2200      	movs	r2, #0
   c8ac8:	f7eb faae 	bl	b4028 <__aeabi_dsub>
   c8acc:	a368      	add	r3, pc, #416	; (adr r3, c8c70 <__ieee754_pow+0xae8>)
   c8ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8ad2:	4604      	mov	r4, r0
   c8ad4:	460d      	mov	r5, r1
   c8ad6:	f7eb fc5f 	bl	b4398 <__aeabi_dmul>
   c8ada:	a367      	add	r3, pc, #412	; (adr r3, c8c78 <__ieee754_pow+0xaf0>)
   c8adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8ae0:	4682      	mov	sl, r0
   c8ae2:	468b      	mov	fp, r1
   c8ae4:	4620      	mov	r0, r4
   c8ae6:	4629      	mov	r1, r5
   c8ae8:	f7eb fc56 	bl	b4398 <__aeabi_dmul>
   c8aec:	4b71      	ldr	r3, [pc, #452]	; (c8cb4 <__ieee754_pow+0xb2c>)
   c8aee:	ec41 0b18 	vmov	d8, r0, r1
   c8af2:	2200      	movs	r2, #0
   c8af4:	4620      	mov	r0, r4
   c8af6:	4629      	mov	r1, r5
   c8af8:	f7eb fc4e 	bl	b4398 <__aeabi_dmul>
   c8afc:	4602      	mov	r2, r0
   c8afe:	460b      	mov	r3, r1
   c8b00:	a15f      	add	r1, pc, #380	; (adr r1, c8c80 <__ieee754_pow+0xaf8>)
   c8b02:	e9d1 0100 	ldrd	r0, r1, [r1]
   c8b06:	f7eb fa8f 	bl	b4028 <__aeabi_dsub>
   c8b0a:	4622      	mov	r2, r4
   c8b0c:	462b      	mov	r3, r5
   c8b0e:	f7eb fc43 	bl	b4398 <__aeabi_dmul>
   c8b12:	4602      	mov	r2, r0
   c8b14:	460b      	mov	r3, r1
   c8b16:	2000      	movs	r0, #0
   c8b18:	4967      	ldr	r1, [pc, #412]	; (c8cb8 <__ieee754_pow+0xb30>)
   c8b1a:	f7eb fa85 	bl	b4028 <__aeabi_dsub>
   c8b1e:	4622      	mov	r2, r4
   c8b20:	4680      	mov	r8, r0
   c8b22:	4689      	mov	r9, r1
   c8b24:	462b      	mov	r3, r5
   c8b26:	4620      	mov	r0, r4
   c8b28:	4629      	mov	r1, r5
   c8b2a:	f7eb fc35 	bl	b4398 <__aeabi_dmul>
   c8b2e:	4602      	mov	r2, r0
   c8b30:	460b      	mov	r3, r1
   c8b32:	4640      	mov	r0, r8
   c8b34:	4649      	mov	r1, r9
   c8b36:	f7eb fc2f 	bl	b4398 <__aeabi_dmul>
   c8b3a:	a353      	add	r3, pc, #332	; (adr r3, c8c88 <__ieee754_pow+0xb00>)
   c8b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8b40:	f7eb fc2a 	bl	b4398 <__aeabi_dmul>
   c8b44:	4602      	mov	r2, r0
   c8b46:	460b      	mov	r3, r1
   c8b48:	ec51 0b18 	vmov	r0, r1, d8
   c8b4c:	f7eb fa6c 	bl	b4028 <__aeabi_dsub>
   c8b50:	4680      	mov	r8, r0
   c8b52:	4689      	mov	r9, r1
   c8b54:	4642      	mov	r2, r8
   c8b56:	464b      	mov	r3, r9
   c8b58:	4650      	mov	r0, sl
   c8b5a:	4659      	mov	r1, fp
   c8b5c:	f7eb fa66 	bl	b402c <__adddf3>
   c8b60:	2000      	movs	r0, #0
   c8b62:	4652      	mov	r2, sl
   c8b64:	465b      	mov	r3, fp
   c8b66:	4604      	mov	r4, r0
   c8b68:	460d      	mov	r5, r1
   c8b6a:	e591      	b.n	c8690 <__ieee754_pow+0x508>
   c8b6c:	4622      	mov	r2, r4
   c8b6e:	462b      	mov	r3, r5
   c8b70:	4620      	mov	r0, r4
   c8b72:	4629      	mov	r1, r5
   c8b74:	f7eb fc10 	bl	b4398 <__aeabi_dmul>
   c8b78:	ec41 0b10 	vmov	d0, r0, r1
   c8b7c:	f7ff bb50 	b.w	c8220 <__ieee754_pow+0x98>
   c8b80:	494b      	ldr	r1, [pc, #300]	; (c8cb0 <__ieee754_pow+0xb28>)
   c8b82:	2000      	movs	r0, #0
   c8b84:	4622      	mov	r2, r4
   c8b86:	462b      	mov	r3, r5
   c8b88:	f7eb fd30 	bl	b45ec <__aeabi_ddiv>
   c8b8c:	ec41 0b10 	vmov	d0, r0, r1
   c8b90:	f7ff bb46 	b.w	c8220 <__ieee754_pow+0x98>
   c8b94:	2b00      	cmp	r3, #0
   c8b96:	d144      	bne.n	c8c22 <__ieee754_pow+0xa9a>
   c8b98:	f1c1 0114 	rsb	r1, r1, #20
   c8b9c:	fa4a f001 	asr.w	r0, sl, r1
   c8ba0:	fa00 f101 	lsl.w	r1, r0, r1
   c8ba4:	4551      	cmp	r1, sl
   c8ba6:	d05a      	beq.n	c8c5e <__ieee754_pow+0xad6>
   c8ba8:	9300      	str	r3, [sp, #0]
   c8baa:	f7ff bb17 	b.w	c81dc <__ieee754_pow+0x54>
   c8bae:	4a42      	ldr	r2, [pc, #264]	; (c8cb8 <__ieee754_pow+0xb30>)
   c8bb0:	4293      	cmp	r3, r2
   c8bb2:	dc5b      	bgt.n	c8c6c <__ieee754_pow+0xae4>
   c8bb4:	e9dd 1200 	ldrd	r1, r2, [sp]
   c8bb8:	9102      	str	r1, [sp, #8]
   c8bba:	9100      	str	r1, [sp, #0]
   c8bbc:	e646      	b.n	c884c <__ieee754_pow+0x6c4>
   c8bbe:	a334      	add	r3, pc, #208	; (adr r3, c8c90 <__ieee754_pow+0xb08>)
   c8bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8bc4:	ec51 0b18 	vmov	r0, r1, d8
   c8bc8:	f7eb fbe6 	bl	b4398 <__aeabi_dmul>
   c8bcc:	a330      	add	r3, pc, #192	; (adr r3, c8c90 <__ieee754_pow+0xb08>)
   c8bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8bd2:	f7eb fbe1 	bl	b4398 <__aeabi_dmul>
   c8bd6:	ec41 0b10 	vmov	d0, r0, r1
   c8bda:	f7ff bb21 	b.w	c8220 <__ieee754_pow+0x98>
   c8bde:	9b00      	ldr	r3, [sp, #0]
   c8be0:	2b01      	cmp	r3, #1
   c8be2:	f47f ab1d 	bne.w	c8220 <__ieee754_pow+0x98>
   c8be6:	ee10 1a90 	vmov	r1, s1
   c8bea:	ee10 2a10 	vmov	r2, s0
   c8bee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c8bf2:	ec43 2b10 	vmov	d0, r2, r3
   c8bf6:	f7ff bb13 	b.w	c8220 <__ieee754_pow+0x98>
   c8bfa:	ed9f 7b27 	vldr	d7, [pc, #156]	; c8c98 <__ieee754_pow+0xb10>
   c8bfe:	eeb0 ca47 	vmov.f32	s24, s14
   c8c02:	eef0 ca67 	vmov.f32	s25, s15
   c8c06:	ed9f 7b26 	vldr	d7, [pc, #152]	; c8ca0 <__ieee754_pow+0xb18>
   c8c0a:	eeb0 da47 	vmov.f32	s26, s14
   c8c0e:	eef0 da67 	vmov.f32	s27, s15
   c8c12:	ed9f 7b25 	vldr	d7, [pc, #148]	; c8ca8 <__ieee754_pow+0xb20>
   c8c16:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   c8c1a:	ec53 2b17 	vmov	r2, r3, d7
   c8c1e:	f7ff bbeb 	b.w	c83f8 <__ieee754_pow+0x270>
   c8c22:	ec45 4b10 	vmov	d0, r4, r5
   c8c26:	9200      	str	r2, [sp, #0]
   c8c28:	f7fe ffde 	bl	c7be8 <fabs>
   c8c2c:	9a00      	ldr	r2, [sp, #0]
   c8c2e:	2a00      	cmp	r2, #0
   c8c30:	f47f ab92 	bne.w	c8358 <__ieee754_pow+0x1d0>
   c8c34:	9200      	str	r2, [sp, #0]
   c8c36:	f7ff bb26 	b.w	c8286 <__ieee754_pow+0xfe>
   c8c3a:	ec41 0b10 	vmov	d0, r0, r1
   c8c3e:	9800      	ldr	r0, [sp, #0]
   c8c40:	f7fe ffde 	bl	c7c00 <scalbn>
   c8c44:	ec51 0b10 	vmov	r0, r1, d0
   c8c48:	e6b5      	b.n	c89b6 <__ieee754_pow+0x82e>
   c8c4a:	f000 0001 	and.w	r0, r0, #1
   c8c4e:	f1c0 0102 	rsb	r1, r0, #2
   c8c52:	9100      	str	r1, [sp, #0]
   c8c54:	2b00      	cmp	r3, #0
   c8c56:	f43f aac1 	beq.w	c81dc <__ieee754_pow+0x54>
   c8c5a:	f7ff bb0d 	b.w	c8278 <__ieee754_pow+0xf0>
   c8c5e:	f000 0001 	and.w	r0, r0, #1
   c8c62:	f1c0 0302 	rsb	r3, r0, #2
   c8c66:	9300      	str	r3, [sp, #0]
   c8c68:	f7ff bab8 	b.w	c81dc <__ieee754_pow+0x54>
   c8c6c:	151b      	asrs	r3, r3, #20
   c8c6e:	e5bb      	b.n	c87e8 <__ieee754_pow+0x660>
   c8c70:	60000000 	.word	0x60000000
   c8c74:	3ff71547 	.word	0x3ff71547
   c8c78:	f85ddf44 	.word	0xf85ddf44
   c8c7c:	3e54ae0b 	.word	0x3e54ae0b
   c8c80:	55555555 	.word	0x55555555
   c8c84:	3fd55555 	.word	0x3fd55555
   c8c88:	652b82fe 	.word	0x652b82fe
   c8c8c:	3ff71547 	.word	0x3ff71547
   c8c90:	8800759c 	.word	0x8800759c
   c8c94:	7e37e43c 	.word	0x7e37e43c
   c8c98:	40000000 	.word	0x40000000
   c8c9c:	3fe2b803 	.word	0x3fe2b803
   c8ca0:	43cfd006 	.word	0x43cfd006
   c8ca4:	3e4cfdeb 	.word	0x3e4cfdeb
   c8ca8:	00000000 	.word	0x00000000
   c8cac:	3ff80000 	.word	0x3ff80000
   c8cb0:	3ff00000 	.word	0x3ff00000
   c8cb4:	3fd00000 	.word	0x3fd00000
   c8cb8:	3fe00000 	.word	0x3fe00000
   c8cbc:	00000000 	.word	0x00000000

000c8cc0 <__ieee754_rem_pio2>:
   c8cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c8cc4:	ec53 2b10 	vmov	r2, r3, d0
   c8cc8:	ed2d 8b04 	vpush	{d8-d9}
   c8ccc:	4990      	ldr	r1, [pc, #576]	; (c8f10 <__ieee754_rem_pio2+0x250>)
   c8cce:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   c8cd2:	428d      	cmp	r5, r1
   c8cd4:	b08b      	sub	sp, #44	; 0x2c
   c8cd6:	4604      	mov	r4, r0
   c8cd8:	f340 808c 	ble.w	c8df4 <__ieee754_rem_pio2+0x134>
   c8cdc:	498d      	ldr	r1, [pc, #564]	; (c8f14 <__ieee754_rem_pio2+0x254>)
   c8cde:	428d      	cmp	r5, r1
   c8ce0:	461f      	mov	r7, r3
   c8ce2:	dc2b      	bgt.n	c8d3c <__ieee754_rem_pio2+0x7c>
   c8ce4:	2f00      	cmp	r7, #0
   c8ce6:	4619      	mov	r1, r3
   c8ce8:	ee10 0a10 	vmov	r0, s0
   c8cec:	a37e      	add	r3, pc, #504	; (adr r3, c8ee8 <__ieee754_rem_pio2+0x228>)
   c8cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8cf2:	f340 81b6 	ble.w	c9062 <__ieee754_rem_pio2+0x3a2>
   c8cf6:	f7eb f997 	bl	b4028 <__aeabi_dsub>
   c8cfa:	4b87      	ldr	r3, [pc, #540]	; (c8f18 <__ieee754_rem_pio2+0x258>)
   c8cfc:	429d      	cmp	r5, r3
   c8cfe:	4680      	mov	r8, r0
   c8d00:	4689      	mov	r9, r1
   c8d02:	f000 808f 	beq.w	c8e24 <__ieee754_rem_pio2+0x164>
   c8d06:	a37a      	add	r3, pc, #488	; (adr r3, c8ef0 <__ieee754_rem_pio2+0x230>)
   c8d08:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8d0c:	f7eb f98c 	bl	b4028 <__aeabi_dsub>
   c8d10:	4602      	mov	r2, r0
   c8d12:	460b      	mov	r3, r1
   c8d14:	e9c4 2300 	strd	r2, r3, [r4]
   c8d18:	4640      	mov	r0, r8
   c8d1a:	4649      	mov	r1, r9
   c8d1c:	f7eb f984 	bl	b4028 <__aeabi_dsub>
   c8d20:	a373      	add	r3, pc, #460	; (adr r3, c8ef0 <__ieee754_rem_pio2+0x230>)
   c8d22:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8d26:	f7eb f97f 	bl	b4028 <__aeabi_dsub>
   c8d2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c8d2e:	2601      	movs	r6, #1
   c8d30:	4630      	mov	r0, r6
   c8d32:	b00b      	add	sp, #44	; 0x2c
   c8d34:	ecbd 8b04 	vpop	{d8-d9}
   c8d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c8d3c:	4977      	ldr	r1, [pc, #476]	; (c8f1c <__ieee754_rem_pio2+0x25c>)
   c8d3e:	428d      	cmp	r5, r1
   c8d40:	f340 8092 	ble.w	c8e68 <__ieee754_rem_pio2+0x1a8>
   c8d44:	4976      	ldr	r1, [pc, #472]	; (c8f20 <__ieee754_rem_pio2+0x260>)
   c8d46:	428d      	cmp	r5, r1
   c8d48:	dc61      	bgt.n	c8e0e <__ieee754_rem_pio2+0x14e>
   c8d4a:	152e      	asrs	r6, r5, #20
   c8d4c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
   c8d50:	ee10 0a10 	vmov	r0, s0
   c8d54:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
   c8d58:	4690      	mov	r8, r2
   c8d5a:	4689      	mov	r9, r1
   c8d5c:	f7eb fdcc 	bl	b48f8 <__aeabi_d2iz>
   c8d60:	f7eb fab0 	bl	b42c4 <__aeabi_i2d>
   c8d64:	4602      	mov	r2, r0
   c8d66:	460b      	mov	r3, r1
   c8d68:	4640      	mov	r0, r8
   c8d6a:	4649      	mov	r1, r9
   c8d6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   c8d70:	f7eb f95a 	bl	b4028 <__aeabi_dsub>
   c8d74:	4b6b      	ldr	r3, [pc, #428]	; (c8f24 <__ieee754_rem_pio2+0x264>)
   c8d76:	2200      	movs	r2, #0
   c8d78:	f7eb fb0e 	bl	b4398 <__aeabi_dmul>
   c8d7c:	4689      	mov	r9, r1
   c8d7e:	4680      	mov	r8, r0
   c8d80:	f7eb fdba 	bl	b48f8 <__aeabi_d2iz>
   c8d84:	4605      	mov	r5, r0
   c8d86:	f7eb fa9d 	bl	b42c4 <__aeabi_i2d>
   c8d8a:	4602      	mov	r2, r0
   c8d8c:	460b      	mov	r3, r1
   c8d8e:	4640      	mov	r0, r8
   c8d90:	4649      	mov	r1, r9
   c8d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
   c8d96:	f7eb f947 	bl	b4028 <__aeabi_dsub>
   c8d9a:	4b62      	ldr	r3, [pc, #392]	; (c8f24 <__ieee754_rem_pio2+0x264>)
   c8d9c:	2200      	movs	r2, #0
   c8d9e:	f7eb fafb 	bl	b4398 <__aeabi_dmul>
   c8da2:	4602      	mov	r2, r0
   c8da4:	460b      	mov	r3, r1
   c8da6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c8daa:	2200      	movs	r2, #0
   c8dac:	2300      	movs	r3, #0
   c8dae:	f7eb fd5b 	bl	b4868 <__aeabi_dcmpeq>
   c8db2:	2800      	cmp	r0, #0
   c8db4:	f000 8153 	beq.w	c905e <__ieee754_rem_pio2+0x39e>
   c8db8:	2d00      	cmp	r5, #0
   c8dba:	bf0c      	ite	eq
   c8dbc:	2301      	moveq	r3, #1
   c8dbe:	2302      	movne	r3, #2
   c8dc0:	4a59      	ldr	r2, [pc, #356]	; (c8f28 <__ieee754_rem_pio2+0x268>)
   c8dc2:	9201      	str	r2, [sp, #4]
   c8dc4:	2202      	movs	r2, #2
   c8dc6:	9200      	str	r2, [sp, #0]
   c8dc8:	4621      	mov	r1, r4
   c8dca:	4632      	mov	r2, r6
   c8dcc:	a804      	add	r0, sp, #16
   c8dce:	f000 fbab 	bl	c9528 <__kernel_rem_pio2>
   c8dd2:	2f00      	cmp	r7, #0
   c8dd4:	4606      	mov	r6, r0
   c8dd6:	daab      	bge.n	c8d30 <__ieee754_rem_pio2+0x70>
   c8dd8:	6861      	ldr	r1, [r4, #4]
   c8dda:	6822      	ldr	r2, [r4, #0]
   c8ddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c8de0:	68e1      	ldr	r1, [r4, #12]
   c8de2:	e9c4 2300 	strd	r2, r3, [r4]
   c8de6:	68a2      	ldr	r2, [r4, #8]
   c8de8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c8dec:	e9c4 2302 	strd	r2, r3, [r4, #8]
   c8df0:	4246      	negs	r6, r0
   c8df2:	e79d      	b.n	c8d30 <__ieee754_rem_pio2+0x70>
   c8df4:	2000      	movs	r0, #0
   c8df6:	2100      	movs	r1, #0
   c8df8:	2600      	movs	r6, #0
   c8dfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c8dfe:	4630      	mov	r0, r6
   c8e00:	ed84 0b00 	vstr	d0, [r4]
   c8e04:	b00b      	add	sp, #44	; 0x2c
   c8e06:	ecbd 8b04 	vpop	{d8-d9}
   c8e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c8e0e:	ee10 0a10 	vmov	r0, s0
   c8e12:	4619      	mov	r1, r3
   c8e14:	f7eb f908 	bl	b4028 <__aeabi_dsub>
   c8e18:	2600      	movs	r6, #0
   c8e1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c8e1e:	e9c4 0100 	strd	r0, r1, [r4]
   c8e22:	e785      	b.n	c8d30 <__ieee754_rem_pio2+0x70>
   c8e24:	a334      	add	r3, pc, #208	; (adr r3, c8ef8 <__ieee754_rem_pio2+0x238>)
   c8e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8e2a:	f7eb f8fd 	bl	b4028 <__aeabi_dsub>
   c8e2e:	a334      	add	r3, pc, #208	; (adr r3, c8f00 <__ieee754_rem_pio2+0x240>)
   c8e30:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8e34:	4680      	mov	r8, r0
   c8e36:	4689      	mov	r9, r1
   c8e38:	f7eb f8f6 	bl	b4028 <__aeabi_dsub>
   c8e3c:	4602      	mov	r2, r0
   c8e3e:	460b      	mov	r3, r1
   c8e40:	e9c4 2300 	strd	r2, r3, [r4]
   c8e44:	4640      	mov	r0, r8
   c8e46:	4649      	mov	r1, r9
   c8e48:	f7eb f8ee 	bl	b4028 <__aeabi_dsub>
   c8e4c:	a32c      	add	r3, pc, #176	; (adr r3, c8f00 <__ieee754_rem_pio2+0x240>)
   c8e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8e52:	f7eb f8e9 	bl	b4028 <__aeabi_dsub>
   c8e56:	2601      	movs	r6, #1
   c8e58:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c8e5c:	4630      	mov	r0, r6
   c8e5e:	b00b      	add	sp, #44	; 0x2c
   c8e60:	ecbd 8b04 	vpop	{d8-d9}
   c8e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c8e68:	f7fe febe 	bl	c7be8 <fabs>
   c8e6c:	ec59 8b10 	vmov	r8, r9, d0
   c8e70:	ee10 0a10 	vmov	r0, s0
   c8e74:	a324      	add	r3, pc, #144	; (adr r3, c8f08 <__ieee754_rem_pio2+0x248>)
   c8e76:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8e7a:	4649      	mov	r1, r9
   c8e7c:	f7eb fa8c 	bl	b4398 <__aeabi_dmul>
   c8e80:	4b2a      	ldr	r3, [pc, #168]	; (c8f2c <__ieee754_rem_pio2+0x26c>)
   c8e82:	2200      	movs	r2, #0
   c8e84:	f7eb f8d2 	bl	b402c <__adddf3>
   c8e88:	f7eb fd36 	bl	b48f8 <__aeabi_d2iz>
   c8e8c:	4606      	mov	r6, r0
   c8e8e:	f7eb fa19 	bl	b42c4 <__aeabi_i2d>
   c8e92:	4602      	mov	r2, r0
   c8e94:	460b      	mov	r3, r1
   c8e96:	ec43 2b18 	vmov	d8, r2, r3
   c8e9a:	a313      	add	r3, pc, #76	; (adr r3, c8ee8 <__ieee754_rem_pio2+0x228>)
   c8e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8ea0:	eeb0 9a48 	vmov.f32	s18, s16
   c8ea4:	eef0 9a68 	vmov.f32	s19, s17
   c8ea8:	f7eb fa76 	bl	b4398 <__aeabi_dmul>
   c8eac:	4602      	mov	r2, r0
   c8eae:	460b      	mov	r3, r1
   c8eb0:	4640      	mov	r0, r8
   c8eb2:	4649      	mov	r1, r9
   c8eb4:	f7eb f8b8 	bl	b4028 <__aeabi_dsub>
   c8eb8:	a30d      	add	r3, pc, #52	; (adr r3, c8ef0 <__ieee754_rem_pio2+0x230>)
   c8eba:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8ebe:	4682      	mov	sl, r0
   c8ec0:	468b      	mov	fp, r1
   c8ec2:	ec51 0b18 	vmov	r0, r1, d8
   c8ec6:	f7eb fa67 	bl	b4398 <__aeabi_dmul>
   c8eca:	2e1f      	cmp	r6, #31
   c8ecc:	ec41 0b18 	vmov	d8, r0, r1
   c8ed0:	dc30      	bgt.n	c8f34 <__ieee754_rem_pio2+0x274>
   c8ed2:	4b17      	ldr	r3, [pc, #92]	; (c8f30 <__ieee754_rem_pio2+0x270>)
   c8ed4:	1e72      	subs	r2, r6, #1
   c8ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   c8eda:	42ab      	cmp	r3, r5
   c8edc:	d02a      	beq.n	c8f34 <__ieee754_rem_pio2+0x274>
   c8ede:	4602      	mov	r2, r0
   c8ee0:	460b      	mov	r3, r1
   c8ee2:	e09b      	b.n	c901c <__ieee754_rem_pio2+0x35c>
   c8ee4:	f3af 8000 	nop.w
   c8ee8:	54400000 	.word	0x54400000
   c8eec:	3ff921fb 	.word	0x3ff921fb
   c8ef0:	1a626331 	.word	0x1a626331
   c8ef4:	3dd0b461 	.word	0x3dd0b461
   c8ef8:	1a600000 	.word	0x1a600000
   c8efc:	3dd0b461 	.word	0x3dd0b461
   c8f00:	2e037073 	.word	0x2e037073
   c8f04:	3ba3198a 	.word	0x3ba3198a
   c8f08:	6dc9c883 	.word	0x6dc9c883
   c8f0c:	3fe45f30 	.word	0x3fe45f30
   c8f10:	3fe921fb 	.word	0x3fe921fb
   c8f14:	4002d97b 	.word	0x4002d97b
   c8f18:	3ff921fb 	.word	0x3ff921fb
   c8f1c:	413921fb 	.word	0x413921fb
   c8f20:	7fefffff 	.word	0x7fefffff
   c8f24:	41700000 	.word	0x41700000
   c8f28:	000cd124 	.word	0x000cd124
   c8f2c:	3fe00000 	.word	0x3fe00000
   c8f30:	000cd0a4 	.word	0x000cd0a4
   c8f34:	152b      	asrs	r3, r5, #20
   c8f36:	9303      	str	r3, [sp, #12]
   c8f38:	4650      	mov	r0, sl
   c8f3a:	ec53 2b18 	vmov	r2, r3, d8
   c8f3e:	4659      	mov	r1, fp
   c8f40:	f7eb f872 	bl	b4028 <__aeabi_dsub>
   c8f44:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c8f48:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
   c8f4c:	2d10      	cmp	r5, #16
   c8f4e:	4680      	mov	r8, r0
   c8f50:	4689      	mov	r9, r1
   c8f52:	dd69      	ble.n	c9028 <__ieee754_rem_pio2+0x368>
   c8f54:	a364      	add	r3, pc, #400	; (adr r3, c90e8 <__ieee754_rem_pio2+0x428>)
   c8f56:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8f5a:	ec51 0b19 	vmov	r0, r1, d9
   c8f5e:	f7eb fa1b 	bl	b4398 <__aeabi_dmul>
   c8f62:	4680      	mov	r8, r0
   c8f64:	4689      	mov	r9, r1
   c8f66:	4642      	mov	r2, r8
   c8f68:	464b      	mov	r3, r9
   c8f6a:	4650      	mov	r0, sl
   c8f6c:	4659      	mov	r1, fp
   c8f6e:	f7eb f85b 	bl	b4028 <__aeabi_dsub>
   c8f72:	4602      	mov	r2, r0
   c8f74:	460b      	mov	r3, r1
   c8f76:	4650      	mov	r0, sl
   c8f78:	4659      	mov	r1, fp
   c8f7a:	4692      	mov	sl, r2
   c8f7c:	469b      	mov	fp, r3
   c8f7e:	f7eb f853 	bl	b4028 <__aeabi_dsub>
   c8f82:	4642      	mov	r2, r8
   c8f84:	464b      	mov	r3, r9
   c8f86:	f7eb f84f 	bl	b4028 <__aeabi_dsub>
   c8f8a:	a359      	add	r3, pc, #356	; (adr r3, c90f0 <__ieee754_rem_pio2+0x430>)
   c8f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8f90:	4680      	mov	r8, r0
   c8f92:	4689      	mov	r9, r1
   c8f94:	ec51 0b19 	vmov	r0, r1, d9
   c8f98:	f7eb f9fe 	bl	b4398 <__aeabi_dmul>
   c8f9c:	4642      	mov	r2, r8
   c8f9e:	464b      	mov	r3, r9
   c8fa0:	f7eb f842 	bl	b4028 <__aeabi_dsub>
   c8fa4:	4602      	mov	r2, r0
   c8fa6:	460b      	mov	r3, r1
   c8fa8:	4650      	mov	r0, sl
   c8faa:	4659      	mov	r1, fp
   c8fac:	ec43 2b18 	vmov	d8, r2, r3
   c8fb0:	f7eb f83a 	bl	b4028 <__aeabi_dsub>
   c8fb4:	9a03      	ldr	r2, [sp, #12]
   c8fb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c8fba:	1ad3      	subs	r3, r2, r3
   c8fbc:	2b31      	cmp	r3, #49	; 0x31
   c8fbe:	4680      	mov	r8, r0
   c8fc0:	4689      	mov	r9, r1
   c8fc2:	dd31      	ble.n	c9028 <__ieee754_rem_pio2+0x368>
   c8fc4:	a34d      	add	r3, pc, #308	; (adr r3, c90fc <__ieee754_rem_pio2+0x43c>)
   c8fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c8fca:	ec51 0b19 	vmov	r0, r1, d9
   c8fce:	f7eb f9e3 	bl	b4398 <__aeabi_dmul>
   c8fd2:	4680      	mov	r8, r0
   c8fd4:	4689      	mov	r9, r1
   c8fd6:	4642      	mov	r2, r8
   c8fd8:	464b      	mov	r3, r9
   c8fda:	4650      	mov	r0, sl
   c8fdc:	4659      	mov	r1, fp
   c8fde:	f7eb f823 	bl	b4028 <__aeabi_dsub>
   c8fe2:	4602      	mov	r2, r0
   c8fe4:	460b      	mov	r3, r1
   c8fe6:	4650      	mov	r0, sl
   c8fe8:	4659      	mov	r1, fp
   c8fea:	4692      	mov	sl, r2
   c8fec:	469b      	mov	fp, r3
   c8fee:	f7eb f81b 	bl	b4028 <__aeabi_dsub>
   c8ff2:	4642      	mov	r2, r8
   c8ff4:	464b      	mov	r3, r9
   c8ff6:	f7eb f817 	bl	b4028 <__aeabi_dsub>
   c8ffa:	a342      	add	r3, pc, #264	; (adr r3, c9104 <__ieee754_rem_pio2+0x444>)
   c8ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9000:	4680      	mov	r8, r0
   c9002:	4689      	mov	r9, r1
   c9004:	ec51 0b19 	vmov	r0, r1, d9
   c9008:	f7eb f9c6 	bl	b4398 <__aeabi_dmul>
   c900c:	4642      	mov	r2, r8
   c900e:	464b      	mov	r3, r9
   c9010:	f7eb f80a 	bl	b4028 <__aeabi_dsub>
   c9014:	4602      	mov	r2, r0
   c9016:	460b      	mov	r3, r1
   c9018:	ec43 2b18 	vmov	d8, r2, r3
   c901c:	4650      	mov	r0, sl
   c901e:	4659      	mov	r1, fp
   c9020:	f7eb f802 	bl	b4028 <__aeabi_dsub>
   c9024:	4680      	mov	r8, r0
   c9026:	4689      	mov	r9, r1
   c9028:	4642      	mov	r2, r8
   c902a:	464b      	mov	r3, r9
   c902c:	e9c4 8900 	strd	r8, r9, [r4]
   c9030:	4650      	mov	r0, sl
   c9032:	4659      	mov	r1, fp
   c9034:	f7ea fff8 	bl	b4028 <__aeabi_dsub>
   c9038:	ec53 2b18 	vmov	r2, r3, d8
   c903c:	f7ea fff4 	bl	b4028 <__aeabi_dsub>
   c9040:	2f00      	cmp	r7, #0
   c9042:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c9046:	f6bf ae73 	bge.w	c8d30 <__ieee754_rem_pio2+0x70>
   c904a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c904e:	e9c4 8300 	strd	r8, r3, [r4]
   c9052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c9056:	e9c4 0302 	strd	r0, r3, [r4, #8]
   c905a:	4276      	negs	r6, r6
   c905c:	e668      	b.n	c8d30 <__ieee754_rem_pio2+0x70>
   c905e:	2303      	movs	r3, #3
   c9060:	e6ae      	b.n	c8dc0 <__ieee754_rem_pio2+0x100>
   c9062:	f7ea ffe3 	bl	b402c <__adddf3>
   c9066:	4b24      	ldr	r3, [pc, #144]	; (c90f8 <__ieee754_rem_pio2+0x438>)
   c9068:	429d      	cmp	r5, r3
   c906a:	4680      	mov	r8, r0
   c906c:	4689      	mov	r9, r1
   c906e:	d016      	beq.n	c909e <__ieee754_rem_pio2+0x3de>
   c9070:	a31b      	add	r3, pc, #108	; (adr r3, c90e0 <__ieee754_rem_pio2+0x420>)
   c9072:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9076:	f7ea ffd9 	bl	b402c <__adddf3>
   c907a:	4602      	mov	r2, r0
   c907c:	460b      	mov	r3, r1
   c907e:	e9c4 2300 	strd	r2, r3, [r4]
   c9082:	4640      	mov	r0, r8
   c9084:	4649      	mov	r1, r9
   c9086:	f7ea ffcf 	bl	b4028 <__aeabi_dsub>
   c908a:	a315      	add	r3, pc, #84	; (adr r3, c90e0 <__ieee754_rem_pio2+0x420>)
   c908c:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9090:	f7ea ffcc 	bl	b402c <__adddf3>
   c9094:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   c9098:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c909c:	e648      	b.n	c8d30 <__ieee754_rem_pio2+0x70>
   c909e:	a312      	add	r3, pc, #72	; (adr r3, c90e8 <__ieee754_rem_pio2+0x428>)
   c90a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c90a4:	f7ea ffc2 	bl	b402c <__adddf3>
   c90a8:	a311      	add	r3, pc, #68	; (adr r3, c90f0 <__ieee754_rem_pio2+0x430>)
   c90aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   c90ae:	4680      	mov	r8, r0
   c90b0:	4689      	mov	r9, r1
   c90b2:	f7ea ffbb 	bl	b402c <__adddf3>
   c90b6:	4602      	mov	r2, r0
   c90b8:	460b      	mov	r3, r1
   c90ba:	e9c4 2300 	strd	r2, r3, [r4]
   c90be:	4640      	mov	r0, r8
   c90c0:	4649      	mov	r1, r9
   c90c2:	f7ea ffb1 	bl	b4028 <__aeabi_dsub>
   c90c6:	a30a      	add	r3, pc, #40	; (adr r3, c90f0 <__ieee754_rem_pio2+0x430>)
   c90c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c90cc:	f7ea ffae 	bl	b402c <__adddf3>
   c90d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   c90d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
   c90d8:	e62a      	b.n	c8d30 <__ieee754_rem_pio2+0x70>
   c90da:	bf00      	nop
   c90dc:	f3af 8000 	nop.w
   c90e0:	1a626331 	.word	0x1a626331
   c90e4:	3dd0b461 	.word	0x3dd0b461
   c90e8:	1a600000 	.word	0x1a600000
   c90ec:	3dd0b461 	.word	0x3dd0b461
   c90f0:	2e037073 	.word	0x2e037073
   c90f4:	3ba3198a 	.word	0x3ba3198a
   c90f8:	3ff921fb 	.word	0x3ff921fb
   c90fc:	2e000000 	.word	0x2e000000
   c9100:	3ba3198a 	.word	0x3ba3198a
   c9104:	252049c1 	.word	0x252049c1
   c9108:	397b839a 	.word	0x397b839a

000c910c <__ieee754_sqrt>:
   c910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c9110:	4a63      	ldr	r2, [pc, #396]	; (c92a0 <__ieee754_sqrt+0x194>)
   c9112:	ec55 4b10 	vmov	r4, r5, d0
   c9116:	43aa      	bics	r2, r5
   c9118:	f000 809f 	beq.w	c925a <__ieee754_sqrt+0x14e>
   c911c:	2d00      	cmp	r5, #0
   c911e:	ee10 ca10 	vmov	ip, s0
   c9122:	462b      	mov	r3, r5
   c9124:	dd54      	ble.n	c91d0 <__ieee754_sqrt+0xc4>
   c9126:	1529      	asrs	r1, r5, #20
   c9128:	d063      	beq.n	c91f2 <__ieee754_sqrt+0xe6>
   c912a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   c912e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
   c9132:	07c9      	lsls	r1, r1, #31
   c9134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c9138:	d404      	bmi.n	c9144 <__ieee754_sqrt+0x38>
   c913a:	005b      	lsls	r3, r3, #1
   c913c:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c9140:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c9144:	ea4f 72dc 	mov.w	r2, ip, lsr #31
   c9148:	2600      	movs	r6, #0
   c914a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   c914e:	107f      	asrs	r7, r7, #1
   c9150:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c9154:	f04f 0e16 	mov.w	lr, #22
   c9158:	4634      	mov	r4, r6
   c915a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   c915e:	18a1      	adds	r1, r4, r2
   c9160:	4299      	cmp	r1, r3
   c9162:	dc02      	bgt.n	c916a <__ieee754_sqrt+0x5e>
   c9164:	1a5b      	subs	r3, r3, r1
   c9166:	188c      	adds	r4, r1, r2
   c9168:	4416      	add	r6, r2
   c916a:	005b      	lsls	r3, r3, #1
   c916c:	f1be 0e01 	subs.w	lr, lr, #1
   c9170:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
   c9174:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c9178:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c917c:	d1ef      	bne.n	c915e <__ieee754_sqrt+0x52>
   c917e:	4675      	mov	r5, lr
   c9180:	2020      	movs	r0, #32
   c9182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   c9186:	e00a      	b.n	c919e <__ieee754_sqrt+0x92>
   c9188:	d044      	beq.n	c9214 <__ieee754_sqrt+0x108>
   c918a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
   c918e:	3801      	subs	r0, #1
   c9190:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   c9194:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   c9198:	ea4f 0252 	mov.w	r2, r2, lsr #1
   c919c:	d043      	beq.n	c9226 <__ieee754_sqrt+0x11a>
   c919e:	42a3      	cmp	r3, r4
   c91a0:	eb02 010e 	add.w	r1, r2, lr
   c91a4:	ddf0      	ble.n	c9188 <__ieee754_sqrt+0x7c>
   c91a6:	2900      	cmp	r1, #0
   c91a8:	eb01 0e02 	add.w	lr, r1, r2
   c91ac:	db0a      	blt.n	c91c4 <__ieee754_sqrt+0xb8>
   c91ae:	46a0      	mov	r8, r4
   c91b0:	1b1b      	subs	r3, r3, r4
   c91b2:	4561      	cmp	r1, ip
   c91b4:	bf88      	it	hi
   c91b6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   c91ba:	ebac 0c01 	sub.w	ip, ip, r1
   c91be:	4415      	add	r5, r2
   c91c0:	4644      	mov	r4, r8
   c91c2:	e7e2      	b.n	c918a <__ieee754_sqrt+0x7e>
   c91c4:	f1be 0f00 	cmp.w	lr, #0
   c91c8:	dbf1      	blt.n	c91ae <__ieee754_sqrt+0xa2>
   c91ca:	f104 0801 	add.w	r8, r4, #1
   c91ce:	e7ef      	b.n	c91b0 <__ieee754_sqrt+0xa4>
   c91d0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   c91d4:	4322      	orrs	r2, r4
   c91d6:	d038      	beq.n	c924a <__ieee754_sqrt+0x13e>
   c91d8:	2d00      	cmp	r5, #0
   c91da:	d14e      	bne.n	c927a <__ieee754_sqrt+0x16e>
   c91dc:	4629      	mov	r1, r5
   c91de:	ea4f 22dc 	mov.w	r2, ip, lsr #11
   c91e2:	3915      	subs	r1, #21
   c91e4:	4613      	mov	r3, r2
   c91e6:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
   c91ea:	2a00      	cmp	r2, #0
   c91ec:	d0f7      	beq.n	c91de <__ieee754_sqrt+0xd2>
   c91ee:	02d6      	lsls	r6, r2, #11
   c91f0:	d450      	bmi.n	c9294 <__ieee754_sqrt+0x188>
   c91f2:	2000      	movs	r0, #0
   c91f4:	005b      	lsls	r3, r3, #1
   c91f6:	02dd      	lsls	r5, r3, #11
   c91f8:	4604      	mov	r4, r0
   c91fa:	f100 0001 	add.w	r0, r0, #1
   c91fe:	d5f9      	bpl.n	c91f4 <__ieee754_sqrt+0xe8>
   c9200:	461a      	mov	r2, r3
   c9202:	4663      	mov	r3, ip
   c9204:	fa0c fc00 	lsl.w	ip, ip, r0
   c9208:	f1c0 0020 	rsb	r0, r0, #32
   c920c:	40c3      	lsrs	r3, r0
   c920e:	1b09      	subs	r1, r1, r4
   c9210:	4313      	orrs	r3, r2
   c9212:	e78a      	b.n	c912a <__ieee754_sqrt+0x1e>
   c9214:	4561      	cmp	r1, ip
   c9216:	d8b8      	bhi.n	c918a <__ieee754_sqrt+0x7e>
   c9218:	2900      	cmp	r1, #0
   c921a:	eb01 0e02 	add.w	lr, r1, r2
   c921e:	dbd1      	blt.n	c91c4 <__ieee754_sqrt+0xb8>
   c9220:	4698      	mov	r8, r3
   c9222:	2300      	movs	r3, #0
   c9224:	e7c9      	b.n	c91ba <__ieee754_sqrt+0xae>
   c9226:	ea53 030c 	orrs.w	r3, r3, ip
   c922a:	d110      	bne.n	c924e <__ieee754_sqrt+0x142>
   c922c:	0868      	lsrs	r0, r5, #1
   c922e:	1071      	asrs	r1, r6, #1
   c9230:	07f3      	lsls	r3, r6, #31
   c9232:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   c9236:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   c923a:	bf48      	it	mi
   c923c:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   c9240:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   c9244:	4602      	mov	r2, r0
   c9246:	ec43 2b10 	vmov	d0, r2, r3
   c924a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c924e:	1c6a      	adds	r2, r5, #1
   c9250:	bf16      	itet	ne
   c9252:	1c68      	addne	r0, r5, #1
   c9254:	3601      	addeq	r6, #1
   c9256:	0840      	lsrne	r0, r0, #1
   c9258:	e7e9      	b.n	c922e <__ieee754_sqrt+0x122>
   c925a:	ee10 2a10 	vmov	r2, s0
   c925e:	ee10 0a10 	vmov	r0, s0
   c9262:	462b      	mov	r3, r5
   c9264:	4629      	mov	r1, r5
   c9266:	f7eb f897 	bl	b4398 <__aeabi_dmul>
   c926a:	4622      	mov	r2, r4
   c926c:	462b      	mov	r3, r5
   c926e:	f7ea fedd 	bl	b402c <__adddf3>
   c9272:	ec41 0b10 	vmov	d0, r0, r1
   c9276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c927a:	ee10 2a10 	vmov	r2, s0
   c927e:	4620      	mov	r0, r4
   c9280:	4629      	mov	r1, r5
   c9282:	f7ea fed1 	bl	b4028 <__aeabi_dsub>
   c9286:	4602      	mov	r2, r0
   c9288:	460b      	mov	r3, r1
   c928a:	f7eb f9af 	bl	b45ec <__aeabi_ddiv>
   c928e:	ec41 0b10 	vmov	d0, r0, r1
   c9292:	e7da      	b.n	c924a <__ieee754_sqrt+0x13e>
   c9294:	4663      	mov	r3, ip
   c9296:	2020      	movs	r0, #32
   c9298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   c929c:	e7b6      	b.n	c920c <__ieee754_sqrt+0x100>
   c929e:	bf00      	nop
   c92a0:	7ff00000 	.word	0x7ff00000
   c92a4:	00000000 	.word	0x00000000

000c92a8 <__kernel_cos>:
   c92a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c92ac:	ec57 6b10 	vmov	r6, r7, d0
   c92b0:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   c92b4:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   c92b8:	ed2d 8b04 	vpush	{d8-d9}
   c92bc:	ec5b ab11 	vmov	sl, fp, d1
   c92c0:	da71      	bge.n	c93a6 <__kernel_cos+0xfe>
   c92c2:	ee10 0a10 	vmov	r0, s0
   c92c6:	4639      	mov	r1, r7
   c92c8:	f7eb fb16 	bl	b48f8 <__aeabi_d2iz>
   c92cc:	2800      	cmp	r0, #0
   c92ce:	f000 80f6 	beq.w	c94be <__kernel_cos+0x216>
   c92d2:	4632      	mov	r2, r6
   c92d4:	463b      	mov	r3, r7
   c92d6:	4630      	mov	r0, r6
   c92d8:	4639      	mov	r1, r7
   c92da:	f7eb f85d 	bl	b4398 <__aeabi_dmul>
   c92de:	a37c      	add	r3, pc, #496	; (adr r3, c94d0 <__kernel_cos+0x228>)
   c92e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c92e4:	4604      	mov	r4, r0
   c92e6:	460d      	mov	r5, r1
   c92e8:	f7eb f856 	bl	b4398 <__aeabi_dmul>
   c92ec:	a37a      	add	r3, pc, #488	; (adr r3, c94d8 <__kernel_cos+0x230>)
   c92ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   c92f2:	f7ea fe9b 	bl	b402c <__adddf3>
   c92f6:	4622      	mov	r2, r4
   c92f8:	462b      	mov	r3, r5
   c92fa:	f7eb f84d 	bl	b4398 <__aeabi_dmul>
   c92fe:	a378      	add	r3, pc, #480	; (adr r3, c94e0 <__kernel_cos+0x238>)
   c9300:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9304:	f7ea fe90 	bl	b4028 <__aeabi_dsub>
   c9308:	4622      	mov	r2, r4
   c930a:	462b      	mov	r3, r5
   c930c:	f7eb f844 	bl	b4398 <__aeabi_dmul>
   c9310:	a375      	add	r3, pc, #468	; (adr r3, c94e8 <__kernel_cos+0x240>)
   c9312:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9316:	f7ea fe89 	bl	b402c <__adddf3>
   c931a:	4622      	mov	r2, r4
   c931c:	462b      	mov	r3, r5
   c931e:	f7eb f83b 	bl	b4398 <__aeabi_dmul>
   c9322:	a373      	add	r3, pc, #460	; (adr r3, c94f0 <__kernel_cos+0x248>)
   c9324:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9328:	f7ea fe7e 	bl	b4028 <__aeabi_dsub>
   c932c:	4622      	mov	r2, r4
   c932e:	462b      	mov	r3, r5
   c9330:	f7eb f832 	bl	b4398 <__aeabi_dmul>
   c9334:	a370      	add	r3, pc, #448	; (adr r3, c94f8 <__kernel_cos+0x250>)
   c9336:	e9d3 2300 	ldrd	r2, r3, [r3]
   c933a:	f7ea fe77 	bl	b402c <__adddf3>
   c933e:	4622      	mov	r2, r4
   c9340:	462b      	mov	r3, r5
   c9342:	f7eb f829 	bl	b4398 <__aeabi_dmul>
   c9346:	ec41 0b18 	vmov	d8, r0, r1
   c934a:	4b71      	ldr	r3, [pc, #452]	; (c9510 <__kernel_cos+0x268>)
   c934c:	2200      	movs	r2, #0
   c934e:	4620      	mov	r0, r4
   c9350:	4629      	mov	r1, r5
   c9352:	f7eb f821 	bl	b4398 <__aeabi_dmul>
   c9356:	ec53 2b18 	vmov	r2, r3, d8
   c935a:	4680      	mov	r8, r0
   c935c:	4689      	mov	r9, r1
   c935e:	4620      	mov	r0, r4
   c9360:	4629      	mov	r1, r5
   c9362:	f7eb f819 	bl	b4398 <__aeabi_dmul>
   c9366:	4652      	mov	r2, sl
   c9368:	465b      	mov	r3, fp
   c936a:	4604      	mov	r4, r0
   c936c:	460d      	mov	r5, r1
   c936e:	4630      	mov	r0, r6
   c9370:	4639      	mov	r1, r7
   c9372:	f7eb f811 	bl	b4398 <__aeabi_dmul>
   c9376:	4602      	mov	r2, r0
   c9378:	460b      	mov	r3, r1
   c937a:	4620      	mov	r0, r4
   c937c:	4629      	mov	r1, r5
   c937e:	f7ea fe53 	bl	b4028 <__aeabi_dsub>
   c9382:	4602      	mov	r2, r0
   c9384:	460b      	mov	r3, r1
   c9386:	4640      	mov	r0, r8
   c9388:	4649      	mov	r1, r9
   c938a:	f7ea fe4d 	bl	b4028 <__aeabi_dsub>
   c938e:	4602      	mov	r2, r0
   c9390:	460b      	mov	r3, r1
   c9392:	2000      	movs	r0, #0
   c9394:	495f      	ldr	r1, [pc, #380]	; (c9514 <__kernel_cos+0x26c>)
   c9396:	f7ea fe47 	bl	b4028 <__aeabi_dsub>
   c939a:	ecbd 8b04 	vpop	{d8-d9}
   c939e:	ec41 0b10 	vmov	d0, r0, r1
   c93a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c93a6:	ee10 2a10 	vmov	r2, s0
   c93aa:	ee10 0a10 	vmov	r0, s0
   c93ae:	463b      	mov	r3, r7
   c93b0:	4639      	mov	r1, r7
   c93b2:	f7ea fff1 	bl	b4398 <__aeabi_dmul>
   c93b6:	a346      	add	r3, pc, #280	; (adr r3, c94d0 <__kernel_cos+0x228>)
   c93b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c93bc:	4604      	mov	r4, r0
   c93be:	460d      	mov	r5, r1
   c93c0:	f7ea ffea 	bl	b4398 <__aeabi_dmul>
   c93c4:	a344      	add	r3, pc, #272	; (adr r3, c94d8 <__kernel_cos+0x230>)
   c93c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c93ca:	f7ea fe2f 	bl	b402c <__adddf3>
   c93ce:	4622      	mov	r2, r4
   c93d0:	462b      	mov	r3, r5
   c93d2:	f7ea ffe1 	bl	b4398 <__aeabi_dmul>
   c93d6:	a342      	add	r3, pc, #264	; (adr r3, c94e0 <__kernel_cos+0x238>)
   c93d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c93dc:	f7ea fe24 	bl	b4028 <__aeabi_dsub>
   c93e0:	4622      	mov	r2, r4
   c93e2:	462b      	mov	r3, r5
   c93e4:	f7ea ffd8 	bl	b4398 <__aeabi_dmul>
   c93e8:	a33f      	add	r3, pc, #252	; (adr r3, c94e8 <__kernel_cos+0x240>)
   c93ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   c93ee:	f7ea fe1d 	bl	b402c <__adddf3>
   c93f2:	4622      	mov	r2, r4
   c93f4:	462b      	mov	r3, r5
   c93f6:	f7ea ffcf 	bl	b4398 <__aeabi_dmul>
   c93fa:	a33d      	add	r3, pc, #244	; (adr r3, c94f0 <__kernel_cos+0x248>)
   c93fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9400:	f7ea fe12 	bl	b4028 <__aeabi_dsub>
   c9404:	4622      	mov	r2, r4
   c9406:	462b      	mov	r3, r5
   c9408:	f7ea ffc6 	bl	b4398 <__aeabi_dmul>
   c940c:	a33a      	add	r3, pc, #232	; (adr r3, c94f8 <__kernel_cos+0x250>)
   c940e:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9412:	f7ea fe0b 	bl	b402c <__adddf3>
   c9416:	462b      	mov	r3, r5
   c9418:	4622      	mov	r2, r4
   c941a:	f7ea ffbd 	bl	b4398 <__aeabi_dmul>
   c941e:	4b3e      	ldr	r3, [pc, #248]	; (c9518 <__kernel_cos+0x270>)
   c9420:	4599      	cmp	r9, r3
   c9422:	ec41 0b18 	vmov	d8, r0, r1
   c9426:	dd90      	ble.n	c934a <__kernel_cos+0xa2>
   c9428:	4b3c      	ldr	r3, [pc, #240]	; (c951c <__kernel_cos+0x274>)
   c942a:	4599      	cmp	r9, r3
   c942c:	dc3c      	bgt.n	c94a8 <__kernel_cos+0x200>
   c942e:	2200      	movs	r2, #0
   c9430:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   c9434:	4937      	ldr	r1, [pc, #220]	; (c9514 <__kernel_cos+0x26c>)
   c9436:	2000      	movs	r0, #0
   c9438:	4690      	mov	r8, r2
   c943a:	4699      	mov	r9, r3
   c943c:	f7ea fdf4 	bl	b4028 <__aeabi_dsub>
   c9440:	ec41 0b19 	vmov	d9, r0, r1
   c9444:	4b32      	ldr	r3, [pc, #200]	; (c9510 <__kernel_cos+0x268>)
   c9446:	2200      	movs	r2, #0
   c9448:	4620      	mov	r0, r4
   c944a:	4629      	mov	r1, r5
   c944c:	f7ea ffa4 	bl	b4398 <__aeabi_dmul>
   c9450:	4642      	mov	r2, r8
   c9452:	464b      	mov	r3, r9
   c9454:	f7ea fde8 	bl	b4028 <__aeabi_dsub>
   c9458:	ec53 2b18 	vmov	r2, r3, d8
   c945c:	4680      	mov	r8, r0
   c945e:	4689      	mov	r9, r1
   c9460:	4620      	mov	r0, r4
   c9462:	4629      	mov	r1, r5
   c9464:	f7ea ff98 	bl	b4398 <__aeabi_dmul>
   c9468:	4652      	mov	r2, sl
   c946a:	465b      	mov	r3, fp
   c946c:	4604      	mov	r4, r0
   c946e:	460d      	mov	r5, r1
   c9470:	4630      	mov	r0, r6
   c9472:	4639      	mov	r1, r7
   c9474:	f7ea ff90 	bl	b4398 <__aeabi_dmul>
   c9478:	4602      	mov	r2, r0
   c947a:	460b      	mov	r3, r1
   c947c:	4620      	mov	r0, r4
   c947e:	4629      	mov	r1, r5
   c9480:	f7ea fdd2 	bl	b4028 <__aeabi_dsub>
   c9484:	4602      	mov	r2, r0
   c9486:	460b      	mov	r3, r1
   c9488:	4640      	mov	r0, r8
   c948a:	4649      	mov	r1, r9
   c948c:	f7ea fdcc 	bl	b4028 <__aeabi_dsub>
   c9490:	4602      	mov	r2, r0
   c9492:	460b      	mov	r3, r1
   c9494:	ec51 0b19 	vmov	r0, r1, d9
   c9498:	f7ea fdc6 	bl	b4028 <__aeabi_dsub>
   c949c:	ecbd 8b04 	vpop	{d8-d9}
   c94a0:	ec41 0b10 	vmov	d0, r0, r1
   c94a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c94a8:	ed9f 7b15 	vldr	d7, [pc, #84]	; c9500 <__kernel_cos+0x258>
   c94ac:	f8df 9070 	ldr.w	r9, [pc, #112]	; c9520 <__kernel_cos+0x278>
   c94b0:	eeb0 9a47 	vmov.f32	s18, s14
   c94b4:	eef0 9a67 	vmov.f32	s19, s15
   c94b8:	f04f 0800 	mov.w	r8, #0
   c94bc:	e7c2      	b.n	c9444 <__kernel_cos+0x19c>
   c94be:	ecbd 8b04 	vpop	{d8-d9}
   c94c2:	ed9f 0b11 	vldr	d0, [pc, #68]	; c9508 <__kernel_cos+0x260>
   c94c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c94ca:	bf00      	nop
   c94cc:	f3af 8000 	nop.w
   c94d0:	be8838d4 	.word	0xbe8838d4
   c94d4:	bda8fae9 	.word	0xbda8fae9
   c94d8:	bdb4b1c4 	.word	0xbdb4b1c4
   c94dc:	3e21ee9e 	.word	0x3e21ee9e
   c94e0:	809c52ad 	.word	0x809c52ad
   c94e4:	3e927e4f 	.word	0x3e927e4f
   c94e8:	19cb1590 	.word	0x19cb1590
   c94ec:	3efa01a0 	.word	0x3efa01a0
   c94f0:	16c15177 	.word	0x16c15177
   c94f4:	3f56c16c 	.word	0x3f56c16c
   c94f8:	5555554c 	.word	0x5555554c
   c94fc:	3fa55555 	.word	0x3fa55555
   c9500:	00000000 	.word	0x00000000
   c9504:	3fe70000 	.word	0x3fe70000
   c9508:	00000000 	.word	0x00000000
   c950c:	3ff00000 	.word	0x3ff00000
   c9510:	3fe00000 	.word	0x3fe00000
   c9514:	3ff00000 	.word	0x3ff00000
   c9518:	3fd33332 	.word	0x3fd33332
   c951c:	3fe90000 	.word	0x3fe90000
   c9520:	3fd20000 	.word	0x3fd20000
   c9524:	00000000 	.word	0x00000000

000c9528 <__kernel_rem_pio2>:
   c9528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c952c:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   c9530:	461c      	mov	r4, r3
   c9532:	9308      	str	r3, [sp, #32]
   c9534:	910b      	str	r1, [sp, #44]	; 0x2c
   c9536:	4bbb      	ldr	r3, [pc, #748]	; (c9824 <__kernel_rem_pio2+0x2fc>)
   c9538:	99a2      	ldr	r1, [sp, #648]	; 0x288
   c953a:	9004      	str	r0, [sp, #16]
   c953c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   c9540:	9105      	str	r1, [sp, #20]
   c9542:	1e63      	subs	r3, r4, #1
   c9544:	f112 0f14 	cmn.w	r2, #20
   c9548:	9303      	str	r3, [sp, #12]
   c954a:	f2c0 834b 	blt.w	c9be4 <__kernel_rem_pio2+0x6bc>
   c954e:	49b6      	ldr	r1, [pc, #728]	; (c9828 <__kernel_rem_pio2+0x300>)
   c9550:	1ed3      	subs	r3, r2, #3
   c9552:	fb81 0103 	smull	r0, r1, r1, r3
   c9556:	17db      	asrs	r3, r3, #31
   c9558:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   c955c:	9307      	str	r3, [sp, #28]
   c955e:	3301      	adds	r3, #1
   c9560:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   c9564:	00db      	lsls	r3, r3, #3
   c9566:	18d3      	adds	r3, r2, r3
   c9568:	9306      	str	r3, [sp, #24]
   c956a:	9a07      	ldr	r2, [sp, #28]
   c956c:	9b03      	ldr	r3, [sp, #12]
   c956e:	1ad4      	subs	r4, r2, r3
   c9570:	9a05      	ldr	r2, [sp, #20]
   c9572:	18d6      	adds	r6, r2, r3
   c9574:	d41a      	bmi.n	c95ac <__kernel_rem_pio2+0x84>
   c9576:	3601      	adds	r6, #1
   c9578:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
   c957a:	4426      	add	r6, r4
   c957c:	ad20      	add	r5, sp, #128	; 0x80
   c957e:	f04f 0800 	mov.w	r8, #0
   c9582:	f04f 0900 	mov.w	r9, #0
   c9586:	e008      	b.n	c959a <__kernel_rem_pio2+0x72>
   c9588:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   c958c:	f7ea fe9a 	bl	b42c4 <__aeabi_i2d>
   c9590:	3401      	adds	r4, #1
   c9592:	42b4      	cmp	r4, r6
   c9594:	e8e5 0102 	strd	r0, r1, [r5], #8
   c9598:	d008      	beq.n	c95ac <__kernel_rem_pio2+0x84>
   c959a:	2c00      	cmp	r4, #0
   c959c:	daf4      	bge.n	c9588 <__kernel_rem_pio2+0x60>
   c959e:	3401      	adds	r4, #1
   c95a0:	4640      	mov	r0, r8
   c95a2:	4649      	mov	r1, r9
   c95a4:	42b4      	cmp	r4, r6
   c95a6:	e8e5 0102 	strd	r0, r1, [r5], #8
   c95aa:	d1f6      	bne.n	c959a <__kernel_rem_pio2+0x72>
   c95ac:	9b05      	ldr	r3, [sp, #20]
   c95ae:	2b00      	cmp	r3, #0
   c95b0:	f2c0 83c8 	blt.w	c9d44 <__kernel_rem_pio2+0x81c>
   c95b4:	9b08      	ldr	r3, [sp, #32]
   c95b6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   c95ba:	00da      	lsls	r2, r3, #3
   c95bc:	9202      	str	r2, [sp, #8]
   c95be:	9a05      	ldr	r2, [sp, #20]
   c95c0:	441a      	add	r2, r3
   c95c2:	9201      	str	r2, [sp, #4]
   c95c4:	9a04      	ldr	r2, [sp, #16]
   c95c6:	a920      	add	r1, sp, #128	; 0x80
   c95c8:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
   c95cc:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
   c95d0:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
   c95d4:	9b03      	ldr	r3, [sp, #12]
   c95d6:	2b00      	cmp	r3, #0
   c95d8:	f2c0 81a9 	blt.w	c992e <__kernel_rem_pio2+0x406>
   c95dc:	9e04      	ldr	r6, [sp, #16]
   c95de:	4657      	mov	r7, sl
   c95e0:	2400      	movs	r4, #0
   c95e2:	2500      	movs	r5, #0
   c95e4:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   c95e8:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   c95ec:	f7ea fed4 	bl	b4398 <__aeabi_dmul>
   c95f0:	4602      	mov	r2, r0
   c95f2:	460b      	mov	r3, r1
   c95f4:	4620      	mov	r0, r4
   c95f6:	4629      	mov	r1, r5
   c95f8:	f7ea fd18 	bl	b402c <__adddf3>
   c95fc:	4546      	cmp	r6, r8
   c95fe:	4604      	mov	r4, r0
   c9600:	460d      	mov	r5, r1
   c9602:	d1ef      	bne.n	c95e4 <__kernel_rem_pio2+0xbc>
   c9604:	9b01      	ldr	r3, [sp, #4]
   c9606:	f109 0901 	add.w	r9, r9, #1
   c960a:	4599      	cmp	r9, r3
   c960c:	e8eb 4502 	strd	r4, r5, [fp], #8
   c9610:	f10a 0a08 	add.w	sl, sl, #8
   c9614:	d1de      	bne.n	c95d4 <__kernel_rem_pio2+0xac>
   c9616:	9a04      	ldr	r2, [sp, #16]
   c9618:	9b02      	ldr	r3, [sp, #8]
   c961a:	4413      	add	r3, r2
   c961c:	469b      	mov	fp, r3
   c961e:	9b05      	ldr	r3, [sp, #20]
   c9620:	a90b      	add	r1, sp, #44	; 0x2c
   c9622:	eb01 0283 	add.w	r2, r1, r3, lsl #2
   c9626:	a90c      	add	r1, sp, #48	; 0x30
   c9628:	920a      	str	r2, [sp, #40]	; 0x28
   c962a:	461a      	mov	r2, r3
   c962c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c9630:	3b08      	subs	r3, #8
   c9632:	9309      	str	r3, [sp, #36]	; 0x24
   c9634:	9201      	str	r2, [sp, #4]
   c9636:	9a01      	ldr	r2, [sp, #4]
   c9638:	a998      	add	r1, sp, #608	; 0x260
   c963a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   c963e:	2a00      	cmp	r2, #0
   c9640:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   c9644:	dd29      	ble.n	c969a <__kernel_rem_pio2+0x172>
   c9646:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   c964a:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   c964e:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   c9652:	4b76      	ldr	r3, [pc, #472]	; (c982c <__kernel_rem_pio2+0x304>)
   c9654:	2200      	movs	r2, #0
   c9656:	4620      	mov	r0, r4
   c9658:	4629      	mov	r1, r5
   c965a:	f7ea fe9d 	bl	b4398 <__aeabi_dmul>
   c965e:	f7eb f94b 	bl	b48f8 <__aeabi_d2iz>
   c9662:	f7ea fe2f 	bl	b42c4 <__aeabi_i2d>
   c9666:	4b72      	ldr	r3, [pc, #456]	; (c9830 <__kernel_rem_pio2+0x308>)
   c9668:	2200      	movs	r2, #0
   c966a:	4606      	mov	r6, r0
   c966c:	460f      	mov	r7, r1
   c966e:	f7ea fe93 	bl	b4398 <__aeabi_dmul>
   c9672:	4602      	mov	r2, r0
   c9674:	460b      	mov	r3, r1
   c9676:	4620      	mov	r0, r4
   c9678:	4629      	mov	r1, r5
   c967a:	f7ea fcd5 	bl	b4028 <__aeabi_dsub>
   c967e:	f7eb f93b 	bl	b48f8 <__aeabi_d2iz>
   c9682:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   c9686:	f849 0b04 	str.w	r0, [r9], #4
   c968a:	4639      	mov	r1, r7
   c968c:	4630      	mov	r0, r6
   c968e:	f7ea fccd 	bl	b402c <__adddf3>
   c9692:	45d0      	cmp	r8, sl
   c9694:	4604      	mov	r4, r0
   c9696:	460d      	mov	r5, r1
   c9698:	d1db      	bne.n	c9652 <__kernel_rem_pio2+0x12a>
   c969a:	f8dd 9018 	ldr.w	r9, [sp, #24]
   c969e:	ec45 4b10 	vmov	d0, r4, r5
   c96a2:	4648      	mov	r0, r9
   c96a4:	f7fe faac 	bl	c7c00 <scalbn>
   c96a8:	ec55 4b10 	vmov	r4, r5, d0
   c96ac:	2200      	movs	r2, #0
   c96ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   c96b2:	ee10 0a10 	vmov	r0, s0
   c96b6:	4629      	mov	r1, r5
   c96b8:	f7ea fe6e 	bl	b4398 <__aeabi_dmul>
   c96bc:	ec41 0b10 	vmov	d0, r0, r1
   c96c0:	f000 fc2a 	bl	c9f18 <floor>
   c96c4:	4b5b      	ldr	r3, [pc, #364]	; (c9834 <__kernel_rem_pio2+0x30c>)
   c96c6:	ec51 0b10 	vmov	r0, r1, d0
   c96ca:	2200      	movs	r2, #0
   c96cc:	f7ea fe64 	bl	b4398 <__aeabi_dmul>
   c96d0:	4602      	mov	r2, r0
   c96d2:	460b      	mov	r3, r1
   c96d4:	4620      	mov	r0, r4
   c96d6:	4629      	mov	r1, r5
   c96d8:	f7ea fca6 	bl	b4028 <__aeabi_dsub>
   c96dc:	460d      	mov	r5, r1
   c96de:	4604      	mov	r4, r0
   c96e0:	f7eb f90a 	bl	b48f8 <__aeabi_d2iz>
   c96e4:	4680      	mov	r8, r0
   c96e6:	f7ea fded 	bl	b42c4 <__aeabi_i2d>
   c96ea:	460b      	mov	r3, r1
   c96ec:	4602      	mov	r2, r0
   c96ee:	4629      	mov	r1, r5
   c96f0:	4620      	mov	r0, r4
   c96f2:	f7ea fc99 	bl	b4028 <__aeabi_dsub>
   c96f6:	464b      	mov	r3, r9
   c96f8:	2b00      	cmp	r3, #0
   c96fa:	4606      	mov	r6, r0
   c96fc:	460f      	mov	r7, r1
   c96fe:	f340 809b 	ble.w	c9838 <__kernel_rem_pio2+0x310>
   c9702:	9a01      	ldr	r2, [sp, #4]
   c9704:	1e51      	subs	r1, r2, #1
   c9706:	aa0c      	add	r2, sp, #48	; 0x30
   c9708:	f1c9 0318 	rsb	r3, r9, #24
   c970c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
   c9710:	fa42 f003 	asr.w	r0, r2, r3
   c9714:	fa00 f303 	lsl.w	r3, r0, r3
   c9718:	1ad3      	subs	r3, r2, r3
   c971a:	f1c9 0517 	rsb	r5, r9, #23
   c971e:	aa0c      	add	r2, sp, #48	; 0x30
   c9720:	fa43 f505 	asr.w	r5, r3, r5
   c9724:	2d00      	cmp	r5, #0
   c9726:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   c972a:	4480      	add	r8, r0
   c972c:	f300 808e 	bgt.w	c984c <__kernel_rem_pio2+0x324>
   c9730:	2200      	movs	r2, #0
   c9732:	2300      	movs	r3, #0
   c9734:	4630      	mov	r0, r6
   c9736:	4639      	mov	r1, r7
   c9738:	f7eb f896 	bl	b4868 <__aeabi_dcmpeq>
   c973c:	2800      	cmp	r0, #0
   c973e:	f000 8258 	beq.w	c9bf2 <__kernel_rem_pio2+0x6ca>
   c9742:	9b01      	ldr	r3, [sp, #4]
   c9744:	9a05      	ldr	r2, [sp, #20]
   c9746:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
   c974a:	4552      	cmp	r2, sl
   c974c:	dc10      	bgt.n	c9770 <__kernel_rem_pio2+0x248>
   c974e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c9752:	aa0c      	add	r2, sp, #48	; 0x30
   c9754:	3b01      	subs	r3, #1
   c9756:	980a      	ldr	r0, [sp, #40]	; 0x28
   c9758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c975c:	2200      	movs	r2, #0
   c975e:	f853 1904 	ldr.w	r1, [r3], #-4
   c9762:	4283      	cmp	r3, r0
   c9764:	ea42 0201 	orr.w	r2, r2, r1
   c9768:	d1f9      	bne.n	c975e <__kernel_rem_pio2+0x236>
   c976a:	2a00      	cmp	r2, #0
   c976c:	f040 80e2 	bne.w	c9934 <__kernel_rem_pio2+0x40c>
   c9770:	9b05      	ldr	r3, [sp, #20]
   c9772:	aa0c      	add	r2, sp, #48	; 0x30
   c9774:	3b01      	subs	r3, #1
   c9776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   c977a:	2b00      	cmp	r3, #0
   c977c:	f040 80d2 	bne.w	c9924 <__kernel_rem_pio2+0x3fc>
   c9780:	9a09      	ldr	r2, [sp, #36]	; 0x24
   c9782:	2301      	movs	r3, #1
   c9784:	f852 1904 	ldr.w	r1, [r2], #-4
   c9788:	3301      	adds	r3, #1
   c978a:	2900      	cmp	r1, #0
   c978c:	d0fa      	beq.n	c9784 <__kernel_rem_pio2+0x25c>
   c978e:	9a01      	ldr	r2, [sp, #4]
   c9790:	18d3      	adds	r3, r2, r3
   c9792:	9302      	str	r3, [sp, #8]
   c9794:	1c53      	adds	r3, r2, #1
   c9796:	4699      	mov	r9, r3
   c9798:	9a01      	ldr	r2, [sp, #4]
   c979a:	9908      	ldr	r1, [sp, #32]
   c979c:	440a      	add	r2, r1
   c979e:	4690      	mov	r8, r2
   c97a0:	9a07      	ldr	r2, [sp, #28]
   c97a2:	eb02 0a03 	add.w	sl, r2, r3
   c97a6:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
   c97aa:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
   c97ac:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c97b0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   c97b4:	aa20      	add	r2, sp, #128	; 0x80
   c97b6:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
   c97ba:	aa70      	add	r2, sp, #448	; 0x1c0
   c97bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   c97c0:	9301      	str	r3, [sp, #4]
   c97c2:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   c97c6:	f7ea fd7d 	bl	b42c4 <__aeabi_i2d>
   c97ca:	460b      	mov	r3, r1
   c97cc:	9903      	ldr	r1, [sp, #12]
   c97ce:	4602      	mov	r2, r0
   c97d0:	2900      	cmp	r1, #0
   c97d2:	e9c8 2300 	strd	r2, r3, [r8]
   c97d6:	4647      	mov	r7, r8
   c97d8:	f108 0808 	add.w	r8, r8, #8
   c97dc:	db1e      	blt.n	c981c <__kernel_rem_pio2+0x2f4>
   c97de:	9e04      	ldr	r6, [sp, #16]
   c97e0:	2400      	movs	r4, #0
   c97e2:	2500      	movs	r5, #0
   c97e4:	e001      	b.n	c97ea <__kernel_rem_pio2+0x2c2>
   c97e6:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
   c97ea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
   c97ee:	f7ea fdd3 	bl	b4398 <__aeabi_dmul>
   c97f2:	4602      	mov	r2, r0
   c97f4:	460b      	mov	r3, r1
   c97f6:	4620      	mov	r0, r4
   c97f8:	4629      	mov	r1, r5
   c97fa:	f7ea fc17 	bl	b402c <__adddf3>
   c97fe:	455e      	cmp	r6, fp
   c9800:	4604      	mov	r4, r0
   c9802:	460d      	mov	r5, r1
   c9804:	d1ef      	bne.n	c97e6 <__kernel_rem_pio2+0x2be>
   c9806:	9b01      	ldr	r3, [sp, #4]
   c9808:	e8e3 4502 	strd	r4, r5, [r3], #8
   c980c:	9301      	str	r3, [sp, #4]
   c980e:	9b02      	ldr	r3, [sp, #8]
   c9810:	f109 0901 	add.w	r9, r9, #1
   c9814:	4599      	cmp	r9, r3
   c9816:	ddd4      	ble.n	c97c2 <__kernel_rem_pio2+0x29a>
   c9818:	9301      	str	r3, [sp, #4]
   c981a:	e70c      	b.n	c9636 <__kernel_rem_pio2+0x10e>
   c981c:	2400      	movs	r4, #0
   c981e:	2500      	movs	r5, #0
   c9820:	e7f1      	b.n	c9806 <__kernel_rem_pio2+0x2de>
   c9822:	bf00      	nop
   c9824:	000cd270 	.word	0x000cd270
   c9828:	2aaaaaab 	.word	0x2aaaaaab
   c982c:	3e700000 	.word	0x3e700000
   c9830:	41700000 	.word	0x41700000
   c9834:	40200000 	.word	0x40200000
   c9838:	d16b      	bne.n	c9912 <__kernel_rem_pio2+0x3ea>
   c983a:	9b01      	ldr	r3, [sp, #4]
   c983c:	aa0c      	add	r2, sp, #48	; 0x30
   c983e:	3b01      	subs	r3, #1
   c9840:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   c9844:	15ed      	asrs	r5, r5, #23
   c9846:	2d00      	cmp	r5, #0
   c9848:	f77f af72 	ble.w	c9730 <__kernel_rem_pio2+0x208>
   c984c:	9b01      	ldr	r3, [sp, #4]
   c984e:	2b00      	cmp	r3, #0
   c9850:	f108 0801 	add.w	r8, r8, #1
   c9854:	f340 81cb 	ble.w	c9bee <__kernel_rem_pio2+0x6c6>
   c9858:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   c985a:	2c00      	cmp	r4, #0
   c985c:	d151      	bne.n	c9902 <__kernel_rem_pio2+0x3da>
   c985e:	9b01      	ldr	r3, [sp, #4]
   c9860:	2b01      	cmp	r3, #1
   c9862:	d020      	beq.n	c98a6 <__kernel_rem_pio2+0x37e>
   c9864:	ab0c      	add	r3, sp, #48	; 0x30
   c9866:	2201      	movs	r2, #1
   c9868:	f853 4f04 	ldr.w	r4, [r3, #4]!
   c986c:	2c00      	cmp	r4, #0
   c986e:	d04b      	beq.n	c9908 <__kernel_rem_pio2+0x3e0>
   c9870:	1c53      	adds	r3, r2, #1
   c9872:	a90c      	add	r1, sp, #48	; 0x30
   c9874:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   c9878:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   c987c:	9901      	ldr	r1, [sp, #4]
   c987e:	4299      	cmp	r1, r3
   c9880:	dd10      	ble.n	c98a4 <__kernel_rem_pio2+0x37c>
   c9882:	aa0c      	add	r2, sp, #48	; 0x30
   c9884:	a80c      	add	r0, sp, #48	; 0x30
   c9886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   c988a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   c988e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   c9892:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   c9896:	e000      	b.n	c989a <__kernel_rem_pio2+0x372>
   c9898:	681a      	ldr	r2, [r3, #0]
   c989a:	1a8a      	subs	r2, r1, r2
   c989c:	f843 2b04 	str.w	r2, [r3], #4
   c98a0:	4283      	cmp	r3, r0
   c98a2:	d1f9      	bne.n	c9898 <__kernel_rem_pio2+0x370>
   c98a4:	2401      	movs	r4, #1
   c98a6:	9b06      	ldr	r3, [sp, #24]
   c98a8:	2b00      	cmp	r3, #0
   c98aa:	dd0e      	ble.n	c98ca <__kernel_rem_pio2+0x3a2>
   c98ac:	2b01      	cmp	r3, #1
   c98ae:	f000 816c 	beq.w	c9b8a <__kernel_rem_pio2+0x662>
   c98b2:	2b02      	cmp	r3, #2
   c98b4:	d109      	bne.n	c98ca <__kernel_rem_pio2+0x3a2>
   c98b6:	9b01      	ldr	r3, [sp, #4]
   c98b8:	1e5a      	subs	r2, r3, #1
   c98ba:	ab0c      	add	r3, sp, #48	; 0x30
   c98bc:	a90c      	add	r1, sp, #48	; 0x30
   c98be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   c98c2:	f3c3 0315 	ubfx	r3, r3, #0, #22
   c98c6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   c98ca:	2d02      	cmp	r5, #2
   c98cc:	f47f af30 	bne.w	c9730 <__kernel_rem_pio2+0x208>
   c98d0:	4632      	mov	r2, r6
   c98d2:	463b      	mov	r3, r7
   c98d4:	49b6      	ldr	r1, [pc, #728]	; (c9bb0 <__kernel_rem_pio2+0x688>)
   c98d6:	2000      	movs	r0, #0
   c98d8:	f7ea fba6 	bl	b4028 <__aeabi_dsub>
   c98dc:	4606      	mov	r6, r0
   c98de:	460f      	mov	r7, r1
   c98e0:	2c00      	cmp	r4, #0
   c98e2:	f43f af25 	beq.w	c9730 <__kernel_rem_pio2+0x208>
   c98e6:	9806      	ldr	r0, [sp, #24]
   c98e8:	ed9f 0bad 	vldr	d0, [pc, #692]	; c9ba0 <__kernel_rem_pio2+0x678>
   c98ec:	f7fe f988 	bl	c7c00 <scalbn>
   c98f0:	4630      	mov	r0, r6
   c98f2:	4639      	mov	r1, r7
   c98f4:	ec53 2b10 	vmov	r2, r3, d0
   c98f8:	f7ea fb96 	bl	b4028 <__aeabi_dsub>
   c98fc:	4606      	mov	r6, r0
   c98fe:	460f      	mov	r7, r1
   c9900:	e716      	b.n	c9730 <__kernel_rem_pio2+0x208>
   c9902:	2301      	movs	r3, #1
   c9904:	2200      	movs	r2, #0
   c9906:	e7b4      	b.n	c9872 <__kernel_rem_pio2+0x34a>
   c9908:	9901      	ldr	r1, [sp, #4]
   c990a:	3201      	adds	r2, #1
   c990c:	428a      	cmp	r2, r1
   c990e:	d1ab      	bne.n	c9868 <__kernel_rem_pio2+0x340>
   c9910:	e7c9      	b.n	c98a6 <__kernel_rem_pio2+0x37e>
   c9912:	4ba8      	ldr	r3, [pc, #672]	; (c9bb4 <__kernel_rem_pio2+0x68c>)
   c9914:	2200      	movs	r2, #0
   c9916:	f7ea ffc5 	bl	b48a4 <__aeabi_dcmpge>
   c991a:	2800      	cmp	r0, #0
   c991c:	f040 8150 	bne.w	c9bc0 <__kernel_rem_pio2+0x698>
   c9920:	4605      	mov	r5, r0
   c9922:	e705      	b.n	c9730 <__kernel_rem_pio2+0x208>
   c9924:	9b01      	ldr	r3, [sp, #4]
   c9926:	3301      	adds	r3, #1
   c9928:	4699      	mov	r9, r3
   c992a:	9302      	str	r3, [sp, #8]
   c992c:	e734      	b.n	c9798 <__kernel_rem_pio2+0x270>
   c992e:	2400      	movs	r4, #0
   c9930:	2500      	movs	r5, #0
   c9932:	e667      	b.n	c9604 <__kernel_rem_pio2+0xdc>
   c9934:	9b06      	ldr	r3, [sp, #24]
   c9936:	9503      	str	r5, [sp, #12]
   c9938:	f1a3 0218 	sub.w	r2, r3, #24
   c993c:	ab0c      	add	r3, sp, #48	; 0x30
   c993e:	f8cd 801c 	str.w	r8, [sp, #28]
   c9942:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   c9946:	9206      	str	r2, [sp, #24]
   c9948:	b973      	cbnz	r3, c9968 <__kernel_rem_pio2+0x440>
   c994a:	9b01      	ldr	r3, [sp, #4]
   c994c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   c9950:	3b02      	subs	r3, #2
   c9952:	a90c      	add	r1, sp, #48	; 0x30
   c9954:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   c9958:	f853 1904 	ldr.w	r1, [r3], #-4
   c995c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c9960:	3a18      	subs	r2, #24
   c9962:	2900      	cmp	r1, #0
   c9964:	d0f8      	beq.n	c9958 <__kernel_rem_pio2+0x430>
   c9966:	9206      	str	r2, [sp, #24]
   c9968:	ed9f 0b8d 	vldr	d0, [pc, #564]	; c9ba0 <__kernel_rem_pio2+0x678>
   c996c:	9806      	ldr	r0, [sp, #24]
   c996e:	f7fe f947 	bl	c7c00 <scalbn>
   c9972:	f1ba 0f00 	cmp.w	sl, #0
   c9976:	ec55 4b10 	vmov	r4, r5, d0
   c997a:	f2c0 81d9 	blt.w	c9d30 <__kernel_rem_pio2+0x808>
   c997e:	ab70      	add	r3, sp, #448	; 0x1c0
   c9980:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
   c9984:	aa0c      	add	r2, sp, #48	; 0x30
   c9986:	f10a 0301 	add.w	r3, sl, #1
   c998a:	9306      	str	r3, [sp, #24]
   c998c:	eb02 0683 	add.w	r6, r2, r3, lsl #2
   c9990:	f8df 9224 	ldr.w	r9, [pc, #548]	; c9bb8 <__kernel_rem_pio2+0x690>
   c9994:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   c9998:	9304      	str	r3, [sp, #16]
   c999a:	f10b 0708 	add.w	r7, fp, #8
   c999e:	f04f 0800 	mov.w	r8, #0
   c99a2:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   c99a6:	f7ea fc8d 	bl	b42c4 <__aeabi_i2d>
   c99aa:	4622      	mov	r2, r4
   c99ac:	462b      	mov	r3, r5
   c99ae:	f7ea fcf3 	bl	b4398 <__aeabi_dmul>
   c99b2:	464b      	mov	r3, r9
   c99b4:	e967 0102 	strd	r0, r1, [r7, #-8]!
   c99b8:	4642      	mov	r2, r8
   c99ba:	4620      	mov	r0, r4
   c99bc:	4629      	mov	r1, r5
   c99be:	f7ea fceb 	bl	b4398 <__aeabi_dmul>
   c99c2:	ab0c      	add	r3, sp, #48	; 0x30
   c99c4:	429e      	cmp	r6, r3
   c99c6:	4604      	mov	r4, r0
   c99c8:	460d      	mov	r5, r1
   c99ca:	d1ea      	bne.n	c99a2 <__kernel_rem_pio2+0x47a>
   c99cc:	ab48      	add	r3, sp, #288	; 0x120
   c99ce:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   c99d2:	f8dd a014 	ldr.w	sl, [sp, #20]
   c99d6:	f1ba 0f00 	cmp.w	sl, #0
   c99da:	f04f 0900 	mov.w	r9, #0
   c99de:	db2c      	blt.n	c9a3a <__kernel_rem_pio2+0x512>
   c99e0:	a371      	add	r3, pc, #452	; (adr r3, c9ba8 <__kernel_rem_pio2+0x680>)
   c99e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c99e6:	f8df 81d4 	ldr.w	r8, [pc, #468]	; c9bbc <__kernel_rem_pio2+0x694>
   c99ea:	465f      	mov	r7, fp
   c99ec:	2600      	movs	r6, #0
   c99ee:	2400      	movs	r4, #0
   c99f0:	2500      	movs	r5, #0
   c99f2:	e003      	b.n	c99fc <__kernel_rem_pio2+0x4d4>
   c99f4:	45b1      	cmp	r9, r6
   c99f6:	db10      	blt.n	c9a1a <__kernel_rem_pio2+0x4f2>
   c99f8:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   c99fc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
   c9a00:	f7ea fcca 	bl	b4398 <__aeabi_dmul>
   c9a04:	4602      	mov	r2, r0
   c9a06:	460b      	mov	r3, r1
   c9a08:	4620      	mov	r0, r4
   c9a0a:	4629      	mov	r1, r5
   c9a0c:	f7ea fb0e 	bl	b402c <__adddf3>
   c9a10:	3601      	adds	r6, #1
   c9a12:	45b2      	cmp	sl, r6
   c9a14:	4604      	mov	r4, r0
   c9a16:	460d      	mov	r5, r1
   c9a18:	daec      	bge.n	c99f4 <__kernel_rem_pio2+0x4cc>
   c9a1a:	9b01      	ldr	r3, [sp, #4]
   c9a1c:	9a02      	ldr	r2, [sp, #8]
   c9a1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   c9a22:	454a      	cmp	r2, r9
   c9a24:	e9c3 4500 	strd	r4, r5, [r3]
   c9a28:	f1ab 0b08 	sub.w	fp, fp, #8
   c9a2c:	f109 0301 	add.w	r3, r9, #1
   c9a30:	d006      	beq.n	c9a40 <__kernel_rem_pio2+0x518>
   c9a32:	f1ba 0f00 	cmp.w	sl, #0
   c9a36:	4699      	mov	r9, r3
   c9a38:	dad2      	bge.n	c99e0 <__kernel_rem_pio2+0x4b8>
   c9a3a:	2400      	movs	r4, #0
   c9a3c:	2500      	movs	r5, #0
   c9a3e:	e7ec      	b.n	c9a1a <__kernel_rem_pio2+0x4f2>
   c9a40:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c9a42:	f8dd a008 	ldr.w	sl, [sp, #8]
   c9a46:	2b02      	cmp	r3, #2
   c9a48:	dc1e      	bgt.n	c9a88 <__kernel_rem_pio2+0x560>
   c9a4a:	2b00      	cmp	r3, #0
   c9a4c:	f300 8107 	bgt.w	c9c5e <__kernel_rem_pio2+0x736>
   c9a50:	d113      	bne.n	c9a7a <__kernel_rem_pio2+0x552>
   c9a52:	9c04      	ldr	r4, [sp, #16]
   c9a54:	9d01      	ldr	r5, [sp, #4]
   c9a56:	3408      	adds	r4, #8
   c9a58:	442c      	add	r4, r5
   c9a5a:	2000      	movs	r0, #0
   c9a5c:	2100      	movs	r1, #0
   c9a5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   c9a62:	f7ea fae3 	bl	b402c <__adddf3>
   c9a66:	42a5      	cmp	r5, r4
   c9a68:	d1f9      	bne.n	c9a5e <__kernel_rem_pio2+0x536>
   c9a6a:	9b03      	ldr	r3, [sp, #12]
   c9a6c:	b113      	cbz	r3, c9a74 <__kernel_rem_pio2+0x54c>
   c9a6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c9a72:	4619      	mov	r1, r3
   c9a74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c9a76:	e9c3 0100 	strd	r0, r1, [r3]
   c9a7a:	9b07      	ldr	r3, [sp, #28]
   c9a7c:	f003 0007 	and.w	r0, r3, #7
   c9a80:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c9a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9a88:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c9a8a:	2b03      	cmp	r3, #3
   c9a8c:	d1f5      	bne.n	c9a7a <__kernel_rem_pio2+0x552>
   c9a8e:	f1ba 0f00 	cmp.w	sl, #0
   c9a92:	f000 8169 	beq.w	c9d68 <__kernel_rem_pio2+0x840>
   c9a96:	9a01      	ldr	r2, [sp, #4]
   c9a98:	9b04      	ldr	r3, [sp, #16]
   c9a9a:	18d3      	adds	r3, r2, r3
   c9a9c:	e9d3 4500 	ldrd	r4, r5, [r3]
   c9aa0:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
   c9aa4:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
   c9aa8:	4620      	mov	r0, r4
   c9aaa:	4629      	mov	r1, r5
   c9aac:	4632      	mov	r2, r6
   c9aae:	463b      	mov	r3, r7
   c9ab0:	f7ea fabc 	bl	b402c <__adddf3>
   c9ab4:	46a0      	mov	r8, r4
   c9ab6:	46a9      	mov	r9, r5
   c9ab8:	4604      	mov	r4, r0
   c9aba:	460d      	mov	r5, r1
   c9abc:	4622      	mov	r2, r4
   c9abe:	462b      	mov	r3, r5
   c9ac0:	4630      	mov	r0, r6
   c9ac2:	4639      	mov	r1, r7
   c9ac4:	f7ea fab0 	bl	b4028 <__aeabi_dsub>
   c9ac8:	464b      	mov	r3, r9
   c9aca:	4642      	mov	r2, r8
   c9acc:	f7ea faae 	bl	b402c <__adddf3>
   c9ad0:	9b01      	ldr	r3, [sp, #4]
   c9ad2:	455b      	cmp	r3, fp
   c9ad4:	e9cb 0102 	strd	r0, r1, [fp, #8]
   c9ad8:	e9cb 4500 	strd	r4, r5, [fp]
   c9adc:	d1e2      	bne.n	c9aa4 <__kernel_rem_pio2+0x57c>
   c9ade:	f1ba 0f01 	cmp.w	sl, #1
   c9ae2:	f340 8141 	ble.w	c9d68 <__kernel_rem_pio2+0x840>
   c9ae6:	9a01      	ldr	r2, [sp, #4]
   c9ae8:	9b04      	ldr	r3, [sp, #16]
   c9aea:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
   c9aee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   c9af2:	4413      	add	r3, r2
   c9af4:	ea4f 01ca 	mov.w	r1, sl, lsl #3
   c9af8:	e9d3 4500 	ldrd	r4, r5, [r3]
   c9afc:	f101 0a08 	add.w	sl, r1, #8
   c9b00:	9102      	str	r1, [sp, #8]
   c9b02:	4492      	add	sl, r2
   c9b04:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
   c9b08:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
   c9b0c:	4620      	mov	r0, r4
   c9b0e:	4629      	mov	r1, r5
   c9b10:	4632      	mov	r2, r6
   c9b12:	463b      	mov	r3, r7
   c9b14:	f7ea fa8a 	bl	b402c <__adddf3>
   c9b18:	46a0      	mov	r8, r4
   c9b1a:	46a9      	mov	r9, r5
   c9b1c:	4604      	mov	r4, r0
   c9b1e:	460d      	mov	r5, r1
   c9b20:	4622      	mov	r2, r4
   c9b22:	462b      	mov	r3, r5
   c9b24:	4630      	mov	r0, r6
   c9b26:	4639      	mov	r1, r7
   c9b28:	f7ea fa7e 	bl	b4028 <__aeabi_dsub>
   c9b2c:	4642      	mov	r2, r8
   c9b2e:	464b      	mov	r3, r9
   c9b30:	f7ea fa7c 	bl	b402c <__adddf3>
   c9b34:	45d3      	cmp	fp, sl
   c9b36:	e9ca 0102 	strd	r0, r1, [sl, #8]
   c9b3a:	e9ca 4500 	strd	r4, r5, [sl]
   c9b3e:	d1e3      	bne.n	c9b08 <__kernel_rem_pio2+0x5e0>
   c9b40:	9c02      	ldr	r4, [sp, #8]
   c9b42:	9b01      	ldr	r3, [sp, #4]
   c9b44:	3410      	adds	r4, #16
   c9b46:	441c      	add	r4, r3
   c9b48:	f103 0510 	add.w	r5, r3, #16
   c9b4c:	2000      	movs	r0, #0
   c9b4e:	2100      	movs	r1, #0
   c9b50:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   c9b54:	f7ea fa6a 	bl	b402c <__adddf3>
   c9b58:	42a5      	cmp	r5, r4
   c9b5a:	d1f9      	bne.n	c9b50 <__kernel_rem_pio2+0x628>
   c9b5c:	9b03      	ldr	r3, [sp, #12]
   c9b5e:	2b00      	cmp	r3, #0
   c9b60:	f040 80bb 	bne.w	c9cda <__kernel_rem_pio2+0x7b2>
   c9b64:	9d01      	ldr	r5, [sp, #4]
   c9b66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   c9b68:	e9d5 2300 	ldrd	r2, r3, [r5]
   c9b6c:	e9c4 2300 	strd	r2, r3, [r4]
   c9b70:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   c9b74:	e9c4 2302 	strd	r2, r3, [r4, #8]
   c9b78:	9b07      	ldr	r3, [sp, #28]
   c9b7a:	e9c4 0104 	strd	r0, r1, [r4, #16]
   c9b7e:	f003 0007 	and.w	r0, r3, #7
   c9b82:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c9b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9b8a:	9b01      	ldr	r3, [sp, #4]
   c9b8c:	1e5a      	subs	r2, r3, #1
   c9b8e:	ab0c      	add	r3, sp, #48	; 0x30
   c9b90:	a90c      	add	r1, sp, #48	; 0x30
   c9b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   c9b96:	f3c3 0316 	ubfx	r3, r3, #0, #23
   c9b9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   c9b9e:	e694      	b.n	c98ca <__kernel_rem_pio2+0x3a2>
   c9ba0:	00000000 	.word	0x00000000
   c9ba4:	3ff00000 	.word	0x3ff00000
   c9ba8:	40000000 	.word	0x40000000
   c9bac:	3ff921fb 	.word	0x3ff921fb
   c9bb0:	3ff00000 	.word	0x3ff00000
   c9bb4:	3fe00000 	.word	0x3fe00000
   c9bb8:	3e700000 	.word	0x3e700000
   c9bbc:	000cd238 	.word	0x000cd238
   c9bc0:	9b01      	ldr	r3, [sp, #4]
   c9bc2:	2b00      	cmp	r3, #0
   c9bc4:	f108 0801 	add.w	r8, r8, #1
   c9bc8:	bfc8      	it	gt
   c9bca:	2502      	movgt	r5, #2
   c9bcc:	f73f ae44 	bgt.w	c9858 <__kernel_rem_pio2+0x330>
   c9bd0:	4632      	mov	r2, r6
   c9bd2:	463b      	mov	r3, r7
   c9bd4:	4966      	ldr	r1, [pc, #408]	; (c9d70 <__kernel_rem_pio2+0x848>)
   c9bd6:	2000      	movs	r0, #0
   c9bd8:	f7ea fa26 	bl	b4028 <__aeabi_dsub>
   c9bdc:	2502      	movs	r5, #2
   c9bde:	4606      	mov	r6, r0
   c9be0:	460f      	mov	r7, r1
   c9be2:	e5a5      	b.n	c9730 <__kernel_rem_pio2+0x208>
   c9be4:	2100      	movs	r1, #0
   c9be6:	f06f 0317 	mvn.w	r3, #23
   c9bea:	9107      	str	r1, [sp, #28]
   c9bec:	e4bb      	b.n	c9566 <__kernel_rem_pio2+0x3e>
   c9bee:	2400      	movs	r4, #0
   c9bf0:	e659      	b.n	c98a6 <__kernel_rem_pio2+0x37e>
   c9bf2:	ec47 6b10 	vmov	d0, r6, r7
   c9bf6:	9e06      	ldr	r6, [sp, #24]
   c9bf8:	9503      	str	r5, [sp, #12]
   c9bfa:	4270      	negs	r0, r6
   c9bfc:	f8cd 801c 	str.w	r8, [sp, #28]
   c9c00:	f7fd fffe 	bl	c7c00 <scalbn>
   c9c04:	ec55 4b10 	vmov	r4, r5, d0
   c9c08:	4b5a      	ldr	r3, [pc, #360]	; (c9d74 <__kernel_rem_pio2+0x84c>)
   c9c0a:	ee10 0a10 	vmov	r0, s0
   c9c0e:	2200      	movs	r2, #0
   c9c10:	4629      	mov	r1, r5
   c9c12:	f7ea fe47 	bl	b48a4 <__aeabi_dcmpge>
   c9c16:	2800      	cmp	r0, #0
   c9c18:	d055      	beq.n	c9cc6 <__kernel_rem_pio2+0x79e>
   c9c1a:	4b57      	ldr	r3, [pc, #348]	; (c9d78 <__kernel_rem_pio2+0x850>)
   c9c1c:	9f01      	ldr	r7, [sp, #4]
   c9c1e:	2200      	movs	r2, #0
   c9c20:	3618      	adds	r6, #24
   c9c22:	4620      	mov	r0, r4
   c9c24:	4629      	mov	r1, r5
   c9c26:	9606      	str	r6, [sp, #24]
   c9c28:	f7ea fbb6 	bl	b4398 <__aeabi_dmul>
   c9c2c:	f7ea fe64 	bl	b48f8 <__aeabi_d2iz>
   c9c30:	4606      	mov	r6, r0
   c9c32:	f7ea fb47 	bl	b42c4 <__aeabi_i2d>
   c9c36:	4b4f      	ldr	r3, [pc, #316]	; (c9d74 <__kernel_rem_pio2+0x84c>)
   c9c38:	2200      	movs	r2, #0
   c9c3a:	f7ea fbad 	bl	b4398 <__aeabi_dmul>
   c9c3e:	460b      	mov	r3, r1
   c9c40:	4602      	mov	r2, r0
   c9c42:	4629      	mov	r1, r5
   c9c44:	4620      	mov	r0, r4
   c9c46:	f7ea f9ef 	bl	b4028 <__aeabi_dsub>
   c9c4a:	f7ea fe55 	bl	b48f8 <__aeabi_d2iz>
   c9c4e:	f107 0a01 	add.w	sl, r7, #1
   c9c52:	ab0c      	add	r3, sp, #48	; 0x30
   c9c54:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
   c9c58:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
   c9c5c:	e684      	b.n	c9968 <__kernel_rem_pio2+0x440>
   c9c5e:	9d01      	ldr	r5, [sp, #4]
   c9c60:	9a06      	ldr	r2, [sp, #24]
   c9c62:	2000      	movs	r0, #0
   c9c64:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
   c9c68:	2100      	movs	r1, #0
   c9c6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   c9c6e:	f7ea f9dd 	bl	b402c <__adddf3>
   c9c72:	42a5      	cmp	r5, r4
   c9c74:	d1f9      	bne.n	c9c6a <__kernel_rem_pio2+0x742>
   c9c76:	9b03      	ldr	r3, [sp, #12]
   c9c78:	2b00      	cmp	r3, #0
   c9c7a:	d149      	bne.n	c9d10 <__kernel_rem_pio2+0x7e8>
   c9c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c9c7e:	e9c3 0100 	strd	r0, r1, [r3]
   c9c82:	460b      	mov	r3, r1
   c9c84:	9901      	ldr	r1, [sp, #4]
   c9c86:	4602      	mov	r2, r0
   c9c88:	e9d1 0100 	ldrd	r0, r1, [r1]
   c9c8c:	f7ea f9cc 	bl	b4028 <__aeabi_dsub>
   c9c90:	f1ba 0f00 	cmp.w	sl, #0
   c9c94:	dd0d      	ble.n	c9cb2 <__kernel_rem_pio2+0x78a>
   c9c96:	ad4a      	add	r5, sp, #296	; 0x128
   c9c98:	2401      	movs	r4, #1
   c9c9a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   c9c9e:	3401      	adds	r4, #1
   c9ca0:	f7ea f9c4 	bl	b402c <__adddf3>
   c9ca4:	45a2      	cmp	sl, r4
   c9ca6:	daf8      	bge.n	c9c9a <__kernel_rem_pio2+0x772>
   c9ca8:	9b03      	ldr	r3, [sp, #12]
   c9caa:	b113      	cbz	r3, c9cb2 <__kernel_rem_pio2+0x78a>
   c9cac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c9cb0:	4619      	mov	r1, r3
   c9cb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c9cb4:	e9c3 0102 	strd	r0, r1, [r3, #8]
   c9cb8:	9b07      	ldr	r3, [sp, #28]
   c9cba:	f003 0007 	and.w	r0, r3, #7
   c9cbe:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c9cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9cc6:	4620      	mov	r0, r4
   c9cc8:	4629      	mov	r1, r5
   c9cca:	f7ea fe15 	bl	b48f8 <__aeabi_d2iz>
   c9cce:	9b01      	ldr	r3, [sp, #4]
   c9cd0:	aa0c      	add	r2, sp, #48	; 0x30
   c9cd2:	469a      	mov	sl, r3
   c9cd4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   c9cd8:	e646      	b.n	c9968 <__kernel_rem_pio2+0x440>
   c9cda:	9b01      	ldr	r3, [sp, #4]
   c9cdc:	461e      	mov	r6, r3
   c9cde:	685c      	ldr	r4, [r3, #4]
   c9ce0:	68dd      	ldr	r5, [r3, #12]
   c9ce2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c9ce6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   c9ce8:	4602      	mov	r2, r0
   c9cea:	e9c1 2304 	strd	r2, r3, [r1, #16]
   c9cee:	6832      	ldr	r2, [r6, #0]
   c9cf0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   c9cf4:	e9c1 2300 	strd	r2, r3, [r1]
   c9cf8:	68b2      	ldr	r2, [r6, #8]
   c9cfa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   c9cfe:	e9c1 2302 	strd	r2, r3, [r1, #8]
   c9d02:	9b07      	ldr	r3, [sp, #28]
   c9d04:	f003 0007 	and.w	r0, r3, #7
   c9d08:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   c9d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c9d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c9d16:	6053      	str	r3, [r2, #4]
   c9d18:	460b      	mov	r3, r1
   c9d1a:	9901      	ldr	r1, [sp, #4]
   c9d1c:	6010      	str	r0, [r2, #0]
   c9d1e:	4602      	mov	r2, r0
   c9d20:	e9d1 0100 	ldrd	r0, r1, [r1]
   c9d24:	f7ea f980 	bl	b4028 <__aeabi_dsub>
   c9d28:	f1ba 0f00 	cmp.w	sl, #0
   c9d2c:	dcb3      	bgt.n	c9c96 <__kernel_rem_pio2+0x76e>
   c9d2e:	e7bd      	b.n	c9cac <__kernel_rem_pio2+0x784>
   c9d30:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c9d32:	2b02      	cmp	r3, #2
   c9d34:	dc0a      	bgt.n	c9d4c <__kernel_rem_pio2+0x824>
   c9d36:	2b00      	cmp	r3, #0
   c9d38:	dc11      	bgt.n	c9d5e <__kernel_rem_pio2+0x836>
   c9d3a:	f47f ae9e 	bne.w	c9a7a <__kernel_rem_pio2+0x552>
   c9d3e:	2000      	movs	r0, #0
   c9d40:	2100      	movs	r1, #0
   c9d42:	e692      	b.n	c9a6a <__kernel_rem_pio2+0x542>
   c9d44:	9b08      	ldr	r3, [sp, #32]
   c9d46:	00db      	lsls	r3, r3, #3
   c9d48:	9302      	str	r3, [sp, #8]
   c9d4a:	e464      	b.n	c9616 <__kernel_rem_pio2+0xee>
   c9d4c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   c9d4e:	2b03      	cmp	r3, #3
   c9d50:	f47f ae93 	bne.w	c9a7a <__kernel_rem_pio2+0x552>
   c9d54:	ab48      	add	r3, sp, #288	; 0x120
   c9d56:	2000      	movs	r0, #0
   c9d58:	2100      	movs	r1, #0
   c9d5a:	9301      	str	r3, [sp, #4]
   c9d5c:	e6fe      	b.n	c9b5c <__kernel_rem_pio2+0x634>
   c9d5e:	ab48      	add	r3, sp, #288	; 0x120
   c9d60:	2000      	movs	r0, #0
   c9d62:	2100      	movs	r1, #0
   c9d64:	9301      	str	r3, [sp, #4]
   c9d66:	e786      	b.n	c9c76 <__kernel_rem_pio2+0x74e>
   c9d68:	2000      	movs	r0, #0
   c9d6a:	2100      	movs	r1, #0
   c9d6c:	e6f6      	b.n	c9b5c <__kernel_rem_pio2+0x634>
   c9d6e:	bf00      	nop
   c9d70:	3ff00000 	.word	0x3ff00000
   c9d74:	41700000 	.word	0x41700000
   c9d78:	3e700000 	.word	0x3e700000
   c9d7c:	00000000 	.word	0x00000000

000c9d80 <__kernel_sin>:
   c9d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c9d84:	ec55 4b10 	vmov	r4, r5, d0
   c9d88:	b085      	sub	sp, #20
   c9d8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   c9d8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   c9d92:	ed8d 1b00 	vstr	d1, [sp]
   c9d96:	9003      	str	r0, [sp, #12]
   c9d98:	da07      	bge.n	c9daa <__kernel_sin+0x2a>
   c9d9a:	ee10 0a10 	vmov	r0, s0
   c9d9e:	4629      	mov	r1, r5
   c9da0:	f7ea fdaa 	bl	b48f8 <__aeabi_d2iz>
   c9da4:	2800      	cmp	r0, #0
   c9da6:	f000 8089 	beq.w	c9ebc <__kernel_sin+0x13c>
   c9daa:	4622      	mov	r2, r4
   c9dac:	462b      	mov	r3, r5
   c9dae:	4620      	mov	r0, r4
   c9db0:	4629      	mov	r1, r5
   c9db2:	f7ea faf1 	bl	b4398 <__aeabi_dmul>
   c9db6:	4606      	mov	r6, r0
   c9db8:	460f      	mov	r7, r1
   c9dba:	4632      	mov	r2, r6
   c9dbc:	463b      	mov	r3, r7
   c9dbe:	4620      	mov	r0, r4
   c9dc0:	4629      	mov	r1, r5
   c9dc2:	f7ea fae9 	bl	b4398 <__aeabi_dmul>
   c9dc6:	a343      	add	r3, pc, #268	; (adr r3, c9ed4 <__kernel_sin+0x154>)
   c9dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9dcc:	4682      	mov	sl, r0
   c9dce:	468b      	mov	fp, r1
   c9dd0:	4630      	mov	r0, r6
   c9dd2:	4639      	mov	r1, r7
   c9dd4:	f7ea fae0 	bl	b4398 <__aeabi_dmul>
   c9dd8:	a340      	add	r3, pc, #256	; (adr r3, c9edc <__kernel_sin+0x15c>)
   c9dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9dde:	f7ea f923 	bl	b4028 <__aeabi_dsub>
   c9de2:	4632      	mov	r2, r6
   c9de4:	463b      	mov	r3, r7
   c9de6:	f7ea fad7 	bl	b4398 <__aeabi_dmul>
   c9dea:	a33e      	add	r3, pc, #248	; (adr r3, c9ee4 <__kernel_sin+0x164>)
   c9dec:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9df0:	f7ea f91c 	bl	b402c <__adddf3>
   c9df4:	4632      	mov	r2, r6
   c9df6:	463b      	mov	r3, r7
   c9df8:	f7ea face 	bl	b4398 <__aeabi_dmul>
   c9dfc:	a33b      	add	r3, pc, #236	; (adr r3, c9eec <__kernel_sin+0x16c>)
   c9dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9e02:	f7ea f911 	bl	b4028 <__aeabi_dsub>
   c9e06:	4632      	mov	r2, r6
   c9e08:	463b      	mov	r3, r7
   c9e0a:	f7ea fac5 	bl	b4398 <__aeabi_dmul>
   c9e0e:	a339      	add	r3, pc, #228	; (adr r3, c9ef4 <__kernel_sin+0x174>)
   c9e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9e14:	f7ea f90a 	bl	b402c <__adddf3>
   c9e18:	9b03      	ldr	r3, [sp, #12]
   c9e1a:	4680      	mov	r8, r0
   c9e1c:	4689      	mov	r9, r1
   c9e1e:	b3ab      	cbz	r3, c9e8c <__kernel_sin+0x10c>
   c9e20:	e9dd 0100 	ldrd	r0, r1, [sp]
   c9e24:	4b2a      	ldr	r3, [pc, #168]	; (c9ed0 <__kernel_sin+0x150>)
   c9e26:	2200      	movs	r2, #0
   c9e28:	f7ea fab6 	bl	b4398 <__aeabi_dmul>
   c9e2c:	4642      	mov	r2, r8
   c9e2e:	464b      	mov	r3, r9
   c9e30:	4680      	mov	r8, r0
   c9e32:	4689      	mov	r9, r1
   c9e34:	4650      	mov	r0, sl
   c9e36:	4659      	mov	r1, fp
   c9e38:	f7ea faae 	bl	b4398 <__aeabi_dmul>
   c9e3c:	4602      	mov	r2, r0
   c9e3e:	460b      	mov	r3, r1
   c9e40:	4640      	mov	r0, r8
   c9e42:	4649      	mov	r1, r9
   c9e44:	f7ea f8f0 	bl	b4028 <__aeabi_dsub>
   c9e48:	4632      	mov	r2, r6
   c9e4a:	463b      	mov	r3, r7
   c9e4c:	f7ea faa4 	bl	b4398 <__aeabi_dmul>
   c9e50:	e9dd 2300 	ldrd	r2, r3, [sp]
   c9e54:	f7ea f8e8 	bl	b4028 <__aeabi_dsub>
   c9e58:	a31b      	add	r3, pc, #108	; (adr r3, c9ec8 <__kernel_sin+0x148>)
   c9e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9e5e:	4606      	mov	r6, r0
   c9e60:	460f      	mov	r7, r1
   c9e62:	4650      	mov	r0, sl
   c9e64:	4659      	mov	r1, fp
   c9e66:	f7ea fa97 	bl	b4398 <__aeabi_dmul>
   c9e6a:	4602      	mov	r2, r0
   c9e6c:	460b      	mov	r3, r1
   c9e6e:	4630      	mov	r0, r6
   c9e70:	4639      	mov	r1, r7
   c9e72:	f7ea f8db 	bl	b402c <__adddf3>
   c9e76:	4602      	mov	r2, r0
   c9e78:	460b      	mov	r3, r1
   c9e7a:	4620      	mov	r0, r4
   c9e7c:	4629      	mov	r1, r5
   c9e7e:	f7ea f8d3 	bl	b4028 <__aeabi_dsub>
   c9e82:	ec41 0b10 	vmov	d0, r0, r1
   c9e86:	b005      	add	sp, #20
   c9e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9e8c:	4602      	mov	r2, r0
   c9e8e:	460b      	mov	r3, r1
   c9e90:	4630      	mov	r0, r6
   c9e92:	4639      	mov	r1, r7
   c9e94:	f7ea fa80 	bl	b4398 <__aeabi_dmul>
   c9e98:	a30b      	add	r3, pc, #44	; (adr r3, c9ec8 <__kernel_sin+0x148>)
   c9e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9e9e:	f7ea f8c3 	bl	b4028 <__aeabi_dsub>
   c9ea2:	4652      	mov	r2, sl
   c9ea4:	465b      	mov	r3, fp
   c9ea6:	f7ea fa77 	bl	b4398 <__aeabi_dmul>
   c9eaa:	4622      	mov	r2, r4
   c9eac:	462b      	mov	r3, r5
   c9eae:	f7ea f8bd 	bl	b402c <__adddf3>
   c9eb2:	ec41 0b10 	vmov	d0, r0, r1
   c9eb6:	b005      	add	sp, #20
   c9eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9ebc:	ec45 4b10 	vmov	d0, r4, r5
   c9ec0:	b005      	add	sp, #20
   c9ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c9ec6:	bf00      	nop
   c9ec8:	55555549 	.word	0x55555549
   c9ecc:	3fc55555 	.word	0x3fc55555
   c9ed0:	3fe00000 	.word	0x3fe00000
   c9ed4:	5acfd57c 	.word	0x5acfd57c
   c9ed8:	3de5d93a 	.word	0x3de5d93a
   c9edc:	8a2b9ceb 	.word	0x8a2b9ceb
   c9ee0:	3e5ae5e6 	.word	0x3e5ae5e6
   c9ee4:	57b1fe7d 	.word	0x57b1fe7d
   c9ee8:	3ec71de3 	.word	0x3ec71de3
   c9eec:	19c161d5 	.word	0x19c161d5
   c9ef0:	3f2a01a0 	.word	0x3f2a01a0
   c9ef4:	1110f8a6 	.word	0x1110f8a6
   c9ef8:	3f811111 	.word	0x3f811111

000c9efc <finite>:
   c9efc:	b082      	sub	sp, #8
   c9efe:	ed8d 0b00 	vstr	d0, [sp]
   c9f02:	9801      	ldr	r0, [sp, #4]
   c9f04:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   c9f08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   c9f0c:	0fc0      	lsrs	r0, r0, #31
   c9f0e:	b002      	add	sp, #8
   c9f10:	4770      	bx	lr
   c9f12:	bf00      	nop
   c9f14:	0000      	movs	r0, r0
	...

000c9f18 <floor>:
   c9f18:	ec51 0b10 	vmov	r0, r1, d0
   c9f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c9f1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   c9f22:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   c9f26:	2d13      	cmp	r5, #19
   c9f28:	ee10 6a10 	vmov	r6, s0
   c9f2c:	460c      	mov	r4, r1
   c9f2e:	dc30      	bgt.n	c9f92 <floor+0x7a>
   c9f30:	2d00      	cmp	r5, #0
   c9f32:	db1e      	blt.n	c9f72 <floor+0x5a>
   c9f34:	4f38      	ldr	r7, [pc, #224]	; (ca018 <floor+0x100>)
   c9f36:	412f      	asrs	r7, r5
   c9f38:	ea01 0307 	and.w	r3, r1, r7
   c9f3c:	4303      	orrs	r3, r0
   c9f3e:	d02d      	beq.n	c9f9c <floor+0x84>
   c9f40:	a333      	add	r3, pc, #204	; (adr r3, ca010 <floor+0xf8>)
   c9f42:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9f46:	f7ea f871 	bl	b402c <__adddf3>
   c9f4a:	2200      	movs	r2, #0
   c9f4c:	2300      	movs	r3, #0
   c9f4e:	f7ea fcb3 	bl	b48b8 <__aeabi_dcmpgt>
   c9f52:	b148      	cbz	r0, c9f68 <floor+0x50>
   c9f54:	2c00      	cmp	r4, #0
   c9f56:	da04      	bge.n	c9f62 <floor+0x4a>
   c9f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   c9f5c:	fa43 f505 	asr.w	r5, r3, r5
   c9f60:	442c      	add	r4, r5
   c9f62:	ea24 0407 	bic.w	r4, r4, r7
   c9f66:	2600      	movs	r6, #0
   c9f68:	4623      	mov	r3, r4
   c9f6a:	4632      	mov	r2, r6
   c9f6c:	ec43 2b10 	vmov	d0, r2, r3
   c9f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c9f72:	a327      	add	r3, pc, #156	; (adr r3, ca010 <floor+0xf8>)
   c9f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9f78:	f7ea f858 	bl	b402c <__adddf3>
   c9f7c:	2200      	movs	r2, #0
   c9f7e:	2300      	movs	r3, #0
   c9f80:	f7ea fc9a 	bl	b48b8 <__aeabi_dcmpgt>
   c9f84:	2800      	cmp	r0, #0
   c9f86:	d0ef      	beq.n	c9f68 <floor+0x50>
   c9f88:	2c00      	cmp	r4, #0
   c9f8a:	db29      	blt.n	c9fe0 <floor+0xc8>
   c9f8c:	2600      	movs	r6, #0
   c9f8e:	4634      	mov	r4, r6
   c9f90:	e7ea      	b.n	c9f68 <floor+0x50>
   c9f92:	2d33      	cmp	r5, #51	; 0x33
   c9f94:	dd05      	ble.n	c9fa2 <floor+0x8a>
   c9f96:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   c9f9a:	d019      	beq.n	c9fd0 <floor+0xb8>
   c9f9c:	ec41 0b10 	vmov	d0, r0, r1
   c9fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c9fa2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   c9fa6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   c9faa:	40df      	lsrs	r7, r3
   c9fac:	4207      	tst	r7, r0
   c9fae:	d0f5      	beq.n	c9f9c <floor+0x84>
   c9fb0:	a317      	add	r3, pc, #92	; (adr r3, ca010 <floor+0xf8>)
   c9fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   c9fb6:	f7ea f839 	bl	b402c <__adddf3>
   c9fba:	2200      	movs	r2, #0
   c9fbc:	2300      	movs	r3, #0
   c9fbe:	f7ea fc7b 	bl	b48b8 <__aeabi_dcmpgt>
   c9fc2:	2800      	cmp	r0, #0
   c9fc4:	d0d0      	beq.n	c9f68 <floor+0x50>
   c9fc6:	2c00      	cmp	r4, #0
   c9fc8:	db13      	blt.n	c9ff2 <floor+0xda>
   c9fca:	ea26 0607 	bic.w	r6, r6, r7
   c9fce:	e7cb      	b.n	c9f68 <floor+0x50>
   c9fd0:	ee10 2a10 	vmov	r2, s0
   c9fd4:	460b      	mov	r3, r1
   c9fd6:	f7ea f829 	bl	b402c <__adddf3>
   c9fda:	ec41 0b10 	vmov	d0, r0, r1
   c9fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c9fe0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   c9fe4:	4a0d      	ldr	r2, [pc, #52]	; (ca01c <floor+0x104>)
   c9fe6:	431e      	orrs	r6, r3
   c9fe8:	2e00      	cmp	r6, #0
   c9fea:	bf18      	it	ne
   c9fec:	4614      	movne	r4, r2
   c9fee:	2600      	movs	r6, #0
   c9ff0:	e7ba      	b.n	c9f68 <floor+0x50>
   c9ff2:	2d14      	cmp	r5, #20
   c9ff4:	d008      	beq.n	ca008 <floor+0xf0>
   c9ff6:	2301      	movs	r3, #1
   c9ff8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   c9ffc:	fa03 f505 	lsl.w	r5, r3, r5
   ca000:	19ae      	adds	r6, r5, r6
   ca002:	bf28      	it	cs
   ca004:	18e4      	addcs	r4, r4, r3
   ca006:	e7e0      	b.n	c9fca <floor+0xb2>
   ca008:	3401      	adds	r4, #1
   ca00a:	e7de      	b.n	c9fca <floor+0xb2>
   ca00c:	f3af 8000 	nop.w
   ca010:	8800759c 	.word	0x8800759c
   ca014:	7e37e43c 	.word	0x7e37e43c
   ca018:	000fffff 	.word	0x000fffff
   ca01c:	bff00000 	.word	0xbff00000

000ca020 <nan>:
   ca020:	ed9f 0b01 	vldr	d0, [pc, #4]	; ca028 <nan+0x8>
   ca024:	4770      	bx	lr
   ca026:	bf00      	nop
   ca028:	00000000 	.word	0x00000000
   ca02c:	7ff80000 	.word	0x7ff80000

000ca030 <rint>:
   ca030:	b5f0      	push	{r4, r5, r6, r7, lr}
   ca032:	ec53 2b10 	vmov	r2, r3, d0
   ca036:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
   ca03a:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
   ca03e:	2913      	cmp	r1, #19
   ca040:	ee10 0a10 	vmov	r0, s0
   ca044:	b083      	sub	sp, #12
   ca046:	461c      	mov	r4, r3
   ca048:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
   ca04c:	dc3a      	bgt.n	ca0c4 <rint+0x94>
   ca04e:	2900      	cmp	r1, #0
   ca050:	db30      	blt.n	ca0b4 <rint+0x84>
   ca052:	4d42      	ldr	r5, [pc, #264]	; (ca15c <rint+0x12c>)
   ca054:	fa45 fc01 	asr.w	ip, r5, r1
   ca058:	ea03 050c 	and.w	r5, r3, ip
   ca05c:	4315      	orrs	r5, r2
   ca05e:	d02d      	beq.n	ca0bc <rint+0x8c>
   ca060:	ea03 035c 	and.w	r3, r3, ip, lsr #1
   ca064:	4318      	orrs	r0, r3
   ca066:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
   ca06a:	d00c      	beq.n	ca086 <rint+0x56>
   ca06c:	ea24 0c0c 	bic.w	ip, r4, ip
   ca070:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   ca074:	2913      	cmp	r1, #19
   ca076:	fa44 f101 	asr.w	r1, r4, r1
   ca07a:	bf0c      	ite	eq
   ca07c:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
   ca080:	2000      	movne	r0, #0
   ca082:	ea4c 0401 	orr.w	r4, ip, r1
   ca086:	4936      	ldr	r1, [pc, #216]	; (ca160 <rint+0x130>)
   ca088:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
   ca08c:	4623      	mov	r3, r4
   ca08e:	e9de 4500 	ldrd	r4, r5, [lr]
   ca092:	4602      	mov	r2, r0
   ca094:	4629      	mov	r1, r5
   ca096:	4620      	mov	r0, r4
   ca098:	f7e9 ffc8 	bl	b402c <__adddf3>
   ca09c:	e9cd 0100 	strd	r0, r1, [sp]
   ca0a0:	e9dd 0100 	ldrd	r0, r1, [sp]
   ca0a4:	4622      	mov	r2, r4
   ca0a6:	462b      	mov	r3, r5
   ca0a8:	f7e9 ffbe 	bl	b4028 <__aeabi_dsub>
   ca0ac:	ec41 0b10 	vmov	d0, r0, r1
   ca0b0:	b003      	add	sp, #12
   ca0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ca0b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   ca0b8:	4311      	orrs	r1, r2
   ca0ba:	d124      	bne.n	ca106 <rint+0xd6>
   ca0bc:	ec43 2b10 	vmov	d0, r2, r3
   ca0c0:	b003      	add	sp, #12
   ca0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ca0c4:	2933      	cmp	r1, #51	; 0x33
   ca0c6:	dd08      	ble.n	ca0da <rint+0xaa>
   ca0c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   ca0cc:	d1f6      	bne.n	ca0bc <rint+0x8c>
   ca0ce:	4619      	mov	r1, r3
   ca0d0:	f7e9 ffac 	bl	b402c <__adddf3>
   ca0d4:	ec41 0b10 	vmov	d0, r0, r1
   ca0d8:	e7f2      	b.n	ca0c0 <rint+0x90>
   ca0da:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   ca0de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   ca0e2:	fa21 f10c 	lsr.w	r1, r1, ip
   ca0e6:	420a      	tst	r2, r1
   ca0e8:	d0e8      	beq.n	ca0bc <rint+0x8c>
   ca0ea:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   ca0ee:	ea4f 0351 	mov.w	r3, r1, lsr #1
   ca0f2:	d0c8      	beq.n	ca086 <rint+0x56>
   ca0f4:	ea20 0303 	bic.w	r3, r0, r3
   ca0f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   ca0fc:	fa40 fc0c 	asr.w	ip, r0, ip
   ca100:	ea43 000c 	orr.w	r0, r3, ip
   ca104:	e7bf      	b.n	ca086 <rint+0x56>
   ca106:	f3c3 0313 	ubfx	r3, r3, #0, #20
   ca10a:	4318      	orrs	r0, r3
   ca10c:	4a14      	ldr	r2, [pc, #80]	; (ca160 <rint+0x130>)
   ca10e:	4243      	negs	r3, r0
   ca110:	4303      	orrs	r3, r0
   ca112:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
   ca116:	0b1b      	lsrs	r3, r3, #12
   ca118:	0c62      	lsrs	r2, r4, #17
   ca11a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   ca11e:	0452      	lsls	r2, r2, #17
   ca120:	ea43 0702 	orr.w	r7, r3, r2
   ca124:	463b      	mov	r3, r7
   ca126:	e9de 6700 	ldrd	r6, r7, [lr]
   ca12a:	ee10 2a10 	vmov	r2, s0
   ca12e:	4630      	mov	r0, r6
   ca130:	4639      	mov	r1, r7
   ca132:	f7e9 ff7b 	bl	b402c <__adddf3>
   ca136:	e9cd 0100 	strd	r0, r1, [sp]
   ca13a:	4632      	mov	r2, r6
   ca13c:	463b      	mov	r3, r7
   ca13e:	e9dd 0100 	ldrd	r0, r1, [sp]
   ca142:	f7e9 ff71 	bl	b4028 <__aeabi_dsub>
   ca146:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   ca14a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   ca14e:	4602      	mov	r2, r0
   ca150:	ea41 0304 	orr.w	r3, r1, r4
   ca154:	ec43 2b10 	vmov	d0, r2, r3
   ca158:	b003      	add	sp, #12
   ca15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ca15c:	000fffff 	.word	0x000fffff
   ca160:	000cd280 	.word	0x000cd280

000ca164 <atexit>:
   ca164:	2300      	movs	r3, #0
   ca166:	4601      	mov	r1, r0
   ca168:	461a      	mov	r2, r3
   ca16a:	4618      	mov	r0, r3
   ca16c:	f000 b98e 	b.w	ca48c <__register_exitproc>

000ca170 <atoi>:
   ca170:	220a      	movs	r2, #10
   ca172:	2100      	movs	r1, #0
   ca174:	f000 b980 	b.w	ca478 <strtol>

000ca178 <isprint>:
   ca178:	4b02      	ldr	r3, [pc, #8]	; (ca184 <isprint+0xc>)
   ca17a:	4418      	add	r0, r3
   ca17c:	7840      	ldrb	r0, [r0, #1]
   ca17e:	f000 0097 	and.w	r0, r0, #151	; 0x97
   ca182:	4770      	bx	lr
   ca184:	000cd300 	.word	0x000cd300

000ca188 <memcmp>:
   ca188:	b510      	push	{r4, lr}
   ca18a:	3901      	subs	r1, #1
   ca18c:	4402      	add	r2, r0
   ca18e:	4290      	cmp	r0, r2
   ca190:	d101      	bne.n	ca196 <memcmp+0xe>
   ca192:	2000      	movs	r0, #0
   ca194:	e005      	b.n	ca1a2 <memcmp+0x1a>
   ca196:	7803      	ldrb	r3, [r0, #0]
   ca198:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ca19c:	42a3      	cmp	r3, r4
   ca19e:	d001      	beq.n	ca1a4 <memcmp+0x1c>
   ca1a0:	1b18      	subs	r0, r3, r4
   ca1a2:	bd10      	pop	{r4, pc}
   ca1a4:	3001      	adds	r0, #1
   ca1a6:	e7f2      	b.n	ca18e <memcmp+0x6>

000ca1a8 <memcpy>:
   ca1a8:	440a      	add	r2, r1
   ca1aa:	4291      	cmp	r1, r2
   ca1ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ca1b0:	d100      	bne.n	ca1b4 <memcpy+0xc>
   ca1b2:	4770      	bx	lr
   ca1b4:	b510      	push	{r4, lr}
   ca1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   ca1ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   ca1be:	4291      	cmp	r1, r2
   ca1c0:	d1f9      	bne.n	ca1b6 <memcpy+0xe>
   ca1c2:	bd10      	pop	{r4, pc}

000ca1c4 <memset>:
   ca1c4:	4402      	add	r2, r0
   ca1c6:	4603      	mov	r3, r0
   ca1c8:	4293      	cmp	r3, r2
   ca1ca:	d100      	bne.n	ca1ce <memset+0xa>
   ca1cc:	4770      	bx	lr
   ca1ce:	f803 1b01 	strb.w	r1, [r3], #1
   ca1d2:	e7f9      	b.n	ca1c8 <memset+0x4>

000ca1d4 <srand>:
   ca1d4:	b538      	push	{r3, r4, r5, lr}
   ca1d6:	4b10      	ldr	r3, [pc, #64]	; (ca218 <srand+0x44>)
   ca1d8:	681d      	ldr	r5, [r3, #0]
   ca1da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ca1dc:	4604      	mov	r4, r0
   ca1de:	b9b3      	cbnz	r3, ca20e <srand+0x3a>
   ca1e0:	2018      	movs	r0, #24
   ca1e2:	f7fb fa45 	bl	c5670 <malloc>
   ca1e6:	4602      	mov	r2, r0
   ca1e8:	63a8      	str	r0, [r5, #56]	; 0x38
   ca1ea:	b920      	cbnz	r0, ca1f6 <srand+0x22>
   ca1ec:	4b0b      	ldr	r3, [pc, #44]	; (ca21c <srand+0x48>)
   ca1ee:	480c      	ldr	r0, [pc, #48]	; (ca220 <srand+0x4c>)
   ca1f0:	2142      	movs	r1, #66	; 0x42
   ca1f2:	f7fb fa85 	bl	c5700 <__assert_func>
   ca1f6:	490b      	ldr	r1, [pc, #44]	; (ca224 <srand+0x50>)
   ca1f8:	4b0b      	ldr	r3, [pc, #44]	; (ca228 <srand+0x54>)
   ca1fa:	e9c0 1300 	strd	r1, r3, [r0]
   ca1fe:	4b0b      	ldr	r3, [pc, #44]	; (ca22c <srand+0x58>)
   ca200:	6083      	str	r3, [r0, #8]
   ca202:	230b      	movs	r3, #11
   ca204:	8183      	strh	r3, [r0, #12]
   ca206:	2100      	movs	r1, #0
   ca208:	2001      	movs	r0, #1
   ca20a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ca20e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ca210:	2200      	movs	r2, #0
   ca212:	611c      	str	r4, [r3, #16]
   ca214:	615a      	str	r2, [r3, #20]
   ca216:	bd38      	pop	{r3, r4, r5, pc}
   ca218:	2002d9e4 	.word	0x2002d9e4
   ca21c:	000cd290 	.word	0x000cd290
   ca220:	000cd2a7 	.word	0x000cd2a7
   ca224:	abcd330e 	.word	0xabcd330e
   ca228:	e66d1234 	.word	0xe66d1234
   ca22c:	0005deec 	.word	0x0005deec

000ca230 <rand>:
   ca230:	4b16      	ldr	r3, [pc, #88]	; (ca28c <rand+0x5c>)
   ca232:	b510      	push	{r4, lr}
   ca234:	681c      	ldr	r4, [r3, #0]
   ca236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   ca238:	b9b3      	cbnz	r3, ca268 <rand+0x38>
   ca23a:	2018      	movs	r0, #24
   ca23c:	f7fb fa18 	bl	c5670 <malloc>
   ca240:	63a0      	str	r0, [r4, #56]	; 0x38
   ca242:	b928      	cbnz	r0, ca250 <rand+0x20>
   ca244:	4602      	mov	r2, r0
   ca246:	4b12      	ldr	r3, [pc, #72]	; (ca290 <rand+0x60>)
   ca248:	4812      	ldr	r0, [pc, #72]	; (ca294 <rand+0x64>)
   ca24a:	214e      	movs	r1, #78	; 0x4e
   ca24c:	f7fb fa58 	bl	c5700 <__assert_func>
   ca250:	4a11      	ldr	r2, [pc, #68]	; (ca298 <rand+0x68>)
   ca252:	4b12      	ldr	r3, [pc, #72]	; (ca29c <rand+0x6c>)
   ca254:	e9c0 2300 	strd	r2, r3, [r0]
   ca258:	4b11      	ldr	r3, [pc, #68]	; (ca2a0 <rand+0x70>)
   ca25a:	6083      	str	r3, [r0, #8]
   ca25c:	230b      	movs	r3, #11
   ca25e:	8183      	strh	r3, [r0, #12]
   ca260:	2201      	movs	r2, #1
   ca262:	2300      	movs	r3, #0
   ca264:	e9c0 2304 	strd	r2, r3, [r0, #16]
   ca268:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   ca26a:	4a0e      	ldr	r2, [pc, #56]	; (ca2a4 <rand+0x74>)
   ca26c:	6920      	ldr	r0, [r4, #16]
   ca26e:	6963      	ldr	r3, [r4, #20]
   ca270:	490d      	ldr	r1, [pc, #52]	; (ca2a8 <rand+0x78>)
   ca272:	4342      	muls	r2, r0
   ca274:	fb01 2203 	mla	r2, r1, r3, r2
   ca278:	fba0 0101 	umull	r0, r1, r0, r1
   ca27c:	1c43      	adds	r3, r0, #1
   ca27e:	eb42 0001 	adc.w	r0, r2, r1
   ca282:	e9c4 3004 	strd	r3, r0, [r4, #16]
   ca286:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   ca28a:	bd10      	pop	{r4, pc}
   ca28c:	2002d9e4 	.word	0x2002d9e4
   ca290:	000cd290 	.word	0x000cd290
   ca294:	000cd2a7 	.word	0x000cd2a7
   ca298:	abcd330e 	.word	0xabcd330e
   ca29c:	e66d1234 	.word	0xe66d1234
   ca2a0:	0005deec 	.word	0x0005deec
   ca2a4:	5851f42d 	.word	0x5851f42d
   ca2a8:	4c957f2d 	.word	0x4c957f2d

000ca2ac <strcpy>:
   ca2ac:	4603      	mov	r3, r0
   ca2ae:	f811 2b01 	ldrb.w	r2, [r1], #1
   ca2b2:	f803 2b01 	strb.w	r2, [r3], #1
   ca2b6:	2a00      	cmp	r2, #0
   ca2b8:	d1f9      	bne.n	ca2ae <strcpy+0x2>
   ca2ba:	4770      	bx	lr

000ca2bc <strdup>:
   ca2bc:	4b02      	ldr	r3, [pc, #8]	; (ca2c8 <strdup+0xc>)
   ca2be:	4601      	mov	r1, r0
   ca2c0:	6818      	ldr	r0, [r3, #0]
   ca2c2:	f000 b803 	b.w	ca2cc <_strdup_r>
   ca2c6:	bf00      	nop
   ca2c8:	2002d9e4 	.word	0x2002d9e4

000ca2cc <_strdup_r>:
   ca2cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ca2ce:	4604      	mov	r4, r0
   ca2d0:	4608      	mov	r0, r1
   ca2d2:	460d      	mov	r5, r1
   ca2d4:	f7ea fe92 	bl	b4ffc <strlen>
   ca2d8:	1c42      	adds	r2, r0, #1
   ca2da:	4611      	mov	r1, r2
   ca2dc:	4620      	mov	r0, r4
   ca2de:	9201      	str	r2, [sp, #4]
   ca2e0:	f7fb f9fe 	bl	c56e0 <_malloc_r>
   ca2e4:	4604      	mov	r4, r0
   ca2e6:	b118      	cbz	r0, ca2f0 <_strdup_r+0x24>
   ca2e8:	9a01      	ldr	r2, [sp, #4]
   ca2ea:	4629      	mov	r1, r5
   ca2ec:	f7ff ff5c 	bl	ca1a8 <memcpy>
   ca2f0:	4620      	mov	r0, r4
   ca2f2:	b003      	add	sp, #12
   ca2f4:	bd30      	pop	{r4, r5, pc}

000ca2f6 <strncpy>:
   ca2f6:	b510      	push	{r4, lr}
   ca2f8:	3901      	subs	r1, #1
   ca2fa:	4603      	mov	r3, r0
   ca2fc:	b132      	cbz	r2, ca30c <strncpy+0x16>
   ca2fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ca302:	f803 4b01 	strb.w	r4, [r3], #1
   ca306:	3a01      	subs	r2, #1
   ca308:	2c00      	cmp	r4, #0
   ca30a:	d1f7      	bne.n	ca2fc <strncpy+0x6>
   ca30c:	441a      	add	r2, r3
   ca30e:	2100      	movs	r1, #0
   ca310:	4293      	cmp	r3, r2
   ca312:	d100      	bne.n	ca316 <strncpy+0x20>
   ca314:	bd10      	pop	{r4, pc}
   ca316:	f803 1b01 	strb.w	r1, [r3], #1
   ca31a:	e7f9      	b.n	ca310 <strncpy+0x1a>

000ca31c <__strtok_r>:
   ca31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   ca31e:	b908      	cbnz	r0, ca324 <__strtok_r+0x8>
   ca320:	6810      	ldr	r0, [r2, #0]
   ca322:	b188      	cbz	r0, ca348 <__strtok_r+0x2c>
   ca324:	4604      	mov	r4, r0
   ca326:	4620      	mov	r0, r4
   ca328:	f814 5b01 	ldrb.w	r5, [r4], #1
   ca32c:	460f      	mov	r7, r1
   ca32e:	f817 6b01 	ldrb.w	r6, [r7], #1
   ca332:	b91e      	cbnz	r6, ca33c <__strtok_r+0x20>
   ca334:	b965      	cbnz	r5, ca350 <__strtok_r+0x34>
   ca336:	6015      	str	r5, [r2, #0]
   ca338:	4628      	mov	r0, r5
   ca33a:	e005      	b.n	ca348 <__strtok_r+0x2c>
   ca33c:	42b5      	cmp	r5, r6
   ca33e:	d1f6      	bne.n	ca32e <__strtok_r+0x12>
   ca340:	2b00      	cmp	r3, #0
   ca342:	d1f0      	bne.n	ca326 <__strtok_r+0xa>
   ca344:	6014      	str	r4, [r2, #0]
   ca346:	7003      	strb	r3, [r0, #0]
   ca348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ca34a:	461c      	mov	r4, r3
   ca34c:	e00c      	b.n	ca368 <__strtok_r+0x4c>
   ca34e:	b915      	cbnz	r5, ca356 <__strtok_r+0x3a>
   ca350:	f814 3b01 	ldrb.w	r3, [r4], #1
   ca354:	460e      	mov	r6, r1
   ca356:	f816 5b01 	ldrb.w	r5, [r6], #1
   ca35a:	42ab      	cmp	r3, r5
   ca35c:	d1f7      	bne.n	ca34e <__strtok_r+0x32>
   ca35e:	2b00      	cmp	r3, #0
   ca360:	d0f3      	beq.n	ca34a <__strtok_r+0x2e>
   ca362:	2300      	movs	r3, #0
   ca364:	f804 3c01 	strb.w	r3, [r4, #-1]
   ca368:	6014      	str	r4, [r2, #0]
   ca36a:	e7ed      	b.n	ca348 <__strtok_r+0x2c>

000ca36c <strtok_r>:
   ca36c:	2301      	movs	r3, #1
   ca36e:	f7ff bfd5 	b.w	ca31c <__strtok_r>
	...

000ca374 <_strtol_l.constprop.0>:
   ca374:	2b01      	cmp	r3, #1
   ca376:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ca37a:	d001      	beq.n	ca380 <_strtol_l.constprop.0+0xc>
   ca37c:	2b24      	cmp	r3, #36	; 0x24
   ca37e:	d906      	bls.n	ca38e <_strtol_l.constprop.0+0x1a>
   ca380:	f7fb f9b6 	bl	c56f0 <__errno>
   ca384:	2316      	movs	r3, #22
   ca386:	6003      	str	r3, [r0, #0]
   ca388:	2000      	movs	r0, #0
   ca38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   ca38e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; ca474 <_strtol_l.constprop.0+0x100>
   ca392:	460d      	mov	r5, r1
   ca394:	462e      	mov	r6, r5
   ca396:	f815 4b01 	ldrb.w	r4, [r5], #1
   ca39a:	f814 700c 	ldrb.w	r7, [r4, ip]
   ca39e:	f017 0708 	ands.w	r7, r7, #8
   ca3a2:	d1f7      	bne.n	ca394 <_strtol_l.constprop.0+0x20>
   ca3a4:	2c2d      	cmp	r4, #45	; 0x2d
   ca3a6:	d132      	bne.n	ca40e <_strtol_l.constprop.0+0x9a>
   ca3a8:	782c      	ldrb	r4, [r5, #0]
   ca3aa:	2701      	movs	r7, #1
   ca3ac:	1cb5      	adds	r5, r6, #2
   ca3ae:	2b00      	cmp	r3, #0
   ca3b0:	d05b      	beq.n	ca46a <_strtol_l.constprop.0+0xf6>
   ca3b2:	2b10      	cmp	r3, #16
   ca3b4:	d109      	bne.n	ca3ca <_strtol_l.constprop.0+0x56>
   ca3b6:	2c30      	cmp	r4, #48	; 0x30
   ca3b8:	d107      	bne.n	ca3ca <_strtol_l.constprop.0+0x56>
   ca3ba:	782c      	ldrb	r4, [r5, #0]
   ca3bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   ca3c0:	2c58      	cmp	r4, #88	; 0x58
   ca3c2:	d14d      	bne.n	ca460 <_strtol_l.constprop.0+0xec>
   ca3c4:	786c      	ldrb	r4, [r5, #1]
   ca3c6:	2310      	movs	r3, #16
   ca3c8:	3502      	adds	r5, #2
   ca3ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   ca3ce:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   ca3d2:	f04f 0c00 	mov.w	ip, #0
   ca3d6:	fbb8 f9f3 	udiv	r9, r8, r3
   ca3da:	4666      	mov	r6, ip
   ca3dc:	fb03 8a19 	mls	sl, r3, r9, r8
   ca3e0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   ca3e4:	f1be 0f09 	cmp.w	lr, #9
   ca3e8:	d816      	bhi.n	ca418 <_strtol_l.constprop.0+0xa4>
   ca3ea:	4674      	mov	r4, lr
   ca3ec:	42a3      	cmp	r3, r4
   ca3ee:	dd24      	ble.n	ca43a <_strtol_l.constprop.0+0xc6>
   ca3f0:	f1bc 0f00 	cmp.w	ip, #0
   ca3f4:	db1e      	blt.n	ca434 <_strtol_l.constprop.0+0xc0>
   ca3f6:	45b1      	cmp	r9, r6
   ca3f8:	d31c      	bcc.n	ca434 <_strtol_l.constprop.0+0xc0>
   ca3fa:	d101      	bne.n	ca400 <_strtol_l.constprop.0+0x8c>
   ca3fc:	45a2      	cmp	sl, r4
   ca3fe:	db19      	blt.n	ca434 <_strtol_l.constprop.0+0xc0>
   ca400:	fb06 4603 	mla	r6, r6, r3, r4
   ca404:	f04f 0c01 	mov.w	ip, #1
   ca408:	f815 4b01 	ldrb.w	r4, [r5], #1
   ca40c:	e7e8      	b.n	ca3e0 <_strtol_l.constprop.0+0x6c>
   ca40e:	2c2b      	cmp	r4, #43	; 0x2b
   ca410:	bf04      	itt	eq
   ca412:	782c      	ldrbeq	r4, [r5, #0]
   ca414:	1cb5      	addeq	r5, r6, #2
   ca416:	e7ca      	b.n	ca3ae <_strtol_l.constprop.0+0x3a>
   ca418:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   ca41c:	f1be 0f19 	cmp.w	lr, #25
   ca420:	d801      	bhi.n	ca426 <_strtol_l.constprop.0+0xb2>
   ca422:	3c37      	subs	r4, #55	; 0x37
   ca424:	e7e2      	b.n	ca3ec <_strtol_l.constprop.0+0x78>
   ca426:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   ca42a:	f1be 0f19 	cmp.w	lr, #25
   ca42e:	d804      	bhi.n	ca43a <_strtol_l.constprop.0+0xc6>
   ca430:	3c57      	subs	r4, #87	; 0x57
   ca432:	e7db      	b.n	ca3ec <_strtol_l.constprop.0+0x78>
   ca434:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   ca438:	e7e6      	b.n	ca408 <_strtol_l.constprop.0+0x94>
   ca43a:	f1bc 0f00 	cmp.w	ip, #0
   ca43e:	da05      	bge.n	ca44c <_strtol_l.constprop.0+0xd8>
   ca440:	2322      	movs	r3, #34	; 0x22
   ca442:	6003      	str	r3, [r0, #0]
   ca444:	4646      	mov	r6, r8
   ca446:	b942      	cbnz	r2, ca45a <_strtol_l.constprop.0+0xe6>
   ca448:	4630      	mov	r0, r6
   ca44a:	e79e      	b.n	ca38a <_strtol_l.constprop.0+0x16>
   ca44c:	b107      	cbz	r7, ca450 <_strtol_l.constprop.0+0xdc>
   ca44e:	4276      	negs	r6, r6
   ca450:	2a00      	cmp	r2, #0
   ca452:	d0f9      	beq.n	ca448 <_strtol_l.constprop.0+0xd4>
   ca454:	f1bc 0f00 	cmp.w	ip, #0
   ca458:	d000      	beq.n	ca45c <_strtol_l.constprop.0+0xe8>
   ca45a:	1e69      	subs	r1, r5, #1
   ca45c:	6011      	str	r1, [r2, #0]
   ca45e:	e7f3      	b.n	ca448 <_strtol_l.constprop.0+0xd4>
   ca460:	2430      	movs	r4, #48	; 0x30
   ca462:	2b00      	cmp	r3, #0
   ca464:	d1b1      	bne.n	ca3ca <_strtol_l.constprop.0+0x56>
   ca466:	2308      	movs	r3, #8
   ca468:	e7af      	b.n	ca3ca <_strtol_l.constprop.0+0x56>
   ca46a:	2c30      	cmp	r4, #48	; 0x30
   ca46c:	d0a5      	beq.n	ca3ba <_strtol_l.constprop.0+0x46>
   ca46e:	230a      	movs	r3, #10
   ca470:	e7ab      	b.n	ca3ca <_strtol_l.constprop.0+0x56>
   ca472:	bf00      	nop
   ca474:	000cd301 	.word	0x000cd301

000ca478 <strtol>:
   ca478:	4613      	mov	r3, r2
   ca47a:	460a      	mov	r2, r1
   ca47c:	4601      	mov	r1, r0
   ca47e:	4802      	ldr	r0, [pc, #8]	; (ca488 <strtol+0x10>)
   ca480:	6800      	ldr	r0, [r0, #0]
   ca482:	f7ff bf77 	b.w	ca374 <_strtol_l.constprop.0>
   ca486:	bf00      	nop
   ca488:	2002d9e4 	.word	0x2002d9e4

000ca48c <__register_exitproc>:
   ca48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ca490:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ca54c <__register_exitproc+0xc0>
   ca494:	4606      	mov	r6, r0
   ca496:	f8d8 0000 	ldr.w	r0, [r8]
   ca49a:	461f      	mov	r7, r3
   ca49c:	460d      	mov	r5, r1
   ca49e:	4691      	mov	r9, r2
   ca4a0:	f000 f856 	bl	ca550 <__retarget_lock_acquire_recursive>
   ca4a4:	4b25      	ldr	r3, [pc, #148]	; (ca53c <__register_exitproc+0xb0>)
   ca4a6:	681c      	ldr	r4, [r3, #0]
   ca4a8:	b934      	cbnz	r4, ca4b8 <__register_exitproc+0x2c>
   ca4aa:	4c25      	ldr	r4, [pc, #148]	; (ca540 <__register_exitproc+0xb4>)
   ca4ac:	601c      	str	r4, [r3, #0]
   ca4ae:	4b25      	ldr	r3, [pc, #148]	; (ca544 <__register_exitproc+0xb8>)
   ca4b0:	b113      	cbz	r3, ca4b8 <__register_exitproc+0x2c>
   ca4b2:	681b      	ldr	r3, [r3, #0]
   ca4b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ca4b8:	6863      	ldr	r3, [r4, #4]
   ca4ba:	2b1f      	cmp	r3, #31
   ca4bc:	dd07      	ble.n	ca4ce <__register_exitproc+0x42>
   ca4be:	f8d8 0000 	ldr.w	r0, [r8]
   ca4c2:	f000 f847 	bl	ca554 <__retarget_lock_release_recursive>
   ca4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   ca4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ca4ce:	b34e      	cbz	r6, ca524 <__register_exitproc+0x98>
   ca4d0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   ca4d4:	b988      	cbnz	r0, ca4fa <__register_exitproc+0x6e>
   ca4d6:	4b1c      	ldr	r3, [pc, #112]	; (ca548 <__register_exitproc+0xbc>)
   ca4d8:	b923      	cbnz	r3, ca4e4 <__register_exitproc+0x58>
   ca4da:	f8d8 0000 	ldr.w	r0, [r8]
   ca4de:	f000 f838 	bl	ca552 <__retarget_lock_release>
   ca4e2:	e7f0      	b.n	ca4c6 <__register_exitproc+0x3a>
   ca4e4:	f44f 7084 	mov.w	r0, #264	; 0x108
   ca4e8:	f7fb f8c2 	bl	c5670 <malloc>
   ca4ec:	2800      	cmp	r0, #0
   ca4ee:	d0f4      	beq.n	ca4da <__register_exitproc+0x4e>
   ca4f0:	2300      	movs	r3, #0
   ca4f2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   ca4f6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   ca4fa:	6863      	ldr	r3, [r4, #4]
   ca4fc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   ca500:	2201      	movs	r2, #1
   ca502:	409a      	lsls	r2, r3
   ca504:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   ca508:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   ca50c:	4313      	orrs	r3, r2
   ca50e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   ca512:	2e02      	cmp	r6, #2
   ca514:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   ca518:	bf02      	ittt	eq
   ca51a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   ca51e:	4313      	orreq	r3, r2
   ca520:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   ca524:	6863      	ldr	r3, [r4, #4]
   ca526:	f8d8 0000 	ldr.w	r0, [r8]
   ca52a:	1c5a      	adds	r2, r3, #1
   ca52c:	3302      	adds	r3, #2
   ca52e:	6062      	str	r2, [r4, #4]
   ca530:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   ca534:	f000 f80e 	bl	ca554 <__retarget_lock_release_recursive>
   ca538:	2000      	movs	r0, #0
   ca53a:	e7c6      	b.n	ca4ca <__register_exitproc+0x3e>
   ca53c:	2003e7f0 	.word	0x2003e7f0
   ca540:	2003e764 	.word	0x2003e764
   ca544:	00000000 	.word	0x00000000
   ca548:	000c5671 	.word	0x000c5671
   ca54c:	2002da48 	.word	0x2002da48

000ca550 <__retarget_lock_acquire_recursive>:
   ca550:	4770      	bx	lr

000ca552 <__retarget_lock_release>:
   ca552:	4770      	bx	lr

000ca554 <__retarget_lock_release_recursive>:
   ca554:	4770      	bx	lr

000ca556 <link_code_end>:
	...

000ca558 <link_const_data_start>:
   ca558:	00001388 	.word	0x00001388
   ca55c:	00002710 	.word	0x00002710
   ca560:	00004e20 	.word	0x00004e20
   ca564:	00009c40 	.word	0x00009c40
   ca568:	00013880 	.word	0x00013880
   ca56c:	00027100 	.word	0x00027100
   ca570:	0004e200 	.word	0x0004e200
   ca574:	0009c400 	.word	0x0009c400
   ca578:	00138800 	.word	0x00138800
   ca57c:	00271000 	.word	0x00271000
   ca580:	004e2000 	.word	0x004e2000
   ca584:	009c4000 	.word	0x009c4000
   ca588:	01388000 	.word	0x01388000
   ca58c:	02710000 	.word	0x02710000
   ca590:	04e20000 	.word	0x04e20000
   ca594:	09c40000 	.word	0x09c40000
   ca598:	13880000 	.word	0x13880000
   ca59c:	27100000 	.word	0x27100000
   ca5a0:	00000000 	.word	0x00000000
   ca5a4:	000ca621 	.word	0x000ca621
   ca5a8:	000ca626 	.word	0x000ca626
   ca5ac:	000ca62a 	.word	0x000ca62a
   ca5b0:	000ca633 	.word	0x000ca633
   ca5b4:	000ca63f 	.word	0x000ca63f
   ca5b8:	000ca647 	.word	0x000ca647
   ca5bc:	000ca621 	.word	0x000ca621
   ca5c0:	000ca64f 	.word	0x000ca64f
   ca5c4:	000ca650 	.word	0x000ca650
   ca5c8:	000ca659 	.word	0x000ca659
   ca5cc:	000ca661 	.word	0x000ca661
   ca5d0:	000ca66d 	.word	0x000ca66d
   ca5d4:	000ca673 	.word	0x000ca673
   ca5d8:	04030201 	.word	0x04030201
   ca5dc:	08070605 	.word	0x08070605
   ca5e0:	0c0b0a09 	.word	0x0c0b0a09
   ca5e4:	100f0e0d 	.word	0x100f0e0d
   ca5e8:	00000000 	.word	0x00000000
   ca5ec:	01000000 	.word	0x01000000
   ca5f0:	0100080c 	.word	0x0100080c
   ca5f4:	00000302 	.word	0x00000302

000ca5f8 <dynalib_user>:
   ca5f8:	000b500d 000b5049 000b5071 000b5075     .P..IP..qP..uP..
   ca608:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   ca618:	72697620 6c617574 4b4e5500 4956004e      virtual.UNKN.VI
   ca628:	5355004e 4f485f42 55005453 415f4253     N.USB_HOST.USB_A
   ca638:	54504144 55005245 4f5f4253 42004754     DAPTER.USB_OTG.B
   ca648:	45545441 21005952 52414843 474e4947     ATTERY.!CHARGING
   ca658:	41484300 44454752 53494400 52414843     .CHARGED.DISCHAR
   ca668:	474e4947 55414600 4d00544c 49535349     GING.FAULT.MISSI
   ca678:	4200474e 3832454d 4d420030 30393350     NG.BME280.BMP390
   ca688:	00304100 41003141 33410032 00344100     .A0.A1.A2.A3.A4.
   ca698:	44003541 31440030 00324400 44003344     A5.D0.D1.D2.D3.D
   ca6a8:	35440034 00364400 44003744 39440038     4.D5.D6.D7.D8.D9
   ca6b8:	30314400 31314400 32314400 33314400     .D10.D11.D12.D13
   ca6c8:	34314400 35314400 41445300 4c435300     .D14.D15.SDA.SCL
   ca6d8:	00585400 4d005852 004f5349 49534f4d     .TX.RX.MISO.MOSI
   ca6e8:	4b435300 00535300 00504b57 42535556     .SCK.SS.WKP.VUSB
   ca6f8:	2b694c00 250a0d00 5d0d5e5b 64000a0d     .Li+...%[^.]...d
   ca708:	75616665 0020746c 0042534d 0042534c     efault .MSB.LSB.
   ca718:	4950533c 74746553 73676e69 66656420     <SPISettings def
   ca728:	746c7561 533c003e 65534950 6e697474     ault>.<SPISettin
   ca738:	25207367 20752573 4d207325 2545444f     gs %s%u %s MODE%
   ca748:	7c003e75 2d002f00 4f005c00 3344454c     u>.|./.-.\.OLED3
   ca758:	4b4f3a32 454c4f00 3a343644 25004b4f     2:OK.OLED64:OK.%
   ca768:	30252d64 252d6432 54643230 64323025     d-%02d-%02dT%02d
   ca778:	3230253a 30253a64 45006432 523a5252     :%02d:%02d.ERR:R
   ca788:	4e204354 4620544f 444e554f 52524500     TC NOT FOUND.ERR
   ca798:	4354523a 4332492d 544f4e20 4e554f46     :RTC-I2C NOTFOUN
   ca7a8:	73250044 5452002a 41563a43 0044494c     D.%s*.RTC:VALID.
   ca7b8:	4445454e 4d534720 4d495420 523e2d45     NEED GSM TIME->R
   ca7c8:	52004354 203a4354 00746553 3a435452     TC.RTC: Set.RTC:
   ca7d8:	54533120 4e595320 54520043 32203a43      1ST SYNC.RTC: 2
   ca7e8:	53205248 00434e59 20534541 59454b50     HR SYNC.AES PKEY
   ca7f8:	45532120 45410054 4b502053 21205945      !SET.AES PKEY !
   ca808:	42203631 73657479 53454100 49594d20     16 Bytes.AES MYI
   ca818:	53212056 4c005445 2041524f 20525750     V !SET.LORA PWR 
   ca828:	00525245 41524f4c 45524620 52452051     ERR.LORA FREQ ER
   ca838:	4f4c0052 41204152 20524444 00525245     R.LORA ADDR ERR.
   ca848:	5f534541 5b59454b 005d7325 5f534541     AES_KEY[%s].AES_
   ca858:	5649594d 5d75255b 524f4c00 46432041     MYIV[%u].LORA CF
   ca868:	4b4f2056 74656700 736f425f 435f6863     V OK.get_Bosch_C
   ca878:	49706968 00292844 32492020 30253a43     hipID().  I2C:%0
   ca888:	52205832 253a6765 00583230 52452020     2X Reg:%02X.  ER
   ca898:	54455f52 0064253a 48432020 44495049     R_ET:%d.  CHIPID
   ca8a8:	3230253a 4d422058 30383250 43202000     :%02X BMP280.  C
   ca8b8:	49504948 30253a44 42205832 3833504d     HIPID:%02X BMP38
   ca8c8:	20200038 50494843 253a4449 20583230     8.  CHIPID:%02X 
   ca8d8:	2f454d42 00303933 48432020 44495049     BME/390.  CHIPID
   ca8e8:	3230253a 6e492058 696c6156 20200064     :%02X InValid.  
   ca8f8:	5f525245 303a4652 584d4200 494e493a     ERR_RF:0.BMX:INI
   ca908:	4d420054 45203150 42005252 2031504d     T.BMP1 ERR.BMP1 
   ca918:	42004b4f 2031584d 00525245 33504d42     OK.BMX1 ERR.BMP3
   ca928:	315f3039 004b4f20 32454d42 315f3038     90_1 OK.BME280_1
   ca938:	004b4f20 31334d42 52524520 334d4200      OK.BM31 ERR.BM3
   ca948:	4b4f2031 584d4200 4e20315f 4d420046     1 OK.BMX_1 NF.BM
   ca958:	45203250 42005252 2032504d 42004b4f     P2 ERR.BMP2 OK.B
   ca968:	2032584d 00525245 33504d42 325f3039     MX2 ERR.BMP390_2
   ca978:	004b4f20 32454d42 325f3038 004b4f20      OK.BME280_2 OK.
   ca988:	32334d42 52524520 334d4200 4b4f2032     BM32 ERR.BM32 OK
   ca998:	584d4200 4e20325f 54480046 44313255     .BMX_2 NF.HTU21D
   ca9a8:	494e493a 54480054 464e2055 55544800     :INIT.HTU NF.HTU
   ca9b8:	004b4f20 3950434d 3a383038 54494e49      OK.MCP9808:INIT
   ca9c8:	50434d00 464e2031 50434d00 4b4f2031     .MCP1 NF.MCP1 OK
   ca9d8:	50434d00 464e2032 50434d00 4b4f2032     .MCP2 NF.MCP2 OK
   ca9e8:	50434d00 464e2033 50434d00 4b4f2033     .MCP3 NF.MCP3 OK
   ca9f8:	50434d00 464e2034 50434d00 4b4f2034     .MCP4 NF.MCP4 OK
   caa08:	54485300 494e493a 48530054 4e203154     .SHT:INIT.SHT1 N
   caa18:	48530046 4f203154 4853004b 4e203254     F.SHT1 OK.SHT2 N
   caa28:	48530046 4f203254 4948004b 493a3848     F.SHT2 OK.HIH8:I
   caa38:	0054494e 38484948 004b4f20 38484948     NIT.HIH8 OK.HIH8
   caa48:	00464e20 3a544257 54494e49 54425700      NF.WBT:INIT.WBT
   caa58:	004b4f3a 3a544257 4800464e 4e493a49     :OK.WBT:NF.HI:IN
   caa68:	48005449 4b4f3a49 3a494800 5700464e     IT.HI:OK.HI:NF.W
   caa78:	3a544742 54494e49 47425700 4b4f3a54     BGT:INIT.WBGT:OK
   caa88:	472f7720 65626f6c 47425700 4b4f3a54      w/Globe.WBGT:OK
   caa98:	2f6f7720 626f6c47 42570065 4e3a5447      wo/Globe.WBGT:N
   caaa8:	49530046 35343131 494e493a 49530054     F.SI1145:INIT.SI
   caab8:	004b4f3a 563a4953 64255b49 3230252e     :OK.SI:VI[%d.%02
   caac8:	53005d64 52493a49 2e64255b 64323025     d].SI:IR[%d.%02d
   caad8:	4953005d 5b56553a 252e6425 5d643230     ].SI:UV[%d.%02d]
   caae8:	584c5600 494e493a 4c560054 4b4f2058     .VLX:INIT.VLX OK
   caaf8:	584c5600 00464e20 3a584c42 54494e49     .VLX NF.BLX:INIT
   cab08:	584c4200 004b4f3a 3a584c42 5000464e     .BLX:OK.BLX:NF.P
   cab18:	4135324d 493a4951 0054494e 4e3a4d50     M25AQI:INIT.PM:N
   cab28:	4d500046 6765423a 4e206e69 4d500046     F.PM:Begin NF.PM
   cab38:	004b4f3a 4f204d50 494c4646 4800454e     :OK.PM OFFLINE.H
   cab48:	493a4344 0054494e 31434448 00464e20     DC:INIT.HDC1 NF.
   cab58:	31434448 004b4f20 32434448 00464e20     HDC1 OK.HDC2 NF.
   cab68:	32434448 004b4f20 3a53504c 54494e49     HDC2 OK.LPS:INIT
   cab78:	53504c00 464e2031 53504c00 4b4f2031     .LPS1 NF.LPS1 OK
   cab88:	53504c00 464e2032 53504c00 4b4f2032     .LPS2 NF.LPS2 OK
   cab98:	574c5400 494e493a 4c540054 464e2057     .TLW:INIT.TLW NF
   caba8:	574c5400 004b4f20 3a4d5354 54494e49     .TLW OK.TSM:INIT
   cabb8:	4d535400 00464e20 204d5354 54004b4f     .TSM NF.TSM OK.T
   cabc8:	3a4d534d 54494e49 534d5400 464e204d     MSM:INIT.TMSM NF
   cabd8:	534d5400 4b4f204d 35534100 3a303036     .TMSM OK.AS5600:
   cabe8:	54494e49 3a445700 5700464e 4b4f3a44     INIT.WD:NF.WD:OK
   cabf8:	3a344100 54494e49 3d344100 54534944     .A4:INIT.A4=DIST
   cac08:	53494400 4d353d54 53494400 30313d54     .DIST=5M.DIST=10
   cac18:	3441004d 4941523d 3441004e 5741523d     M.A4=RAIN.A4=RAW
   cac28:	3d344100 4c4c554e 3d344100 4c4c554e     .A4=NULL.A4=NULL
   cac38:	2044532c 4100464e 4e493a35 41005449     ,SD NF.A5:INIT.A
   cac48:	41523d35 35410057 4c554e3d 3541004c     5=RAW.A5=NULL.A5
   cac58:	4c554e3d 44532c4c 00464e20 4f204457     =NULL,SD NF.WD O
   cac68:	696c6666 4c5f656e 20445700 6c66664f     ffline_L.WD Offl
   cac78:	5f656e69 44570048 6c6e4f20 00656e69     ine_H.WD Online.
   cac88:	31504d42 4c4e4f20 00454e49 31454d42     BMP1 ONLINE.BME1
   cac98:	4c4e4f20 00454e49 33504d42 315f3039      ONLINE.BMP390_1
   caca8:	4c4e4f20 00454e49 31334d42 4c4e4f20      ONLINE.BM31 ONL
   cacb8:	00454e49 31584d42 46464f20 454e494c     INE.BMX1 OFFLINE
   cacc8:	504d4200 4e4f2032 454e494c 454d4200     .BMP2 ONLINE.BME
   cacd8:	4e4f2032 454e494c 334d4200 4e4f2032     2 ONLINE.BM32 ON
   cace8:	454e494c 584d4200 464f2032 4e494c46     LINE.BMX2 OFFLIN
   cacf8:	54480045 4e4f2055 454e494c 55544800     E.HTU ONLINE.HTU
   cad08:	46464f20 454e494c 20495300 494c4e4f      OFFLINE.SI ONLI
   cad18:	5300454e 464f2049 4e494c46 44570045     NE.SI OFFLINE.WD
   cad28:	4c4e4f20 00454e49 4f204457 494c4646      ONLINE.WD OFFLI
   cad38:	5600454e 4f20584c 4e494c4e 4c560045     NE.VLX ONLINE.VL
   cad48:	464f2058 4e494c46 4d500045 4c4e4f20     X OFFLINE.PM ONL
   cad58:	00454e49 52504545 43204d4f 5241454c     INE.EEPROM CLEAR
   cad68:	52524520 5400524f 202c363e 363e5452      ERROR.T>6, RT>6
   cad78:	4f202d20 3e54004b 52202c36 363d3c54      - OK.T>6, RT<=6
   cad88:	20262620 3e545220 202d5936 65766f4d      &&  RT>6Y- Move
   cad98:	363c5400 5452202c 2620363c 3e545220     .T<6, RT<6 & RT>
   cada8:	65592036 72657473 20796164 4b4f202d     6 Yesterday - OK
   cadb8:	363c5400 5452202c 2620363c 54522026     .T<6, RT<6 && RT
   cadc8:	322d363e 202d2064 65766f4d 363c5400     >6-2d - Move.T<6
   cadd8:	5452202c 2620363c 54522026 2d363d3c     , RT<6 && RT<=6-
   cade8:	2d206432 656c4320 45007261 4f525045     2d - Clear.EEPRO
   cadf8:	4e49204d 45205449 524f5252 50454500     M INIT ERROR.EEP
   cae08:	204d4f52 55205452 54414450 45004445     ROM RT UPDATED.E
   cae18:	4f525045 5055204d 45544144 45450044     EPROM UPDATED.EE
   cae28:	4d4f5250 4d554420 4c200050 253a4e45     PROM DUMP. LEN:%
   cae38:	52200064 253a3154 30252e64 20006432     d. RT1:%d.%02d. 
   cae48:	3a315052 252e6425 00643230 32545220     RP1:%d.%02d. RT2
   cae58:	2e64253a 64323025 50522000 64253a32     :%d.%02d. RP2:%d
   cae68:	3230252e 52200064 3a535447 00756c25     .%02d. RGTS:%lu.
   cae78:	53324e20 253a5046 2000756c 253a5343      N2SFP:%lu. CS:%
   cae88:	2000756c 3a435343 00756c25 4e3a4453     lu. CSC:%lu.SD:N
   cae98:	44530046 444b4d3a 4f205249 4f205342     F.SD:MKDIR OBS O
   caea8:	4453004b 6c6e4f3a 00656e69 4d3a4453     K.SD:Online.SD:M
   caeb8:	5249444b 53424f20 52524520 3a445300     KDIR OBS ERR.SD:
   caec8:	6c66664f 00656e69 4f3a4453 44205342     Offline.SD:OBS D
   caed8:	45205249 74736978 73250073 6434252f     IR Exists.%s/%4d
   caee8:	64323025 64323025 676f6c2e 3a445300     %02d%02d.log.SD:
   caef8:	6e65704f 676f4c28 52524529 53324e00     Open(Log)ERR.N2S
   caf08:	45443e2d 464e3a4c 53324e00 45443e2d     ->DEL:NF.N2S->DE
   caf18:	4b4f3a4c 53324e00 45443e2d 52453a4c     L:OK.N2S->DEL:ER
   caf28:	324e0052 75463a53 4e006c6c 4f3a5332     R.N2S:Full.N2S:O
   caf38:	41205342 64656464 53324e00 65704f3a     BS Added.N2S:Ope
   caf48:	7245206e 00726f72 252c7325 6f4c0073     n Error.%s,%s.Lo
   caf58:	734d6152 64255b67 4e3e2d5d 4c005332     RaMsg[%d]->N2S.L
   caf68:	2041524f 616c6552 63252079 55206325     ORA Relay %c%c U
   caf78:	006e6b6e 6552002c 2079616c 49207325     nkn.,.Relay %s I
   caf88:	64253a44 544e4320 0064253a 41524f4c     D:%d CNT:%d.LORA
   caf98:	6c655220 4e207961 6170536f 4c006563      Relay NoSpace.L
   cafa8:	2041524f 616c6552 734d2079 736f4c67     ORA Relay MsgLos
   cafb8:	4f4c0074 52204152 79616c65 20732520     t.LORA Relay %s 
   cafc8:	51203e2d 65756575 64253a64 4e4f4300     -> Queued:%d.CON
   cafd8:	2e474946 00545854 43204453 3a647261     FIG.TXT.SD Card:
   cafe8:	72726520 6f20726f 706f206e 6e696e65      error on openin
   caff8:	69662067 0020656c 5f736561 79656b70     g file .aes_pkey
   cb008:	3a464300 5f736561 79656b70 73255b3d     .CF:aes_pkey=[%s
   cb018:	6561005d 796d5f73 43007669 65613a46     ].aes_myiv.CF:ae
   cb028:	796d5f73 5b3d7669 5d756c25 726f6c00     s_myiv=[%lu].lor
   cb038:	6e755f61 64697469 3a464300 61726f6c     a_unitid.CF:lora
   cb048:	696e755f 3d646974 5d64255b 726f6c00     _unitid=[%d].lor
   cb058:	78745f61 65776f70 46430072 726f6c3a     a_txpower.CF:lor
   cb068:	78745f61 65776f70 255b3d72 6c005d64     a_txpower=[%d].l
   cb078:	5f61726f 71657266 3a464300 61726f6c     ora_freq.CF:lora
   cb088:	6572665f 255b3d71 61005d64 73630074     _freq=[%d].at.cs
   cb098:	74680073 68570068 496d4179 65726548     s.hth.WhyAmIHere
   cb0a8:	462c003f 424f0053 253e2d53 64412064     ?.,FS.OBS->%d Ad
   cb0b8:	324e2064 424f0053 64255b53 533e2d5d     d N2S.OBS[%d]->S
   cb0c8:	202c0044 4c007325 4e3e2d52 4f005332     D., %s.LR->N2S.O
   cb0d8:	415b5342 2d5d4c4c 53324e3e 416f4400     BS[ALL]->N2S.DoA
   cb0e8:	6f697463 45523a6e 544f4f42 416f4400     ction:REBOOT.DoA
   cb0f8:	6f697463 4e493a6e 44004f46 7463416f     ction:INFO.DoAct
   cb108:	3a6e6f69 444e4553 416f4400 6f697463     ion:SEND.DoActio
   cb118:	52433a6e 6f440054 69746341 413a6e6f     n:CRT.DoAction:A
   cb128:	53494434 34410054 5349443d 44202c54     4DIST.A4=DIST, D
   cb138:	52204c45 3a4e4941 41004b4f 49443d34     EL RAIN:OK.A4=DI
   cb148:	202c5453 204c4544 4e494152 5252453a     ST, DEL RAIN:ERR
   cb158:	3d344100 54534944 4c41202c 44414552     .A4=DIST, ALREAD
   cb168:	58452059 53545349 3d344100 54534944     Y EXISTS.A4=DIST
   cb178:	4553202c 34410054 5349443d 4f202c54     , SET.A4=DIST, O
   cb188:	204e4550 00525245 443d3441 2c545349     PEN ERR.A4=DIST,
   cb198:	4c454420 3a4d3520 202c4b4f 204d3031      DEL 5M:OK, 10M 
   cb1a8:	00544553 443d3441 2c545349 4c454420     SET.A4=DIST, DEL
   cb1b8:	3a4d3520 00525245 443d3441 2c545349      5M:ERR.A4=DIST,
   cb1c8:	4d303120 3d344100 54534944 4453202c      10M.A4=DIST, SD
   cb1d8:	00464e20 63416f44 6e6f6974 5234413a      NF.DoAction:A4R
   cb1e8:	004e4941 523d3441 2c4e4941 4c454420     AIN.A4=RAIN, DEL
   cb1f8:	53494420 4b4f3a54 3d344100 4e494152      DIST:OK.A4=RAIN
   cb208:	4544202c 4944204c 453a5453 41005252     , DEL DIST:ERR.A
   cb218:	41523d34 202c4e49 204c4544 4f3a4d35     4=RAIN, DEL 5M:O
   cb228:	3441004b 4941523d 44202c4e 35204c45     K.A4=RAIN, DEL 5
   cb238:	52453a4d 34410052 4941523d 41202c4e     M:ERR.A4=RAIN, A
   cb248:	4145524c 45205944 54534958 34410053     LREADY EXISTS.A4
   cb258:	4941523d 53202c4e 41005445 41523d34     =RAIN, SET.A4=RA
   cb268:	202c4e49 4e45504f 52524520 3d344100     IN, OPEN ERR.A4=
   cb278:	4e494152 4453202c 00464e20 63416f44     RAIN, SD NF.DoAc
   cb288:	6e6f6974 444d353a 00545349 49444d35     tion:5MDIST.5MDI
   cb298:	202c5453 45524c41 20594441 53495845     ST, ALREADY EXIS
   cb2a8:	35005354 5349444d 45532054 4d350054     TS.5MDIST SET.5M
   cb2b8:	54534944 45504f20 5245204e 4d350052     DIST OPEN ERR.5M
   cb2c8:	54534944 4453202c 00464e20 63416f44     DIST, SD NF.DoAc
   cb2d8:	6e6f6974 5234413a 41005741 49443d34     tion:A4RAW.A4=DI
   cb2e8:	202c5453 204c4544 54534944 004b4f3a     ST, DEL DIST:OK.
   cb2f8:	443d3441 2c545349 4c454420 53494420     A4=DIST, DEL DIS
   cb308:	52453a54 34410052 5349443d 44202c54     T:ERR.A4=DIST, D
   cb318:	35204c45 4b4f3a4d 3d344100 2c574152     EL 5M:OK.A4=RAW,
   cb328:	524c4120 59444145 49584520 00535453      ALREADY EXISTS.
   cb338:	523d3441 202c5741 00544553 523d3441     A4=RAW, SET.A4=R
   cb348:	202c5741 4e45504f 52524520 3d344100     AW, OPEN ERR.A4=
   cb358:	2c574152 20445320 4400464e 7463416f     RAW, SD NF.DoAct
   cb368:	3a6e6f69 4c433441 34410052 524c433d     ion:A4CLR.A4=CLR
   cb378:	4544202c 4944204c 4f3a5453 3441004b     , DEL DIST:OK.A4
   cb388:	524c433d 4544202c 4944204c 453a5453     =CLR, DEL DIST:E
   cb398:	41005252 4c433d34 44202c52 52204c45     RR.A4=CLR, DEL R
   cb3a8:	3a4e4941 4100464e 4c433d34 44202c52     AIN:NF.A4=CLR, D
   cb3b8:	52204c45 3a4e4941 41004b4f 4c433d34     EL RAIN:OK.A4=CL
   cb3c8:	44202c52 52204c45 3a4e4941 00525245     R, DEL RAIN:ERR.
   cb3d8:	433d3441 202c524c 204c4544 3a574152     A4=CLR, DEL RAW:
   cb3e8:	41004b4f 4c433d34 44202c52 52204c45     OK.A4=CLR, DEL R
   cb3f8:	453a5741 41005252 4c433d34 44202c52     AW:ERR.A4=CLR, D
   cb408:	35204c45 4b4f3a4d 3d344100 2c524c43     EL 5M:OK.A4=CLR,
   cb418:	4c454420 3a4d3520 00525245 433d3441      DEL 5M:ERR.A4=C
   cb428:	202c524c 4e204453 6f440046 69746341     LR, SD NF.DoActi
   cb438:	413a6e6f 57415235 3d354100 2c574152     on:A5RAW.A5=RAW,
   cb448:	524c4120 59444145 49584520 00535453      ALREADY EXISTS.
   cb458:	523d3541 202c5741 00544553 523d3541     A5=RAW, SET.A5=R
   cb468:	202c5741 4e45504f 52524520 3d354100     AW, OPEN ERR.A5=
   cb478:	2c574152 20445320 4400464e 7463416f     RAW, SD NF.DoAct
   cb488:	3a6e6f69 4c433541 35410052 524c433d     ion:A5CLR.A5=CLR
   cb498:	4544202c 4152204c 4b4f3a57 3d354100     , DEL RAW:OK.A5=
   cb4a8:	2c524c43 4c454420 57415220 5252453a     CLR, DEL RAW:ERR
   cb4b8:	3d354100 2c524c43 4c454420 52354120     .A5=CLR, DEL A5R
   cb4c8:	4e3a5741 35410046 524c433d 4453202c     AW:NF.A5=CLR, SD
   cb4d8:	00464e20 63416f44 6e6f6974 4958543a      NF.DoAction:TXI
   cb4e8:	54004d35 4d354958 4c41202c 44414552     5M.TXI5M, ALREAD
   cb4f8:	45532059 58540054 204d3549 00544553     Y SET.TXI5M SET.
   cb508:	35495854 504f204d 45204e45 54005252     TXI5M OPEN ERR.T
   cb518:	4d354958 6552203a 65766f6d 58542064     XI5M: Removed TX
   cb528:	204d3031 656c6946 49585400 202c4d35     10M File.TXI5M, 
   cb538:	4e204453 6f440046 69746341 543a6e6f     SD NF.DoAction:T
   cb548:	30314958 5854004d 4d303149 4c41202c     XI10M.TXI10M, AL
   cb558:	44414552 45532059 58540054 4d303149     READY SET.TXI10M
   cb568:	54455320 49585400 204d3031 4e45504f      SET.TXI10M OPEN
   cb578:	52524520 49585400 203a4d35 6f6d6552      ERR.TXI5M: Remo
   cb588:	20646576 4d355854 6c694620 58540065     ved TX5M File.TX
   cb598:	4d303149 4453202c 00464e20 63416f44     I10M, SD NF.DoAc
   cb5a8:	6e6f6974 4958543a 004d3531 31495854     tion:TXI15M.TXI1
   cb5b8:	202c4d35 45524c41 20594441 00544553     5M, ALREADY SET.
   cb5c8:	31495854 203a4d35 6f6d6552 20646576     TXI15M: Removed 
   cb5d8:	4d355854 6c694620 58540065 4d353149     TX5M File.TXI15M
   cb5e8:	6552203a 65766f6d 58542064 204d3031     : Removed TX10M 
   cb5f8:	656c6946 49585400 204d3531 00544553     File.TXI15M SET.
   cb608:	31495854 202c4d35 4e204453 6f440046     TXI15M, SD NF.Do
   cb618:	69746341 553a6e6f 53004e4b 493a4d49     Action:UKN.SIM:I
   cb628:	7265746e 006c616e 3a4d4953 65747845     nternal.SIM:Exte
   cb638:	6c616e72 4d495300 6b6e553a 6e776f6e     rnal.SIM:Unknown
   cb648:	5d64255b 4d495300 6e493a46 696c6176     [%d].SIMF:Invali
   cb658:	5a532064 4d495300 704f3a46 53006e65     d SZ.SIMF:Open.S
   cb668:	2d464d49 6c65443e 004b4f3a 464d4953     IMF->Del:OK.SIMF
   cb678:	65443e2d 72453a6c 49530072 493a464d     ->Del:Err.SIMF:I
   cb688:	73255b44 4e49005d 4e524554 53004c41     D[%s].INTERNAL.S
   cb698:	3a464d49 3d4e5041 6c6c754e 72724520     IMF:APN=Null Err
   cb6a8:	4d495300 7465533a 74784520 616e7265     .SIM:Set Externa
   cb6b8:	50412d6c 4953004e 65533a4d 72432074     l-APN.SIM:Set Cr
   cb6c8:	6e656465 6c616974 41200073 255b4e50     edentials. APN[%
   cb6d8:	20005d73 53005055 3a464d49 72657355     s]. UP.SIMF:User
   cb6e8:	656d616e 6c754e3d 7245206c 49530072     name=Null Err.SI
   cb6f8:	503a464d 77737361 754e3d64 45206c6c     MF:Passwd=Null E
   cb708:	53007272 533a4d49 45207465 72657478     rr.SIM:Set Exter
   cb718:	2d6c616e 53005055 533a4d49 45207465     nal-UP.SIM:Set E
   cb728:	72657478 2d6c616e 00505541 4e552020     xternal-AUP.  UN
   cb738:	5d73255b 50202000 73255b57 4953005d     [%s].  PW[%s].SI
   cb748:	493a464d 73255b44 7245205d 49530072     MF:ID[%s] Err.SI
   cb758:	443a464d 53204c45 4c4f4d49 49530044     MF:DEL SIMOLD.SI
   cb768:	523a464d 4d414e45 52452045 00524f52     MF:RENAME ERROR.
   cb778:	464d4953 4e45523a 20454d41 21004b4f     SIMF:RENAME OK.!
   cb788:	52202121 4f4f4245 21212054 3d3d0021     !! REBOOT !!!.==
   cb798:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
   cb7a8:	003d3d3d 20212121 20544553 204d4953     ===.!!! SET SIM 
   cb7b8:	4f525245 21212052 49530021 4f3a464d     ERROR !!!.SIMF:O
   cb7c8:	204e4550 4f525245 49530052 4f4e3a4d     PEN ERROR.SIM:NO
   cb7d8:	44505520 20455441 454c4946 49585400      UPDATE FILE.TXI
   cb7e8:	494e493a 58540054 204d3549 6e756f46     :INIT.TXI5M Foun
   cb7f8:	58540064 4d523a49 4d303120 49585400     d.TXI:RM 10M.TXI
   cb808:	204d3031 6e756f46 58540064 4d523a49     10M Found.TXI:RM
   cb818:	004d3520 3d495854 004d6425 74696157      5M.TXI=%dM.Wait
   cb828:	65532034 6c616972 6e6f4320 656c6f73     4 Serial Console
   cb838:	454c4f00 6e453a44 656c6261 4c4f0064     .OLED:Enabled.OL
   cb848:	443a4445 62617369 0064656c 453a4353     ED:Disabled.SC:E
   cb858:	6c62616e 53006465 493a5245 0074696e     nabled.SER:Init.
   cb868:	3a524553 41004b4f 72657373 6e6f6974     SER:OK.Assertion
   cb878:	6c696146 20657275 20637273 73202626     Failure src && s
   cb888:	3e2d6372 6c6c6163 6b636162 53424f00     rc->callback.OBS
   cb898:	3a6f445f 6d695420 564e2065 73636200     _Do: Time NV.bcs
   cb8a8:	63706200 72666300 00677200 00746772     .bpc.cfr.rg.rgt.
   cb8b8:	00706772 77007377 67770064 64677700     rgp.ws.wd.wg.wgd
   cb8c8:	31706200 31746200 31686200 32706200     .bp1.bt1.bh1.bp2
   cb8d8:	32746200 32686200 31686800 31746800     .bt2.bh2.hh1.ht1
   cb8e8:	31747300 31687300 32747300 32687300     .st1.sh1.st2.sh2
   cb8f8:	52524500 4344483a 65522031 68006461     .ERR:HDC1 Read.h
   cb908:	00317464 31686468 74646800 64680032     dt1.hdh1.hdt2.hd
   cb918:	6c003268 00317470 3170706c 74706c00     h2.lpt1.lpp1.lpt
   cb928:	706c0032 68003270 68003274 53003268     2.lpp2.ht2.hh2.S
   cb938:	45522049 00544553 00317673 00316973     I RESET.sv1.si1.
   cb948:	00317573 00786c76 00786c62 61006773     su1.vlx.blx.sg.a
   cb958:	72007234 72003267 00327467 32706772     4r.rg2.rgt2.rgp2
   cb968:	72356100 316d7000 00303173 73316d70     .a5r.pm1s10.pm1s
   cb978:	70003532 3173316d 70003030 3165316d     25.pm1s100.pm1e1
   cb988:	6d700030 35326531 316d7000 30303165     0.pm1e25.pm1e100
   cb998:	00696800 00746277 74676277 776c7400     .hi.wbt.wbgt.tlw
   cb9a8:	6c740077 74007477 32656d73 73740035     w.tlwt.tsme25.ts
   cb9b8:	0063656d 766d7374 74006377 00746d73     mec.tsmvwc.tsmt.
   cb9c8:	6d736d74 74003173 736d736d 6d740032     tmsms1.tmsms2.tm
   cb9d8:	33736d73 736d7400 0034736d 6d736d74     sms3.tmsms4.tmsm
   cb9e8:	74003174 746d736d 53430032 2e64253a     t1.tmsmt2.CS:%d.
   cb9f8:	64323025 253a4220 64252c64 3230252e     %02d B:%d,%d.%02
   cba08:	4f4c0064 4f204152 4f4c004b 4e204152     d.LORA OK.LORA N
   cba18:	4f4c0046 49204152 2054494e 00525245     F.LORA INIT ERR.
   cba28:	41524f4c 2d534320 00525245 41524f4c     LORA CS-ERR.LORA
   cba38:	696e4920 69570074 6944646e 49207473      Init.WindDist I
   cba48:	2874696e 002e0029 74726150 656c6369     nit()...Particle
   cba58:	746f4e3a 64616552 53460079 5d64255b     :NotReady.FS[%d]
   cba68:	55503e2d 4b4f2042 5d64255b 5b534600     ->PUB OK[%d].FS[
   cba78:	2d5d6425 4255503e 52524520 4c455200     %d]->PUB ERR.REL
   cba88:	255b5941 3e2d5d73 20425550 52004b4f     AY[%s]->PUB OK.R
   cba98:	59414c45 5d73255b 55503e2d 52452042     ELAY[%s]->PUB ER
   cbaa8:	45520052 2059414c 45505954 5d64255b     R.RELAY TYPE[%d]
   cbab8:	564e4920 44494c41 00323300 44003436      INVALID.32.64.D
   cbac8:	42415349 0044454c 42414e45 0044454c     ISABLED.ENABLED.
   cbad8:	45555254 4c414600 49004553 5f4f464e     TRUE.FALSE.INFO_
   cbae8:	29284f44 76656400 64006469 736f7665     DO().devid.devos
   cbaf8:	65726600 6d656d65 74707500 00656d69     .freemem.uptime.
   cbb08:	72616f62 6f620064 006e6f72 00726576     board.boron.ver.
   cbb18:	43415346 3035322d 76313231 25003933     FSAC-250121v39.%
   cbb28:	6f007364 00697362 006d6425 7473626f     ds.obsi.%dm.obst
   cbb38:	32740069 6400746e 00746372 0073326e     i.t2nt.drct.n2s.
   cbb48:	63007370 69007173 0069736d 73746361     ps.csq.imsi.acts
   cbb58:	45006d69 52455458 004c414e 44003461     im.EXTERNAL.a4.D
   cbb68:	20545349 44004d35 20545349 004d3031     IST 5M.DIST 10M.
   cbb78:	00324752 6100534e 73250035 31584d42     RG2.NS.a5.%sBMX1
   cbb88:	29732528 42732500 2832584d 00297325     (%s).%sBMX2(%s).
   cbb98:	434d7325 25003150 50434d73 73250032     %sMCP1.%sMCP2.%s
   cbba8:	3350434d 3174672f 4d732500 2f345043     MCP3/gt1.%sMCP4/
   cbbb8:	00327467 48537325 25003154 54485373     gt2.%sSHT1.%sSHT
   cbbc8:	73250032 31434448 48732500 00324344     2.%sHDC1.%sHDC2.
   cbbd8:	504c7325 25003153 53504c73 73250032     %sLPS1.%sLPS2.%s
   cbbe8:	38484948 53732500 73250049 4c4d4556     HIH8.%sSI.%sVEML
   cbbf8:	42732500 2500584c 35534173 00303036     .%sBLX.%sAS5600.
   cbc08:	4c547325 73250057 004d5354 4d547325     %sTLW.%sTSM.%sTM
   cbc18:	25004d53 00494873 42577325 73250054     SM.%sHI.%sWBT.%s
   cbc28:	54474257 472f5720 45424f4c 57732500     WBGT W/GLOBE.%sW
   cbc38:	20544742 472f4f57 45424f4c 50732500     BGT WO/GLOBE.%sP
   cbc48:	4135324d 73250051 25284752 73002973     M25AQ.%sRG(%s).s
   cbc58:	6f736e65 25007372 64252c64 4d64252c     ensors.%d,%d,%dM
   cbc68:	6c007a48 0061726f 64656c6f 65637300     Hz.lora.oled.sce
   cbc78:	006e6970 00656373 4f3a4453 286e6570     pin.sce.SD:Open(
   cbc88:	6f666e49 52524529 464e4900 503e2d4f     Info)ERR.INFO->P
   cbc98:	4f204255 64255b4b 4e49005d 3e2d4f46     UB OK[%d].INFO->
   cbca8:	20425550 00525245 3a53324e 6c627550     PUB ERR.N2S:Publ
   cbcb8:	00687369 3a53324e 74706d45 324e0079     ish.N2S:Empty.N2
   cbcc8:	64255b53 2d73255d 4255503e 004b4f3a     S[%d]%s->PUB:OK.
   cbcd8:	5b53324e 255d6425 503e2d73 523a4255     N2S[%d]%s->PUB:R
   cbce8:	59525445 53324e00 5d64255b 3e2d7325     ETRY.N2S[%d]%s->
   cbcf8:	3a425550 00525245 3a53324e 2053424f     PUB:ERR.N2S:OBS 
   cbd08:	6465654e 4e006465 4f3a5332 46205342     Needed.N2S:OBS F
   cbd18:	004c4c55 5b53324e 2d5d6425 524f423e     ULL.N2S[%d]->BOR
   cbd28:	5252453a 53324e00 504f3e2d 453a4e45     :ERR.N2S->OPEN:E
   cbd38:	52005252 59414c45 324e3e2d 6f430053     RR.RELAY->N2S.Co
   cbd48:	69727970 20746867 3230325b 5b205d34     pyright [2024] [
   cbd58:	76696e55 69737265 43207974 6f70726f     University Corpo
   cbd68:	69746172 66206e6f 4120726f 736f6d74     ration for Atmos
   cbd78:	72656870 52206369 61657365 5d686372     pheric Research]
   cbd88:	53324e00 6978453a 00737473 3a53324e     .N2S:Exists.N2S:
   cbd98:	656e6f4e 3a464300 25204f4e 73250073     None.CF:NO %s.%s
   cbda8:	5453002b 56203a43 64696c61 43545300     +.STC: Valid.STC
   cbdb8:	6f4e203a 61562074 0064696c 003d7325     : Not Valid.%s=.
   cbdc8:	63416f44 6e6f6974 416f4400 6f697463     DoAction.DoActio
   cbdd8:	4b4f3a6e 416f4400 6f697463 52453a6e     n:OK.DoAction:ER
   cbde8:	54410052 4d49432b 000a0d49 49534d49     R.AT+CIMI...IMSI
   cbdf8:	00464e3a 49534d49 0073253a 6e6e6f43     :NF.IMSI:%s.Conn
   cbe08:	65746365 53570064 66655220 68736572     ected.WS Refresh
   cbe18:	71655220 65726975 52450064 4e203a52      Required.ERR: N
   cbe28:	6c43206f 006b636f 6c696144 65522079     o Clock.Daily Re
   cbe38:	746f6f62 62655200 69746f6f 4900676e     boot.Rebooting.I
   cbe48:	41206d27 6576696c 68572021 4c003f79     'm Alive! Why?.L
   cbe58:	5020776f 7265776f 6f500021 69726577     ow Power!.Poweri
   cbe68:	4420676e 006e776f 65776f50 65522072     ng Down.Power Re
   cbe78:	7070612d 6465696c 00000000              -applied....

000cbe84 <_ZTVN8particle11SPISettingsE>:
	...
   cbe8c:	000b5be9 000b5b07 000b5b37              .[...[..7[..

000cbe98 <_ZTV4File>:
	...
   cbea0:	000b5b35 000b5b45 000b5b65 000b5b5f     5[..E[..e[.._[..
   cbeb0:	000b5b09 000b5d4f 000b5b59 000b5b53     .[..O]..Y[..S[..
   cbec0:	000c6de5                                .m..

000cbec4 <_ZL5s_fwd>:
   cbec4:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   cbed4:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   cbee4:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   cbef4:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   cbf04:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   cbf14:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   cbf24:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   cbf34:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   cbf44:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   cbf54:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   cbf64:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   cbf74:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   cbf84:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   cbf94:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   cbfa4:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   cbfb4:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

000cbfc4 <_ZL5s_inv>:
   cbfc4:	d56a0952 38a53630 9ea340bf fbd7f381     R.j.06.8.@......
   cbfd4:	8239e37c 87ff2f9b 44438e34 cbe9dec4     |.9../..4.CD....
   cbfe4:	32947b54 3d23c2a6 0b954cee 4ec3fa42     T{.2..#=.L..B..N
   cbff4:	66a12e08 b224d928 49a25b76 25d18b6d     ...f(.$.v[.Im..%
   cc004:	64f6f872 16986886 cc5ca4d4 92b6655d     r..d.h....\.]e..
   cc014:	5048706c dab9edfd 5746155e 849d8da7     lpHP....^.FW....
   cc024:	00abd890 0ad3bc8c 0558e4f7 0645b3b8     ..........X...E.
   cc034:	8f1e2cd0 020f3fca 03bdafc1 6b8a1301     .,...?.........k
   cc044:	4111913a eadc674f cecff297 73e6b4f0     :..AOg.........s
   cc054:	2274ac96 8535ade7 e837f9e2 6edf751c     ..t"..5...7..u.n
   cc064:	711af147 89c5291d 0e62b76f 1bbe18aa     G..q.)..o.b.....
   cc074:	4b3e56fc 2079d2c6 fec0db9a f45acd78     .V>K..y ....x.Z.
   cc084:	33a8dd1f 31c70788 591012b1 5fec8027     ...3...1...Y'.._
   cc094:	a97f5160 0d4ab519 9f7ae52d ef9cc993     `Q....J.-.z.....
   cc0a4:	4d3be0a0 b0f52aae 3cbbebc8 61995383     ..;M.*.....<.S.a
   cc0b4:	7e042b17 26d677ba 631469e1 7d0c2155     .+.~.w.&.i.cU!.}

000cc0c4 <_ZTV20Adafruit_BMP280_Temp>:
	...
   cc0cc:	000bf027 000bf029 000be7bf 000bf651     '...).......Q...
   cc0dc:	000bf045                                E...

000cc0e0 <_ZTV24Adafruit_BMP280_Pressure>:
	...
   cc0e8:	000bf025 000bf037 000be7bf 000bf811     %...7...........
   cc0f8:	000bf08d                                ....

000cc0fc <_ZL4font>:
   cc0fc:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   cc10c:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   cc11c:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   cc12c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   cc13c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   cc14c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   cc15c:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   cc16c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   cc17c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   cc18c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   cc19c:	00000000 5f000000 07000000 14000700     ......._........
   cc1ac:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   cc1bc:	00502056 00030708 41221c00 22410000     V P......."A..A"
   cc1cc:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   cc1dc:	08080800 00000808 20006060 02040810     ........``. ....
   cc1ec:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   cc1fc:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   cc20c:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   cc21c:	00001e29 00000014 00003440 22140800     ).......@4....."
   cc22c:	14141441 41001414 02081422 06095901     A......A"....Y..
   cc23c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   cc24c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   cc25c:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   cc26c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   cc27c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   cc28c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   cc29c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   cc2ac:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   cc2bc:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   cc2cc:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   cc2dc:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   cc2ec:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   cc2fc:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   cc30c:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   cc31c:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   cc32c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   cc33c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   cc34c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   cc35c:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   cc36c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   cc37c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   cc38c:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   cc39c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   cc3ac:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   cc3bc:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   cc3cc:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   cc3dc:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   cc3ec:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   cc3fc:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   cc40c:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   cc41c:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   cc42c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   cc43c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   cc44c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   cc45c:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   cc46c:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   cc47c:	00ff0000 ff101010 14141400 101000ff     ................
   cc48c:	10ff00ff f010f010 fc141414 f7141400     ................
   cc49c:	0000ff00 14ff00ff fc04f414 10171414     ................
   cc4ac:	1f10101f 14141f10 10001f14 00f01010     ................
   cc4bc:	1f000000 10101010 1010101f 0010f010     ................
   cc4cc:	10ff0000 10101010 10101010 000010ff     ................
   cc4dc:	0014ff00 ff00ff00 101f0000 fc000017     ................
   cc4ec:	1414f404 14171017 f404f414 00ff0000     ................
   cc4fc:	141414f7 14141414 14f700f7 14171414     ................
   cc50c:	101f1010 1414141f 101014f4 00f010f0     ................
   cc51c:	1f101f00 1f000000 00000014 000014fc     ................
   cc52c:	10f010f0 ff10ff10 ff141414 10101014     ................
   cc53c:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   cc54c:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   cc55c:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   cc56c:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   cc57c:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   cc58c:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   cc59c:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   cc5ac:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   cc5bc:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   cc5cc:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   cc5dc:	00000018 30001010 0101ff40 01011f00     .......0@.......
   cc5ec:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000cc5fc <_ZTV12Adafruit_GFX>:
	...
   cc60c:	000c06fd 000c6a9d 000b5091 000c0105     .....j...P......
   cc61c:	000c0107 000c0139 000c0115 000c0127     ....9.......'...
   cc62c:	000c0047 000c0105 000c0331 000c032f     G.......1.../...
   cc63c:	000c0151 000c018f 000c01c9 000c020f     Q...............
   cc64c:	000c022b 000c02af 3950434d 00383038     +.......MCP9808.

000cc65c <_ZTV16Adafruit_MCP9808>:
	...
   cc664:	000c0dc5 000c0dc7 000be7bf 000c0f35     ............5...
   cc674:	000c0dd5                                ....

000cc678 <_ZL12splash1_data>:
   cc678:	00000000 00800100 00000000 00000000     ................
   cc688:	00008003 00000000 07000000 000000c0     ................
   cc698:	00000000 c0070000 00000000 00000000     ................
   cc6a8:	00c00f00 00000000 00000000 0000e01f     ................
   cc6b8:	00000000 1f000000 000000e0 00000000     ................
   cc6c8:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   cc6e0:	0000f07f 00000000 7ff81f00 000000f0     ................
   cc6f0:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   cc700:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   cc710:	00000000 f9ff0f00 0000c0ff 00000000     ................
   cc720:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   cc730:	00000000 fc030000 80ffff73 00000000     ........s.......
   cc740:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   cc750:	000000ff 00000000 fc1ffe7f 00000000     ................
   cc760:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   cc770:	0000e0ff 00000000 ff191f00 000000c0     ................
   cc780:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   cc790:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   cc7a0:	00000000 fcffff00 00000000 00000000     ................
   cc7b0:	00feffff 00000000 ff000000 0000feff     ................
   cc7c0:	00000000 efff0100 000000fe 00000000     ................
   cc7d0:	fecfff01 00000000 03000000 00fe07ff     ................
   cc7e0:	00000000 fc030000 0000fe07 00000000     ................
   cc7f0:	03f00300 000000fe 00000000 fe008001     ................
	...
   cc808:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   cc820:	0000000c 07000000 00fc0080 00c00300     ................
   cc830:	80070000 0000fc01 0000c003 01800700     ................
   cc840:	030000fc 000000c0 e0018007 1e000000     ................
   cc850:	07000000 00e00180 001e0000 9ff7e37f     ................
   cc860:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   cc870:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   cc880:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   cc890:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   cc8a0:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   cc8b0:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   cc8c0:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   cc8d0:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   cc8e0:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   cc8f0:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   cc900:	ffffff00 ffffffff c0ffffff ffffffff     ................
   cc910:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   cc920:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   cc930:	5b6bfdff c0fd6adb                       ..k[.j..

000cc938 <_ZL12splash2_data>:
   cc938:	00600000 00000000 00000000 00000000     ..`.............
   cc948:	0000e000 00000000 00000000 01000000     ................
   cc958:	000000e0 00000000 00000000 f0010000     ................
	...
   cc974:	00f00300 00000000 00000000 00000000     ................
   cc984:	0000f007 00000000 00000000 07000000     ................
   cc994:	000000f8 00000000 00000000 f80f0000     ................
   cc9a4:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   cc9b4:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   cc9c4:	00c00300 010000fe ffff00e0 000000f8     ................
   cc9d4:	f000c003 0f000000 7ffe7f00 030000c0     ................
   cc9e4:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   cc9f4:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   cca04:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   cca14:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   cca24:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   cca34:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   cca44:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   cca54:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   cca64:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   cca74:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   cca84:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   cca94:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   ccaa4:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   ccab4:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   ccacc:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   ccadc:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   ccaec:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   ccafc:	ff7f000f a5feffff 198d9dad 060000e0     ................
   ccb0c:	ffff7f00 adb5feff e07eb5ed              ..........~.

000ccb18 <_ZTV16Adafruit_SSD1306>:
	...
   ccb20:	000c14b9 000c14d1 000c06fd 000c6a9d     .............j..
   ccb30:	000c14e5 000c0105 000c0107 000c0139     ............9...
   ccb40:	000c0115 000c0127 000c0047 000c0105     ....'...G.......
   ccb50:	000c0331 000c1681 000c1d3b 000c1ced     1.......;.......
   ccb60:	000c01c9 000c020f 000c022b 000c02af     ........+.......

000ccb70 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   ccb70:	e0c08000 fefcf8f0                       ........

000ccb78 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   ccb78:	07030100 7f3f1f0f                       ......?.

000ccb80 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   ccb80:	a880d5ae                                ....

000ccb84 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   ccb84:	8d4000d3                                ..@.

000ccb88 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   ccb88:	c8a10020                                 ...

000ccb8c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   ccb8c:	a6a440db                                 .@....

000ccb92 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   ccb92:	21ff0022                                 "..!..

000ccb98 <CSWTCH.30>:
   ccb98:	00c80064 03200190 ffffffff ffffffff     d..... .........
   ccba8:	ffff0032 ffffffff 00000019              2...........

000ccbb4 <CSWTCH.35>:
   ccbb4:	3f800000 40000000 3e000000 3e800000     ...?...@...>...>

000ccbc4 <_ZTV15RHGenericDriver>:
	...
   ccbcc:	000c2511 000b5091 000b5091 000b5091     .%...P...P...P..
   ccbdc:	000b5091 000c2515 000c2527 000c25ad     .P...%..'%...%..
   ccbec:	000c2585 000c25d1 000c2531 000c2539     .%...%..1%..9%..
   ccbfc:	000c253d 000c2541 000c2545 000c2549     =%..A%..E%..I%..
   ccc0c:	000c2535 000c2555 000c2559 000c255d     5%..U%..Y%..]%..
   ccc1c:	000c2561 000c2565 000c256b 000c256f     a%..e%..k%..o%..
   ccc2c:	000c2531 000c2573 000c2579 000c257f     1%..s%..y%...%..

000ccc3c <_ZTV12RHGenericSPI>:
	...
   ccc44:	000b5091 000c2631 000c2633 000b5091     .P..1&..3&...P..
   ccc54:	000b5091 000c263b 000c263f 000c2643     .P..;&..?&..C&..
   ccc64:	000c2635 000c2637 000c2639              5&..7&..9&..

000ccc70 <_ZTV13RHHardwareSPI>:
	...
   ccc78:	000c26b9 000c26cd 000c26db 000c26e9     .&...&...&...&..
   ccc88:	000c2755 000c263b 000c263f 000c2643     U'..;&..?&..C&..
   ccc98:	000c2763 000c2777 000c265d              c'..w'..]&..

000ccca4 <_ZTV11RHSPIDriver>:
	...
   cccac:	000c2795 000b5091 000b5091 000b5091     .'...P...P...P..
   cccbc:	000b5091 000c2515 000c2527 000c25ad     .P...%..'%...%..
   ccccc:	000c2585 000c25d1 000c2531 000c2539     .%...%..1%..9%..
   cccdc:	000c253d 000c2541 000c2545 000c2549     =%..A%..E%..I%..
   cccec:	000c2535 000c2555 000c2559 000c255d     5%..U%..Y%..]%..
   cccfc:	000c2561 000c2565 000c256b 000c256f     a%..e%..k%..o%..
   ccd0c:	000c2531 000c2573 000c2579 000c257f     1%..s%..y%...%..

000ccd1c <_ZL18MODEM_CONFIG_TABLE>:
   ccd1c:	92047472 94480474 0cc47804              rt..t.H..x..

000ccd28 <_ZTV7RH_RF95>:
	...
   ccd30:	000c2da5 000c2c5b 000c2959 000c2c97     .-..[,..Y)...,..
   ccd40:	000c2911 000c2515 000c2527 000c25ad     .)...%..'%...%..
   ccd50:	000c2585 000c25d1 000c2915 000c2539     .%...%...)..9%..
   ccd60:	000c253d 000c2541 000c2545 000c2549     =%..A%..E%..I%..
   ccd70:	000c2535 000c2555 000c2559 000c255d     5%..U%..Y%..]%..
   ccd80:	000c2561 000c2565 000c256b 000c256f     a%..e%..k%..o%..
   ccd90:	000c293f 000c2573 000c2579 000c257f     ?)..s%..y%...%..

000ccda0 <_ZL11daysInMonth>:
   ccda0:	1e1f1c1f 1f1f1e1f 001e1f1e              ............

000ccdac <_ZTVN5spark13CellularClassE>:
	...
   ccdb4:	000c5817 000c580d 000c5803 000c57d1     .X...X...X...W..
   ccdc4:	000b5c3d 000b5c49 000c67e9 000c67f1     =\..I\...g...g..
   ccdd4:	000c57f7 000c57ef 000c57e5 000c57db     .W...W...W...W..
   ccde4:	000c6919 000c6821 000c6829 006e616e     .i..!h..)h..nan.
   ccdf4:	00666e69 0066766f                       inf.ovf.

000ccdfc <_ZTV14CellularSignal>:
	...
   cce04:	000c58a5 000c58cd 000c58a7 000c58dd     .X...X...X...X..
   cce14:	000c5911 000c593d 000c5971 000c5b35     .Y..=Y..qY..5[..
   cce24:	000c58ab 000c58c7 fffffffc 00000000     .X...X..........
   cce34:	000c5b81                                .[..

000cce38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   cce40:	000c5ba1 000c5ba7 000c5be5 000c5bb5     .[...[...[...[..
   cce50:	000c5ba3                                .[..

000cce54 <_ZTVN5spark13EthernetClassE>:
	...
   cce5c:	000c61e3 000c61d9 000c61cf 000c61c5     .a...a...a...a..
   cce6c:	000c61b9 000c61ad 000c67e9 000c67f1     .a...a...g...g..
   cce7c:	000c61a1 000c6199 000c618f 000c6185     .a...a...a...a..
   cce8c:	000c6919 000c6821 000c6829              .i..!h..)h..

000cce98 <_ZTV7TwoWire>:
	...
   ccea0:	000c6201 000c624b 000c6223 000c6203     .b..Kb..#b...b..
   cceb0:	000c622b 000c6233 000c623b 000c6243     +b..3b..;b..Cb..
   ccec0:	000c6de5                                .m..

000ccec4 <_ZTV9IPAddress>:
	...
   ccecc:	000c6401 000c63f1 000c63f3 25007525     .d...c...c..%u.%
   ccedc:	666c2a2e 30257500 00007834              .*lf.u%04x..

000ccee8 <_ZTVN5spark16JSONBufferWriterE>:
	...
   ccef0:	000c64e1 000c64e3 000c64f1 000c6517     .d...d...d...e..
   ccf00:	00707061                                app.

000ccf04 <CSWTCH.109>:
   ccf04:	2003e660 2003e630 2003e680 2003e6a8     `.. 0.. ... ... 

000ccf14 <_ZTVN5spark12NetworkClassE>:
	...
   ccf1c:	000c67a9 000c67b3 000c67bd 000c67c7     .g...g...g...g..
   ccf2c:	000c67d1 000c67dd 000c67e9 000c67f1     .g...g...g...g..
   ccf3c:	000c67f9 000c6805 000c680d 000c6817     .g...h...h...h..
   ccf4c:	000c6919 000c6821 000c6829              .i..!h..)h..

000ccf58 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   ccf58:	18100800 38302820                       .... (08

000ccf60 <_ZTVN8particle11TetherClassE>:
	...
   ccf68:	000c6ffb 000c6ff1 000c6fe7 000c6fdd     .o...o...o...o..
   ccf78:	000c6fd1 000c6fc5 000c67e9 000c67f1     .o...o...g...g..
   ccf88:	000c6fb9 000c6fb1 000c6fa7 000c6f9d     .o...o...o...o..
   ccf98:	000c6919 000c6821 000c6829 252d5925     .i..!h..)h..%Y-%
   ccfa8:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   ccfb8:	74637361 00656d69                       asctime.

000ccfc0 <_ZTV11USARTSerial>:
	...
   ccfc8:	000c7221 000c728d 000c7265 000c6a9d     !r...r..er...j..
   ccfd8:	000c7235 000c7251 000c7243 000c725f     5r..Qr..Cr.._r..
   ccfe8:	000c6de5 000c7223 000c7227              .m..#r..'r..

000ccff4 <_ZTV9USBSerial>:
	...
   ccffc:	000c72cb 000c7333 000c7309 000c6a9d     .r..3s...s...j..
   cd00c:	000c72fb 000c72cd 000c72dd 000c732d     .r...r...r..-s..
   cd01c:	000c6de5 000c72ed 000c72c5              .m...r...r..

000cd028 <_ZSt7nothrow>:
	...

000cd030 <atanhi>:
   cd030:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   cd040:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

000cd050 <atanlo>:
   cd050:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   cd060:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<

000cd070 <CSWTCH.8>:
   cd070:	54442d18 bfe921fb 7f3321d2 4002d97c     .-DT.!...!3.|..@
   cd080:	7f3321d2 c002d97c                       .!3.|...

000cd088 <CSWTCH.9>:
   cd088:	00000000 80000000 54442d18 400921fb     .........-DT.!.@
   cd098:	54442d18 c00921fb 00000000              .-DT.!......

000cd0a4 <npio2_hw>:
   cd0a4:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
   cd0b4:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
   cd0c4:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
   cd0d4:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
   cd0e4:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
   cd0f4:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
   cd104:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
   cd114:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

000cd124 <two_over_pi>:
   cd124:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
   cd134:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
   cd144:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
   cd154:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
   cd164:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
   cd174:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
   cd184:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
   cd194:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
   cd1a4:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
   cd1b4:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
   cd1c4:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
   cd1d4:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
   cd1e4:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
   cd1f4:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
   cd204:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
   cd214:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
   cd224:	0060e27b 00c08c6b 00000000              {.`.k.......

000cd230 <PIo2>:
   cd230:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
   cd240:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
   cd250:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
   cd260:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

000cd270 <init_jk>:
   cd270:	00000002 00000003 00000004 00000006     ................

000cd280 <TWO52>:
   cd280:	00000000 43300000 00000000 c3300000     ......0C......0.
   cd290:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
   cd2a0:	64656563 2f006465 2f706d74 6b6e656a     ceeded./tmp/jenk
   cd2b0:	2d736e69 2d434347 702d3031 6c657069     ins-GCC-10-pipel
   cd2c0:	2d656e69 325f3834 31303230 5f343231     ine-48_20201124_
   cd2d0:	36303631 36303831 732f3933 6e2f6372     1606180639/src/n
   cd2e0:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
   cd2f0:	74732f63 62696c64 6e61722f 00632e64     c/stdlib/rand.c.

000cd300 <_ctype_>:
   cd300:	20202000 20202020 28282020 20282828     .         ((((( 
   cd310:	20202020 20202020 20202020 20202020                     
   cd320:	10108820 10101010 10101010 10101010      ...............
   cd330:	04040410 04040404 10040404 10101010     ................
   cd340:	41411010 41414141 01010101 01010101     ..AAAAAA........
   cd350:	01010101 01010101 01010101 10101010     ................
   cd360:	42421010 42424242 02020202 02020202     ..BBBBBB........
   cd370:	02020202 02020202 02020202 10101010     ................
   cd380:	00000020 00000000 00000000 00000000      ...............
	...

000cd401 <link_const_data_end>:
   cd401:	00          	.byte	0x00
	...

000cd404 <link_constructors_location>:
   cd404:	000bc72d 	.word	0x000bc72d
   cd408:	000c2785 	.word	0x000c2785
   cd40c:	000c57c1 	.word	0x000c57c1
   cd410:	000c5875 	.word	0x000c5875
   cd414:	000c61ed 	.word	0x000c61ed
   cd418:	000c637d 	.word	0x000c637d
   cd41c:	000c6799 	.word	0x000c6799
   cd420:	000c692d 	.word	0x000c692d
   cd424:	000c6bd5 	.word	0x000c6bd5
   cd428:	000c6f79 	.word	0x000c6f79
   cd42c:	000c7005 	.word	0x000c7005
   cd430:	000c720d 	.word	0x000c720d
